{"version":3,"file":"node_modules_moment-mini_locale_sync_recursive_-static_js_channel_js.js","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACvBA;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AClvOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC1IA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrlvuorIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC3LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzanxptCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACzrzytlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9djzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACjvtjvpvzhnpzriBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AClhevwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACthrzingpJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AClnaiv6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxvhdjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC7aprutjvnnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpbjstkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;ACtFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;ACjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnlxsCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3WA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjpzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AC/KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AClxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACttzpxytzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClnhlhzPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvjjzrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnwzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzvnJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AClhtsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACrFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjtrHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtnpvxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;ACjvr2BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AChopjQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;AC1JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChvlpphalvaxtxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChvvnhRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACvsources":["webpack://zulip/./node_modules/moment-mini/locale/ sync ^\\.\\/.*$","webpack://zulip/./node_modules/source-sans/TTF/SourceSans3-Bold.ttf","webpack://zulip/./static/js/about_zulip.js","webpack://zulip/./static/js/activity.js","webpack://zulip/./static/js/add_subscribers_pill.js","webpack://zulip/./static/js/admin.js","webpack://zulip/./static/js/alert_words.js","webpack://zulip/./static/js/alert_words_ui.js","webpack://zulip/./static/js/all_messages_data.js","webpack://zulip/./static/js/attachments_ui.js","webpack://zulip/./static/js/avatar.js","webpack://zulip/./static/js/bot_data.js","webpack://zulip/./static/js/browser_history.js","webpack://zulip/./static/js/buddy_data.js","webpack://zulip/./static/js/buddy_list.js","webpack://zulip/./static/js/channel.js","webpack://zulip/./static/js/compose.js","webpack://zulip/./static/js/compose_actions.js","webpack://zulip/./static/js/compose_closed_ui.js","webpack://zulip/./static/js/compose_fade.js","webpack://zulip/./static/js/compose_fade_helper.js","webpack://zulip/./static/js/compose_fade_users.js","webpack://zulip/./static/js/compose_pm_pill.js","webpack://zulip/./static/js/compose_state.js","webpack://zulip/./static/js/compose_ui.js","webpack://zulip/./static/js/compose_validate.js","webpack://zulip/./static/js/composebox_typeahead.js","webpack://zulip/./static/js/condense.js","webpack://zulip/./static/js/confirm_dialog.js","webpack://zulip/./static/js/copy_and_paste.js","webpack://zulip/./static/js/css_variables.js","webpack://zulip/./static/js/dark_theme.js","webpack://zulip/./static/js/deprecated_feature_notice.js","webpack://zulip/./static/js/dialog_widget.js","webpack://zulip/./static/js/drafts.js","webpack://zulip/./static/js/dropdown_list_widget.js","webpack://zulip/./static/js/echo.js","webpack://zulip/./static/js/emoji.js","webpack://zulip/./static/js/emoji_picker.js","webpack://zulip/./static/js/emojisets.js","webpack://zulip/./static/js/favicon.js","webpack://zulip/./static/js/feedback_widget.js","webpack://zulip/./static/js/fetch_status.js","webpack://zulip/./static/js/filter.js","webpack://zulip/./static/js/flatpickr.js","webpack://zulip/./static/js/floating_recipient_bar.js","webpack://zulip/./static/js/gear_menu.js","webpack://zulip/./static/js/giphy.js","webpack://zulip/./static/js/hash_util.js","webpack://zulip/./static/js/hashchange.js","webpack://zulip/./static/js/hotkey.js","webpack://zulip/./static/js/hotspots.js","webpack://zulip/./static/js/huddle_data.js","webpack://zulip/./static/js/info_overlay.js","webpack://zulip/./static/js/input_pill.js","webpack://zulip/./static/js/invite.js","webpack://zulip/./static/js/lightbox.js","webpack://zulip/./static/js/linkifiers.js","webpack://zulip/./static/js/list_cursor.js","webpack://zulip/./static/js/list_widget.js","webpack://zulip/./static/js/local_message.js","webpack://zulip/./static/js/localstorage.js","webpack://zulip/./static/js/markdown.js","webpack://zulip/./static/js/message_edit.js","webpack://zulip/./static/js/message_edit_history.js","webpack://zulip/./static/js/message_events.js","webpack://zulip/./static/js/message_fetch.js","webpack://zulip/./static/js/message_flags.js","webpack://zulip/./static/js/message_helper.js","webpack://zulip/./static/js/message_list.js","webpack://zulip/./static/js/message_list_data.js","webpack://zulip/./static/js/message_list_view.js","webpack://zulip/./static/js/message_lists.js","webpack://zulip/./static/js/message_live_update.js","webpack://zulip/./static/js/message_scroll.js","webpack://zulip/./static/js/message_store.js","webpack://zulip/./static/js/message_util.js","webpack://zulip/./static/js/message_view_header.js","webpack://zulip/./static/js/message_viewport.js","webpack://zulip/./static/js/muted_topics_ui.js","webpack://zulip/./static/js/muted_users.js","webpack://zulip/./static/js/muted_users_ui.js","webpack://zulip/./static/js/narrow.js","webpack://zulip/./static/js/narrow_banner.js","webpack://zulip/./static/js/narrow_error.js","webpack://zulip/./static/js/narrow_state.js","webpack://zulip/./static/js/navbar_alerts.js","webpack://zulip/./static/js/navigate.js","webpack://zulip/./static/js/notifications.js","webpack://zulip/./static/js/overlays.js","webpack://zulip/./static/js/peer_data.js","webpack://zulip/./static/js/people.js","webpack://zulip/./static/js/pill_typeahead.js","webpack://zulip/./static/js/pm_conversations.js","webpack://zulip/./static/js/pm_list.js","webpack://zulip/./static/js/pm_list_data.js","webpack://zulip/./static/js/pm_list_dom.js","webpack://zulip/./static/js/poll_widget.js","webpack://zulip/./static/js/popover_menus.js","webpack://zulip/./static/js/popover_menus_data.js","webpack://zulip/./static/js/popovers.js","webpack://zulip/./static/js/presence.js","webpack://zulip/./static/js/reactions.js","webpack://zulip/./static/js/read_receipts.js","webpack://zulip/./static/js/realm_icon.js","webpack://zulip/./static/js/realm_logo.js","webpack://zulip/./static/js/realm_playground.js","webpack://zulip/./static/js/recent_senders.js","webpack://zulip/./static/js/recent_topics_data.js","webpack://zulip/./static/js/recent_topics_ui.js","webpack://zulip/./static/js/recent_topics_util.js","webpack://zulip/./static/js/reload.js","webpack://zulip/./static/js/reminder.js","webpack://zulip/./static/js/rendered_markdown.js","webpack://zulip/./static/js/resize.js","webpack://zulip/./static/js/rows.js","webpack://zulip/./static/js/rtl.js","webpack://zulip/./static/js/schema.js","webpack://zulip/./static/js/scroll_bar.js","webpack://zulip/./static/js/scroll_util.js","webpack://zulip/./static/js/search.js","webpack://zulip/./static/js/search_pill.js","webpack://zulip/./static/js/search_pill_widget.js","webpack://zulip/./static/js/search_suggestion.js","webpack://zulip/./static/js/sent_messages.js","webpack://zulip/./static/js/server_events.js","webpack://zulip/./static/js/server_events_dispatch.js","webpack://zulip/./static/js/settings.js","webpack://zulip/./static/js/settings_account.js","webpack://zulip/./static/js/settings_bots.js","webpack://zulip/./static/js/settings_display.js","webpack://zulip/./static/js/settings_emoji.js","webpack://zulip/./static/js/settings_exports.js","webpack://zulip/./static/js/settings_invites.js","webpack://zulip/./static/js/settings_linkifiers.js","webpack://zulip/./static/js/settings_muted_topics.js","webpack://zulip/./static/js/settings_muted_users.js","webpack://zulip/./static/js/settings_notifications.js","webpack://zulip/./static/js/settings_org.js","webpack://zulip/./static/js/settings_panel_menu.js","webpack://zulip/./static/js/settings_playgrounds.js","webpack://zulip/./static/js/settings_profile_fields.js","webpack://zulip/./static/js/settings_realm_domains.js","webpack://zulip/./static/js/settings_realm_user_settings_defaults.js","webpack://zulip/./static/js/settings_sections.js","webpack://zulip/./static/js/settings_streams.js","webpack://zulip/./static/js/settings_toggle.js","webpack://zulip/./static/js/settings_ui.js","webpack://zulip/./static/js/settings_user_groups_legacy.js","webpack://zulip/./static/js/settings_users.js","webpack://zulip/./static/js/spectators.js","webpack://zulip/./static/js/starred_messages.js","webpack://zulip/./static/js/starred_messages_ui.js","webpack://zulip/./static/js/stream_bar.js","webpack://zulip/./static/js/stream_color.js","webpack://zulip/./static/js/stream_create.js","webpack://zulip/./static/js/stream_create_subscribers.js","webpack://zulip/./static/js/stream_create_subscribers_data.js","webpack://zulip/./static/js/stream_data.js","webpack://zulip/./static/js/stream_edit.js","webpack://zulip/./static/js/stream_edit_subscribers.js","webpack://zulip/./static/js/stream_events.js","webpack://zulip/./static/js/stream_list.js","webpack://zulip/./static/js/stream_muting.js","webpack://zulip/./static/js/stream_pill.js","webpack://zulip/./static/js/stream_popover.js","webpack://zulip/./static/js/stream_settings_containers.js","webpack://zulip/./static/js/stream_settings_data.js","webpack://zulip/./static/js/stream_settings_ui.js","webpack://zulip/./static/js/stream_sort.js","webpack://zulip/./static/js/stream_topic_history.js","webpack://zulip/./static/js/stream_topic_history_util.js","webpack://zulip/./static/js/stream_ui_updates.js","webpack://zulip/./static/js/submessage.js","webpack://zulip/./static/js/subscriber_api.js","webpack://zulip/./static/js/todo_widget.js","webpack://zulip/./static/js/top_left_corner.js","webpack://zulip/./static/js/topic_generator.js","webpack://zulip/./static/js/topic_list.js","webpack://zulip/./static/js/topic_list_data.js","webpack://zulip/./static/js/topic_zoom.js","webpack://zulip/./static/js/transmit.js","webpack://zulip/./static/js/typeahead_helper.js","webpack://zulip/./static/js/typing_data.js","webpack://zulip/./static/js/typing_events.js","webpack://zulip/./static/js/ui.js","webpack://zulip/./static/js/unread.js","webpack://zulip/./static/js/unread_ops.js","webpack://zulip/./static/js/unread_ui.js","webpack://zulip/./static/js/upload.js","webpack://zulip/./static/js/user_events.js","webpack://zulip/./static/js/user_group_create.js","webpack://zulip/./static/js/user_group_create_members.js","webpack://zulip/./static/js/user_group_create_members_data.js","webpack://zulip/./static/js/user_group_pill.js","webpack://zulip/./static/js/user_groups_settings_ui.js","webpack://zulip/./static/js/user_pill.js","webpack://zulip/./static/js/user_profile.js","webpack://zulip/./static/js/user_search.js","webpack://zulip/./static/js/user_status.js","webpack://zulip/./static/js/user_status_ui.js","webpack://zulip/./static/js/user_topics.js","webpack://zulip/./static/js/vdom.js","webpack://zulip/./static/js/widgetize.js","webpack://zulip/./static/js/zcommand.js","webpack://zulip/./static/js/zform.js","webpack://zulip/./static/shared/js/fenced_code.js","webpack://zulip/./static/shared/js/internal_url.js","webpack://zulip/./static/shared/js/poll_data.js","webpack://zulip/./static/shared/js/resolved_topic.js","webpack://zulip/./static/shared/js/typeahead.js","webpack://zulip/./static/third/marked/lib/marked.cjs"],"sourcesContent":["var map = {\n\t\"./locale\": \"./node_modules/moment-mini/locale/locale.js\",\n\t\"./locale.js\": \"./node_modules/moment-mini/locale/locale.js\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"./node_modules/moment-mini/locale sync recursive ^\\\\.\\\\/.*$\";","export default \"data:font/ttf;base64,\"","import ClipboardJS from \"clipboard\";\nimport $ from \"jquery\";\n\nimport render_about_zulip from \"../templates/about_zulip.hbs\";\n\nimport * as browser_history from \"./browser_history\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\n\nexport function launch() {\n    overlays.open_overlay({\n        name: \"about-zulip\",\n        $overlay: $(\"#about-zulip\"),\n        on_close() {\n            browser_history.exit_overlay();\n        },\n    });\n\n    new ClipboardJS(\"#about-zulip .fa-copy\");\n}\n\nexport function initialize() {\n    const rendered_about_zulip = render_about_zulip({\n        zulip_version: page_params.zulip_version,\n        zulip_merge_base: page_params.zulip_merge_base,\n        is_fork:\n            page_params.zulip_merge_base &&\n            page_params.zulip_merge_base !== page_params.zulip_version,\n    });\n    $(\".app\").append(rendered_about_zulip);\n}\n","import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as buddy_data from \"./buddy_data\";\nimport {buddy_list} from \"./buddy_list\";\nimport * as channel from \"./channel\";\nimport * as keydown_util from \"./keydown_util\";\nimport {ListCursor} from \"./list_cursor\";\nimport * as narrow from \"./narrow\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as pm_list from \"./pm_list\";\nimport * as popovers from \"./popovers\";\nimport * as presence from \"./presence\";\nimport * as ui_util from \"./ui_util\";\nimport {UserSearch} from \"./user_search\";\nimport * as util from \"./util\";\nimport * as watchdog from \"./watchdog\";\n\nexport let user_cursor;\nexport let user_filter;\n\n/*\n    Helpers for detecting user activity and managing user idle states\n*/\n\n/* Broadcast \"idle\" to server after 5 minutes of local inactivity */\nconst DEFAULT_IDLE_TIMEOUT_MS = 5 * 60 * 1000;\n/* Time between keep-alive pings */\nconst ACTIVE_PING_INTERVAL_MS = 50 * 1000;\n\n/* Keep in sync with views.py:update_active_status_backend() */\nexport const ACTIVE = \"active\";\n\nexport const IDLE = \"idle\";\n\n// When you open Zulip in a new browser window, client_is_active\n// should be true.  When a server-initiated reload happens, however,\n// it should be initialized to false.  We handle this with a check for\n// whether the window is focused at initialization time.\nexport let client_is_active = document.hasFocus && document.hasFocus();\n\n// new_user_input is a more strict version of client_is_active used\n// primarily for analytics.  We initialize this to true, to count new\n// page loads, but set it to false in the onload function in reload.js\n// if this was a server-initiated-reload to avoid counting a\n// server-initiated reload as user activity.\nexport let new_user_input = true;\n\nexport function set_new_user_input(value) {\n    new_user_input = value;\n}\n\nfunction get_pm_list_item(user_id) {\n    return buddy_list.find_li({\n        key: user_id,\n    });\n}\n\nfunction set_pm_count(user_ids_string, count) {\n    const $pm_li = get_pm_list_item(user_ids_string);\n    ui_util.update_unread_count_in_dom($pm_li, count);\n}\n\nexport function update_dom_with_unread_counts(counts) {\n    // counts is just a data object that gets calculated elsewhere\n    // Our job is to update some DOM elements.\n\n    for (const [user_ids_string, count] of counts.pm_count) {\n        // TODO: just use user_ids_string in our markup\n        const is_pm = !user_ids_string.includes(\",\");\n        if (is_pm) {\n            set_pm_count(user_ids_string, count);\n        }\n    }\n}\n\nexport function clear_for_testing() {\n    user_cursor = undefined;\n    user_filter = undefined;\n    client_is_active = false;\n}\n\nexport function mark_client_idle() {\n    // When we become idle, we don't immediately send anything to the\n    // server; instead, we wait for our next periodic update, since\n    // this data is fundamentally not timely.\n    client_is_active = false;\n}\n\nexport function redraw_user(user_id) {\n    if (page_params.realm_presence_disabled) {\n        return;\n    }\n\n    const filter_text = get_filter_text();\n\n    if (!buddy_data.matches_filter(filter_text, user_id)) {\n        return;\n    }\n\n    const info = buddy_data.get_item(user_id);\n\n    buddy_list.insert_or_move({\n        key: user_id,\n        item: info,\n    });\n}\n\nexport function searching() {\n    return user_filter && user_filter.searching();\n}\n\nexport function build_user_sidebar() {\n    if (page_params.realm_presence_disabled) {\n        return undefined;\n    }\n\n    const filter_text = get_filter_text();\n\n    const user_ids = buddy_data.get_filtered_and_sorted_user_ids(filter_text);\n\n    blueslip.measure_time(\"buddy_list.populate\", () => {\n        buddy_list.populate({keys: user_ids});\n    });\n\n    return user_ids; // for testing\n}\n\nfunction do_update_users_for_search() {\n    // Hide all the popovers but not userlist sidebar\n    // when the user is searching.\n    popovers.hide_all_except_sidebars();\n    build_user_sidebar();\n    user_cursor.reset();\n}\n\nconst update_users_for_search = _.throttle(do_update_users_for_search, 50);\n\nexport function compute_active_status() {\n    // The overall algorithm intent for the `status` field is to send\n    // `ACTIVE` (aka green circle) if we know the user is at their\n    // computer, and IDLE (aka orange circle) if the user might not\n    // be:\n    //\n    // * For the web app, we just know whether this window has focus.\n    // * For the electron desktop app, we also know whether the\n    //   user is active or idle elsewhere on their system.\n    //\n    // The check for `get_idle_on_system === undefined` is feature\n    // detection; older desktop app releases never set that property.\n    if (\n        window.electron_bridge !== undefined &&\n        window.electron_bridge.get_idle_on_system !== undefined\n    ) {\n        if (window.electron_bridge.get_idle_on_system()) {\n            return IDLE;\n        }\n        return ACTIVE;\n    }\n\n    if (client_is_active) {\n        return ACTIVE;\n    }\n    return IDLE;\n}\n\nexport function send_presence_to_server(want_redraw) {\n    // Zulip has 2 data feeds coming from the server to the client:\n    // The server_events data, and this presence feed.  Data from\n    // server_events is nicely serialized, but if we've been offline\n    // and not running for a while (e.g. due to suspend), we can end\n    // up with inconsistent state where users appear in presence that\n    // don't appear in people.js.  We handle this in 2 stages.  First,\n    // here, we trigger an extra run of the clock-jump check that\n    // detects whether this device just resumed from suspend.  This\n    // ensures that watchdog.suspect_offline is always up-to-date\n    // before we initiate a presence request.\n    //\n    // If we did just resume, it will also trigger an immediate\n    // server_events request to the server (the success handler to\n    // which will clear suspect_offline and potentially trigger a\n    // reload if the device was offline for more than\n    // DEFAULT_EVENT_QUEUE_TIMEOUT_SECS).\n    if (page_params.is_spectator) {\n        return;\n    }\n\n    watchdog.check_for_unsuspend();\n\n    channel.post({\n        url: \"/json/users/me/presence\",\n        data: {\n            status: compute_active_status(),\n            ping_only: !want_redraw,\n            new_user_input,\n            slim_presence: true,\n        },\n        success(data) {\n            // Update Zephyr mirror activity warning\n            if (data.zephyr_mirror_active === false) {\n                $(\"#zephyr-mirror-error\").addClass(\"show\");\n            } else {\n                $(\"#zephyr-mirror-error\").removeClass(\"show\");\n            }\n\n            new_user_input = false;\n\n            if (want_redraw) {\n                presence.set_info(data.presences, data.server_timestamp);\n                redraw();\n            }\n        },\n    });\n}\n\nexport function mark_client_active() {\n    // exported for testing\n    if (!client_is_active) {\n        client_is_active = true;\n        send_presence_to_server(false);\n    }\n}\n\nexport function initialize() {\n    $(\"html\").on(\"mousemove\", () => {\n        new_user_input = true;\n    });\n\n    $(window).on(\"focus\", mark_client_active);\n    $(window).idle({\n        idle: DEFAULT_IDLE_TIMEOUT_MS,\n        onIdle: mark_client_idle,\n        onActive: mark_client_active,\n        keepTracking: true,\n    });\n\n    set_cursor_and_filter();\n\n    build_user_sidebar();\n\n    buddy_list.start_scroll_handler();\n\n    function get_full_presence_list_update() {\n        send_presence_to_server(true);\n    }\n\n    util.call_function_periodically(get_full_presence_list_update, ACTIVE_PING_INTERVAL_MS);\n\n    // Let the server know we're here, but pass \"false\" for\n    // want_redraw, since we just got all this info in page_params.\n    send_presence_to_server(false);\n}\n\nexport function update_presence_info(user_id, info, server_time) {\n    presence.update_info_from_event(user_id, info, server_time);\n    redraw_user(user_id);\n    pm_list.update_private_messages();\n}\n\nexport function redraw() {\n    build_user_sidebar();\n    user_cursor.redraw();\n    pm_list.update_private_messages();\n}\n\nexport function reset_users() {\n    // Call this when we're leaving the search widget.\n    build_user_sidebar();\n    user_cursor.clear();\n}\n\nexport function narrow_for_user(opts) {\n    const user_id = buddy_list.get_key_from_li({$li: opts.$li});\n    return narrow_for_user_id({user_id});\n}\n\nexport function narrow_for_user_id(opts) {\n    const person = people.get_by_user_id(opts.user_id);\n    const email = person.email;\n\n    narrow.by(\"pm-with\", email, {trigger: \"sidebar\"});\n    user_filter.clear_and_hide_search();\n}\n\nfunction keydown_enter_key() {\n    const user_id = user_cursor.get_key();\n    if (user_id === undefined) {\n        return;\n    }\n\n    narrow_for_user_id({user_id});\n    popovers.hide_all();\n}\n\nexport function set_cursor_and_filter() {\n    user_cursor = new ListCursor({\n        list: buddy_list,\n        highlight_class: \"highlighted_user\",\n    });\n\n    user_filter = new UserSearch({\n        update_list: update_users_for_search,\n        reset_items: reset_users,\n        on_focus: () => user_cursor.reset(),\n    });\n\n    const $input = user_filter.input_field();\n\n    $input.on(\"blur\", () => user_cursor.clear());\n\n    keydown_util.handle({\n        $elem: $input,\n        handlers: {\n            Enter() {\n                keydown_enter_key();\n                return true;\n            },\n            ArrowUp() {\n                user_cursor.prev();\n                return true;\n            },\n            ArrowDown() {\n                user_cursor.next();\n                return true;\n            },\n        },\n    });\n}\n\nexport function initiate_search() {\n    if (user_filter) {\n        user_filter.initiate_search();\n    }\n}\n\nexport function escape_search() {\n    if (user_filter) {\n        user_filter.escape_search();\n    }\n}\n\nexport function get_filter_text() {\n    if (!user_filter) {\n        // This may be overly defensive, but there may be\n        // situations where get called before everything is\n        // fully initialized.  The empty string is a fine\n        // default here.\n        blueslip.warn(\"get_filter_text() is called before initialization\");\n        return \"\";\n    }\n\n    return user_filter.text();\n}\n","import * as input_pill from \"./input_pill\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as pill_typeahead from \"./pill_typeahead\";\nimport * as stream_pill from \"./stream_pill\";\nimport * as user_group_pill from \"./user_group_pill\";\nimport * as user_pill from \"./user_pill\";\n\nfunction create_item_from_text(text, current_items) {\n    const funcs = [\n        stream_pill.create_item_from_stream_name,\n        user_group_pill.create_item_from_group_name,\n        user_pill.create_item_from_email,\n    ];\n    for (const func of funcs) {\n        const item = func(text, current_items);\n        if (item) {\n            return item;\n        }\n    }\n    return undefined;\n}\n\nfunction get_text_from_item(item) {\n    const funcs = [\n        stream_pill.get_stream_name_from_item,\n        user_group_pill.get_group_name_from_item,\n        user_pill.get_email_from_item,\n    ];\n    for (const func of funcs) {\n        const text = func(item);\n        if (text) {\n            return text;\n        }\n    }\n    return undefined;\n}\n\nfunction set_up_pill_typeahead({pill_widget, $pill_container, get_users}) {\n    const opts = {\n        user_source: get_users,\n        stream: true,\n        user_group: true,\n        user: true,\n    };\n    pill_typeahead.set_up($pill_container.find(\".input\"), pill_widget, opts);\n}\n\nexport function create({$pill_container, get_potential_subscribers}) {\n    const pill_widget = input_pill.create({\n        $container: $pill_container,\n        create_item_from_text,\n        get_text_from_item,\n    });\n\n    function get_users() {\n        const potential_subscribers = get_potential_subscribers();\n        return user_pill.filter_taken_users(potential_subscribers, pill_widget);\n    }\n\n    set_up_pill_typeahead({pill_widget, $pill_container, get_users});\n\n    return pill_widget;\n}\n\nfunction get_pill_user_ids(pill_widget) {\n    const user_ids = user_pill.get_user_ids(pill_widget);\n    const stream_user_ids = stream_pill.get_user_ids(pill_widget);\n    const group_user_ids = user_group_pill.get_user_ids(pill_widget);\n    return [...user_ids, ...stream_user_ids, ...group_user_ids];\n}\n\nexport function set_up_handlers({\n    get_pill_widget,\n    $parent_container,\n    pill_selector,\n    button_selector,\n    action,\n}) {\n    /*\n        This function handles events for any UI that looks like\n        this:\n\n            [pill-enabled input box for subscribers] [Add button]\n\n        In an ideal world the above two widgets would be enclosed in\n        a <form>...</form> section and we would have a single submit\n        handler, but our current implementation of input pills has\n        some magic that prevents the pills from playing nice with\n        the vanilla HTML form/submit mechanism.\n\n        So, instead, we provide this helper function to manage\n        the two events needed to make it look like the widgets\n        are inside an actual HTML <form> tag.\n\n        This abstraction also automatically retrieves the user_ids\n        from the input pill and sends them back to the `action`\n        function passed in.\n\n        The subscriber input-pill widgets lets you provide\n        user_ids by creating pills for either:\n\n            * single user\n            * user group\n            * stream (i.e. subscribed users for the stream)\n    */\n    function callback() {\n        const pill_widget = get_pill_widget();\n        const pill_user_ids = get_pill_user_ids(pill_widget);\n        action({pill_user_ids});\n    }\n\n    $parent_container.on(\"keyup\", pill_selector, (e) => {\n        if (keydown_util.is_enter_event(e)) {\n            e.preventDefault();\n            callback();\n        }\n    });\n\n    $parent_container.on(\"click\", button_selector, (e) => {\n        e.preventDefault();\n        callback();\n    });\n}\n","import $ from \"jquery\";\n\nimport render_admin_tab from \"../templates/settings/admin_tab.hbs\";\nimport render_settings_organization_settings_tip from \"../templates/settings/organization_settings_tip.hbs\";\n\nimport {$t, get_language_name, language_list} from \"./i18n\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\nimport {realm_user_settings_defaults} from \"./realm_user_settings_defaults\";\nimport * as settings from \"./settings\";\nimport * as settings_bots from \"./settings_bots\";\nimport * as settings_config from \"./settings_config\";\nimport * as settings_data from \"./settings_data\";\nimport * as settings_org from \"./settings_org\";\nimport * as settings_panel_menu from \"./settings_panel_menu\";\nimport * as settings_sections from \"./settings_sections\";\nimport * as settings_toggle from \"./settings_toggle\";\n\nconst admin_settings_label = {\n    // Organization profile\n    realm_want_advertise_in_communities_directory: $t({\n        defaultMessage: \"Advertise organization in the Zulip communities directory\",\n    }),\n    // Organization settings\n    realm_allow_edit_history: $t({defaultMessage: \"Enable message edit history\"}),\n    realm_mandatory_topics: $t({defaultMessage: \"Require topics in stream messages\"}),\n    realm_notifications_stream: $t({defaultMessage: \"New stream announcements\"}),\n    realm_signup_notifications_stream: $t({defaultMessage: \"New user announcements\"}),\n    realm_inline_image_preview: $t({defaultMessage: \"Show previews of uploaded and linked images\"}),\n    realm_inline_url_embed_preview: $t({defaultMessage: \"Show previews of linked websites\"}),\n    realm_send_welcome_emails: $t({defaultMessage: \"Send emails introducing Zulip to new users\"}),\n    realm_message_content_allowed_in_email_notifications: $t({\n        defaultMessage: \"Allow message content in message notification emails\",\n    }),\n    realm_enable_spectator_access: $t({\n        defaultMessage: \"Allow creating web-public streams (visible to anyone on the Internet)\",\n    }),\n    realm_digest_emails_enabled: $t({\n        defaultMessage: \"Send weekly digest emails to inactive users\",\n    }),\n    realm_default_code_block_language: $t({defaultMessage: \"Default language for code blocks\"}),\n\n    // Organization permissions\n    realm_name_changes_disabled: $t({defaultMessage: \"Prevent users from changing their name\"}),\n    realm_email_changes_disabled: $t({\n        defaultMessage: \"Prevent users from changing their email address\",\n    }),\n    realm_avatar_changes_disabled: $t({defaultMessage: \"Prevent users from changing their avatar\"}),\n    realm_invite_required: $t({\n        defaultMessage: \"Invitations are required for joining this organization\",\n    }),\n    realm_default_language: $t({\n        defaultMessage: \"Language for automated messages and invitation emails\",\n    }),\n    realm_allow_message_editing: $t({defaultMessage: \"Allow message editing\"}),\n    realm_enable_read_receipts: $t({defaultMessage: \"Enable read receipts\"}),\n    realm_enable_read_receipts_parens_text: $t({\n        defaultMessage: \"Users can always disable their personal read receipts.\",\n    }),\n};\n\nfunction insert_tip_box() {\n    if (page_params.is_admin) {\n        return;\n    }\n    const tip_box = render_settings_organization_settings_tip({is_admin: page_params.is_admin});\n    $(\".organization-box\")\n        .find(\".settings-section\")\n        .not(\"#emoji-settings\")\n        .not(\"#user-groups-admin\")\n        .not(\"#organization-auth-settings\")\n        .not(\"#admin-bot-list\")\n        .not(\"#admin-invites-list\")\n        .prepend(tip_box);\n}\n\nfunction get_realm_level_notification_settings(options) {\n    const all_notifications_settings = settings_config.all_notifications(\n        realm_user_settings_defaults,\n    );\n\n    // We remove enable_marketing_emails and enable_login_emails\n    // setting from all_notification_settings, since there are no\n    // realm-level defaults for these setting.\n    all_notifications_settings.settings.other_email_settings = [\"enable_digest_emails\"];\n\n    options.general_settings = all_notifications_settings.general_settings;\n    options.notification_settings = all_notifications_settings.settings;\n    options.show_push_notifications_tooltip =\n        all_notifications_settings.show_push_notifications_tooltip;\n}\n\nexport function build_page() {\n    const options = {\n        custom_profile_field_types: page_params.custom_profile_field_types,\n        full_name: page_params.full_name,\n        realm_name: page_params.realm_name,\n        realm_org_type: page_params.realm_org_type,\n        realm_available_video_chat_providers: page_params.realm_available_video_chat_providers,\n        giphy_rating_options: page_params.giphy_rating_options,\n        giphy_api_key_empty: page_params.giphy_api_key === \"\",\n        realm_description: page_params.realm_description,\n        realm_inline_image_preview: page_params.realm_inline_image_preview,\n        server_inline_image_preview: page_params.server_inline_image_preview,\n        realm_inline_url_embed_preview: page_params.realm_inline_url_embed_preview,\n        server_inline_url_embed_preview: page_params.server_inline_url_embed_preview,\n        realm_authentication_methods: page_params.realm_authentication_methods,\n        realm_user_group_edit_policy: page_params.realm_user_group_edit_policy,\n        realm_name_changes_disabled: page_params.realm_name_changes_disabled,\n        realm_email_changes_disabled: page_params.realm_email_changes_disabled,\n        realm_avatar_changes_disabled: page_params.realm_avatar_changes_disabled,\n        realm_add_custom_emoji_policy: page_params.realm_add_custom_emoji_policy,\n        can_add_emojis: settings_data.user_can_add_custom_emoji(),\n        can_create_new_bots: settings_bots.can_create_new_bots(),\n        realm_message_content_edit_limit_minutes: settings_org.get_realm_time_limits_in_minutes(\n            \"realm_message_content_edit_limit_seconds\",\n        ),\n        realm_message_content_delete_limit_minutes: settings_org.get_realm_time_limits_in_minutes(\n            \"realm_message_content_delete_limit_seconds\",\n        ),\n        realm_message_retention_days: page_params.realm_message_retention_days,\n        realm_allow_edit_history: page_params.realm_allow_edit_history,\n        realm_allow_message_editing: page_params.realm_allow_message_editing,\n        language_list,\n        realm_default_language_name: get_language_name(page_params.realm_default_language),\n        realm_default_language_code: page_params.realm_default_language,\n        realm_waiting_period_threshold: page_params.realm_waiting_period_threshold,\n        realm_notifications_stream_id: page_params.realm_notifications_stream_id,\n        realm_signup_notifications_stream_id: page_params.realm_signup_notifications_stream_id,\n        is_admin: page_params.is_admin,\n        is_guest: page_params.is_guest,\n        is_owner: page_params.is_owner,\n        user_can_change_logo: settings_data.user_can_change_logo(),\n        realm_icon_source: page_params.realm_icon_source,\n        realm_icon_url: page_params.realm_icon_url,\n        realm_logo_source: page_params.realm_logo_source,\n        realm_logo_url: page_params.realm_logo_url,\n        realm_night_logo_source: page_params.realm_night_logo_source,\n        realm_night_logo_url: page_params.realm_night_logo_url,\n        realm_mandatory_topics: page_params.realm_mandatory_topics,\n        realm_send_welcome_emails: page_params.realm_send_welcome_emails,\n        realm_message_content_allowed_in_email_notifications:\n            page_params.realm_message_content_allowed_in_email_notifications,\n        realm_enable_spectator_access: page_params.realm_enable_spectator_access,\n        settings_send_digest_emails: page_params.settings_send_digest_emails,\n        realm_digest_emails_enabled: page_params.realm_digest_emails_enabled,\n        realm_digest_weekday: page_params.realm_digest_weekday,\n        development: page_params.development_environment,\n        zulip_plan_is_not_limited: page_params.zulip_plan_is_not_limited,\n        upgrade_text_for_wide_organization_logo:\n            page_params.upgrade_text_for_wide_organization_logo,\n        realm_default_external_accounts: page_params.realm_default_external_accounts,\n        admin_settings_label,\n        msg_edit_limit_dropdown_values: settings_config.msg_edit_limit_dropdown_values,\n        msg_delete_limit_dropdown_values: settings_config.msg_delete_limit_dropdown_values,\n        bot_creation_policy_values: settings_bots.bot_creation_policy_values,\n        email_address_visibility_values: settings_config.email_address_visibility_values,\n        can_invite_others_to_realm: settings_data.user_can_invite_others_to_realm(),\n        realm_invite_required: page_params.realm_invite_required,\n        can_edit_user_groups: settings_data.user_can_edit_user_groups(),\n        policy_values: settings_config.common_policy_values,\n        realm_delete_own_message_policy: page_params.realm_delete_own_message_policy,\n        DELETE_OWN_MESSAGE_POLICY_ADMINS_ONLY:\n            settings_config.common_message_policy_values.by_admins_only.code,\n        ...settings_org.get_organization_settings_options(),\n        demote_inactive_streams_values: settings_config.demote_inactive_streams_values,\n        user_list_style_values: settings_config.user_list_style_values,\n        color_scheme_values: settings_config.color_scheme_values,\n        default_view_values: settings_config.default_view_values,\n        settings_object: realm_user_settings_defaults,\n        display_settings: settings_config.get_all_display_settings(),\n        settings_label: settings_config.realm_user_settings_defaults_labels,\n        desktop_icon_count_display_values: settings_config.desktop_icon_count_display_values,\n        enable_sound_select:\n            realm_user_settings_defaults.enable_sounds ||\n            realm_user_settings_defaults.enable_stream_audible_notifications,\n        email_notifications_batching_period_values:\n            settings_config.email_notifications_batching_period_values,\n        twenty_four_hour_time_values: settings_config.twenty_four_hour_time_values,\n        create_web_public_stream_policy_values:\n            settings_config.create_web_public_stream_policy_values,\n        disable_enable_spectator_access_setting:\n            !page_params.server_web_public_streams_enabled ||\n            !page_params.zulip_plan_is_not_limited,\n        can_sort_by_email: settings_data.show_email(),\n        realm_push_notifications_enabled: page_params.realm_push_notifications_enabled,\n        realm_org_type_values: settings_org.get_org_type_dropdown_options(),\n        realm_want_advertise_in_communities_directory:\n            page_params.realm_want_advertise_in_communities_directory,\n        disable_want_advertise_in_communities_directory:\n            !page_params.realm_push_notifications_enabled,\n        is_business_type_org:\n            page_params.realm_org_type === settings_config.all_org_type_values.business.code,\n        realm_enable_read_receipts: page_params.realm_enable_read_receipts,\n    };\n\n    if (options.realm_logo_source !== \"D\" && options.realm_night_logo_source === \"D\") {\n        // If no dark theme logo is specified but a light theme one is,\n        // use the light theme one.  See also similar code in realm_logo.js.\n        options.realm_night_logo_url = options.realm_logo_url;\n    }\n\n    options.giphy_help_link = \"/help/animated-gifs-from-giphy\";\n    if (options.giphy_api_key_empty) {\n        options.giphy_help_link =\n            \"https://zulip.readthedocs.io/en/latest/production/giphy-gif-integration.html\";\n    }\n\n    get_realm_level_notification_settings(options);\n\n    const rendered_admin_tab = render_admin_tab(options);\n    $(\"#settings_content .organization-box\").html(rendered_admin_tab);\n    $(\"#settings_content .alert\").removeClass(\"show\");\n\n    settings_bots.update_bot_settings_tip();\n    insert_tip_box();\n\n    $(\"#id_realm_bot_creation_policy\").val(page_params.realm_bot_creation_policy);\n    $(\"#id_realm_email_address_visibility\").val(page_params.realm_email_address_visibility);\n\n    $(\"#id_realm_digest_weekday\").val(options.realm_digest_weekday);\n}\n\nexport function launch(section) {\n    settings.build_page();\n    build_page();\n    settings_sections.reset_sections();\n\n    overlays.open_settings();\n    settings_panel_menu.org_settings.activate_section_or_default(section);\n    settings_toggle.highlight_toggle(\"organization\");\n}\n","import _ from \"lodash\";\n\nimport * as people from \"./people\";\n\n// For simplicity, we use a list for our internal\n// data, since that matches what the server sends us.\nlet my_alert_words = [];\n\nexport function set_words(words) {\n    my_alert_words = words;\n}\n\nexport function get_word_list() {\n    // Returns a array of objects\n    // (with each alert_word as value and 'word' as key to the object.)\n    const words = [];\n    for (const word of my_alert_words) {\n        words.push({word});\n    }\n    return words;\n}\n\nexport function has_alert_word(word) {\n    return my_alert_words.includes(word);\n}\n\nconst alert_regex_replacements = new Map([\n    [\"&\", \"&amp;\"],\n    [\"<\", \"&lt;\"],\n    [\">\", \"&gt;\"],\n    // Accept quotes with or without HTML escaping\n    ['\"', '(?:\"|&quot;)'],\n    [\"'\", \"(?:'|&#39;)\"],\n]);\n\nexport function process_message(message) {\n    // Parsing for alert words is expensive, so we rely on the host\n    // to tell us there any alert words to even look for.\n    if (!message.alerted) {\n        return;\n    }\n\n    for (const word of my_alert_words) {\n        const clean = _.escapeRegExp(word).replace(/[\"&'<>]/g, (c) =>\n            alert_regex_replacements.get(c),\n        );\n        const before_punctuation = \"\\\\s|^|>|[\\\\(\\\\\\\".,';\\\\[]\";\n        const after_punctuation = \"(?=\\\\s)|$|<|[\\\\)\\\\\\\"\\\\?!:.,';\\\\]!]\";\n\n        const regex = new RegExp(`(${before_punctuation})(${clean})(${after_punctuation})`, \"ig\");\n        message.content = message.content.replace(\n            regex,\n            (match, before, word, after, offset, content) => {\n                // Logic for ensuring that we don't muck up rendered HTML.\n                const pre_match = content.slice(0, offset);\n                // We want to find the position of the `<` and `>` only in the\n                // match and the string before it. So, don't include the last\n                // character of match in `check_string`. This covers the corner\n                // case when there is an alert word just before `<` or `>`.\n                const check_string = pre_match + match.slice(0, -1);\n                const in_tag = check_string.lastIndexOf(\"<\") > check_string.lastIndexOf(\">\");\n                // Matched word is inside a HTML tag so don't perform any highlighting.\n                if (in_tag) {\n                    return before + word + after;\n                }\n                return before + \"<span class='alert-word'>\" + word + \"</span>\" + after;\n            },\n        );\n    }\n}\n\nexport function notifies(message) {\n    // We exclude ourselves from notifications when we type one of our own\n    // alert words into a message, just because that can be annoying for\n    // certain types of workflows where everybody on your team, including\n    // yourself, sets up an alert word to effectively mention the team.\n    return !people.is_current_user(message.sender_email) && message.alerted;\n}\n\nexport const initialize = (params) => {\n    my_alert_words = params.alert_words;\n};\n","import $ from \"jquery\";\n\nimport render_add_alert_word from \"../templates/settings/add_alert_word.hbs\";\nimport render_alert_word_settings_item from \"../templates/settings/alert_word_settings_item.hbs\";\n\nimport * as alert_words from \"./alert_words\";\nimport * as channel from \"./channel\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as ListWidget from \"./list_widget\";\nimport * as ui_report from \"./ui_report\";\n\nexport let loaded = false;\n\nexport function rerender_alert_words_ui() {\n    if (!loaded) {\n        return;\n    }\n\n    const words = alert_words.get_word_list();\n    words.sort();\n    const $word_list = $(\"#alert-words-table\");\n\n    ListWidget.create($word_list, words, {\n        name: \"alert-words-list\",\n        modifier(alert_word) {\n            return render_alert_word_settings_item({alert_word});\n        },\n        $parent_container: $(\"#alert-word-settings\"),\n        $simplebar_container: $(\"#alert-word-settings .progressive-table-wrapper\"),\n    });\n}\n\nfunction update_alert_word_status(status_text, is_error) {\n    const $alert_word_status = $(\"#alert_word_status\");\n    if (is_error) {\n        $alert_word_status.removeClass(\"alert-success\").addClass(\"alert-danger\");\n    } else {\n        $alert_word_status.removeClass(\"alert-danger\").addClass(\"alert-success\");\n    }\n    $alert_word_status.find(\".alert_word_status_text\").text(status_text);\n    $alert_word_status.show();\n}\n\nfunction add_alert_word(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const alert_word = $(\"#add-alert-word-name\").val().trim();\n\n    if (alert_words.has_alert_word(alert_word)) {\n        ui_report.client_error(\n            $t({defaultMessage: \"Alert word already exists!\"}),\n            $(\"#dialog_error\"),\n        );\n        dialog_widget.hide_dialog_spinner();\n        return;\n    }\n\n    const words_to_be_added = [alert_word];\n\n    const data = {alert_words: JSON.stringify(words_to_be_added)};\n    dialog_widget.submit_api_request(channel.post, \"/json/users/me/alert_words\", data);\n}\n\nfunction remove_alert_word(alert_word) {\n    const words_to_be_removed = [alert_word];\n    channel.del({\n        url: \"/json/users/me/alert_words\",\n        data: {alert_words: JSON.stringify(words_to_be_removed)},\n        success() {\n            update_alert_word_status(\n                $t(\n                    {defaultMessage: `Alert word \"{alert_word}\" removed successfully!`},\n                    {alert_word},\n                ),\n                false,\n            );\n        },\n        error() {\n            update_alert_word_status($t({defaultMessage: \"Error removing alert word!\"}), true);\n        },\n    });\n}\n\nexport function show_add_alert_word_modal() {\n    const html_body = render_add_alert_word();\n\n    function add_alert_word_post_render() {\n        const $add_user_group_input_element = $(\"#add-alert-word-name\");\n        const $add_user_group_submit_button = $(\"#add-alert-word .dialog_submit_button\");\n        $add_user_group_submit_button.prop(\"disabled\", true);\n\n        $add_user_group_input_element.on(\"input\", () => {\n            $add_user_group_submit_button.prop(\n                \"disabled\",\n                $add_user_group_input_element.val().trim() === \"\",\n            );\n        });\n    }\n\n    dialog_widget.launch({\n        html_heading: $t_html({defaultMessage: \"Add a new alert word\"}),\n        html_body,\n        html_submit_button: $t_html({defaultMessage: \"Add\"}),\n        help_link: \"/help/pm-mention-alert-notifications#alert-words\",\n        form_id: \"add-alert-word-form\",\n        id: \"add-alert-word\",\n        loading_spinner: true,\n        on_click: add_alert_word,\n        on_shown: () => $(\"#add-alert-word-name\").trigger(\"focus\"),\n        post_render: add_alert_word_post_render,\n    });\n}\n\nexport function set_up_alert_words() {\n    // The settings page must be rendered before this function gets called.\n    loaded = true;\n    rerender_alert_words_ui();\n\n    $(\"#open-add-alert-word-modal\").on(\"click\", () => {\n        show_add_alert_word_modal();\n    });\n\n    $(\"#alert-words-table\").on(\"click\", \".remove-alert-word\", (event) => {\n        const word = $(event.currentTarget).parents(\"tr\").find(\".value\").text().trim();\n        remove_alert_word(word);\n    });\n\n    $(\"#alert-word-settings\").on(\"click\", \".close-alert-word-status\", (event) => {\n        event.preventDefault();\n        const $alert = $(event.currentTarget).parents(\".alert\");\n        $alert.hide();\n    });\n}\n\nexport function reset() {\n    loaded = false;\n}\n","import {MessageListData} from \"./message_list_data\";\n\nexport const all_messages_data = new MessageListData({\n    excludes_muted_topics: false,\n});\n","import $ from \"jquery\";\n\nimport render_confirm_delete_attachment from \"../templates/confirm_dialog/confirm_delete_attachment.hbs\";\nimport render_settings_upload_space_stats from \"../templates/settings/upload_space_stats.hbs\";\nimport render_uploaded_files_list from \"../templates/settings/uploaded_files_list.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport {$t_html} from \"./i18n\";\nimport * as ListWidget from \"./list_widget\";\nimport * as loading from \"./loading\";\nimport {page_params} from \"./page_params\";\nimport * as timerender from \"./timerender\";\nimport * as ui from \"./ui\";\nimport * as ui_report from \"./ui_report\";\n\nlet attachments;\nlet upload_space_used;\n\nexport function bytes_to_size(bytes, kb_with_1024_bytes = false) {\n    const kb_size = kb_with_1024_bytes ? 1024 : 1000;\n    const sizes = [\"B\", \"KB\", \"MB\", \"GB\", \"TB\"];\n    if (bytes === 0) {\n        return \"0 B\";\n    }\n    const i = Number.parseInt(Math.floor(Math.log(bytes) / Math.log(kb_size)), 10);\n    let size = Math.round(bytes / Math.pow(kb_size, i));\n    if (i > 0 && size < 10) {\n        size = Math.round((bytes / Math.pow(kb_size, i)) * 10) / 10;\n    }\n    return size + \" \" + sizes[i];\n}\n\nexport function percentage_used_space(uploads_size) {\n    if (page_params.realm_upload_quota_mib === null) {\n        return null;\n    }\n    return ((100 * uploads_size) / page_params.realm_upload_quota_mib).toFixed(1);\n}\n\nfunction set_upload_space_stats() {\n    if (page_params.realm_upload_quota_mib === null) {\n        return;\n    }\n    const args = {\n        show_upgrade_message: page_params.realm_plan_type === 2,\n        percent_used: percentage_used_space(upload_space_used),\n        upload_quota: bytes_to_size(page_params.realm_upload_quota_mib, true),\n    };\n    const rendered_upload_stats_html = render_settings_upload_space_stats(args);\n    $(\"#attachment-stats-holder\").html(rendered_upload_stats_html);\n}\n\nfunction delete_attachments(attachment, file_name) {\n    const html_body = render_confirm_delete_attachment({file_name});\n\n    dialog_widget.launch({\n        html_heading: $t_html({defaultMessage: \"Delete file?\"}),\n        html_body,\n        html_submit_button: $t_html({defaultMessage: \"Delete\"}),\n        id: \"confirm_delete_file_modal\",\n        focus_submit_on_open: true,\n        on_click: () =>\n            dialog_widget.submit_api_request(channel.del, \"/json/attachments/\" + attachment),\n        loading_spinner: true,\n    });\n}\n\nfunction sort_mentioned_in(a, b) {\n    const a_m = a.messages[0];\n    const b_m = b.messages[0];\n\n    if (!a_m) {\n        return 1;\n    }\n    if (!b_m) {\n        return -1;\n    }\n\n    if (a_m.id > b_m.id) {\n        return 1;\n    } else if (a_m.id === b_m.id) {\n        return 0;\n    }\n\n    return -1;\n}\n\nfunction render_attachments_ui() {\n    set_upload_space_stats();\n\n    const $uploaded_files_table = $(\"#uploaded_files_table\").expectOne();\n    const $search_input = $(\"#upload_file_search\");\n\n    ListWidget.create($uploaded_files_table, attachments, {\n        name: \"uploaded-files-list\",\n        modifier(attachment) {\n            return render_uploaded_files_list({attachment});\n        },\n        filter: {\n            $element: $search_input,\n            predicate(item, value) {\n                return item.name.toLocaleLowerCase().includes(value);\n            },\n            onupdate() {\n                ui.reset_scrollbar($uploaded_files_table.closest(\".progressive-table-wrapper\"));\n            },\n        },\n        $parent_container: $(\"#attachments-settings\").expectOne(),\n        init_sort: [\"numeric\", \"create_time\"],\n        sort_fields: {\n            mentioned_in: sort_mentioned_in,\n        },\n        $simplebar_container: $(\"#attachments-settings .progressive-table-wrapper\"),\n    });\n\n    ui.reset_scrollbar($uploaded_files_table.closest(\".progressive-table-wrapper\"));\n}\n\nfunction format_attachment_data(new_attachments) {\n    for (const attachment of new_attachments) {\n        const time = new Date(attachment.create_time);\n        attachment.create_time_str = timerender.render_now(time).time_str;\n        attachment.size_str = bytes_to_size(attachment.size);\n    }\n}\n\nexport function update_attachments(event) {\n    if (attachments === undefined) {\n        // If we haven't fetched attachment data yet, there's nothing to do.\n        return;\n    }\n    if (event.op === \"remove\" || event.op === \"update\") {\n        attachments = attachments.filter((a) => a.id !== event.attachment.id);\n    }\n    if (event.op === \"add\" || event.op === \"update\") {\n        format_attachment_data([event.attachment]);\n        attachments.push(event.attachment);\n    }\n    upload_space_used = event.upload_space_used;\n    // TODO: This is inefficient and we should be able to do some sort\n    // of incremental ListWidget update instead.\n    render_attachments_ui();\n}\n\nexport function set_up_attachments() {\n    // The settings page must be rendered before this function gets called.\n\n    const $status = $(\"#delete-upload-status\");\n    loading.make_indicator($(\"#attachments_loading_indicator\"), {text: \"Loading...\"});\n\n    $(\"#uploaded_files_table\").on(\"click\", \".remove-attachment\", (e) => {\n        const file_name = $(e.target).closest(\".uploaded_file_row\").attr(\"id\");\n        delete_attachments(\n            $(e.target).closest(\".uploaded_file_row\").attr(\"data-attachment-id\"),\n            file_name,\n        );\n    });\n\n    channel.get({\n        url: \"/json/attachments\",\n        success(data) {\n            loading.destroy_indicator($(\"#attachments_loading_indicator\"));\n            format_attachment_data(data.attachments);\n            attachments = data.attachments;\n            upload_space_used = data.upload_space_used;\n            render_attachments_ui();\n        },\n        error(xhr) {\n            loading.destroy_indicator($(\"#attachments_loading_indicator\"));\n            ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, $status);\n        },\n    });\n}\n","import $ from \"jquery\";\n\nimport render_confirm_delete_user_avatar from \"../templates/confirm_dialog/confirm_delete_user_avatar.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport {$t_html} from \"./i18n\";\nimport {page_params} from \"./page_params\";\nimport * as settings_data from \"./settings_data\";\nimport * as upload_widget from \"./upload_widget\";\n\nexport function build_bot_create_widget() {\n    // We have to do strange gyrations with the file input to clear it,\n    // where we replace it wholesale, so we generalize the file input with\n    // a callback function.\n    const get_file_input = function () {\n        return $(\"#bot_avatar_file_input\");\n    };\n\n    const $file_name_field = $(\"#bot_avatar_file\");\n    const $input_error = $(\"#bot_avatar_file_input_error\");\n    const $clear_button = $(\"#bot_avatar_clear_button\");\n    const $upload_button = $(\"#bot_avatar_upload_button\");\n\n    return upload_widget.build_widget(\n        get_file_input,\n        $file_name_field,\n        $input_error,\n        $clear_button,\n        $upload_button,\n    );\n}\n\nexport function build_bot_edit_widget($target) {\n    const get_file_input = function () {\n        return $target.find(\".edit_bot_avatar_file_input\");\n    };\n\n    const $file_name_field = $target.find(\".edit_bot_avatar_file\");\n    const $input_error = $target.find(\".edit_bot_avatar_error\");\n    const $clear_button = $target.find(\".edit_bot_avatar_clear_button\");\n    const $upload_button = $target.find(\".edit_bot_avatar_upload_button\");\n\n    return upload_widget.build_widget(\n        get_file_input,\n        $file_name_field,\n        $input_error,\n        $clear_button,\n        $upload_button,\n    );\n}\n\nfunction display_avatar_delete_complete() {\n    $(\"#user-avatar-upload-widget .upload-spinner-background\").css({visibility: \"hidden\"});\n    $(\"#user-avatar-upload-widget .image-upload-text\").show();\n    $(\"#user-avatar-source\").show();\n}\n\nfunction display_avatar_delete_started() {\n    $(\"#user-avatar-upload-widget .upload-spinner-background\").css({visibility: \"visible\"});\n    $(\"#user-avatar-upload-widget .image-upload-text\").hide();\n    $(\"#user-avatar-upload-widget .image-delete-button\").hide();\n}\n\nexport function build_user_avatar_widget(upload_function) {\n    const get_file_input = function () {\n        return $(\"#user-avatar-upload-widget .image_file_input\").expectOne();\n    };\n\n    if (page_params.avatar_source === \"G\") {\n        $(\"#user-avatar-upload-widget .image-delete-button\").hide();\n        $(\"#user-avatar-source\").show();\n    } else {\n        $(\"#user-avatar-source\").hide();\n    }\n\n    $(\"#user-avatar-upload-widget .image-delete-button\").on(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        function delete_user_avatar() {\n            display_avatar_delete_started();\n            channel.del({\n                url: \"/json/users/me/avatar\",\n                success() {\n                    display_avatar_delete_complete();\n\n                    // Need to clear input because of a small edge case\n                    // where you try to upload the same image you just deleted.\n                    get_file_input().val(\"\");\n                    // Rest of the work is done via the user_events -> avatar_url event we will get\n                },\n                error() {\n                    display_avatar_delete_complete();\n                    $(\"#user-avatar-upload-widget .image-delete-button\").show();\n                },\n            });\n        }\n        const html_body = render_confirm_delete_user_avatar();\n\n        confirm_dialog.launch({\n            html_heading: $t_html({defaultMessage: \"Delete profile picture\"}),\n            html_body,\n            on_click: delete_user_avatar,\n        });\n    });\n\n    if (settings_data.user_can_change_avatar()) {\n        return upload_widget.build_direct_upload_widget(\n            get_file_input,\n            $(\"#user-avatar-upload-widget .image_file_input_error\").expectOne(),\n            $(\"#user-avatar-upload-widget .image_upload_button\").expectOne(),\n            upload_function,\n            page_params.max_avatar_file_size_mib,\n        );\n    }\n\n    return undefined;\n}\n","import _ from \"lodash\";\n\nimport * as people from \"./people\";\n\nconst bots = new Map();\n\nconst bot_fields = [\n    \"api_key\",\n    \"avatar_url\",\n    \"bot_type\",\n    \"default_all_public_streams\",\n    \"default_events_register_stream\",\n    \"default_sending_stream\",\n    \"email\",\n    \"full_name\",\n    \"is_active\",\n    \"owner\", // TODO: eliminate\n    \"owner_id\",\n    \"user_id\",\n];\n\nconst services = new Map();\nconst services_fields = [\"base_url\", \"interface\", \"config_data\", \"service_name\", \"token\"];\n\nexport function all_user_ids() {\n    return Array.from(bots.keys());\n}\n\nexport function add(bot) {\n    const clean_bot = _.pick(bot, bot_fields);\n    bots.set(bot.user_id, clean_bot);\n    const clean_services = bot.services.map((service) => _.pick(service, services_fields));\n    services.set(bot.user_id, clean_services);\n}\n\nexport function deactivate(bot_id) {\n    bots.get(bot_id).is_active = false;\n}\n\nexport function del(bot_id) {\n    bots.delete(bot_id);\n    services.delete(bot_id);\n}\n\nexport function update(bot_id, bot_update) {\n    const bot = bots.get(bot_id);\n    Object.assign(bot, _.pick(bot_update, bot_fields));\n\n    // We currently only support one service per bot.\n    const service = services.get(bot_id)[0];\n    if (bot_update.services !== undefined && bot_update.services.length > 0) {\n        Object.assign(service, _.pick(bot_update.services[0], services_fields));\n    }\n}\n\nexport function get_all_bots_for_current_user() {\n    const ret = [];\n    for (const bot of bots.values()) {\n        if (people.is_my_user_id(bot.owner_id)) {\n            ret.push(bot);\n        }\n    }\n    return ret;\n}\n\nexport function get_editable() {\n    const ret = [];\n    for (const bot of bots.values()) {\n        if (bot.is_active && people.is_my_user_id(bot.owner_id)) {\n            ret.push(bot);\n        }\n    }\n    return ret;\n}\n\nexport function get_all_bots_owned_by_user(user_id) {\n    const ret = [];\n    for (const bot of bots.values()) {\n        if (bot.owner_id === user_id && bot.is_active) {\n            ret.push(bot);\n        }\n    }\n    return ret;\n}\n\nexport function get(bot_id) {\n    return bots.get(bot_id);\n}\n\nexport function get_services(bot_id) {\n    return services.get(bot_id);\n}\n\nexport function initialize(params) {\n    bots.clear();\n    for (const bot of params.realm_bots) {\n        add(bot);\n    }\n}\n","import * as blueslip from \"./blueslip\";\nimport * as hash_util from \"./hash_util\";\nimport * as ui_util from \"./ui_util\";\n\nexport const state = {\n    is_internal_change: false,\n    hash_before_overlay: null,\n    old_hash: window.location.hash,\n    changing_hash: false,\n    // If the spectator's hash changes to a restricted hash, then we store the old hash\n    // so that we can take user back to the allowed hash.\n    // TODO: Store #narrow old hashes. Currently they are not stored here since, the #narrow\n    // hashes are changed without calling `hashchanged` in many ways.\n    spectator_old_hash: hash_util.is_spectator_compatible(window.location.hash)\n        ? window.location.hash\n        : \"#\",\n};\n\nexport function clear_for_testing() {\n    state.is_internal_change = false;\n    state.hash_before_overlay = null;\n    state.old_hash = \"#\";\n}\n\nexport function old_hash() {\n    return state.old_hash;\n}\n\nexport function set_hash_before_overlay(hash) {\n    state.hash_before_overlay = hash;\n}\n\nexport function update_web_public_hash(hash) {\n    // Returns true if hash is web-public compatible.\n    if (hash_util.is_spectator_compatible(hash)) {\n        state.spectator_old_hash = hash;\n        return true;\n    }\n    return false;\n}\n\nexport function save_old_hash() {\n    state.old_hash = window.location.hash;\n\n    const was_internal_change = state.is_internal_change;\n    state.is_internal_change = false;\n\n    return was_internal_change;\n}\n\nexport function update(new_hash) {\n    const old_hash = window.location.hash;\n\n    if (!new_hash.startsWith(\"#\")) {\n        blueslip.error(\"programming error: prefix hashes with #: \" + new_hash);\n        return;\n    }\n\n    if (old_hash === new_hash) {\n        // If somebody is calling us with the same hash we already have, it's\n        // probably harmless, and we just ignore it.  But it could be a symptom\n        // of disorganized code that's prone to an infinite loop of repeatedly\n        // assigning the same hash.\n        blueslip.info(\"ignoring probably-harmless call to browser_history.update: \" + new_hash);\n        return;\n    }\n\n    state.old_hash = old_hash;\n    state.is_internal_change = true;\n    window.location.hash = new_hash;\n}\n\nexport function exit_overlay() {\n    if (hash_util.is_overlay_hash(window.location.hash) && !state.changing_hash) {\n        ui_util.blur_active_element();\n        const new_hash = state.hash_before_overlay || \"#\";\n        update(new_hash);\n    }\n}\n\nexport function go_to_location(hash) {\n    // Call this function when you WANT the hashchanged\n    // function to run.\n    window.location.hash = hash;\n}\n\nexport function update_hash_internally_if_required(hash) {\n    if (window.location.hash !== hash) {\n        update(hash);\n    }\n}\n\nexport function return_to_web_public_hash() {\n    window.location.hash = state.spectator_old_hash;\n}\n","import * as blueslip from \"./blueslip\";\nimport * as compose_fade_users from \"./compose_fade_users\";\nimport * as hash_util from \"./hash_util\";\nimport {$t} from \"./i18n\";\nimport * as muted_users from \"./muted_users\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as presence from \"./presence\";\nimport * as timerender from \"./timerender\";\nimport * as unread from \"./unread\";\nimport {user_settings} from \"./user_settings\";\nimport * as user_status from \"./user_status\";\nimport * as util from \"./util\";\n\n/*\n\n   This is the main model code for building the buddy list.\n   We also rely on presence.js to compute the actual presence\n   for users.  We glue in other \"people\" data and do\n   filtering/sorting of the data that we'll send into the view.\n\n*/\n\nexport const max_size_before_shrinking = 600;\n\nconst fade_config = {\n    get_user_id(item) {\n        return item.user_id;\n    },\n    fade(item) {\n        item.faded = true;\n    },\n    unfade(item) {\n        item.faded = false;\n    },\n};\n\nexport function get_user_circle_class(user_id) {\n    const status = presence.get_status(user_id);\n\n    switch (status) {\n        case \"active\":\n            return \"user_circle_green\";\n        case \"idle\":\n            return \"user_circle_idle\";\n        default:\n            return \"user_circle_empty\";\n    }\n}\n\nexport function level(user_id) {\n    if (people.is_my_user_id(user_id)) {\n        // Always put current user at the top.\n        return 0;\n    }\n\n    const status = presence.get_status(user_id);\n\n    switch (status) {\n        case \"active\":\n            return 1;\n        case \"idle\":\n            return 2;\n        default:\n            return 3;\n    }\n}\n\nexport function compare_function(a, b) {\n    const level_a = level(a);\n    const level_b = level(b);\n    const diff = level_a - level_b;\n    if (diff !== 0) {\n        return diff;\n    }\n\n    // Sort equivalent PM names alphabetically\n    const person_a = people.get_by_user_id(a);\n    const person_b = people.get_by_user_id(b);\n\n    const full_name_a = person_a ? person_a.full_name : \"\";\n    const full_name_b = person_b ? person_b.full_name : \"\";\n\n    return util.strcmp(full_name_a, full_name_b);\n}\n\nexport function sort_users(user_ids) {\n    // TODO sort by unread count first, once we support that\n    user_ids.sort(compare_function);\n    return user_ids;\n}\n\nfunction get_num_unread(user_id) {\n    return unread.num_unread_for_user_ids_string(user_id.toString());\n}\n\nexport function user_last_seen_time_status(user_id) {\n    const status = presence.get_status(user_id);\n    if (status === \"active\") {\n        return $t({defaultMessage: \"Active now\"});\n    }\n\n    if (status === \"idle\") {\n        // When we complete our presence API rewrite to have the data\n        // plumbed, we may want to change this to also mention when\n        // they were last active.\n        return $t({defaultMessage: \"Idle\"});\n    }\n\n    const last_active_date = presence.last_active_date(user_id);\n    let last_seen;\n    if (page_params.realm_is_zephyr_mirror_realm) {\n        // We don't send presence data to clients in Zephyr mirroring realms\n        last_seen = $t({defaultMessage: \"Unknown\"});\n    } else if (last_active_date === undefined) {\n        // There are situations where the client has incomplete presence\n        // history on a user.  This can happen when users are deactivated,\n        // or when they just haven't been present in a long time (and we\n        // may have queries on presence that go back only N weeks).\n        //\n        // We give this vague status for such users; we will get to\n        // delete this code when we finish rewriting the presence API.\n        last_seen = $t({defaultMessage: \"More than 2 weeks ago\"});\n    } else {\n        last_seen = timerender.last_seen_status_from_date(last_active_date);\n    }\n    return $t({defaultMessage: \"Last active: {last_seen}\"}, {last_seen});\n}\n\nexport function info_for(user_id) {\n    const user_circle_class = get_user_circle_class(user_id);\n    const person = people.get_by_user_id(user_id);\n\n    const status_emoji_info = user_status.get_status_emoji(user_id);\n    const status_text = user_status.get_status_text(user_id);\n    const user_list_style_value = user_settings.user_list_style;\n    const user_list_style = {\n        COMPACT: user_list_style_value === 1,\n        WITH_STATUS: user_list_style_value === 2,\n        WITH_AVATAR: user_list_style_value === 3,\n    };\n\n    return {\n        href: hash_util.pm_with_url(person.email),\n        name: person.full_name,\n        user_id,\n        status_emoji_info,\n        is_current_user: people.is_my_user_id(user_id),\n        num_unread: get_num_unread(user_id),\n        user_circle_class,\n        status_text,\n        user_list_style,\n    };\n}\n\nexport function get_title_data(user_ids_string, is_group) {\n    if (is_group === true) {\n        // For groups, just return a string with recipient names.\n        return {\n            first_line: people.get_recipients(user_ids_string),\n            second_line: \"\",\n            third_line: \"\",\n        };\n    }\n\n    // Since it's not a group, user_ids_string is a single user ID.\n    const user_id = Number.parseInt(user_ids_string, 10);\n    const person = people.get_by_user_id(user_id);\n\n    if (person.is_bot) {\n        const bot_owner = people.get_bot_owner_user(person);\n\n        if (bot_owner) {\n            const bot_owner_name = $t(\n                {defaultMessage: \"Owner: {name}\"},\n                {name: bot_owner.full_name},\n            );\n\n            return {\n                first_line: person.full_name,\n                second_line: bot_owner_name,\n                third_line: \"\",\n            };\n        }\n\n        // Bot does not have an owner.\n        return {\n            first_line: person.full_name,\n            second_line: \"\",\n            third_line: \"\",\n        };\n    }\n\n    // For buddy list and individual PMS.  Since is_group=False, it's\n    // a single, human, user.\n    const last_seen = user_last_seen_time_status(user_id);\n    const is_my_user = people.is_my_user_id(user_id);\n\n    // Users has a status.\n    if (user_status.get_status_text(user_id)) {\n        return {\n            first_line: person.full_name,\n            second_line: user_status.get_status_text(user_id),\n            third_line: last_seen,\n            show_you: is_my_user,\n        };\n    }\n\n    // Users does not have a status.\n    return {\n        first_line: person.full_name,\n        second_line: last_seen,\n        third_line: \"\",\n        show_you: is_my_user,\n    };\n}\n\nexport function get_item(user_id) {\n    const info = info_for(user_id);\n    compose_fade_users.update_user_info([info], fade_config);\n    return info;\n}\n\nexport function get_items_for_users(user_ids) {\n    const user_info = user_ids.map((user_id) => info_for(user_id));\n    compose_fade_users.update_user_info(user_info, fade_config);\n    return user_info;\n}\n\nfunction user_is_recently_active(user_id) {\n    // return true if the user has a green/orange circle\n    return level(user_id) <= 2;\n}\n\nfunction maybe_shrink_list(user_ids, user_filter_text) {\n    if (user_ids.length <= max_size_before_shrinking) {\n        return user_ids;\n    }\n\n    if (user_filter_text) {\n        // If the user types something, we want to show all\n        // users matching the text, even if they have not been\n        // online recently.\n        // For super common letters like \"s\", we may\n        // eventually want to filter down to only users that\n        // are in presence.get_user_ids().\n        return user_ids;\n    }\n\n    user_ids = user_ids.filter((user_id) => user_is_recently_active(user_id));\n\n    return user_ids;\n}\n\nfunction filter_user_ids(user_filter_text, user_ids) {\n    // This first filter is for whether the user is eligible to be\n    // displayed in the right sidebar at all.\n    user_ids = user_ids.filter((user_id) => {\n        const person = people.get_by_user_id(user_id);\n\n        if (!person) {\n            blueslip.warn(\"Got user_id in presence but not people: \" + user_id);\n            return false;\n        }\n\n        if (person.is_bot) {\n            // Bots should never appear in the right sidebar.  This\n            // case should never happen, since bots cannot have\n            // presence data.\n            return false;\n        }\n\n        if (muted_users.is_user_muted(user_id)) {\n            // Muted users are hidden from the right sidebar entirely.\n            return false;\n        }\n\n        return true;\n    });\n\n    if (!user_filter_text) {\n        return user_ids;\n    }\n\n    // If a query is present in \"Search people\", we return matches.\n    user_ids = user_ids.filter((user_id) => !people.is_my_user_id(user_id));\n\n    let search_terms = user_filter_text.toLowerCase().split(/[,|]+/);\n    search_terms = search_terms.map((s) => s.trim());\n\n    const persons = user_ids.map((user_id) => people.get_by_user_id(user_id));\n\n    const user_id_dict = people.filter_people_by_search_terms(persons, search_terms);\n\n    return Array.from(user_id_dict.keys());\n}\n\nfunction get_filtered_user_id_list(user_filter_text) {\n    let base_user_id_list;\n\n    if (user_filter_text) {\n        // If there's a filter, select from all users, not just those\n        // recently active.\n        base_user_id_list = people.get_active_user_ids();\n    } else {\n        // From large realms, the user_ids in presence may exclude\n        // users who have been idle more than three weeks.  When the\n        // filter text is blank, we show only those recently active users.\n        base_user_id_list = presence.get_user_ids();\n\n        // Always include ourselves, even if we're \"unavailable\".\n        const my_user_id = people.my_current_user_id();\n        if (!base_user_id_list.includes(my_user_id)) {\n            base_user_id_list = [my_user_id, ...base_user_id_list];\n        }\n    }\n\n    const user_ids = filter_user_ids(user_filter_text, base_user_id_list);\n    return user_ids;\n}\n\nexport function get_filtered_and_sorted_user_ids(user_filter_text) {\n    let user_ids;\n    user_ids = get_filtered_user_id_list(user_filter_text);\n    user_ids = maybe_shrink_list(user_ids, user_filter_text);\n    return sort_users(user_ids);\n}\n\nexport function matches_filter(user_filter_text, user_id) {\n    // This is a roundabout way of checking a user if you look\n    // too hard at it, but it should be fine for now.\n    return filter_user_ids(user_filter_text, [user_id]).length === 1;\n}\n","import $ from \"jquery\";\n\nimport render_presence_row from \"../templates/presence_row.hbs\";\nimport render_presence_rows from \"../templates/presence_rows.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as buddy_data from \"./buddy_data\";\nimport * as message_viewport from \"./message_viewport\";\nimport * as padded_widget from \"./padded_widget\";\nimport * as ui from \"./ui\";\n\nclass BuddyListConf {\n    container_sel = \"#user_presences\";\n    scroll_container_sel = \"#buddy_list_wrapper\";\n    item_sel = \"li.user_sidebar_entry\";\n    padding_sel = \"#buddy_list_wrapper_padding\";\n\n    items_to_html(opts) {\n        const html = render_presence_rows({presence_rows: opts.items});\n        return html;\n    }\n\n    item_to_html(opts) {\n        const html = render_presence_row(opts.item);\n        return html;\n    }\n\n    get_li_from_key(opts) {\n        const user_id = opts.key;\n        const $container = $(this.container_sel);\n        return $container.find(`${this.item_sel}[data-user-id='${CSS.escape(user_id)}']`);\n    }\n\n    get_key_from_li(opts) {\n        return Number.parseInt(opts.$li.expectOne().attr(\"data-user-id\"), 10);\n    }\n\n    get_data_from_keys(opts) {\n        const keys = opts.keys;\n        const data = buddy_data.get_items_for_users(keys);\n        return data;\n    }\n\n    compare_function = buddy_data.compare_function;\n\n    height_to_fill() {\n        // Because the buddy list gets sized dynamically, we err on the side\n        // of using the height of the entire viewport for deciding\n        // how much content to render.  Even on tall monitors this should\n        // still be a significant optimization for orgs with thousands of\n        // users.\n        const height = message_viewport.height();\n        return height;\n    }\n}\n\nexport class BuddyList extends BuddyListConf {\n    keys = [];\n\n    populate(opts) {\n        this.render_count = 0;\n        this.$container.empty();\n\n        // We rely on our caller to give us items\n        // in already-sorted order.\n        this.keys = opts.keys;\n\n        this.fill_screen_with_content();\n    }\n\n    render_more(opts) {\n        const chunk_size = opts.chunk_size;\n\n        const begin = this.render_count;\n        const end = begin + chunk_size;\n\n        const more_keys = this.keys.slice(begin, end);\n\n        if (more_keys.length === 0) {\n            return;\n        }\n\n        const items = this.get_data_from_keys({\n            keys: more_keys,\n        });\n\n        const html = this.items_to_html({\n            items,\n        });\n        this.$container = $(this.container_sel);\n        this.$container.append(html);\n\n        // Invariant: more_keys.length >= items.length.\n        // (Usually they're the same, but occasionally keys\n        // won't return valid items.  Even though we don't\n        // actually render these keys, we still \"count\" them\n        // as rendered.\n\n        this.render_count += more_keys.length;\n        this.update_padding();\n    }\n\n    get_items() {\n        const $obj = this.$container.find(`${this.item_sel}`);\n        return $obj.map((i, elem) => $(elem));\n    }\n\n    first_key() {\n        return this.keys[0];\n    }\n\n    prev_key(key) {\n        const i = this.keys.indexOf(key);\n\n        if (i <= 0) {\n            return undefined;\n        }\n\n        return this.keys[i - 1];\n    }\n\n    next_key(key) {\n        const i = this.keys.indexOf(key);\n\n        if (i < 0) {\n            return undefined;\n        }\n\n        return this.keys[i + 1];\n    }\n\n    maybe_remove_key(opts) {\n        const pos = this.keys.indexOf(opts.key);\n\n        if (pos < 0) {\n            return;\n        }\n\n        this.keys.splice(pos, 1);\n\n        if (pos < this.render_count) {\n            this.render_count -= 1;\n            const $li = this.find_li({key: opts.key});\n            $li.remove();\n            this.update_padding();\n        }\n    }\n\n    find_position(opts) {\n        const key = opts.key;\n        let i;\n\n        for (i = 0; i < this.keys.length; i += 1) {\n            const list_key = this.keys[i];\n\n            if (this.compare_function(key, list_key) < 0) {\n                return i;\n            }\n        }\n\n        return this.keys.length;\n    }\n\n    force_render(opts) {\n        const pos = opts.pos;\n\n        // Try to render a bit optimistically here.\n        const cushion_size = 3;\n        const chunk_size = pos + cushion_size - this.render_count;\n\n        if (chunk_size <= 0) {\n            blueslip.error(\"cannot show key at this position: \" + pos);\n        }\n\n        this.render_more({\n            chunk_size,\n        });\n    }\n\n    find_li(opts) {\n        const key = opts.key;\n\n        // Try direct DOM lookup first for speed.\n        let $li = this.get_li_from_key({\n            key,\n        });\n\n        if ($li.length === 1) {\n            return $li;\n        }\n\n        if (!opts.force_render) {\n            // Most callers don't force us to render a list\n            // item that wouldn't be on-screen anyway.\n            return $li;\n        }\n\n        const pos = this.keys.indexOf(key);\n\n        if (pos < 0) {\n            // TODO: See ListCursor.get_row() for why this is\n            //       a bit janky now.\n            return [];\n        }\n\n        this.force_render({\n            pos,\n        });\n\n        $li = this.get_li_from_key({\n            key,\n        });\n\n        return $li;\n    }\n\n    insert_new_html(opts) {\n        const new_key = opts.new_key;\n        const html = opts.html;\n        const pos = opts.pos;\n\n        if (new_key === undefined) {\n            if (pos === this.render_count) {\n                this.render_count += 1;\n                this.$container.append(html);\n                this.update_padding();\n            }\n            return;\n        }\n\n        if (pos < this.render_count) {\n            this.render_count += 1;\n            const $li = this.find_li({key: new_key});\n            $li.before(html);\n            this.update_padding();\n        }\n    }\n\n    insert_or_move(opts) {\n        const key = opts.key;\n        const item = opts.item;\n\n        this.maybe_remove_key({key});\n\n        const pos = this.find_position({\n            key,\n        });\n\n        // Order is important here--get the new_key\n        // before mutating our list.  An undefined value\n        // corresponds to appending.\n        const new_key = this.keys[pos];\n\n        this.keys.splice(pos, 0, key);\n\n        const html = this.item_to_html({item});\n        this.insert_new_html({\n            pos,\n            html,\n            new_key,\n        });\n    }\n\n    fill_screen_with_content() {\n        let height = this.height_to_fill();\n\n        const elem = ui.get_scroll_element($(this.scroll_container_sel)).expectOne()[0];\n\n        // Add a fudge factor.\n        height += 10;\n\n        while (this.render_count < this.keys.length) {\n            const padding_height = $(this.padding_sel).height();\n            const bottom_offset = elem.scrollHeight - elem.scrollTop - padding_height;\n\n            if (bottom_offset > height) {\n                break;\n            }\n\n            const chunk_size = 20;\n\n            this.render_more({\n                chunk_size,\n            });\n        }\n    }\n\n    // This is a bit of a hack to make sure we at least have\n    // an empty list to start, before we get the initial payload.\n    $container = $(this.container_sel);\n\n    start_scroll_handler() {\n        // We have our caller explicitly call this to make\n        // sure everything's in place.\n        const $scroll_container = ui.get_scroll_element($(this.scroll_container_sel));\n\n        $scroll_container.on(\"scroll\", () => {\n            this.fill_screen_with_content();\n        });\n    }\n\n    update_padding() {\n        padded_widget.update_padding({\n            shown_rows: this.render_count,\n            total_rows: this.keys.length,\n            content_sel: this.container_sel,\n            padding_sel: this.padding_sel,\n        });\n    }\n}\n\nexport const buddy_list = new BuddyList();\n","import $ from \"jquery\";\n\nimport * as blueslip from \"./blueslip\";\nimport {page_params} from \"./page_params\";\nimport * as reload_state from \"./reload_state\";\nimport * as spectators from \"./spectators\";\n\nlet password_change_in_progress = false;\nexport let password_changes = 0;\n\nexport function set_password_change_in_progress(value) {\n    password_change_in_progress = value;\n    if (!value) {\n        password_changes += 1;\n    }\n}\n\nfunction call(args) {\n    if (reload_state.is_in_progress() && !args.ignore_reload) {\n        // If we're in the process of reloading, most HTTP requests\n        // are useless, with exceptions like cleaning up our event\n        // queue and blueslip (Which doesn't use channel.js).\n        return undefined;\n    }\n\n    // Remember the number of completed password changes when the\n    // request was initiated. This allows us to detect race\n    // situations where a password change occurred before we got a\n    // response that failed due to the ongoing password change.\n    const orig_password_changes = password_changes;\n\n    // Wrap the error handlers to reload the page if we get a CSRF error\n    // (What probably happened is that the user logged out in another tab).\n    let orig_error = args.error;\n    if (orig_error === undefined) {\n        orig_error = function () {};\n    }\n    args.error = function wrapped_error(xhr, error_type, xhn) {\n        if (reload_state.is_in_progress()) {\n            // If we're in the process of reloading the browser,\n            // there's no point in running the error handler,\n            // because all of our state is about to be discarded\n            // anyway.\n            blueslip.log(`Ignoring ${args.type} ${args.url} error response while reloading`);\n            return;\n        }\n\n        if (xhr.status === 401) {\n            if (password_change_in_progress || orig_password_changes !== password_changes) {\n                // The backend for handling password change API requests\n                // will replace the user's session; this results in a\n                // brief race where any API request will fail with a 401\n                // error after the old session is deactivated but before\n                // the new one has been propagated to the browser.  So we\n                // skip our normal HTTP 401 error handling if we're in the\n                // process of executing a password change.\n                return;\n            }\n\n            if (page_params.is_spectator) {\n                // In theory, the spectator implementation should be\n                // designed to prevent accessing widgets that would\n                // make network requests not available to spectators.\n                //\n                // In the case that we have a bug in that logic, we\n                // prefer the user experience of offering the\n                // login_to_access widget over reloading the page.\n                spectators.login_to_access();\n            } else {\n                // We got logged out somehow, perhaps from another window\n                // changing the user's password, or a session timeout.  We\n                // could display an error message, but jumping right to\n                // the login page conveys the same information with a\n                // smoother relogin experience.\n                window.location.replace(page_params.login_page);\n            }\n        } else if (xhr.status === 403) {\n            try {\n                if (\n                    JSON.parse(xhr.responseText).code === \"CSRF_FAILED\" &&\n                    reload_state.csrf_failed_handler !== undefined\n                ) {\n                    reload_state.csrf_failed_handler();\n                }\n            } catch (error) {\n                blueslip.error(\n                    \"Unexpected 403 response from server\",\n                    {xhr: xhr.responseText, args},\n                    error.stack,\n                );\n            }\n        }\n        orig_error(xhr, error_type, xhn);\n    };\n    let orig_success = args.success;\n    if (orig_success === undefined) {\n        orig_success = function () {};\n    }\n    args.success = function wrapped_success(data, textStatus, jqXHR) {\n        if (reload_state.is_in_progress()) {\n            // If we're in the process of reloading the browser,\n            // there's no point in running the success handler,\n            // because all of our state is about to be discarded\n            // anyway.\n            blueslip.log(`Ignoring ${args.type} ${args.url} response while reloading`);\n            return;\n        }\n\n        orig_success(data, textStatus, jqXHR);\n    };\n\n    return $.ajax(args);\n}\n\nexport function get(options) {\n    const args = {type: \"GET\", dataType: \"json\", ...options};\n    return call(args);\n}\n\nexport function post(options) {\n    const args = {type: \"POST\", dataType: \"json\", ...options};\n    return call(args);\n}\n\nexport function put(options) {\n    const args = {type: \"PUT\", dataType: \"json\", ...options};\n    return call(args);\n}\n\n// Not called exports.delete because delete is a reserved word in JS\nexport function del(options) {\n    const args = {type: \"DELETE\", dataType: \"json\", ...options};\n    return call(args);\n}\n\nexport function patch(options) {\n    // Send a PATCH as a POST in order to work around QtWebkit\n    // (Linux/Windows desktop app) not supporting PATCH body.\n    if (options.processData === false) {\n        // If we're submitting a FormData object, we need to add the\n        // method this way\n        options.data.append(\"method\", \"PATCH\");\n    } else {\n        options.data = {...options.data, method: \"PATCH\"};\n    }\n    return post(options);\n}\n\nexport function xhr_error_message(message, xhr) {\n    if (xhr.status.toString().charAt(0) === \"4\") {\n        // Only display the error response for 4XX, where we've crafted\n        // a nice response.\n        message += \": \" + JSON.parse(xhr.responseText).msg;\n    }\n    return message;\n}\n","import autosize from \"autosize\";\nimport $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport * as compose_actions from \"./compose_actions\";\nimport * as compose_banner from \"./compose_banner\";\nimport {get_recipient_label} from \"./compose_closed_ui\";\nimport * as compose_fade from \"./compose_fade\";\nimport * as compose_state from \"./compose_state\";\nimport * as compose_ui from \"./compose_ui\";\nimport * as compose_validate from \"./compose_validate\";\nimport * as drafts from \"./drafts\";\nimport * as echo from \"./echo\";\nimport * as flatpickr from \"./flatpickr\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as loading from \"./loading\";\nimport * as markdown from \"./markdown\";\nimport * as message_edit from \"./message_edit\";\nimport * as narrow from \"./narrow\";\nimport * as notifications from \"./notifications\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as reminder from \"./reminder\";\nimport * as rendered_markdown from \"./rendered_markdown\";\nimport * as resize from \"./resize\";\nimport * as rows from \"./rows\";\nimport * as sent_messages from \"./sent_messages\";\nimport * as server_events from \"./server_events\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_settings_ui from \"./stream_settings_ui\";\nimport * as sub_store from \"./sub_store\";\nimport * as subscriber_api from \"./subscriber_api\";\nimport * as transmit from \"./transmit\";\nimport * as ui_report from \"./ui_report\";\nimport * as upload from \"./upload\";\nimport {user_settings} from \"./user_settings\";\nimport * as util from \"./util\";\nimport * as zcommand from \"./zcommand\";\n\n// Docs: https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html\n\n/* Track the state of the @all warning. The user must acknowledge that they are spamming the entire\n   stream before the warning will go away. If they try to send before explicitly dismissing the\n   warning, they will get an error message too.\n\n   undefined: no @all/@everyone in message;\n   false: user typed @all/@everyone;\n   true: user clicked YES */\n\nlet uppy;\n\nexport function compute_show_video_chat_button() {\n    const available_providers = page_params.realm_available_video_chat_providers;\n    if (page_params.realm_video_chat_provider === available_providers.disabled.id) {\n        return false;\n    }\n\n    if (\n        page_params.realm_video_chat_provider === available_providers.jitsi_meet.id &&\n        !page_params.jitsi_server_url\n    ) {\n        return false;\n    }\n\n    return true;\n}\n\nexport function update_video_chat_button_display() {\n    const show_video_chat_button = compute_show_video_chat_button();\n    $(\"#below-compose-content .video_link\").toggle(show_video_chat_button);\n    $(\".message-edit-feature-group .video_link\").toggle(show_video_chat_button);\n}\n\nexport function clear_invites() {\n    $(`#compose_banners .${compose_banner.CLASSNAMES.recipient_not_subscribed}`).remove();\n}\n\nexport function clear_private_stream_alert() {\n    $(`#compose_banners .${compose_banner.CLASSNAMES.private_stream_warning}`).remove();\n}\n\nexport function clear_preview_area() {\n    $(\"#compose-textarea\").show();\n    $(\"#compose-textarea\").trigger(\"focus\");\n    $(\"#compose .undo_markdown_preview\").hide();\n    $(\"#compose .preview_message_area\").hide();\n    $(\"#compose .preview_content\").empty();\n    $(\"#compose .markdown_preview\").show();\n    autosize.update($(\"#compose-textarea\"));\n}\n\nfunction update_fade() {\n    if (!compose_state.composing()) {\n        return;\n    }\n\n    const msg_type = compose_state.get_message_type();\n    compose_validate.warn_if_topic_resolved();\n    compose_fade.set_focused_recipient(msg_type);\n    compose_fade.update_all();\n}\n\nexport function update_on_recipient_change() {\n    update_fade();\n    compose_actions.update_narrow_to_recipient_visibility();\n}\n\nexport function abort_xhr() {\n    $(\"#compose-send-button\").prop(\"disabled\", false);\n    uppy.cancelAll();\n}\n\nexport const zoom_token_callbacks = new Map();\nexport const video_call_xhrs = new Map();\n\nexport function abort_video_callbacks(edit_message_id = \"\") {\n    zoom_token_callbacks.delete(edit_message_id);\n    if (video_call_xhrs.has(edit_message_id)) {\n        video_call_xhrs.get(edit_message_id).abort();\n        video_call_xhrs.delete(edit_message_id);\n    }\n}\n\nexport function empty_topic_placeholder() {\n    return $t({defaultMessage: \"(no topic)\"});\n}\n\nexport function create_message_object() {\n    // Topics are optional, and we provide a placeholder if one isn't given.\n    let topic = compose_state.topic();\n    if (topic === \"\") {\n        topic = empty_topic_placeholder();\n    }\n\n    // Changes here must also be kept in sync with echo.try_deliver_locally\n    const message = {\n        type: compose_state.get_message_type(),\n        content: compose_state.message_content(),\n        sender_id: page_params.user_id,\n        queue_id: page_params.queue_id,\n        stream: \"\",\n    };\n    message.topic = \"\";\n\n    if (message.type === \"private\") {\n        // TODO: this should be collapsed with the code in composebox_typeahead.js\n        const recipient = compose_state.private_message_recipient();\n        const emails = util.extract_pm_recipients(recipient);\n        message.to = emails;\n        message.reply_to = recipient;\n        message.private_message_recipient = recipient;\n        message.to_user_ids = people.email_list_to_user_ids_string(emails);\n\n        // Note: The `undefined` case is for situations like the\n        // is_zephyr_mirror_realm case where users may be\n        // automatically created when you try to send a private\n        // message to their email address.\n        if (message.to_user_ids !== undefined) {\n            message.to = people.user_ids_string_to_ids_array(message.to_user_ids);\n        }\n    } else {\n        const stream_name = compose_state.stream_name();\n        message.stream = stream_name;\n        const sub = stream_data.get_sub(stream_name);\n        if (sub) {\n            message.stream_id = sub.stream_id;\n            message.to = sub.stream_id;\n        } else {\n            // We should be validating streams in calling code.  We'll\n            // try to fall back to stream_name here just in case the\n            // user started composing to the old stream name and\n            // manually entered the stream name, and it got past\n            // validation. We should try to kill this code off eventually.\n            blueslip.error(\"Trying to send message with bad stream name: \" + stream_name);\n            message.to = stream_name;\n        }\n        message.topic = topic;\n    }\n    return message;\n}\n\nexport function clear_compose_box() {\n    /* Before clearing the compose box, we reset it to the\n     * default/normal size. Note that for locally echoed messages, we\n     * will have already done this action before echoing the message\n     * to avoid the compose box triggering \"new message out of view\"\n     * notifications incorrectly. */\n    if (compose_ui.is_full_size()) {\n        compose_ui.make_compose_box_original_size();\n    }\n    $(\"#compose-textarea\").val(\"\").trigger(\"focus\");\n    compose_validate.check_overflow_text();\n    compose_validate.clear_topic_resolved_warning();\n    $(\"#compose-textarea\").removeData(\"draft-id\");\n    compose_ui.autosize_textarea($(\"#compose-textarea\"));\n    $(\"#compose-send-status\").hide(0);\n    compose_banner.clear_errors();\n    compose_banner.clear_warnings();\n    compose_ui.hide_compose_spinner();\n}\n\nexport function send_message_success(local_id, message_id, locally_echoed) {\n    if (!locally_echoed) {\n        clear_compose_box();\n    }\n\n    echo.reify_message_id(local_id, message_id);\n}\n\nexport function send_message(request = create_message_object()) {\n    if (request.type === \"private\") {\n        request.to = JSON.stringify(request.to);\n    } else {\n        request.to = JSON.stringify([request.to]);\n    }\n\n    let local_id;\n    let locally_echoed;\n\n    const message = echo.try_deliver_locally(request);\n    if (message) {\n        // We are rendering this message locally with an id\n        // like 92l99.01 that corresponds to a reasonable\n        // approximation of the id we'll get from the server\n        // in terms of sorting messages.\n        local_id = message.local_id;\n        locally_echoed = true;\n    } else {\n        // We are not rendering this message locally, but we\n        // track the message's life cycle with an id like\n        // loc-1, loc-2, loc-3,etc.\n        locally_echoed = false;\n        local_id = sent_messages.get_new_local_id();\n    }\n\n    request.local_id = local_id;\n\n    sent_messages.start_tracking_message({\n        local_id,\n        locally_echoed,\n    });\n\n    request.locally_echoed = locally_echoed;\n\n    function success(data) {\n        send_message_success(local_id, data.id, locally_echoed);\n    }\n\n    function error(response) {\n        // If we're not local echo'ing messages, or if this message was not\n        // locally echoed, show error in compose box\n        if (!locally_echoed) {\n            compose_banner.show_error_message(\n                response,\n                compose_banner.CLASSNAMES.generic_compose_error,\n                $(\"#compose-textarea\"),\n            );\n            return;\n        }\n\n        echo.message_send_error(message.id, response);\n\n        // We might not have updated the draft count because we assumed the\n        // message would send. Ensure that the displayed count is correct.\n        drafts.sync_count();\n    }\n\n    transmit.send_message(request, success, error);\n    server_events.assert_get_events_running(\n        \"Restarting get_events because it was not running during send\",\n    );\n\n    if (locally_echoed) {\n        clear_compose_box();\n    }\n}\n\nexport function enter_with_preview_open(ctrl_pressed = false) {\n    if (\n        (user_settings.enter_sends && !ctrl_pressed) ||\n        (!user_settings.enter_sends && ctrl_pressed)\n    ) {\n        // If this enter should send, we attempt to send the message.\n        finish();\n    } else {\n        // Otherwise, we return to the normal compose state.\n        clear_preview_area();\n    }\n}\n\nexport function finish() {\n    clear_preview_area();\n    clear_invites();\n    clear_private_stream_alert();\n    notifications.clear_compose_notifications();\n\n    const message_content = compose_state.message_content();\n\n    // Skip normal validation for zcommands, since they aren't\n    // actual messages with recipients; users only send them\n    // from the compose box for convenience sake.\n    if (zcommand.process(message_content)) {\n        do_post_send_tasks();\n        clear_compose_box();\n        return undefined;\n    }\n\n    compose_ui.show_compose_spinner();\n\n    if (!compose_validate.validate()) {\n        // If the message failed validation, hide compose spinner.\n        compose_ui.hide_compose_spinner();\n        return false;\n    }\n\n    if (reminder.is_deferred_delivery(message_content)) {\n        reminder.schedule_message();\n    } else {\n        send_message();\n    }\n    do_post_send_tasks();\n    return true;\n}\n\nexport function do_post_send_tasks() {\n    clear_preview_area();\n    // TODO: Do we want to fire the event even if the send failed due\n    // to a server-side error?\n    $(document).trigger(\"compose_finished.zulip\");\n}\n\nexport function update_email(user_id, new_email) {\n    let reply_to = compose_state.private_message_recipient();\n\n    if (!reply_to) {\n        return;\n    }\n\n    reply_to = people.update_email_in_reply_to(reply_to, user_id, new_email);\n\n    compose_state.private_message_recipient(reply_to);\n}\n\nfunction insert_video_call_url(url, target_textarea) {\n    const link_text = $t({defaultMessage: \"Click to join video call\"});\n    compose_ui.insert_syntax_and_focus(`[${link_text}](${url})`, target_textarea);\n}\n\nexport function render_and_show_preview($preview_spinner, $preview_content_box, content) {\n    function show_preview(rendered_content, raw_content) {\n        // content is passed to check for status messages (\"/me ...\")\n        // and will be undefined in case of errors\n        let rendered_preview_html;\n        if (raw_content !== undefined && markdown.is_status_message(raw_content)) {\n            // Handle previews of /me messages\n            rendered_preview_html =\n                \"<p><strong>\" +\n                _.escape(page_params.full_name) +\n                \"</strong>\" +\n                rendered_content.slice(\"<p>/me\".length);\n        } else {\n            rendered_preview_html = rendered_content;\n        }\n\n        $preview_content_box.html(util.clean_user_content_links(rendered_preview_html));\n        rendered_markdown.update_elements($preview_content_box);\n    }\n\n    if (content.length === 0) {\n        show_preview($t_html({defaultMessage: \"Nothing to preview\"}));\n    } else {\n        if (markdown.contains_backend_only_syntax(content)) {\n            const $spinner = $preview_spinner.expectOne();\n            loading.make_indicator($spinner);\n        } else {\n            // For messages that don't appear to contain syntax that\n            // is only supported by our backend Markdown processor, we\n            // render using the frontend Markdown processor (but still\n            // render server-side to ensure the preview is accurate;\n            // if the `markdown.contains_backend_only_syntax` logic is\n            // wrong, users will see a brief flicker of the locally\n            // echoed frontend rendering before receiving the\n            // authoritative backend rendering from the server).\n            const message_obj = {\n                raw_content: content,\n            };\n            markdown.apply_markdown(message_obj);\n        }\n        channel.post({\n            url: \"/json/messages/render\",\n            data: {content},\n            success(response_data) {\n                if (markdown.contains_backend_only_syntax(content)) {\n                    loading.destroy_indicator($preview_spinner);\n                }\n                show_preview(response_data.rendered, content);\n            },\n            error() {\n                if (markdown.contains_backend_only_syntax(content)) {\n                    loading.destroy_indicator($preview_spinner);\n                }\n                show_preview($t_html({defaultMessage: \"Failed to generate preview\"}));\n            },\n        });\n    }\n}\n\nexport function initialize() {\n    $(\"#below-compose-content .video_link\").toggle(compute_show_video_chat_button());\n    $(\n        \"#stream_message_recipient_stream,#stream_message_recipient_topic,#private_message_recipient\",\n    ).on(\"keyup\", update_on_recipient_change);\n    $(\n        \"#stream_message_recipient_stream,#stream_message_recipient_topic,#private_message_recipient\",\n    ).on(\"change\", update_on_recipient_change);\n    $(\"#compose-textarea\").on(\"keydown\", (event) => {\n        compose_ui.handle_keydown(event, $(\"#compose-textarea\").expectOne());\n    });\n    $(\"#compose-textarea\").on(\"keyup\", (event) => {\n        compose_ui.handle_keyup(event, $(\"#compose-textarea\").expectOne());\n    });\n\n    $(\"#compose-textarea\").on(\"input propertychange\", () => {\n        compose_validate.warn_if_topic_resolved(false);\n        const compose_text_length = compose_validate.check_overflow_text();\n        // Change compose close button tooltip as per condition.\n        // We save compose text in draft only if its length is > 2.\n        if (compose_text_length > 2) {\n            $(\"#compose_close\").attr(\"data-tooltip-template-id\", \"compose_close_and_save_tooltip\");\n        } else {\n            $(\"#compose_close\").attr(\"data-tooltip-template-id\", \"compose_close_tooltip\");\n        }\n    });\n\n    $(\"#compose form\").on(\"submit\", (e) => {\n        e.preventDefault();\n        finish();\n    });\n\n    resize.watch_manual_resize(\"#compose-textarea\");\n\n    // Update position of scroll to bottom button based on\n    // height of the compose box.\n    const update_scroll_to_bottom_position = new ResizeObserver(() => {\n        $(\"#scroll-to-bottom-button-container\").css(\"bottom\", $(\"#compose\").outerHeight());\n    });\n    update_scroll_to_bottom_position.observe(document.querySelector(\"#compose\"));\n\n    upload.feature_check($(\"#compose .compose_upload_file\"));\n\n    $(\"#compose_banners\").on(\n        \"click\",\n        `.${compose_banner.CLASSNAMES.wildcard_warning} .compose_banner_action_button`,\n        (event) => {\n            event.preventDefault();\n            compose_validate.clear_wildcard_warnings();\n            compose_validate.set_user_acknowledged_wildcard_flag(true);\n            finish();\n        },\n    );\n\n    const user_not_subscribed_classname = `.${compose_banner.CLASSNAMES.user_not_subscribed}`;\n    $(\"#compose_banners\").on(\n        \"click\",\n        `${user_not_subscribed_classname} .compose_banner_action_button`,\n        (event) => {\n            event.preventDefault();\n\n            const stream_name = $(\"#stream_message_recipient_stream\").val();\n            if (stream_name === undefined) {\n                return;\n            }\n            const sub = stream_data.get_sub(stream_name);\n            stream_settings_ui.sub_or_unsub(sub);\n            $(user_not_subscribed_classname).remove();\n        },\n    );\n\n    $(\"#compose_banners\").on(\n        \"click\",\n        `.${compose_banner.CLASSNAMES.topic_resolved} .compose_banner_action_button`,\n        (event) => {\n            event.preventDefault();\n\n            const $target = $(event.target).parents(\".compose_banner\");\n            const stream_id = Number.parseInt($target.attr(\"data-stream-id\"), 10);\n            const topic_name = $target.attr(\"data-topic-name\");\n\n            message_edit.with_first_message_id(stream_id, topic_name, (message_id) => {\n                message_edit.toggle_resolve_topic(message_id, topic_name);\n                compose_validate.clear_topic_resolved_warning(true);\n            });\n        },\n    );\n\n    $(\"#compose_banners\").on(\n        \"click\",\n        `.${compose_banner.CLASSNAMES.recipient_not_subscribed} .compose_banner_action_button`,\n        (event) => {\n            event.preventDefault();\n\n            const $invite_row = $(event.target).parents(\".compose_banner\");\n\n            const user_id = Number.parseInt($invite_row.data(\"user-id\"), 10);\n            const stream_id = Number.parseInt($invite_row.data(\"stream-id\"), 10);\n\n            function success() {\n                $invite_row.remove();\n            }\n\n            function failure(error_msg) {\n                clear_invites();\n                compose_banner.show_error_message(\n                    error_msg,\n                    compose_banner.CLASSNAMES.generic_compose_error,\n                    $(\"#compose-textarea\"),\n                );\n                $(event.target).prop(\"disabled\", true);\n            }\n\n            function xhr_failure(xhr) {\n                const error = JSON.parse(xhr.responseText);\n                failure(error.msg);\n            }\n\n            const sub = sub_store.get(stream_id);\n\n            subscriber_api.add_user_ids_to_stream([user_id], sub, success, xhr_failure);\n        },\n    );\n\n    for (const classname of Object.values(compose_banner.CLASSNAMES)) {\n        const classname_selector = `.${classname}`;\n        $(\"#compose_banners\").on(\n            \"click\",\n            `${classname_selector} .compose_banner_close_button`,\n            (event) => {\n                event.preventDefault();\n                $(event.target).parents(classname_selector).remove();\n            },\n        );\n    }\n\n    // Click event binding for \"Attach files\" button\n    // Triggers a click on a hidden file input field\n\n    $(\"#compose\").on(\"click\", \".compose_upload_file\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        $(\"#compose .file_input\").trigger(\"click\");\n    });\n\n    $(\"body\").on(\"click\", \".video_link\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        let $target_textarea;\n        let edit_message_id;\n        if ($(e.target).parents(\".message_edit_form\").length === 1) {\n            edit_message_id = rows.id($(e.target).parents(\".message_row\"));\n            $target_textarea = $(`#edit_form_${CSS.escape(edit_message_id)} .message_edit_content`);\n        }\n\n        let video_call_link;\n        const available_providers = page_params.realm_available_video_chat_providers;\n        const show_video_chat_button = compute_show_video_chat_button();\n\n        if (!show_video_chat_button) {\n            return;\n        }\n\n        if (\n            available_providers.zoom &&\n            page_params.realm_video_chat_provider === available_providers.zoom.id\n        ) {\n            abort_video_callbacks(edit_message_id);\n            const key = edit_message_id || \"\";\n\n            const make_zoom_call = () => {\n                video_call_xhrs.set(\n                    key,\n                    channel.post({\n                        url: \"/json/calls/zoom/create\",\n                        success(res) {\n                            video_call_xhrs.delete(key);\n                            insert_video_call_url(res.url, $target_textarea);\n                        },\n                        error(xhr, status) {\n                            video_call_xhrs.delete(key);\n                            if (\n                                status === \"error\" &&\n                                xhr.responseJSON &&\n                                xhr.responseJSON.code === \"INVALID_ZOOM_TOKEN\"\n                            ) {\n                                page_params.has_zoom_token = false;\n                            }\n                            if (status !== \"abort\") {\n                                ui_report.generic_embed_error(\n                                    $t_html({defaultMessage: \"Failed to create video call.\"}),\n                                );\n                            }\n                        },\n                    }),\n                );\n            };\n\n            if (page_params.has_zoom_token) {\n                make_zoom_call();\n            } else {\n                zoom_token_callbacks.set(key, make_zoom_call);\n                window.open(\n                    window.location.protocol + \"//\" + window.location.host + \"/calls/zoom/register\",\n                    \"_blank\",\n                    \"width=800,height=500,noopener,noreferrer\",\n                );\n            }\n        } else if (\n            available_providers.big_blue_button &&\n            page_params.realm_video_chat_provider === available_providers.big_blue_button.id\n        ) {\n            const meeting_name = get_recipient_label() + \" meeting\";\n            channel.get({\n                url: \"/json/calls/bigbluebutton/create\",\n                data: {\n                    meeting_name,\n                },\n                success(response) {\n                    insert_video_call_url(response.url, $target_textarea);\n                },\n            });\n        } else {\n            const video_call_id = util.random_int(100000000000000, 999999999999999);\n            video_call_link = page_params.jitsi_server_url + \"/\" + video_call_id;\n            insert_video_call_url(video_call_link, $target_textarea);\n        }\n    });\n\n    $(\"body\").on(\"click\", \".time_pick\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        $(e.target).toggleClass(\"has_popover\");\n\n        let $target_textarea;\n        let edit_message_id;\n        const compose_click_target = compose_ui.get_compose_click_target(e);\n        if ($(compose_click_target).parents(\".message_edit_form\").length === 1) {\n            edit_message_id = rows.id($(compose_click_target).parents(\".message_row\"));\n            $target_textarea = $(`#edit_form_${CSS.escape(edit_message_id)} .message_edit_content`);\n        } else {\n            $target_textarea = $(compose_click_target).closest(\"form\").find(\"textarea\");\n        }\n\n        if ($(e.target).hasClass(\"has_popover\")) {\n            const on_timestamp_selection = (val) => {\n                const timestr = `<time:${val}> `;\n                compose_ui.insert_syntax_and_focus(timestr, $target_textarea);\n            };\n\n            flatpickr.show_flatpickr(\n                $(compose_click_target)[0],\n                on_timestamp_selection,\n                new Date(),\n                {\n                    // place the time picker above the icon and center it horizontally\n                    position: \"above center\",\n                },\n            );\n        }\n    });\n\n    $(\"#compose\").on(\"click\", \".markdown_preview\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const content = $(\"#compose-textarea\").val();\n        $(\"#compose-textarea\").hide();\n        $(\"#compose .markdown_preview\").hide();\n        $(\"#compose .undo_markdown_preview\").show();\n        $(\"#compose .undo_markdown_preview\").trigger(\"focus\");\n        $(\"#compose .preview_message_area\").show();\n\n        render_and_show_preview(\n            $(\"#compose .markdown_preview_spinner\"),\n            $(\"#compose .preview_content\"),\n            content,\n        );\n    });\n\n    $(\"#compose\").on(\"click\", \".undo_markdown_preview\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        clear_preview_area();\n    });\n\n    $(\"#compose\").on(\"click\", \".expand_composebox_button\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        compose_ui.make_compose_box_full_size();\n    });\n\n    $(\"#compose\").on(\"click\", \".narrow_to_compose_recipients\", (e) => {\n        e.preventDefault();\n        narrow.to_compose_target();\n    });\n\n    $(\"#compose\").on(\"click\", \".collapse_composebox_button\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        compose_ui.make_compose_box_original_size();\n    });\n\n    uppy = upload.setup_upload({\n        mode: \"compose\",\n    });\n\n    $(\"#compose-textarea\").on(\"focus\", () => {\n        compose_actions.update_placeholder_text();\n    });\n\n    $(\"#stream_message_recipient_topic\").on(\"focus\", () => {\n        compose_actions.update_placeholder_text();\n    });\n\n    $(\"body\").on(\"click\", \".formatting_button\", (e) => {\n        const $compose_click_target = $(compose_ui.get_compose_click_target(e));\n        const $textarea = $compose_click_target.closest(\"form\").find(\"textarea\");\n        const format_type = $(e.target).attr(\"data-format-type\");\n        compose_ui.format_text($textarea, format_type);\n        $textarea.trigger(\"focus\");\n        e.preventDefault();\n        e.stopPropagation();\n    });\n\n    if (page_params.narrow !== undefined) {\n        if (page_params.narrow_topic !== undefined) {\n            compose_actions.start(\"stream\", {topic: page_params.narrow_topic});\n        } else {\n            compose_actions.start(\"stream\", {});\n        }\n    }\n}\n","import autosize from \"autosize\";\nimport $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport * as fenced_code from \"../shared/js/fenced_code\";\n\nimport * as channel from \"./channel\";\nimport * as common from \"./common\";\nimport * as compose from \"./compose\";\nimport * as compose_banner from \"./compose_banner\";\nimport * as compose_fade from \"./compose_fade\";\nimport * as compose_pm_pill from \"./compose_pm_pill\";\nimport * as compose_state from \"./compose_state\";\nimport * as compose_ui from \"./compose_ui\";\nimport * as compose_validate from \"./compose_validate\";\nimport * as drafts from \"./drafts\";\nimport * as hash_util from \"./hash_util\";\nimport {$t} from \"./i18n\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_viewport from \"./message_viewport\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as notifications from \"./notifications\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as recent_topics_ui from \"./recent_topics_ui\";\nimport * as recent_topics_util from \"./recent_topics_util\";\nimport * as reload_state from \"./reload_state\";\nimport * as resize from \"./resize\";\nimport * as settings_config from \"./settings_config\";\nimport * as spectators from \"./spectators\";\nimport * as stream_bar from \"./stream_bar\";\nimport * as stream_data from \"./stream_data\";\nimport * as unread_ops from \"./unread_ops\";\nimport * as util from \"./util\";\n\nexport function blur_compose_inputs() {\n    $(\".message_comp\").find(\"input, textarea, button, #private_message_recipient\").trigger(\"blur\");\n}\n\nfunction hide_box() {\n    // This is the main hook for saving drafts when closing the compose box.\n    drafts.update_draft();\n    blur_compose_inputs();\n    $(\"#stream-message\").hide();\n    $(\"#private-message\").hide();\n    $(\".new_message_textarea\").css(\"min-height\", \"\");\n    compose_fade.clear_compose();\n    $(\".message_comp\").hide();\n    $(\"#compose_controls\").show();\n}\n\nfunction get_focus_area(msg_type, opts) {\n    // Set focus to \"Topic\" when narrowed to a stream+topic and \"New topic\" button clicked.\n    if (msg_type === \"stream\" && opts.stream && !opts.topic) {\n        return \"#stream_message_recipient_topic\";\n    } else if (\n        (msg_type === \"stream\" && opts.stream) ||\n        (msg_type === \"private\" && opts.private_message_recipient)\n    ) {\n        if (opts.trigger === \"new topic button\") {\n            return \"#stream_message_recipient_topic\";\n        }\n        return \"#compose-textarea\";\n    }\n\n    if (msg_type === \"stream\") {\n        return \"#stream_message_recipient_stream\";\n    }\n    return \"#private_message_recipient\";\n}\n\n// Export for testing\nexport const _get_focus_area = get_focus_area;\n\nexport function set_focus(msg_type, opts) {\n    const focus_area = get_focus_area(msg_type, opts);\n    if (window.getSelection().toString() === \"\" || opts.trigger !== \"message click\") {\n        const $elt = $(focus_area);\n        $elt.trigger(\"focus\").trigger(\"select\");\n    }\n}\n\nfunction show_compose_box(msg_type, opts) {\n    if (msg_type === \"stream\") {\n        $(\"#private-message\").hide();\n        $(\"#stream-message\").show();\n        $(\"#stream_toggle\").addClass(\"active\");\n        $(\"#private_message_toggle\").removeClass(\"active\");\n    } else {\n        $(\"#private-message\").show();\n        $(\"#stream-message\").hide();\n        $(\"#stream_toggle\").removeClass(\"active\");\n        $(\"#private_message_toggle\").addClass(\"active\");\n    }\n    $(\"#compose-send-status\").removeClass(common.status_classes).hide();\n    compose_banner.clear_errors();\n    compose_banner.clear_warnings();\n    $(\"#compose\").css({visibility: \"visible\"});\n    // When changing this, edit the 42px in _maybe_autoscroll\n    $(\".new_message_textarea\").css(\"min-height\", \"3em\");\n\n    set_focus(msg_type, opts);\n}\n\nexport function clear_textarea() {\n    $(\"#compose\").find(\"input[type=text], textarea\").val(\"\");\n}\n\nfunction clear_box() {\n    compose.clear_invites();\n\n    // TODO: Better encapsulate at-mention warnings.\n    compose_validate.clear_topic_resolved_warning();\n    compose_validate.clear_wildcard_warnings();\n    compose.clear_private_stream_alert();\n    compose_validate.set_user_acknowledged_wildcard_flag(undefined);\n\n    compose.clear_preview_area();\n    clear_textarea();\n    compose_validate.check_overflow_text();\n    $(\"#compose-textarea\").removeData(\"draft-id\");\n    compose_ui.autosize_textarea($(\"#compose-textarea\"));\n    $(\"#compose-send-status\").hide(0);\n    compose_banner.clear_errors();\n    compose_banner.clear_warnings();\n}\n\nexport function autosize_message_content() {\n    if (!compose_ui.is_full_size()) {\n        autosize($(\"#compose-textarea\"), {\n            callback() {\n                maybe_scroll_up_selected_message();\n            },\n        });\n    }\n}\n\nexport function expand_compose_box() {\n    $(\"#compose_close\").show();\n    $(\"#compose_controls\").hide();\n    $(\".message_comp\").show();\n}\n\nfunction composing_to_current_topic_narrow() {\n    return (\n        util.lower_same(compose_state.stream_name(), narrow_state.stream() || \"\") &&\n        util.lower_same(compose_state.topic(), narrow_state.topic() || \"\")\n    );\n}\n\nfunction composing_to_current_private_message_narrow() {\n    const compose_state_recipient = compose_state.private_message_recipient();\n    const narrow_state_recipient = narrow_state.pm_emails_string();\n    return (\n        compose_state_recipient &&\n        narrow_state_recipient &&\n        _.isEqual(\n            compose_state_recipient\n                .split(\",\")\n                .map((s) => s.trim())\n                .sort(),\n            narrow_state_recipient\n                .split(\",\")\n                .map((s) => s.trim())\n                .sort(),\n        )\n    );\n}\n\nexport function update_narrow_to_recipient_visibility() {\n    const message_type = compose_state.get_message_type();\n    if (message_type === \"stream\") {\n        const stream_name = compose_state.stream_name();\n        const stream_exists = Boolean(stream_data.get_stream_id(stream_name));\n\n        if (\n            stream_exists &&\n            !composing_to_current_topic_narrow() &&\n            compose_state.has_full_recipient()\n        ) {\n            $(\".narrow_to_compose_recipients\").toggleClass(\"invisible\", false);\n            return;\n        }\n    } else if (message_type === \"private\") {\n        const recipients = compose_state.private_message_recipient();\n        if (\n            recipients &&\n            !composing_to_current_private_message_narrow() &&\n            compose_state.has_full_recipient()\n        ) {\n            $(\".narrow_to_compose_recipients\").toggleClass(\"invisible\", false);\n            return;\n        }\n    }\n    $(\".narrow_to_compose_recipients\").toggleClass(\"invisible\", true);\n}\n\nexport function complete_starting_tasks(msg_type, opts) {\n    // This is sort of a kitchen sink function, and it's called only\n    // by compose.start() for now.  Having this as a separate function\n    // makes testing a bit easier.\n\n    maybe_scroll_up_selected_message();\n    compose_fade.start_compose(msg_type);\n    stream_bar.decorate(opts.stream, $(\"#stream-message .message_header_stream\"), true);\n    $(document).trigger(new $.Event(\"compose_started.zulip\", opts));\n    update_placeholder_text();\n    update_narrow_to_recipient_visibility();\n}\n\nexport function maybe_scroll_up_selected_message() {\n    // If the compose box is obscuring the currently selected message,\n    // scroll up until the message is no longer occluded.\n    if (message_lists.current.selected_id() === -1) {\n        // If there's no selected message, there's no need to\n        // scroll the compose box to avoid it.\n        return;\n    }\n    const $selected_row = message_lists.current.selected_row();\n\n    if ($selected_row.height() > message_viewport.height() - 100) {\n        // For very tall messages whose height is close to the entire\n        // height of the viewport, don't auto-scroll the viewport to\n        // the end of the message (since that makes it feel annoying\n        // to work with very tall messages).  See #8941 for details.\n        return;\n    }\n\n    const cover = $selected_row.offset().top + $selected_row.height() - $(\"#compose\").offset().top;\n    if (cover > 0) {\n        message_viewport.user_initiated_animate_scroll(cover + 20);\n    }\n}\n\nfunction fill_in_opts_from_current_narrowed_view(msg_type, opts) {\n    return {\n        message_type: msg_type,\n        stream: \"\",\n        topic: \"\",\n        private_message_recipient: \"\",\n        trigger: \"unknown\",\n\n        // Set default parameters based on the current narrowed view.\n        ...narrow_state.set_compose_defaults(),\n\n        // Set parameters based on provided opts, overwriting\n        // those set based on current narrowed view, if necessary.\n        ...opts,\n    };\n}\n\nfunction same_recipient_as_before(msg_type, opts) {\n    return (\n        compose_state.get_message_type() === msg_type &&\n        ((msg_type === \"stream\" &&\n            opts.stream === compose_state.stream_name() &&\n            opts.topic === compose_state.topic()) ||\n            (msg_type === \"private\" &&\n                opts.private_message_recipient === compose_state.private_message_recipient()))\n    );\n}\n\nexport function update_placeholder_text() {\n    // Change compose placeholder text only if compose box is open.\n    if (!$(\"#compose-textarea\").is(\":visible\")) {\n        return;\n    }\n\n    const opts = {\n        message_type: compose_state.get_message_type(),\n        stream: compose_state.stream_name(),\n        topic: compose_state.topic(),\n        private_message_recipient: compose_pm_pill.get_emails(),\n    };\n\n    $(\"#compose-textarea\").attr(\"placeholder\", compose_ui.compute_placeholder_text(opts));\n}\n\nexport function start(msg_type, opts) {\n    if (page_params.is_spectator) {\n        spectators.login_to_access();\n        return;\n    }\n\n    // We may be able to clear it to change the recipient, so save any\n    // existing content as a draft.\n    drafts.update_draft();\n\n    autosize_message_content();\n\n    if (reload_state.is_in_progress()) {\n        return;\n    }\n    notifications.clear_compose_notifications();\n    expand_compose_box();\n\n    opts = fill_in_opts_from_current_narrowed_view(msg_type, opts);\n\n    // If we are invoked by a compose hotkey (c or x) or new topic\n    // button, do not assume that we know what the message's topic or\n    // PM recipient should be.\n    if (\n        opts.trigger === \"compose_hotkey\" ||\n        opts.trigger === \"new topic button\" ||\n        opts.trigger === \"new private message\"\n    ) {\n        opts.topic = \"\";\n        opts.private_message_recipient = \"\";\n    }\n\n    const subbed_streams = stream_data.subscribed_subs();\n    if (\n        subbed_streams.length === 1 &&\n        (opts.trigger === \"new topic button\" ||\n            (opts.trigger === \"compose_hotkey\" && msg_type === \"stream\"))\n    ) {\n        opts.stream = subbed_streams[0].name;\n    }\n\n    if (compose_state.composing() && !same_recipient_as_before(msg_type, opts)) {\n        // Clear the compose box if the existing message is to a different recipient\n        clear_box();\n    }\n\n    // We set the stream/topic/private_message_recipient\n    // unconditionally here, which assumes the caller will have passed\n    // '' or undefined for these values if they are not appropriate\n    // for this message.\n    //\n    // TODO: Move these into a conditional on message_type, using an\n    // explicit \"clear\" function for compose_state.\n    compose_state.set_stream_name(opts.stream);\n    compose_state.topic(opts.topic);\n\n    // Set the recipients with a space after each comma, so it looks nice.\n    compose_state.private_message_recipient(opts.private_message_recipient.replace(/,\\s*/g, \", \"));\n\n    // If the user opens the compose box, types some text, and then clicks on a\n    // different stream/topic, we want to keep the text in the compose box\n    if (opts.content !== undefined) {\n        compose_state.message_content(opts.content);\n    }\n\n    if (opts.draft_id) {\n        $(\"#compose-textarea\").data(\"draft-id\", opts.draft_id);\n    }\n\n    compose_state.set_message_type(msg_type);\n\n    // Show either stream/topic fields or \"You and\" field.\n    show_compose_box(msg_type, opts);\n\n    // Show a warning if topic is resolved\n    compose_validate.warn_if_topic_resolved(true);\n\n    // Reset the `max-height` property of `compose-textarea` so that the\n    // compose-box do not cover the last messages of the current stream\n    // while writing a long message.\n    resize.reset_compose_message_max_height();\n\n    complete_starting_tasks(msg_type, opts);\n}\n\nexport function cancel() {\n    // As user closes the compose box, restore the compose box max height\n    if (compose_ui.is_full_size()) {\n        compose_ui.make_compose_box_original_size();\n    }\n\n    $(\"#compose-textarea\").height(40 + \"px\");\n\n    if (page_params.narrow !== undefined) {\n        // Never close the compose box in narrow embedded windows, but\n        // at least clear the topic and unfade.\n        compose_fade.clear_compose();\n        if (page_params.narrow_topic !== undefined) {\n            compose_state.topic(page_params.narrow_topic);\n        } else {\n            compose_state.topic(\"\");\n        }\n        return;\n    }\n    hide_box();\n    $(\"#compose_close\").hide();\n    clear_box();\n    notifications.clear_compose_notifications();\n    compose.abort_xhr();\n    compose.abort_video_callbacks(undefined);\n    compose_state.set_message_type(false);\n    compose_pm_pill.clear();\n    $(document).trigger(\"compose_canceled.zulip\");\n}\n\nexport function respond_to_message(opts) {\n    let message;\n    let msg_type;\n    if (recent_topics_util.is_visible()) {\n        message = recent_topics_ui.get_focused_row_message();\n        if (message === undefined) {\n            // Open empty compose with nothing pre-filled since\n            // user is not focused on any table row.\n            start(\"stream\", {trigger: \"recent_topics_nofocus\"});\n            return;\n        }\n    } else {\n        message = message_lists.current.selected_message();\n\n        if (message === undefined) {\n            // empty narrow implementation\n            if (\n                !narrow_state.narrowed_by_pm_reply() &&\n                !narrow_state.narrowed_by_stream_reply() &&\n                !narrow_state.narrowed_by_topic_reply()\n            ) {\n                start(\"stream\", {trigger: \"empty_narrow_compose\"});\n                return;\n            }\n            const current_filter = narrow_state.filter();\n            const first_term = current_filter.operators()[0];\n            const first_operator = first_term.operator;\n            const first_operand = first_term.operand;\n\n            if (first_operator === \"stream\" && !stream_data.is_subscribed_by_name(first_operand)) {\n                start(\"stream\", {trigger: \"empty_narrow_compose\"});\n                return;\n            }\n\n            // Set msg_type to stream by default in the case of an empty\n            // home view.\n            msg_type = \"stream\";\n            if (narrow_state.narrowed_by_pm_reply()) {\n                msg_type = \"private\";\n            }\n\n            const new_opts = fill_in_opts_from_current_narrowed_view(msg_type, opts);\n            start(new_opts.message_type, new_opts);\n            return;\n        }\n\n        if (message_lists.current.can_mark_messages_read()) {\n            unread_ops.notify_server_message_read(message);\n        }\n    }\n\n    // Important note: A reply_type of 'personal' is for the R hotkey\n    // (replying to a message's sender with a private message).  All\n    // other replies can just copy message.type.\n    if (opts.reply_type === \"personal\" || message.type === \"private\") {\n        msg_type = \"private\";\n    } else {\n        msg_type = message.type;\n    }\n\n    let stream = \"\";\n    let topic = \"\";\n    let pm_recipient = \"\";\n    if (msg_type === \"stream\") {\n        stream = message.stream;\n        topic = message.topic;\n    } else {\n        pm_recipient = message.reply_to;\n        if (opts.reply_type === \"personal\") {\n            // reply_to for private messages is everyone involved, so for\n            // personals replies we need to set the private message\n            // recipient to just the sender\n            pm_recipient = people.get_by_user_id(message.sender_id).email;\n        } else {\n            pm_recipient = people.pm_reply_to(message);\n        }\n    }\n\n    start(msg_type, {\n        stream,\n        topic,\n        private_message_recipient: pm_recipient,\n        trigger: opts.trigger,\n    });\n}\n\nexport function reply_with_mention(opts) {\n    respond_to_message(opts);\n    const message = message_lists.current.selected_message();\n    const mention = people.get_mention_syntax(message.sender_full_name, message.sender_id);\n    compose_ui.insert_syntax_and_focus(mention);\n}\n\nexport function on_topic_narrow() {\n    if (!compose_state.composing()) {\n        // If our compose box is closed, then just\n        // leave it closed, assuming that the user is\n        // catching up on their feed and not actively\n        // composing.\n        return;\n    }\n\n    if (compose_state.stream_name() !== narrow_state.stream()) {\n        // If we changed streams, then we only leave the\n        // compose box open if there is content.\n        if (compose_state.has_message_content()) {\n            compose_fade.update_message_list();\n            return;\n        }\n\n        // Otherwise, avoid a mix.\n        cancel();\n        return;\n    }\n\n    if (compose_state.topic() && compose_state.has_message_content()) {\n        // If the user has written something to a different topic,\n        // they probably want that content, so leave compose open.\n        //\n        // This effectively uses the heuristic of whether there is\n        // content in compose to determine whether the user had firmly\n        // decided to compose to the old topic or is just looking to\n        // reply to what they see.\n        compose_fade.update_message_list();\n        return;\n    }\n\n    // If we got this far, then the compose box has the correct stream\n    // filled in, and either compose is empty or no topic was set, so\n    // we should update the compose topic to match the new narrow.\n    // See #3300 for context--a couple users specifically asked for\n    // this convenience.\n    compose_state.topic(narrow_state.topic());\n    compose_validate.warn_if_topic_resolved(true);\n    compose_fade.set_focused_recipient(\"stream\");\n    compose_fade.update_message_list();\n    $(\"#compose-textarea\").trigger(\"focus\");\n}\n\nexport function quote_and_reply(opts) {\n    const $textarea = $(\"#compose-textarea\");\n    const message_id = message_lists.current.selected_id();\n    const message = message_lists.current.selected_message();\n    const quoting_placeholder = $t({defaultMessage: \"[Quoting…]\"});\n\n    if (compose_state.has_message_content()) {\n        // The user already started typing a message,\n        // so we won't re-open the compose box.\n        // (If you did re-open the compose box, you\n        // are prone to glitches where you select the\n        // text, plus it's a complicated codepath that\n        // can have other unintended consequences.)\n\n        if ($textarea.caret() !== 0) {\n            // Insert a newline before quoted message if there is\n            // already some content in the compose box and quoted\n            // message is not being inserted at the beginning.\n            $textarea.caret(\"\\n\");\n        }\n    } else {\n        respond_to_message(opts);\n    }\n\n    compose_ui.insert_syntax_and_focus(quoting_placeholder + \"\\n\", $textarea);\n\n    function replace_content(message) {\n        // Final message looks like:\n        //     @_**Iago|5** [said](link to message):\n        //     ```quote\n        //     message content\n        //     ```\n        let content = $t(\n            {defaultMessage: \"{username} [said]({link_to_message}):\"},\n            {\n                username: `@_**${message.sender_full_name}|${message.sender_id}**`,\n                link_to_message: `${hash_util.by_conversation_and_time_url(message)}`,\n            },\n        );\n        content += \"\\n\";\n        const fence = fenced_code.get_unused_fence(message.raw_content);\n        content += `${fence}quote\\n${message.raw_content}\\n${fence}`;\n\n        compose_ui.replace_syntax(quoting_placeholder, content, $textarea);\n        compose_ui.autosize_textarea($(\"#compose-textarea\"));\n    }\n\n    if (message && message.raw_content) {\n        replace_content(message);\n        return;\n    }\n\n    channel.get({\n        url: \"/json/messages/\" + message_id,\n        success(data) {\n            message.raw_content = data.raw_content;\n            replace_content(message);\n        },\n    });\n}\n\nexport function on_narrow(opts) {\n    // We use force_close when jumping between PM narrows with the \"p\" key,\n    // so that we don't have an open compose box that makes it difficult\n    // to cycle quickly through unread messages.\n    if (opts.force_close) {\n        // This closes the compose box if it was already open, and it is\n        // basically a noop otherwise.\n        cancel();\n        return;\n    }\n\n    if (opts.trigger === \"narrow_to_compose_target\") {\n        compose_fade.update_message_list();\n        return;\n    }\n\n    if (narrow_state.narrowed_by_topic_reply()) {\n        on_topic_narrow();\n        return;\n    }\n\n    if (compose_state.has_message_content()) {\n        compose_fade.update_message_list();\n        return;\n    }\n\n    if (narrow_state.narrowed_by_pm_reply()) {\n        opts = fill_in_opts_from_current_narrowed_view(\"private\", opts);\n        // Do not open compose box if an invalid recipient is present.\n        if (!opts.private_message_recipient) {\n            if (compose_state.composing()) {\n                cancel();\n            }\n            return;\n        }\n        // Do not open compose box if organization has disabled sending\n        // private messages and recipient is not a bot.\n        if (\n            page_params.realm_private_message_policy ===\n                settings_config.private_message_policy_values.disabled.code &&\n            opts.private_message_recipient\n        ) {\n            const emails = opts.private_message_recipient.split(\",\");\n            if (emails.length !== 1 || !people.get_by_email(emails[0]).is_bot) {\n                // If we are navigating between private message conversations,\n                // we want the compose box to close for non-bot users.\n                if (compose_state.composing()) {\n                    cancel();\n                }\n                return;\n            }\n        }\n        start(\"private\");\n        return;\n    }\n\n    // If we got this far, then we assume the user is now in \"reading\"\n    // mode, so we close the compose box to make it easier to use navigation\n    // hotkeys and to provide more screen real estate for messages.\n    cancel();\n}\n","import $ from \"jquery\";\n\nimport * as compose_actions from \"./compose_actions\";\nimport {$t} from \"./i18n\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_store from \"./message_store\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as people from \"./people\";\nimport * as recent_topics_util from \"./recent_topics_util\";\n\nexport function get_recipient_label(message) {\n    // TODO: This code path is bit of a type-checking disaster; we mix\n    // actual message objects with fake objects containing just a\n    // couple fields, both those constructed here and potentially\n    // passed in.\n\n    if (message === undefined) {\n        if (message_lists.current.empty()) {\n            // For empty narrows where there's a clear reply target,\n            // i.e. stream+topic or a single PM conversation, we label\n            // the button as replying to the thread.\n            if (narrow_state.narrowed_to_topic()) {\n                message = {\n                    stream: narrow_state.stream(),\n                    topic: narrow_state.topic(),\n                };\n            } else if (narrow_state.pm_ids_string()) {\n                // TODO: This is a total hack.  Ideally, we'd rework\n                // this to not duplicate the actual compose_actions.js\n                // logic for what happens when you click the button,\n                // and not call into random modules with hacky fake\n                // \"message\" objects.\n                const user_ids = people.user_ids_string_to_ids_array(narrow_state.pm_ids_string());\n                const user_ids_dicts = user_ids.map((user_id) => ({id: user_id}));\n                message = {\n                    display_reply_to: message_store.get_pm_full_names({\n                        type: \"private\",\n                        display_recipient: user_ids_dicts,\n                    }),\n                };\n            }\n        } else {\n            message = message_lists.current.selected_message();\n        }\n    }\n\n    if (message) {\n        if (message.stream && message.topic) {\n            return \"#\" + message.stream + \" > \" + message.topic;\n        } else if (message.display_reply_to) {\n            return message.display_reply_to;\n        }\n    }\n    return \"\";\n}\n\nfunction update_stream_button(btn_text, title) {\n    $(\"#left_bar_compose_stream_button_big\").text(btn_text);\n    $(\"#left_bar_compose_stream_button_big\").prop(\"title\", title);\n}\n\nfunction update_conversation_button(btn_text, title) {\n    $(\"#left_bar_compose_private_button_big\").text(btn_text);\n    $(\"#left_bar_compose_private_button_big\").prop(\"title\", title);\n}\n\nfunction update_buttons(text_stream) {\n    const title_stream = text_stream + \" (c)\";\n    const text_conversation = $t({defaultMessage: \"New private message\"});\n    const title_conversation = text_conversation + \" (x)\";\n    update_stream_button(text_stream, title_stream);\n    update_conversation_button(text_conversation, title_conversation);\n}\n\nexport function update_buttons_for_private() {\n    const text_stream = $t({defaultMessage: \"New stream message\"});\n    update_buttons(text_stream);\n}\n\nexport function update_buttons_for_stream() {\n    const text_stream = $t({defaultMessage: \"New topic\"});\n    update_buttons(text_stream);\n}\n\nexport function update_buttons_for_recent_topics() {\n    const text_stream = $t({defaultMessage: \"New stream message\"});\n    update_buttons(text_stream);\n}\n\nfunction set_reply_button_label(label) {\n    $(\".compose_reply_button_label\").text(label);\n}\n\nexport function set_standard_text_for_reply_button() {\n    set_reply_button_label($t({defaultMessage: \"Compose message\"}));\n}\n\nexport function update_reply_recipient_label(message) {\n    const recipient_label = get_recipient_label(message);\n    if (recipient_label) {\n        set_reply_button_label(\n            $t({defaultMessage: \"Message {recipient_label}\"}, {recipient_label}),\n        );\n    } else {\n        set_standard_text_for_reply_button();\n    }\n}\n\nexport function initialize() {\n    // When the message selection changes, change the label on the Reply button.\n    $(document).on(\"message_selected.zulip\", () => {\n        if (recent_topics_util.is_visible()) {\n            // message_selected events can occur with recent topics\n            // open due to \"All messages\" loading in the background,\n            // so we return without calling changing button state.\n            return;\n        }\n\n        update_reply_recipient_label();\n    });\n\n    // Click handlers for buttons in the compose box.\n    $(\"body\").on(\"click\", \".compose_stream_button\", () => {\n        compose_actions.start(\"stream\", {trigger: \"new topic button\"});\n    });\n\n    $(\"body\").on(\"click\", \".compose_private_button\", () => {\n        compose_actions.start(\"private\", {trigger: \"new private message\"});\n    });\n\n    $(\"body\").on(\"click\", \".compose_reply_button\", () => {\n        compose_actions.respond_to_message({trigger: \"reply button\"});\n    });\n}\n","import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport {buddy_list} from \"./buddy_list\";\nimport * as compose_fade_helper from \"./compose_fade_helper\";\nimport * as compose_fade_users from \"./compose_fade_users\";\nimport * as compose_state from \"./compose_state\";\nimport * as floating_recipient_bar from \"./floating_recipient_bar\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_viewport from \"./message_viewport\";\nimport * as people from \"./people\";\nimport * as rows from \"./rows\";\nimport * as stream_data from \"./stream_data\";\nimport * as util from \"./util\";\n\nlet normal_display = false;\n\nexport function set_focused_recipient(msg_type) {\n    if (msg_type === undefined) {\n        compose_fade_helper.clear_focused_recipient();\n    }\n\n    // Construct focused_recipient as a mocked up element which has all the\n    // fields of a message used by util.same_recipient()\n    const focused_recipient = {\n        type: msg_type,\n    };\n\n    if (focused_recipient.type === \"stream\") {\n        const stream_name = compose_state.stream_name();\n        focused_recipient.topic = compose_state.topic();\n        focused_recipient.stream = stream_name;\n        const sub = stream_data.get_sub(stream_name);\n        if (sub) {\n            focused_recipient.stream_id = sub.stream_id;\n        }\n    } else {\n        // Normalize the recipient list so it matches the one used when\n        // adding the message (see message_helper.process_new_message()).\n        const reply_to = util.normalize_recipients(compose_state.private_message_recipient());\n        focused_recipient.reply_to = reply_to;\n        focused_recipient.to_user_ids = people.reply_to_to_user_ids_string(reply_to);\n    }\n\n    compose_fade_helper.set_focused_recipient(focused_recipient);\n}\n\nfunction display_messages_normally() {\n    const $table = rows.get_table(message_lists.current.table_name);\n    $table.find(\".recipient_row\").removeClass(\"message-fade\");\n\n    normal_display = true;\n    floating_recipient_bar.update();\n}\n\nfunction change_fade_state($elt, should_fade_group) {\n    if (should_fade_group) {\n        $elt.addClass(\"message-fade\");\n    } else {\n        $elt.removeClass(\"message-fade\");\n    }\n}\n\nfunction fade_messages() {\n    let i;\n    let first_message;\n    let $first_row;\n    let should_fade_group = false;\n    const visible_groups = message_viewport.visible_groups(false);\n\n    normal_display = false;\n\n    // Update the visible messages first, before the compose box opens\n    for (i = 0; i < visible_groups.length; i += 1) {\n        $first_row = rows.first_message_in_group(visible_groups[i]);\n        first_message = message_lists.current.get(rows.id($first_row));\n        should_fade_group = compose_fade_helper.should_fade_message(first_message);\n\n        change_fade_state($(visible_groups[i]), should_fade_group);\n    }\n\n    // Defer updating all message groups so that the compose box can open sooner\n    setTimeout(\n        (expected_msg_list, expected_recipient) => {\n            const all_groups = rows\n                .get_table(message_lists.current.table_name)\n                .find(\".recipient_row\");\n\n            if (\n                message_lists.current !== expected_msg_list ||\n                !compose_state.composing() ||\n                compose_state.private_message_recipient() !== expected_recipient\n            ) {\n                return;\n            }\n\n            should_fade_group = false;\n\n            // Note: The below algorithm relies on the fact that all_elts is\n            // sorted as it would be displayed in the message view\n            for (i = 0; i < all_groups.length; i += 1) {\n                const $group_elt = $(all_groups[i]);\n                should_fade_group = compose_fade_helper.should_fade_message(\n                    rows.recipient_from_group($group_elt),\n                );\n                change_fade_state($group_elt, should_fade_group);\n            }\n\n            floating_recipient_bar.update();\n        },\n        0,\n        message_lists.current,\n        compose_state.private_message_recipient(),\n    );\n}\n\nconst user_fade_config = {\n    get_user_id($li) {\n        return buddy_list.get_key_from_li({$li});\n    },\n    fade($li) {\n        return $li.addClass(\"user-fade\");\n    },\n    unfade($li) {\n        return $li.removeClass(\"user-fade\");\n    },\n};\n\nfunction do_update_all() {\n    const user_items = buddy_list.get_items();\n\n    if (compose_fade_helper.want_normal_display()) {\n        if (!normal_display) {\n            display_messages_normally();\n            compose_fade_users.display_users_normally(user_items, user_fade_config);\n        }\n    } else {\n        fade_messages();\n        compose_fade_users.fade_users(user_items, user_fade_config);\n    }\n}\n\n// This one only updates the users, not both, like update_faded_messages.\n// This is for when new presence information comes in, redrawing the presence\n// list.\nexport function update_faded_users() {\n    const user_items = buddy_list.get_items();\n\n    compose_fade_users.update_user_info(user_items, user_fade_config);\n}\n\n// This gets called on keyup events, hence the throttling.\nexport const update_all = _.debounce(do_update_all, 50);\n\nexport function start_compose(msg_type) {\n    set_focused_recipient(msg_type);\n    do_update_all();\n}\n\nexport function clear_compose() {\n    compose_fade_helper.clear_focused_recipient();\n    display_messages_normally();\n    update_faded_users();\n}\n\nexport function update_message_list() {\n    if (compose_fade_helper.want_normal_display()) {\n        display_messages_normally();\n    } else {\n        fade_messages();\n    }\n}\n\nexport function update_rendered_message_groups(message_groups, get_element) {\n    if (compose_fade_helper.want_normal_display()) {\n        return;\n    }\n\n    // This loop is superficially similar to some code in fade_messages, but an\n    // important difference here is that we look at each message individually, whereas\n    // the other code takes advantage of blocks beneath recipient bars.\n    for (const message_group of message_groups) {\n        const $elt = get_element(message_group);\n        const first_message = message_group.message_containers[0].msg;\n        const should_fade = compose_fade_helper.should_fade_message(first_message);\n        change_fade_state($elt, should_fade);\n    }\n}\n","import * as stream_data from \"./stream_data\";\nimport * as sub_store from \"./sub_store\";\nimport * as util from \"./util\";\n\nlet focused_recipient;\n\nexport function should_fade_message(message) {\n    return !util.same_recipient(focused_recipient, message);\n}\n\nexport function clear_focused_recipient() {\n    focused_recipient = undefined;\n}\n\nexport function set_focused_recipient(recipient) {\n    focused_recipient = recipient;\n}\n\nfunction is_pm_recipient(user_id) {\n    const recipients = focused_recipient.to_user_ids.split(\",\");\n    return recipients.includes(user_id.toString());\n}\n\nexport function would_receive_message(user_id) {\n    if (focused_recipient.type === \"stream\") {\n        const sub = sub_store.get(focused_recipient.stream_id);\n        if (!sub) {\n            // If the stream isn't valid, there is no risk of a mix\n            // yet, so we sort of \"lie\" and say they would receive a\n            // message.\n            return true;\n        }\n\n        return stream_data.is_user_subscribed(focused_recipient.stream_id, user_id);\n    }\n\n    // PM, so check if the given email is in the recipients list.\n    return is_pm_recipient(user_id);\n}\n\nexport function want_normal_display() {\n    // If we're not composing show a normal display.\n    if (focused_recipient === undefined) {\n        return true;\n    }\n\n    // If the user really hasn't specified anything let, then we want a normal display\n    if (focused_recipient.type === \"stream\") {\n        // If a stream doesn't exist, there is no real chance of a mix, so fading\n        // is just noise to the user.\n        if (!sub_store.get(focused_recipient.stream_id)) {\n            return true;\n        }\n\n        // This is kind of debatable.  If the topic is empty, it could be that\n        // the user simply hasn't started typing it yet, but disabling fading here\n        // means the feature doesn't help realms where topics aren't mandatory\n        // (which is most realms as of this writing).\n        if (focused_recipient.topic === \"\") {\n            return true;\n        }\n    }\n\n    return focused_recipient.type === \"private\" && focused_recipient.reply_to === \"\";\n}\n","import * as compose_fade_helper from \"./compose_fade_helper\";\nimport * as people from \"./people\";\n\nfunction update_user_row_when_fading(li, conf) {\n    const user_id = conf.get_user_id(li);\n    const would_receive = compose_fade_helper.would_receive_message(user_id);\n\n    if (would_receive || people.is_my_user_id(user_id)) {\n        conf.unfade(li);\n    } else {\n        conf.fade(li);\n    }\n}\n\nexport function fade_users(items, conf) {\n    for (const li of items) {\n        update_user_row_when_fading(li, conf);\n    }\n}\n\nexport function display_users_normally(items, conf) {\n    for (const li of items) {\n        conf.unfade(li);\n    }\n}\n\nexport function update_user_info(items, conf) {\n    if (compose_fade_helper.want_normal_display()) {\n        display_users_normally(items, conf);\n    } else {\n        fade_users(items, conf);\n    }\n}\n","import $ from \"jquery\";\n\nimport * as compose_actions from \"./compose_actions\";\nimport * as input_pill from \"./input_pill\";\nimport * as people from \"./people\";\nimport * as user_pill from \"./user_pill\";\nimport * as util from \"./util\";\n\nexport let widget;\n\nconst pill_config = {\n    show_user_status_emoji: true,\n};\n\nexport function initialize_pill() {\n    const $container = $(\"#private_message_recipient\").parent();\n\n    const pill = input_pill.create({\n        $container,\n        pill_config,\n        create_item_from_text: user_pill.create_item_from_email,\n        get_text_from_item: user_pill.get_email_from_item,\n    });\n\n    return pill;\n}\n\nexport function initialize() {\n    widget = initialize_pill();\n\n    widget.onPillCreate(() => {\n        compose_actions.update_placeholder_text();\n    });\n\n    widget.onPillRemove(() => {\n        compose_actions.update_placeholder_text();\n    });\n}\n\nexport function clear() {\n    widget.clear();\n}\n\nexport function set_from_typeahead(person) {\n    user_pill.append_person({\n        pill_widget: widget,\n        person,\n    });\n}\n\nexport function set_from_emails(value) {\n    // value is something like \"alice@example.com,bob@example.com\"\n    clear();\n    widget.appendValue(value);\n}\n\nexport function get_user_ids() {\n    return user_pill.get_user_ids(widget);\n}\n\nexport function has_unconverted_data() {\n    return user_pill.has_unconverted_data(widget);\n}\n\nexport function get_user_ids_string() {\n    const user_ids = get_user_ids();\n    const sorted_user_ids = util.sorted_ids(user_ids);\n    const user_ids_string = sorted_user_ids.join(\",\");\n    return user_ids_string;\n}\n\nexport function get_emails() {\n    // return something like \"alice@example.com,bob@example.com\"\n    const user_ids = get_user_ids();\n    const emails = user_ids.map((id) => people.get_by_user_id(id).email).join(\",\");\n    return emails;\n}\n\nexport function filter_taken_users(persons) {\n    return user_pill.filter_taken_users(persons, widget);\n}\n","import $ from \"jquery\";\n\nimport * as compose_pm_pill from \"./compose_pm_pill\";\n\nlet message_type = false; // 'stream', 'private', or false-y\n\nexport function set_message_type(msg_type) {\n    message_type = msg_type;\n}\n\nexport function get_message_type() {\n    return message_type;\n}\n\nexport function recipient_has_topics() {\n    return message_type !== \"stream\";\n}\n\nexport function composing() {\n    // This is very similar to get_message_type(), but it returns\n    // a boolean.\n    return Boolean(message_type);\n}\n\nfunction get_or_set(fieldname, keep_leading_whitespace) {\n    // We can't hoist the assignment of '$elem' out of this lambda,\n    // because the DOM element might not exist yet when get_or_set\n    // is called.\n    return function (newval) {\n        const $elem = $(`#${CSS.escape(fieldname)}`);\n        const oldval = $elem.val();\n        if (newval !== undefined) {\n            $elem.val(newval);\n        }\n        return keep_leading_whitespace ? oldval.trimEnd() : oldval.trim();\n    };\n}\n\nexport function stream_name() {\n    return $(\"#stream_message_recipient_stream\").val().trim();\n}\n\nexport function set_stream_name(newval) {\n    if (newval !== undefined) {\n        const $elem = $(\"#stream_message_recipient_stream\");\n        $elem.val(newval);\n    }\n}\n\n// TODO: Break out setter and getter into their own functions.\nexport const topic = get_or_set(\"stream_message_recipient_topic\");\n\n// We can't trim leading whitespace in `compose_textarea` because\n// of the indented syntax for multi-line code blocks.\nexport const message_content = get_or_set(\"compose-textarea\", true);\n\nexport function focus_in_empty_compose() {\n    // A user trying to press arrow keys in an empty compose is mostly\n    // likely trying to navigate messages. This helper function\n    // decides whether the compose box is \"empty\" for this purpose.\n    if (!composing() || message_content() !== \"\") {\n        return false;\n    }\n\n    const focused_element_id = document.activeElement.id;\n    if (focused_element_id === \"compose-textarea\") {\n        // Focus will be in the compose textarea after sending a\n        // message; this is the most common situation.\n        return true;\n    }\n\n    // If the current focus is in one of the recipient inputs, we need\n    // to check whether the input is empty, to avoid accidentally\n    // overriding the browser feature where the Up/Down arrow keys jump\n    // you to the start/end of a non-empty text input.\n    //\n    // Check whether the current input element is empty for each input type.\n    switch (focused_element_id) {\n        case \"private_message_recipient\":\n            return private_message_recipient().length === 0;\n        case \"stream_message_recipient_topic\":\n        case \"stream_message_recipient_stream\":\n            return document.activeElement.value === \"\";\n    }\n\n    return false;\n}\n\nexport function private_message_recipient(value) {\n    if (typeof value === \"string\") {\n        compose_pm_pill.set_from_emails(value);\n        return undefined;\n    }\n    return compose_pm_pill.get_emails();\n}\n\nexport function has_message_content() {\n    return message_content() !== \"\";\n}\n\nexport function has_full_recipient() {\n    if (message_type === \"stream\") {\n        return stream_name() !== \"\" && topic() !== \"\";\n    }\n    return private_message_recipient() !== \"\";\n}\n","import autosize from \"autosize\";\nimport $ from \"jquery\";\nimport {insert, replace, set, wrapSelection} from \"text-field-edit\";\n\nimport * as common from \"./common\";\nimport {$t} from \"./i18n\";\nimport * as loading from \"./loading\";\nimport * as people from \"./people\";\nimport * as popover_menus from \"./popover_menus\";\nimport * as rtl from \"./rtl\";\nimport * as user_status from \"./user_status\";\n\nlet full_size_status = false; // true or false\n\n// Some functions to handle the full size status explicitly\nexport function set_full_size(is_full) {\n    full_size_status = is_full;\n}\n\nexport function is_full_size() {\n    return full_size_status;\n}\n\nexport function autosize_textarea($textarea) {\n    // Since this supports both compose and file upload, one must pass\n    // in the text area to autosize.\n    if (!is_full_size()) {\n        autosize.update($textarea);\n    }\n}\n\nexport function smart_insert($textarea, syntax) {\n    function is_space(c) {\n        return c === \" \" || c === \"\\t\" || c === \"\\n\";\n    }\n\n    const pos = $textarea.caret();\n    const before_str = $textarea.val().slice(0, pos);\n    const after_str = $textarea.val().slice(pos);\n\n    if (\n        pos > 0 &&\n        // If there isn't space either at the end of the content\n        // before the insert or (unlikely) at the start of the syntax,\n        // add one.\n        !is_space(before_str.slice(-1)) &&\n        !is_space(syntax[0])\n    ) {\n        syntax = \" \" + syntax;\n    }\n\n    // If there isn't whitespace either at the end of the syntax or the\n    // start of the content after the syntax, add one.\n    if (\n        !(\n            (after_str.length > 0 && is_space(after_str[0])) ||\n            (syntax.length > 0 && is_space(syntax.slice(-1)))\n        )\n    ) {\n        syntax += \" \";\n    }\n\n    // text-field-edit ensures `$textarea` is focused before inserting\n    // the new syntax.\n    insert($textarea[0], syntax);\n\n    autosize_textarea($textarea);\n}\n\nexport function insert_syntax_and_focus(syntax, $textarea = $(\"#compose-textarea\")) {\n    // Generic helper for inserting syntax into the main compose box\n    // where the cursor was and focusing the area.  Mostly a thin\n    // wrapper around smart_insert.\n    smart_insert($textarea, syntax);\n}\n\nexport function replace_syntax(old_syntax, new_syntax, $textarea = $(\"#compose-textarea\")) {\n    // The following couple lines are needed to later restore the initial\n    // logical position of the cursor after the replacement\n    const prev_caret = $textarea.caret();\n    const replacement_offset = $textarea.val().indexOf(old_syntax);\n\n    // Replaces `old_syntax` with `new_syntax` text in the compose box. Due to\n    // the way that JavaScript handles string replacements, if `old_syntax` is\n    // a string it will only replace the first instance. If `old_syntax` is\n    // a RegExp with a global flag, it will replace all instances.\n\n    // We need use anonymous function for `new_syntax` to avoid JavaScript's\n    // replace() function treating `$`s in new_syntax as special syntax.  See\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Description\n    // for details.\n\n    replace($textarea[0], old_syntax, () => new_syntax, \"after-replacement\");\n\n    // When replacing content in a textarea, we need to move the cursor\n    // to preserve its logical position if and only if the content we\n    // just added was before the current cursor position. If it was,\n    // we need to move the cursor forward by the increase in the\n    // length of the content after the replacement.\n    if (prev_caret >= replacement_offset + old_syntax.length) {\n        $textarea.caret(prev_caret + new_syntax.length - old_syntax.length);\n    } else if (prev_caret > replacement_offset) {\n        // In the rare case that our cursor was inside the\n        // placeholder, we treat that as though the cursor was\n        // just after the placeholder.\n        $textarea.caret(replacement_offset + new_syntax.length + 1);\n    } else {\n        // Otherwise we simply restore it to it's original position\n        $textarea.caret(prev_caret);\n    }\n}\n\nexport function compute_placeholder_text(opts) {\n    // Computes clear placeholder text for the compose box, depending\n    // on what heading values have already been filled out.\n    //\n    // We return text with the stream and topic name unescaped,\n    // because the caller is expected to insert this into the\n    // placeholder field in a way that does HTML escaping.\n    if (opts.message_type === \"stream\") {\n        if (opts.topic) {\n            return $t(\n                {defaultMessage: \"Message #{stream_name} > {topic_name}\"},\n                {stream_name: opts.stream, topic_name: opts.topic},\n            );\n        } else if (opts.stream) {\n            return $t({defaultMessage: \"Message #{stream_name}\"}, {stream_name: opts.stream});\n        }\n    }\n\n    // For private messages\n    if (opts.private_message_recipient) {\n        const recipient_list = opts.private_message_recipient.split(\",\");\n        const recipient_names = recipient_list\n            .map((recipient) => {\n                const user = people.get_by_email(recipient);\n                return user.full_name;\n            })\n            .join(\", \");\n\n        if (recipient_list.length === 1) {\n            // If it's a single user, display status text if available\n            const user = people.get_by_email(recipient_list[0]);\n            const status = user_status.get_status_text(user.user_id);\n            if (status) {\n                return $t(\n                    {defaultMessage: \"Message {recipient_name} ({recipient_status})\"},\n                    {recipient_name: recipient_names, recipient_status: status},\n                );\n            }\n        }\n        return $t({defaultMessage: \"Message {recipient_names}\"}, {recipient_names});\n    }\n    return $t({defaultMessage: \"Compose your message here\"});\n}\n\nexport function set_compose_box_top(set_top) {\n    if (set_top) {\n        // As `#compose` has `position: fixed` property, we cannot\n        // make the compose-box to attain the correct height just by\n        // using CSS. If that wasn't the case, we could have somehow\n        // refactored the HTML so as to consider only the space below\n        // below the `#navbar_alerts` as `height: 100%` of `#compose`.\n        const compose_top =\n            $(\"#navbar_alerts_wrapper\").height() +\n            $(\".header\").height() +\n            Number.parseInt($(\".header\").css(\"paddingBottom\"), 10);\n        $(\"#compose\").css(\"top\", compose_top + \"px\");\n    } else {\n        $(\"#compose\").css(\"top\", \"\");\n    }\n}\n\nexport function make_compose_box_full_size() {\n    set_full_size(true);\n\n    // The autosize should be destroyed for the full size compose\n    // box else it will interfere and shrink its size accordingly.\n    autosize.destroy($(\"#compose-textarea\"));\n\n    $(\"#compose\").addClass(\"compose-fullscreen\");\n\n    // Set the `top` property of compose-box.\n    set_compose_box_top(true);\n\n    $(\".collapse_composebox_button\").show();\n    $(\".expand_composebox_button\").hide();\n    $(\"#scroll-to-bottom-button-container\").removeClass(\"show\");\n    $(\"#compose-textarea\").trigger(\"focus\");\n}\n\nexport function make_compose_box_original_size() {\n    set_full_size(false);\n\n    $(\"#compose\").removeClass(\"compose-fullscreen\");\n\n    // Unset the `top` property of compose-box.\n    set_compose_box_top(false);\n\n    // Again initialise the compose textarea as it was destroyed\n    // when compose box was made full screen\n    autosize($(\"#compose-textarea\"));\n\n    $(\".collapse_composebox_button\").hide();\n    $(\".expand_composebox_button\").show();\n    $(\"#compose-textarea\").trigger(\"focus\");\n}\n\nexport function handle_keydown(event, $textarea) {\n    // The event.key property will have uppercase letter if\n    // the \"Shift + <key>\" combo was used or the Caps Lock\n    // key was on. We turn to key to lowercase so the key bindings\n    // work regardless of whether Caps Lock was on or not.\n    const key = event.key.toLowerCase();\n    let type;\n    if (key === \"b\") {\n        type = \"bold\";\n    } else if (key === \"i\" && !event.shiftKey) {\n        type = \"italic\";\n    } else if (key === \"l\" && event.shiftKey) {\n        type = \"link\";\n    }\n\n    // detect Cmd and Ctrl key\n    const isCmdOrCtrl = common.has_mac_keyboard() ? event.metaKey : event.ctrlKey;\n\n    if (type && isCmdOrCtrl) {\n        format_text($textarea, type);\n        autosize_textarea($textarea);\n        event.preventDefault();\n    }\n}\n\nexport function handle_keyup(event, $textarea) {\n    // Set the rtl class if the text has an rtl direction, remove it otherwise\n    rtl.set_rtl_class_for_textarea($textarea);\n}\n\nexport function format_text($textarea, type) {\n    const italic_syntax = \"*\";\n    const bold_syntax = \"**\";\n    const bold_and_italic_syntax = \"***\";\n    let is_selected_text_italic = false;\n    let is_inner_text_italic = false;\n    const field = $textarea.get(0);\n    let range = $textarea.range();\n    let text = $textarea.val();\n    const selected_text = range.text;\n\n    // Remove new line and space around selected text.\n    const left_trim_length = range.text.length - range.text.trimStart().length;\n    const right_trim_length = range.text.length - range.text.trimEnd().length;\n\n    field.setSelectionRange(range.start + left_trim_length, range.end - right_trim_length);\n    range = $textarea.range();\n\n    const is_selection_bold = () =>\n        // First check if there are enough characters before/after selection.\n        range.start >= bold_syntax.length &&\n        text.length - range.end >= bold_syntax.length &&\n        // And then if the characters have bold_syntax around them.\n        text.slice(range.start - bold_syntax.length, range.start) === bold_syntax &&\n        text.slice(range.end, range.end + bold_syntax.length) === bold_syntax;\n\n    const is_inner_text_bold = () =>\n        // Check if selected text itself has bold_syntax inside it.\n        range.length > 4 &&\n        selected_text.slice(0, bold_syntax.length) === bold_syntax &&\n        selected_text.slice(-bold_syntax.length) === bold_syntax;\n\n    switch (type) {\n        case \"bold\":\n            // Ctrl + B: Toggle bold syntax on selection.\n\n            // If the selection is already surrounded by bold syntax,\n            // remove it rather than adding another copy.\n            if (is_selection_bold()) {\n                // Remove the bold_syntax from text.\n                text =\n                    text.slice(0, range.start - bold_syntax.length) +\n                    text.slice(range.start, range.end) +\n                    text.slice(range.end + bold_syntax.length);\n                set(field, text);\n                field.setSelectionRange(\n                    range.start - bold_syntax.length,\n                    range.end - bold_syntax.length,\n                );\n                break;\n            } else if (is_inner_text_bold()) {\n                // Remove bold syntax inside the selection, if present.\n                text =\n                    text.slice(0, range.start) +\n                    text.slice(range.start + bold_syntax.length, range.end - bold_syntax.length) +\n                    text.slice(range.end);\n                set(field, text);\n                field.setSelectionRange(range.start, range.end - bold_syntax.length * 2);\n                break;\n            }\n\n            // Otherwise, we don't have bold syntax, so we add it.\n            wrapSelection(field, bold_syntax);\n            break;\n        case \"italic\":\n            // Ctrl + I: Toggle italic syntax on selection. This is\n            // much more complex than toggling bold syntax, because of\n            // the following subtle detail: If our selection is\n            // **foo**, toggling italics should add italics, since in\n            // fact it's just bold syntax, even though with *foo* and\n            // ***foo*** should remove italics.\n\n            // If the text is already italic, we remove the italic_syntax from text.\n            if (range.start >= 1 && text.length - range.end >= italic_syntax.length) {\n                // If text has italic_syntax around it.\n                const has_italic_syntax =\n                    text.slice(range.start - italic_syntax.length, range.start) === italic_syntax &&\n                    text.slice(range.end, range.end + italic_syntax.length) === italic_syntax;\n\n                if (is_selection_bold()) {\n                    // If text has bold_syntax around it.\n                    if (\n                        range.start >= 3 &&\n                        text.length - range.end >= bold_and_italic_syntax.length\n                    ) {\n                        // If text is both bold and italic.\n                        const has_bold_and_italic_syntax =\n                            text.slice(range.start - bold_and_italic_syntax.length, range.start) ===\n                                bold_and_italic_syntax &&\n                            text.slice(range.end, range.end + bold_and_italic_syntax.length) ===\n                                bold_and_italic_syntax;\n                        if (has_bold_and_italic_syntax) {\n                            is_selected_text_italic = true;\n                        }\n                    }\n                } else if (has_italic_syntax) {\n                    // If text is only italic.\n                    is_selected_text_italic = true;\n                }\n            }\n\n            if (is_selected_text_italic) {\n                // If text has italic syntax around it, we remove the italic syntax.\n                text =\n                    text.slice(0, range.start - italic_syntax.length) +\n                    text.slice(range.start, range.end) +\n                    text.slice(range.end + italic_syntax.length);\n                set(field, text);\n                field.setSelectionRange(\n                    range.start - italic_syntax.length,\n                    range.end - italic_syntax.length,\n                );\n                break;\n            } else if (\n                selected_text.length > italic_syntax.length * 2 &&\n                // If the selected text contains italic syntax\n                selected_text.slice(0, italic_syntax.length) === italic_syntax &&\n                selected_text.slice(-italic_syntax.length) === italic_syntax\n            ) {\n                if (is_inner_text_bold()) {\n                    if (\n                        selected_text.length > bold_and_italic_syntax.length * 2 &&\n                        selected_text.slice(0, bold_and_italic_syntax.length) ===\n                            bold_and_italic_syntax &&\n                        selected_text.slice(-bold_and_italic_syntax.length) ===\n                            bold_and_italic_syntax\n                    ) {\n                        // If selected text is both bold and italic.\n                        is_inner_text_italic = true;\n                    }\n                } else {\n                    // If selected text is only italic.\n                    is_inner_text_italic = true;\n                }\n            }\n\n            if (is_inner_text_italic) {\n                // We remove the italic_syntax from within the selected text.\n                text =\n                    text.slice(0, range.start) +\n                    text.slice(\n                        range.start + italic_syntax.length,\n                        range.end - italic_syntax.length,\n                    ) +\n                    text.slice(range.end);\n                set(field, text);\n                field.setSelectionRange(range.start, range.end - italic_syntax.length * 2);\n                break;\n            }\n\n            wrapSelection(field, italic_syntax);\n            break;\n        case \"link\": {\n            // Ctrl + L: Insert a link to selected text\n            wrapSelection(field, \"[\", \"](url)\");\n\n            // Change selected text to `url` part of the syntax.\n            // If <text> marks the selected region, we're mapping:\n            // <text> => [text](<url>).\n            const new_start = range.end + \"[](\".length;\n            const new_end = new_start + \"url\".length;\n            field.setSelectionRange(new_start, new_end);\n            break;\n        }\n    }\n}\n\nexport function hide_compose_spinner() {\n    $(\"#compose-send-button .loader\").hide();\n    $(\"#compose-send-button span\").show();\n    $(\"#compose-send-button\").removeClass(\"disable-btn\");\n}\n\nexport function show_compose_spinner() {\n    // Always use white spinner.\n    loading.show_button_spinner($(\"#compose-send-button .loader\"), true);\n    $(\"#compose-send-button span\").hide();\n    $(\"#compose-send-button\").addClass(\"disable-btn\");\n}\n\nexport function get_compose_click_target(e) {\n    const compose_control_buttons_popover = popover_menus.get_compose_control_buttons_popover();\n    if (\n        compose_control_buttons_popover &&\n        $(compose_control_buttons_popover.popper).has(e.target).length\n    ) {\n        return compose_control_buttons_popover.reference;\n    }\n    return e.target;\n}\n","import $ from \"jquery\";\n\nimport * as resolved_topic from \"../shared/js/resolved_topic\";\nimport render_compose_banner from \"../templates/compose_banner/compose_banner.hbs\";\nimport render_not_subscribed_warning from \"../templates/compose_banner/not_subscribed_warning.hbs\";\nimport render_private_stream_warning from \"../templates/compose_banner/private_stream_warning.hbs\";\nimport render_wildcard_warning from \"../templates/compose_banner/wildcard_warning.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as compose_banner from \"./compose_banner\";\nimport * as compose_pm_pill from \"./compose_pm_pill\";\nimport * as compose_state from \"./compose_state\";\nimport * as compose_ui from \"./compose_ui\";\nimport {$t} from \"./i18n\";\nimport {page_params} from \"./page_params\";\nimport * as peer_data from \"./peer_data\";\nimport * as people from \"./people\";\nimport * as settings_config from \"./settings_config\";\nimport * as settings_data from \"./settings_data\";\nimport * as stream_data from \"./stream_data\";\nimport {user_settings} from \"./user_settings\";\nimport * as util from \"./util\";\n\nlet user_acknowledged_wildcard = false;\nlet wildcard_mention;\n\nexport let wildcard_mention_large_stream_threshold = 15;\n\nexport function needs_subscribe_warning(user_id, stream_id) {\n    // This returns true if all of these conditions are met:\n    //  * the user is valid\n    //  * the user is not already subscribed to the stream\n    //  * the user has no back-door way to see stream messages\n    //    (i.e. bots on public/private streams)\n    //\n    //  You can think of this as roughly answering \"is there an\n    //  actionable way to subscribe the user and do they actually\n    //  need it?\".\n    //\n    //  We expect the caller to already have verified that we're\n    //  sending to a valid stream and trying to mention the user.\n\n    const user = people.get_by_user_id(user_id);\n\n    if (!user) {\n        return false;\n    }\n\n    if (user.is_bot) {\n        // Bots may receive messages on public/private streams even if they are\n        // not subscribed.\n        return false;\n    }\n\n    if (stream_data.is_user_subscribed(stream_id, user_id)) {\n        // If our user is already subscribed\n        return false;\n    }\n\n    return true;\n}\n\nexport function warn_if_private_stream_is_linked(linked_stream) {\n    // For PMs, we currently don't warn about links to private\n    // streams, since you are specifically sharing the existence of\n    // the private stream with someone.  One could imagine changing\n    // this policy if user feedback suggested it was useful.\n    if (compose_state.get_message_type() !== \"stream\") {\n        return;\n    }\n\n    const compose_stream = stream_data.get_sub(compose_state.stream_name());\n    if (compose_stream === undefined) {\n        // We have an invalid stream name, don't warn about this here as\n        // we show an error to the user when they try to send the message.\n        return;\n    }\n\n    // If the stream we're linking to is not invite-only, then it's\n    // public, and there is no need to warn about it, since all\n    // members can already see all the public streams.\n    //\n    // Theoretically, we could still do a warning if there are any\n    // guest users subscribed to the stream we're posting to; we may\n    // change this policy if user feedback suggests it'd be an\n    // improvement.\n    if (!linked_stream.invite_only) {\n        return;\n    }\n\n    // Don't warn if subscribers list of current compose_stream is\n    // a subset of linked_stream's subscribers list, because\n    // everyone will be subscribed to the linked stream and so\n    // knows it exists.  (But always warn Zephyr users, since\n    // we may not know their stream's subscribers.)\n    if (\n        peer_data.is_subscriber_subset(compose_stream.stream_id, linked_stream.stream_id) &&\n        !page_params.realm_is_zephyr_mirror_realm\n    ) {\n        return;\n    }\n\n    const new_row = render_private_stream_warning({\n        banner_type: compose_banner.WARNING,\n        stream_name: linked_stream.name,\n        classname: compose_banner.CLASSNAMES.private_stream_warning,\n    });\n\n    $(\"#compose_banners\").append(new_row);\n}\n\nexport function warn_if_mentioning_unsubscribed_user(mentioned) {\n    if (compose_state.get_message_type() !== \"stream\") {\n        return;\n    }\n\n    // Disable for Zephyr mirroring realms, since we never have subscriber lists there\n    if (page_params.realm_is_zephyr_mirror_realm) {\n        return;\n    }\n\n    const user_id = mentioned.user_id;\n\n    if (mentioned.is_broadcast) {\n        return; // don't check if @all/@everyone/@stream\n    }\n\n    const stream_name = compose_state.stream_name();\n\n    if (!stream_name) {\n        return;\n    }\n\n    const sub = stream_data.get_sub(stream_name);\n\n    if (!sub) {\n        return;\n    }\n\n    if (needs_subscribe_warning(user_id, sub.stream_id)) {\n        const $existing_invites_area = $(\n            `#compose_banners .${compose_banner.CLASSNAMES.recipient_not_subscribed}`,\n        );\n\n        const existing_invites = Array.from($existing_invites_area, (user_row) =>\n            Number.parseInt($(user_row).data(\"user-id\"), 10),\n        );\n\n        const can_subscribe_other_users = settings_data.user_can_subscribe_other_users();\n\n        if (!existing_invites.includes(user_id)) {\n            const context = {\n                user_id,\n                stream_id: sub.stream_id,\n                banner_type: compose_banner.WARNING,\n                button_text: can_subscribe_other_users\n                    ? $t({defaultMessage: \"Subscribe them\"})\n                    : null,\n                can_subscribe_other_users,\n                name: mentioned.full_name,\n                classname: compose_banner.CLASSNAMES.recipient_not_subscribed,\n            };\n\n            const new_row = render_not_subscribed_warning(context);\n            $(\"#compose_banners\").append(new_row);\n        }\n    }\n}\n\nexport function clear_topic_resolved_warning() {\n    $(`#compose_banners .${compose_banner.CLASSNAMES.topic_resolved}`).remove();\n}\n\nexport function warn_if_topic_resolved(topic_changed) {\n    if (compose_state.recipient_has_topics()) {\n        return;\n    }\n    // This function is called with topic_changed=false on every\n    // keypress when typing a message, so it should not do anything\n    // expensive in that case.\n    //\n    // Pass topic_changed=true if this function was called in response\n    // to a topic being edited.\n    const topic_name = compose_state.topic();\n\n    if (!topic_changed && !resolved_topic.is_resolved(topic_name)) {\n        // The resolved topic warning will only ever appear when\n        // composing to a resolve topic, so we return early without\n        // inspecting additional fields in this case.\n        return;\n    }\n\n    const stream_name = compose_state.stream_name();\n    const message_content = compose_state.message_content();\n    const sub = stream_data.get_sub(stream_name);\n    const $compose_banner_area = $(\"#compose_banners\");\n\n    if (sub && message_content !== \"\" && resolved_topic.is_resolved(topic_name)) {\n        if ($(`#compose_banners .${compose_banner.CLASSNAMES.topic_resolved}`).length) {\n            // Error is already displayed; no action required.\n            return;\n        }\n\n        const button_text = settings_data.user_can_move_messages_to_another_topic()\n            ? $t({defaultMessage: \"Unresolve topic\"})\n            : null;\n\n        const context = {\n            banner_type: compose_banner.WARNING,\n            stream_id: sub.stream_id,\n            topic_name,\n            banner_text: $t({\n                defaultMessage:\n                    \"You are sending a message to a resolved topic. You can send as-is or unresolve the topic first.\",\n            }),\n            button_text,\n            classname: compose_banner.CLASSNAMES.topic_resolved,\n        };\n\n        const new_row = render_compose_banner(context);\n        $compose_banner_area.append(new_row);\n    } else {\n        clear_topic_resolved_warning();\n    }\n}\n\nfunction show_wildcard_warnings(stream_id) {\n    const subscriber_count = peer_data.get_subscriber_count(stream_id) || 0;\n\n    const $compose_banner_area = $(\"#compose_banners\");\n    const classname = compose_banner.CLASSNAMES.wildcard_warning;\n    const $wildcard_template = render_wildcard_warning({\n        banner_type: compose_banner.WARNING,\n        subscriber_count,\n        stream_name: compose_state.stream_name(),\n        wildcard_mention,\n        button_text: $t({defaultMessage: \"Yes, send\"}),\n        hide_close_button: true,\n        classname,\n    });\n\n    // only show one error for any number of @all or @everyone mentions\n    if ($(`#compose_banners .${classname}`).length === 0) {\n        $compose_banner_area.append($wildcard_template);\n    }\n\n    user_acknowledged_wildcard = false;\n}\n\nexport function clear_wildcard_warnings() {\n    const classname = compose_banner.CLASSNAMES.wildcard_warning;\n    $(`#compose_banners .${classname}`).remove();\n}\n\nexport function set_user_acknowledged_wildcard_flag(value) {\n    user_acknowledged_wildcard = value;\n}\n\nexport function get_invalid_recipient_emails() {\n    const private_recipients = util.extract_pm_recipients(\n        compose_state.private_message_recipient(),\n    );\n    const invalid_recipients = private_recipients.filter(\n        (email) => !people.is_valid_email_for_compose(email),\n    );\n\n    return invalid_recipients;\n}\n\nfunction check_unsubscribed_stream_for_send(stream_name, autosubscribe) {\n    let result;\n    if (!autosubscribe) {\n        return \"not-subscribed\";\n    }\n\n    // In the rare circumstance of the autosubscribe option, we\n    // *Synchronously* try to subscribe to the stream before sending\n    // the message.  This is deprecated and we hope to remove it; see\n    // #4650.\n    channel.post({\n        url: \"/json/subscriptions/exists\",\n        data: {stream: stream_name, autosubscribe: true},\n        async: false,\n        success(data) {\n            if (data.subscribed) {\n                result = \"subscribed\";\n            } else {\n                result = \"not-subscribed\";\n            }\n        },\n        error(xhr) {\n            if (xhr.status === 404) {\n                result = \"does-not-exist\";\n            } else {\n                result = \"error\";\n            }\n        },\n    });\n    return result;\n}\n\nexport function wildcard_mention_allowed() {\n    if (\n        page_params.realm_wildcard_mention_policy ===\n        settings_config.wildcard_mention_policy_values.by_everyone.code\n    ) {\n        return true;\n    }\n    if (\n        page_params.realm_wildcard_mention_policy ===\n        settings_config.wildcard_mention_policy_values.nobody.code\n    ) {\n        return false;\n    }\n    if (\n        page_params.realm_wildcard_mention_policy ===\n        settings_config.wildcard_mention_policy_values.by_admins_only.code\n    ) {\n        return page_params.is_admin;\n    }\n\n    if (\n        page_params.realm_wildcard_mention_policy ===\n        settings_config.wildcard_mention_policy_values.by_moderators_only.code\n    ) {\n        return page_params.is_admin || page_params.is_moderator;\n    }\n\n    if (\n        page_params.realm_wildcard_mention_policy ===\n        settings_config.wildcard_mention_policy_values.by_full_members.code\n    ) {\n        if (page_params.is_admin) {\n            return true;\n        }\n        const person = people.get_by_user_id(page_params.user_id);\n        const current_datetime = new Date(Date.now());\n        const person_date_joined = new Date(person.date_joined);\n        const days = (current_datetime - person_date_joined) / 1000 / 86400;\n\n        return days >= page_params.realm_waiting_period_threshold && !page_params.is_guest;\n    }\n    return !page_params.is_guest;\n}\n\nexport function set_wildcard_mention_large_stream_threshold(value) {\n    wildcard_mention_large_stream_threshold = value;\n}\n\nfunction validate_stream_message_mentions(stream_id) {\n    const subscriber_count = peer_data.get_subscriber_count(stream_id) || 0;\n\n    // If the user is attempting to do a wildcard mention in a large\n    // stream, check if they permission to do so.\n    if (wildcard_mention !== null && subscriber_count > wildcard_mention_large_stream_threshold) {\n        if (!wildcard_mention_allowed()) {\n            compose_banner.show_error_message(\n                $t({\n                    defaultMessage:\n                        \"You do not have permission to use wildcard mentions in this stream.\",\n                }),\n                compose_banner.CLASSNAMES.wildcards_not_allowed,\n            );\n            return false;\n        }\n\n        if (user_acknowledged_wildcard === undefined || user_acknowledged_wildcard === false) {\n            // user has not seen a warning message yet if undefined\n            show_wildcard_warnings(stream_id);\n\n            $(\"#compose-send-button\").prop(\"disabled\", false);\n            compose_ui.hide_compose_spinner();\n            return false;\n        }\n    } else {\n        // the message no longer contains @all or @everyone\n        clear_wildcard_warnings();\n    }\n    // at this point, the user has either acknowledged the warning or removed @all / @everyone\n    user_acknowledged_wildcard = undefined;\n\n    return true;\n}\n\nexport function validation_error(error_type, stream_name) {\n    switch (error_type) {\n        case \"does-not-exist\":\n            compose_banner.show_stream_does_not_exist_error(stream_name);\n            return false;\n        case \"error\":\n            compose_banner.show_error_message(\n                $t({defaultMessage: \"Error checking subscription.\"}),\n                compose_banner.CLASSNAMES.subscription_error,\n                $(\"#stream_message_recipient_stream\"),\n            );\n            return false;\n        case \"not-subscribed\": {\n            if ($(`#compose_banners .${compose_banner.CLASSNAMES.user_not_subscribed}`).length) {\n                return false;\n            }\n            const sub = stream_data.get_sub(stream_name);\n            const new_row = render_compose_banner({\n                banner_type: compose_banner.ERROR,\n                banner_text: $t({\n                    defaultMessage:\n                        \"You're not subscribed to this stream. You will not be notified if other users reply to your message.\",\n                }),\n                button_text: stream_data.can_toggle_subscription(sub)\n                    ? $t({defaultMessage: \"Subscribe\"})\n                    : null,\n                classname: compose_banner.CLASSNAMES.user_not_subscribed,\n                // The message cannot be sent until the user subscribes to the stream, so\n                // closing the banner would be more confusing than helpful.\n                hide_close_button: true,\n            });\n            $(\"#compose_banners\").append(new_row);\n            return false;\n        }\n    }\n    return true;\n}\n\nexport function validate_stream_message_address_info(stream_name) {\n    if (stream_data.is_subscribed_by_name(stream_name)) {\n        return true;\n    }\n    const autosubscribe = page_params.narrow_stream !== undefined;\n    const error_type = check_unsubscribed_stream_for_send(stream_name, autosubscribe);\n    return validation_error(error_type, stream_name);\n}\n\nfunction validate_stream_message() {\n    const stream_name = compose_state.stream_name();\n    if (stream_name === \"\") {\n        compose_banner.show_error_message(\n            $t({defaultMessage: \"Please specify a stream.\"}),\n            compose_banner.CLASSNAMES.missing_stream,\n            $(\"#stream_message_recipient_stream\"),\n        );\n        return false;\n    }\n\n    if (page_params.realm_mandatory_topics) {\n        const topic = compose_state.topic();\n        // TODO: We plan to migrate the empty topic to only using the\n        // `\"\"` representation for i18n reasons, but have not yet done so.\n        if (topic === \"\" || topic === \"(no topic)\") {\n            compose_banner.show_error_message(\n                $t({defaultMessage: \"Topics are required in this organization.\"}),\n                compose_banner.CLASSNAMES.topic_missing,\n                $(\"#stream_message_recipient_topic\"),\n            );\n            return false;\n        }\n    }\n\n    const sub = stream_data.get_sub(stream_name);\n    if (!sub) {\n        return validation_error(\"does-not-exist\", stream_name);\n    }\n\n    if (!stream_data.can_post_messages_in_stream(sub)) {\n        compose_banner.show_error_message(\n            $t({\n                defaultMessage: \"You do not have permission to post in this stream.\",\n            }),\n            compose_banner.CLASSNAMES.no_post_permissions,\n        );\n        return false;\n    }\n\n    /* Note: This is a global and thus accessible in the functions\n       below; it's important that we update this state here before\n       proceeding with further validation. */\n    wildcard_mention = util.find_wildcard_mentions(compose_state.message_content());\n\n    if (\n        !validate_stream_message_address_info(stream_name) ||\n        !validate_stream_message_mentions(sub.stream_id)\n    ) {\n        return false;\n    }\n\n    return true;\n}\n\n// The function checks whether the recipients are users of the realm or cross realm users (bots\n// for now)\nfunction validate_private_message() {\n    const user_ids = compose_pm_pill.get_user_ids();\n\n    if (\n        page_params.realm_private_message_policy ===\n            settings_config.private_message_policy_values.disabled.code &&\n        (user_ids.length !== 1 || !people.get_by_user_id(user_ids[0]).is_bot)\n    ) {\n        // Unless we're composing to a bot\n        compose_banner.show_error_message(\n            $t({defaultMessage: \"Private messages are disabled in this organization.\"}),\n            compose_banner.CLASSNAMES.private_messages_disabled,\n            $(\"#private_message_recipient\"),\n        );\n        return false;\n    }\n\n    if (compose_state.private_message_recipient().length === 0) {\n        compose_banner.show_error_message(\n            $t({defaultMessage: \"Please specify at least one valid recipient.\"}),\n            compose_banner.CLASSNAMES.missing_private_message_recipient,\n            $(\"#private_message_recipient\"),\n        );\n        return false;\n    } else if (page_params.realm_is_zephyr_mirror_realm) {\n        // For Zephyr mirroring realms, the frontend doesn't know which users exist\n        return true;\n    }\n\n    const invalid_recipients = get_invalid_recipient_emails();\n\n    let context = {};\n    if (invalid_recipients.length === 1) {\n        context = {recipient: invalid_recipients.join(\",\")};\n        compose_banner.show_error_message(\n            $t({defaultMessage: \"The recipient {recipient} is not valid.\"}, context),\n            compose_banner.CLASSNAMES.invalid_recipient,\n            $(\"#private_message_recipient\"),\n        );\n        return false;\n    } else if (invalid_recipients.length > 1) {\n        context = {recipients: invalid_recipients.join(\",\")};\n        compose_banner.show_error_message(\n            $t({defaultMessage: \"The recipients {recipients} are not valid.\"}, context),\n            compose_banner.CLASSNAMES.invalid_recipients,\n            $(\"#private_message_recipient\"),\n        );\n        return false;\n    }\n\n    for (const user_id of user_ids) {\n        if (!people.is_person_active(user_id)) {\n            context = {full_name: people.get_by_user_id(user_id).full_name};\n            compose_banner.show_error_message(\n                $t({defaultMessage: \"You cannot send messages to deactivated users.\"}, context),\n                compose_banner.CLASSNAMES.deactivated_user,\n                $(\"#private_message_recipient\"),\n            );\n\n            return false;\n        }\n    }\n\n    return true;\n}\n\nexport function check_overflow_text() {\n    // This function is called when typing every character in the\n    // compose box, so it's important that it not doing anything\n    // expensive.\n    const text = compose_state.message_content();\n    const max_length = page_params.max_message_length;\n    const $indicator = $(\"#compose_limit_indicator\");\n\n    if (text.length > max_length) {\n        $indicator.addClass(\"over_limit\");\n        $(\"#compose-textarea\").addClass(\"over_limit\");\n        $indicator.text(text.length + \"/\" + max_length);\n        compose_banner.show_error_message(\n            $t(\n                {\n                    defaultMessage:\n                        \"Message length shouldn't be greater than {max_length} characters.\",\n                },\n                {max_length},\n            ),\n            compose_banner.CLASSNAMES.message_too_long,\n        );\n        $(\"#compose-send-button\").prop(\"disabled\", true);\n    } else if (text.length > 0.9 * max_length) {\n        $indicator.removeClass(\"over_limit\");\n        $(\"#compose-textarea\").removeClass(\"over_limit\");\n        $indicator.text(text.length + \"/\" + max_length);\n\n        $(\"#compose-send-button\").prop(\"disabled\", false);\n        $(`#compose_banners .${compose_banner.CLASSNAMES.message_too_long}`).remove();\n    } else {\n        $indicator.text(\"\");\n        $(\"#compose-textarea\").removeClass(\"over_limit\");\n\n        $(\"#compose-send-button\").prop(\"disabled\", false);\n        $(`#compose_banners .${compose_banner.CLASSNAMES.message_too_long}`).remove();\n    }\n\n    return text.length;\n}\n\nexport function warn_for_text_overflow_when_tries_to_send() {\n    if (compose_state.message_content().length > page_params.max_message_length) {\n        $(\"#compose-textarea\").addClass(\"flash\");\n        setTimeout(() => $(\"#compose-textarea\").removeClass(\"flash\"), 1500);\n        return false;\n    }\n    return true;\n}\n\nexport function validate() {\n    const message_content = compose_state.message_content();\n    if (/^\\s*$/.test(message_content)) {\n        // Avoid showing an error message when \"enter sends\" is enabled,\n        // as it is more likely that the user has hit \"Enter\" accidentally.\n        if (!user_settings.enter_sends) {\n            compose_banner.show_error_message(\n                $t({defaultMessage: \"You have nothing to send!\"}),\n                compose_banner.CLASSNAMES.empty_message,\n                $(\"#compose-textarea\"),\n            );\n        }\n        return false;\n    }\n    $(`#compose_banners .${compose_banner.CLASSNAMES.empty_message}`).remove();\n\n    if ($(\"#zephyr-mirror-error\").is(\":visible\")) {\n        compose_banner.show_error_message(\n            $t({\n                defaultMessage:\n                    \"You need to be running Zephyr mirroring in order to send messages!\",\n            }),\n            compose_banner.CLASSNAMES.zephyr_not_running,\n        );\n        return false;\n    }\n    if (!warn_for_text_overflow_when_tries_to_send()) {\n        return false;\n    }\n\n    if (compose_state.get_message_type() === \"private\") {\n        return validate_private_message();\n    }\n    return validate_stream_message();\n}\n","import $ from \"jquery\";\nimport _ from \"lodash\";\n\n// import pygments_data from \"../generated/pygments_data.json\";\nimport * as typeahead from \"../shared/js/typeahead\";\n\nimport * as compose from \"./compose\";\nimport * as compose_pm_pill from \"./compose_pm_pill\";\nimport * as compose_state from \"./compose_state\";\nimport * as compose_ui from \"./compose_ui\";\nimport * as compose_validate from \"./compose_validate\";\nimport * as emoji from \"./emoji\";\nimport * as flatpickr from \"./flatpickr\";\nimport {$t} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as message_store from \"./message_store\";\nimport * as muted_users from \"./muted_users\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as rows from \"./rows\";\nimport * as settings_data from \"./settings_data\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_topic_history from \"./stream_topic_history\";\nimport * as stream_topic_history_util from \"./stream_topic_history_util\";\nimport * as timerender from \"./timerender\";\nimport * as typeahead_helper from \"./typeahead_helper\";\nimport * as user_groups from \"./user_groups\";\nimport * as user_pill from \"./user_pill\";\nimport {user_settings} from \"./user_settings\";\n\n// **********************************\n// AN IMPORTANT NOTE ABOUT TYPEAHEADS\n// **********************************\n// They do not do any HTML escaping, at all.\n// And your input to them is rendered as though it were HTML by\n// the default highlighter.\n//\n// So if you are not using trusted input, you MUST use a\n// highlighter that escapes (i.e. one that calls\n// typeahead_helper.highlight_with_escaping).\n\n// This is what we use for PM/compose typeaheads.\n// We export it to allow tests to mock it.\nexport const max_num_items = 8;\n\nexport let emoji_collection = [];\n\nexport function update_emoji_data() {\n    emoji_collection = [];\n    for (const emoji_dict of emoji.emojis_by_name.values()) {\n        const {reaction_type} = emoji.get_emoji_details_by_name(emoji_dict.name);\n        if (emoji_dict.is_realm_emoji === true) {\n            emoji_collection.push({\n                reaction_type,\n                emoji_name: emoji_dict.name,\n                emoji_url: emoji_dict.url,\n                is_realm_emoji: true,\n            });\n        } else {\n            for (const alias of emoji_dict.aliases) {\n                emoji_collection.push({\n                    reaction_type,\n                    emoji_name: alias,\n                    emoji_code: emoji_dict.emoji_code,\n                });\n            }\n        }\n    }\n}\n\nexport function topics_seen_for(stream_name) {\n    const stream_id = stream_data.get_stream_id(stream_name);\n    if (!stream_id) {\n        return [];\n    }\n\n    // Fetch topic history from the server, in case we will need it soon.\n    stream_topic_history_util.get_server_history(stream_id, () => {});\n    return stream_topic_history.get_recent_topic_names(stream_id);\n}\n\nfunction get_language_matcher(query) {\n    query = query.toLowerCase();\n    return function (lang) {\n        return lang.includes(query);\n    };\n}\n\nexport function query_matches_person(query, person) {\n    return (\n        typeahead.query_matches_string(query, person.full_name, \" \") ||\n        (settings_data.show_email() &&\n            typeahead.query_matches_string(query, people.get_visible_email(person), \" \"))\n    );\n}\n\nexport function query_matches_name(query, user_group_or_stream) {\n    return typeahead.query_matches_string(query, user_group_or_stream.name, \" \");\n}\n\nfunction get_stream_or_user_group_matcher(query) {\n    // Case-insensitive.\n    query = typeahead.clean_query_lowercase(query);\n\n    return function (user_group_or_stream) {\n        return query_matches_name(query, user_group_or_stream);\n    };\n}\n\nfunction get_slash_matcher(query) {\n    query = typeahead.clean_query_lowercase(query);\n\n    return function (item) {\n        return (\n            typeahead.query_matches_string(query, item.name, \" \") ||\n            typeahead.query_matches_string(query, item.aliases, \" \")\n        );\n    };\n}\n\nfunction get_topic_matcher(query) {\n    query = typeahead.clean_query_lowercase(query);\n\n    return function (topic) {\n        const obj = {\n            topic,\n        };\n\n        return typeahead.query_matches_string(query, obj.topic, \" \");\n    };\n}\n\nexport function should_enter_send(e) {\n    const has_non_shift_modifier_key = e.ctrlKey || e.metaKey || e.altKey;\n    const has_modifier_key = e.shiftKey || has_non_shift_modifier_key;\n    let this_enter_sends;\n    if (user_settings.enter_sends) {\n        // With the enter_sends setting, we should send\n        // the message unless the user was holding a\n        // modifier key.\n        this_enter_sends = !has_modifier_key && keydown_util.is_enter_event(e);\n    } else {\n        // If enter_sends is not enabled, just hitting\n        // Enter should add a newline, but with a\n        // non-Shift modifier key held down, we should\n        // send.  With Shift, we shouldn't, because\n        // Shift+Enter to get a newline is a common\n        // keyboard habit for folks for dealing with other\n        // chat products where Enter-always-sends.\n        this_enter_sends = has_non_shift_modifier_key;\n    }\n    return this_enter_sends;\n}\n\nexport function handle_enter($textarea, e) {\n    // Used only if Enter doesn't send.\n\n    // Since this Enter doesn't send, we just want to do\n    // the browser's default behavior for the \"Enter\" key.\n    // Letting the browser handle it works great if the\n    // key actually pressed was Enter or Shift-Enter.\n\n    // But the default browser behavior for Ctrl/Alt/Meta\n    // + Enter is to do nothing, so we need to emulate\n    // the browser behavior for \"Enter\" in those cases.\n    //\n    // We do this using caret and range from jquery-caret.\n    const has_non_shift_modifier_key = e.ctrlKey || e.metaKey || e.altKey;\n    if (!has_non_shift_modifier_key) {\n        // Use the native browser behavior.\n        return;\n    }\n\n    // To properly emulate browser \"Enter\", if the\n    // user had selected something in the textarea,\n    // we need those characters to be cleared.\n    const range = $textarea.range();\n    if (range.length > 0) {\n        $textarea.range(range.start, range.end).range(\"\");\n    }\n\n    // Now add the newline, remembering to resize the\n    // textarea if needed.\n    $textarea.caret(\"\\n\");\n    compose_ui.autosize_textarea($textarea);\n    e.preventDefault();\n}\n\n// nextFocus is set on a keydown event to indicate where we should focus on keyup.\n// We can't focus at the time of keydown because we need to wait for typeahead.\n// And we can't compute where to focus at the time of keyup because only the keydown\n// has reliable information about whether it was a Tab or a Shift+Tab.\nlet $nextFocus = false;\n\nfunction handle_keydown(e) {\n    const key = e.key;\n\n    if (keydown_util.is_enter_event(e) || (key === \"Tab\" && !e.shiftKey)) {\n        // Enter key or Tab key\n        let target_sel;\n\n        if (e.target.id) {\n            target_sel = `#${CSS.escape(e.target.id)}`;\n        }\n\n        const on_stream = target_sel === \"#stream_message_recipient_stream\";\n        const on_topic = target_sel === \"#stream_message_recipient_topic\";\n        const on_pm = target_sel === \"#private_message_recipient\";\n        const on_compose = target_sel === \"#compose-textarea\";\n\n        if (on_compose) {\n            if (key === \"Tab\") {\n                // This if branch is only here to make Tab+Enter work on Safari,\n                // which does not make <button>s tab-accessible by default\n                // (even if we were to set tabindex=0).\n                if (!should_enter_send(e)) {\n                    // It is important that we do an immediate focus\n                    // even here, rather than setting nextFocus. If\n                    // the user hits Tab and then Enter without first\n                    // releasing Tab, then setting nextFocus here\n                    // could result in focus being moved to the \"Send\n                    // button\" after sending the message, preventing\n                    // typing a next message!\n                    $(\"#compose-send-button\").trigger(\"focus\");\n                    e.preventDefault();\n                    e.stopPropagation();\n                }\n            } else {\n                // Enter\n                if (should_enter_send(e)) {\n                    e.preventDefault();\n                    if (\n                        compose_validate.warn_for_text_overflow_when_tries_to_send() &&\n                        !$(\"#compose-send-button\").prop(\"disabled\")\n                    ) {\n                        $(\"#compose-send-button\").prop(\"disabled\", true);\n                        compose.finish();\n                    }\n                    return;\n                }\n\n                handle_enter($(\"#compose-textarea\"), e);\n            }\n        } else if (on_stream || on_topic || on_pm) {\n            // We are doing the focusing on keyup to not abort the typeahead.\n            if (on_stream) {\n                $nextFocus = $(\"#stream_message_recipient_topic\");\n            } else if (on_topic) {\n                $nextFocus = $(\"#compose-textarea\");\n            } else if (on_pm) {\n                $nextFocus = $(\"#compose-textarea\");\n            }\n        }\n    }\n}\n\nfunction handle_keyup(e) {\n    if (\n        // Enter key or Tab key\n        (keydown_util.is_enter_event(e) || (e.key === \"Tab\" && !e.shiftKey)) &&\n        $nextFocus\n    ) {\n        $nextFocus.trigger(\"focus\");\n        $nextFocus = false;\n\n        // Prevent the form from submitting\n        e.preventDefault();\n    }\n}\n\nexport function split_at_cursor(query, $input) {\n    const cursor = $input.caret();\n    return [query.slice(0, cursor), query.slice(cursor)];\n}\n\nexport function tokenize_compose_str(s) {\n    // This basically finds a token like \"@alic\" or\n    // \"#Veron\" as close to the end of the string as it\n    // can find it.  It wants to find white space or\n    // punctuation before the token, unless it's at the\n    // beginning of the line.  It doesn't matter what comes\n    // after the first character.\n    let i = s.length;\n\n    let min_i = s.length - 25;\n    if (min_i < 0) {\n        min_i = 0;\n    }\n\n    while (i > min_i) {\n        i -= 1;\n        switch (s[i]) {\n            case \"`\":\n            case \"~\":\n                // Code block must start on a new line\n                if (i === 2) {\n                    return s;\n                } else if (i > 2 && s[i - 3] === \"\\n\") {\n                    return s.slice(i - 2);\n                }\n                break;\n            case \"/\":\n                if (i === 0) {\n                    return s;\n                }\n                break;\n            case \"#\":\n            case \"@\":\n            case \":\":\n            case \"_\":\n                if (i === 0) {\n                    return s;\n                } else if (/[\\s\"'(/<[{]/.test(s[i - 1])) {\n                    return s.slice(i);\n                }\n                break;\n            case \">\":\n                // topic_jump\n                //\n                // If you hit `>` immediately after completing the typeahead for mentioning a stream,\n                // this will reposition the user from.  If | is the cursor, implements:\n                //\n                // `#**stream name** >|` => `#**stream name>|`.\n                if (\n                    s.slice(Math.max(0, i - 2), i) === \"**\" ||\n                    s.slice(Math.max(0, i - 3), i) === \"** \"\n                ) {\n                    // return any string as long as its not ''.\n                    return \">topic_jump\";\n                }\n                // maybe topic_list; let's let the stream_topic_regex decide later.\n                return \">topic_list\";\n        }\n    }\n\n    const timestamp_index = s.indexOf(\"<time\");\n    if (timestamp_index >= 0) {\n        return s.slice(timestamp_index);\n    }\n\n    return \"\";\n}\n\nexport function broadcast_mentions() {\n    const wildcard_mention_array = [\"all\", \"everyone\"];\n    let wildcard_string = \"\";\n    if (compose_state.get_message_type() === \"private\") {\n        wildcard_string = $t({defaultMessage: \"Notify recipients\"});\n    } else {\n        wildcard_string = $t({defaultMessage: \"Notify stream\"});\n        wildcard_mention_array.push(\"stream\");\n    }\n    return wildcard_mention_array.map((mention, idx) => ({\n        special_item_text: `${mention} (${wildcard_string})`,\n        email: mention,\n\n        // Always sort above, under the assumption that names will\n        // be longer and only contain \"all\" as a substring.\n        pm_recipient_count: Number.POSITIVE_INFINITY,\n\n        full_name: mention,\n        is_broadcast: true,\n\n        // used for sorting\n        idx,\n    }));\n}\n\nfunction filter_mention_name(current_token) {\n    if (current_token.startsWith(\"**\")) {\n        current_token = current_token.slice(2);\n    } else if (current_token.startsWith(\"*\")) {\n        current_token = current_token.slice(1);\n    }\n    if (current_token.lastIndexOf(\"*\") !== -1) {\n        return false;\n    }\n\n    // Don't autocomplete if there is a space following an '@'\n    if (current_token[0] === \" \") {\n        return false;\n    }\n    return current_token;\n}\n\nfunction should_show_custom_query(query, items) {\n    // returns true if the custom query doesn't match one of the\n    // choices in the items list.\n    if (!query) {\n        return false;\n    }\n    const matched = items.some((elem) => elem.toLowerCase() === query.toLowerCase());\n    return !matched;\n}\n\nexport const slash_commands = [\n    {\n        text: $t({defaultMessage: \"/dark (Switch to the dark theme)\"}),\n        name: \"dark\",\n        aliases: \"night\",\n    },\n    {\n        text: $t({defaultMessage: \"/fixed-width (Toggle fixed width mode)\"}),\n        name: \"fixed-width\",\n        aliases: \"\",\n    },\n    {\n        text: $t({defaultMessage: \"/fluid-width (Toggle fluid width mode)\"}),\n        name: \"fluid-width\",\n        aliases: \"\",\n    },\n    {\n        text: $t({defaultMessage: \"/light (Switch to light theme)\"}),\n        name: \"light\",\n        aliases: \"day\",\n    },\n    {\n        text: $t({defaultMessage: \"/me is excited (Display action text)\"}),\n        name: \"me\",\n        aliases: \"\",\n    },\n    {\n        text: $t({defaultMessage: \"/poll Where should we go to lunch today? (Create a poll)\"}),\n        name: \"poll\",\n        aliases: \"\",\n        placeholder: $t({defaultMessage: \"Question\"}),\n    },\n    {\n        text: $t({defaultMessage: \"/todo (Create a todo list)\"}),\n        name: \"todo\",\n        aliases: \"\",\n    },\n];\n\nexport function filter_and_sort_mentions(is_silent, query, opts) {\n    opts = {\n        want_broadcast: !is_silent,\n        filter_pills: false,\n        ...opts,\n    };\n    return get_person_suggestions(query, opts);\n}\n\nexport function get_pm_people(query) {\n    const opts = {\n        want_broadcast: false,\n        filter_pills: true,\n    };\n    return get_person_suggestions(query, opts);\n}\n\nexport function get_person_suggestions(query, opts) {\n    query = typeahead.clean_query_lowercase(query);\n\n    function filter_persons(all_persons) {\n        let persons;\n\n        if (opts.filter_pills) {\n            persons = compose_pm_pill.filter_taken_users(all_persons);\n        } else {\n            persons = all_persons;\n        }\n        // Exclude muted users from typeaheads.\n        persons = muted_users.filter_muted_users(persons);\n\n        if (opts.want_broadcast) {\n            persons = persons.concat(broadcast_mentions());\n        }\n\n        return persons.filter((item) => query_matches_person(query, item));\n    }\n\n    const groups = user_groups.get_realm_user_groups();\n\n    const filtered_groups = groups.filter((item) => query_matches_name(query, item));\n\n    /*\n        Let's say you're on a big realm and type\n        \"st\" in a typeahead.  Maybe there are like\n        30 people named Steve/Stephanie/etc.  We don't\n        want those search results to squeeze out\n        groups like \"staff\", and we also want to\n        prefer Steve Yang over Stan Adams if the\n        former has sent messages recently, despite\n        the latter being first alphabetically.\n\n        Also, from a performance standpoint, we can\n        save some expensive work if we get enough\n        matches from the more selective group of\n        people.\n\n        Note that we don't actually guarantee that we\n        won't squeeze out groups here, but we make it\n        less likely by removing some users from\n        consideration.  (The sorting step will favor\n        persons who match on prefix to groups who\n        match on prefix.)\n    */\n    const cutoff_length = max_num_items;\n\n    const filtered_message_persons = filter_persons(people.get_active_message_people());\n\n    let filtered_persons;\n\n    if (filtered_message_persons.length >= cutoff_length) {\n        filtered_persons = filtered_message_persons;\n    } else {\n        filtered_persons = filter_persons(people.get_realm_users());\n    }\n\n    return typeahead_helper.sort_recipients({\n        users: filtered_persons,\n        query,\n        current_stream: opts.stream,\n        current_topic: opts.topic,\n        groups: filtered_groups,\n        max_num_items,\n    });\n}\n\nexport function get_stream_topic_data(hacky_this) {\n    const opts = {};\n    const $message_row = hacky_this.$element.closest(\".message_row\");\n    if ($message_row.length === 1) {\n        // we are editing a message so we try to use it's keys.\n        const msg = message_store.get(rows.id($message_row));\n        if (msg.type === \"stream\") {\n            opts.stream = msg.stream;\n            opts.topic = msg.topic;\n        }\n    } else {\n        opts.stream = compose_state.stream_name();\n        opts.topic = compose_state.topic();\n    }\n    return opts;\n}\n\nexport function get_sorted_filtered_items(query) {\n    /*\n        This is just a \"glue\" function to work\n        around bootstrap.  We want to control these\n        three steps ourselves:\n\n            - get data\n            - filter data\n            - sort data\n\n        If we do it ourselves, we can convert some\n        O(N) behavior to just O(1) time.\n\n        For example, we want to avoid dispatching\n        on completing every time through the loop, plus\n        doing the same token cleanup every time.\n\n        It's also a bit easier to debug typeahead when\n        it's all one step, instead of three callbacks.\n\n        (We did the same thing for search suggestions\n        several years ago.)\n    */\n\n    const fetcher = get_candidates.bind(this);\n    const big_results = fetcher(query);\n\n    if (!big_results) {\n        return false;\n    }\n\n    // We are still hacking info onto the \"this\" from\n    // bootstrap.  Yuck.\n    const completing = this.completing;\n    const token = this.token;\n\n    const opts = get_stream_topic_data(this);\n\n    if (completing === \"mention\" || completing === \"silent_mention\") {\n        return filter_and_sort_mentions(big_results.is_silent, token, opts);\n    }\n\n    return filter_and_sort_candidates(completing, big_results, token);\n}\n\nexport function filter_and_sort_candidates(completing, candidates, token) {\n    const matcher = compose_content_matcher(completing, token);\n\n    const small_results = candidates.filter((item) => matcher(item));\n\n    const sorted_results = sort_results(completing, small_results, token);\n\n    return sorted_results;\n}\n\nexport function get_candidates(query) {\n    const split = split_at_cursor(query, this.$element);\n    let current_token = tokenize_compose_str(split[0]);\n    if (current_token === \"\") {\n        return false;\n    }\n    const rest = split[1];\n\n    // If the remaining content after the mention isn't a space or\n    // punctuation (or end of the message), don't try to typeahead; we\n    // probably just have the cursor in the middle of an\n    // already-completed object.\n\n    // We will likely want to extend this list to be more i18n-friendly.\n    const terminal_symbols = \",.;?!()[]> \\\"'\\n\\t\";\n    if (rest !== \"\" && !terminal_symbols.includes(rest[0])) {\n        return false;\n    }\n\n    // Start syntax highlighting autocompleter if the first three characters are ```\n    const syntax_token = current_token.slice(0, 3);\n    if (this.options.completions.syntax && (syntax_token === \"```\" || syntax_token === \"~~~\")) {\n        // Only autocomplete if user starts typing a language after ```\n        if (current_token.length === 3) {\n            return false;\n        }\n\n        // If the only input is a space, don't autocomplete\n        current_token = current_token.slice(3);\n        if (current_token === \" \") {\n            return false;\n        }\n\n        // Trim the first whitespace if it is there\n        if (current_token[0] === \" \") {\n            current_token = current_token.slice(1);\n        }\n        this.completing = \"syntax\";\n        this.token = current_token;\n        return Object.keys(pygments_data.langs);\n    }\n\n    // Only start the emoji autocompleter if : is directly after one\n    // of the whitespace or punctuation chars we split on.\n    if (this.options.completions.emoji && current_token[0] === \":\") {\n        // We don't want to match non-emoji emoticons such\n        // as :P or :-p\n        // Also, if the user has only typed a colon and nothing after,\n        // no need to match yet.\n        if (/^:-.?$/.test(current_token) || /^:[^+a-z]?$/.test(current_token)) {\n            return false;\n        }\n        // Don't autocomplete if there is a space following a ':'\n        if (current_token[1] === \" \") {\n            return false;\n        }\n        this.completing = \"emoji\";\n        this.token = current_token.slice(1);\n        return emoji_collection;\n    }\n\n    if (this.options.completions.mention && current_token[0] === \"@\") {\n        current_token = current_token.slice(1);\n        this.completing = \"mention\";\n        // Silent mentions\n        let is_silent = false;\n        if (current_token.startsWith(\"_\")) {\n            this.completing = \"silent_mention\";\n            is_silent = true;\n            current_token = current_token.slice(1);\n        }\n        current_token = filter_mention_name(current_token);\n        if (!current_token && typeof current_token === \"boolean\") {\n            this.completing = null;\n            return false;\n        }\n        this.token = current_token;\n        return {is_silent};\n    }\n\n    function get_slash_commands_data() {\n        const commands = slash_commands;\n        return commands;\n    }\n\n    if (this.options.completions.slash && current_token[0] === \"/\") {\n        current_token = current_token.slice(1);\n\n        this.completing = \"slash\";\n        this.token = current_token;\n        return get_slash_commands_data();\n    }\n\n    if (this.options.completions.stream && current_token[0] === \"#\") {\n        if (current_token.length === 1) {\n            return false;\n        }\n\n        current_token = current_token.slice(1);\n        if (current_token.startsWith(\"**\")) {\n            current_token = current_token.slice(2);\n        }\n\n        // Don't autocomplete if there is a space following a '#'\n        if (current_token[0] === \" \") {\n            return false;\n        }\n\n        this.completing = \"stream\";\n        this.token = current_token;\n        return stream_data.get_unsorted_subs();\n    }\n\n    if (this.options.completions.topic) {\n        // Stream regex modified from marked.js\n        // Matches '#**stream name** >' at the end of a split.\n        const stream_regex = /#\\*\\*([^*>]+)\\*\\*\\s?>$/;\n        const should_jump_inside_typeahead = stream_regex.test(split[0]);\n        if (should_jump_inside_typeahead) {\n            this.completing = \"topic_jump\";\n            this.token = \">\";\n            // We return something so that the typeahead is shown, but ultimately\n            return [\"\"];\n        }\n\n        // Matches '#**stream name>some text' at the end of a split.\n        const stream_topic_regex = /#\\*\\*([^*>]+)>([^*]*)$/;\n        const should_begin_typeahead = stream_topic_regex.test(split[0]);\n        if (should_begin_typeahead) {\n            this.completing = \"topic_list\";\n            const tokens = stream_topic_regex.exec(split[0]);\n            if (tokens[1]) {\n                const stream_name = tokens[1];\n                this.token = tokens[2] || \"\";\n\n                // Don't autocomplete if there is a space following '>'\n                if (this.token[0] === \" \") {\n                    return false;\n                }\n\n                const topic_list = topics_seen_for(stream_name);\n                if (should_show_custom_query(this.token, topic_list)) {\n                    topic_list.push(this.token);\n                }\n                return topic_list;\n            }\n        }\n    }\n    if (this.options.completions.timestamp) {\n        const time_jump_regex = /<time(:([^>]*?)>?)?$/;\n        if (time_jump_regex.test(split[0])) {\n            this.completing = \"time_jump\";\n            return [$t({defaultMessage: \"Mention a time-zone-aware time\"})];\n        }\n    }\n    return false;\n}\n\nexport function content_highlighter(item) {\n    switch (this.completing) {\n        case \"emoji\":\n            return typeahead_helper.render_emoji(item);\n        case \"mention\":\n            return typeahead_helper.render_person_or_user_group(item);\n        case \"silent_mention\":\n            return typeahead_helper.render_person_or_user_group(item);\n        case \"slash\":\n            return typeahead_helper.render_typeahead_item({\n                primary: item.text,\n            });\n        case \"stream\":\n            return typeahead_helper.render_stream(item);\n        case \"syntax\":\n            return typeahead_helper.render_typeahead_item({primary: item});\n        case \"topic_jump\":\n            return typeahead_helper.render_typeahead_item({primary: item});\n        case \"topic_list\":\n            return typeahead_helper.render_typeahead_item({primary: item});\n        case \"time_jump\":\n            return typeahead_helper.render_typeahead_item({primary: item});\n        default:\n            return undefined;\n    }\n}\n\nexport function content_typeahead_selected(item, event) {\n    const pieces = split_at_cursor(this.query, this.$element);\n    let beginning = pieces[0];\n    let rest = pieces[1];\n    const $textbox = this.$element;\n    // Accepting some typeahead selections, like polls, will generate\n    // placeholder text that is selected, in order to clarify for the\n    // user what a given parameter is for. This object stores the\n    // highlight offsets for that purpose.\n    const highlight = {};\n\n    switch (this.completing) {\n        case \"emoji\":\n            // leading and trailing spaces are required for emoji,\n            // except if it begins a message or a new line.\n            if (\n                beginning.lastIndexOf(\":\") === 0 ||\n                beginning.charAt(beginning.lastIndexOf(\":\") - 1) === \" \" ||\n                beginning.charAt(beginning.lastIndexOf(\":\") - 1) === \"\\n\"\n            ) {\n                beginning =\n                    beginning.slice(0, -this.token.length - 1) + \":\" + item.emoji_name + \": \";\n            } else {\n                beginning =\n                    beginning.slice(0, -this.token.length - 1) + \" :\" + item.emoji_name + \": \";\n            }\n            break;\n        case \"silent_mention\":\n        case \"mention\": {\n            const is_silent = this.completing === \"silent_mention\";\n            beginning = beginning.slice(0, -this.token.length - 1);\n            if (beginning.endsWith(\"@_*\")) {\n                beginning = beginning.slice(0, -3);\n            } else if (beginning.endsWith(\"@*\") || beginning.endsWith(\"@_\")) {\n                beginning = beginning.slice(0, -2);\n            } else if (beginning.endsWith(\"@\")) {\n                beginning = beginning.slice(0, -1);\n            }\n            if (user_groups.is_user_group(item)) {\n                let user_group_mention_text = is_silent ? \"@_*\" : \"@*\";\n                user_group_mention_text += item.name + \"* \";\n                beginning += user_group_mention_text;\n                // We could theoretically warn folks if they are\n                // mentioning a user group that literally has zero\n                // members where we are posting to, but we don't have\n                // that functionality yet, and we haven't gotten much\n                // feedback on this being an actual pitfall.\n            } else {\n                const mention_text = people.get_mention_syntax(\n                    item.full_name,\n                    item.user_id,\n                    is_silent,\n                );\n                beginning += mention_text + \" \";\n                if (!is_silent) {\n                    compose_validate.warn_if_mentioning_unsubscribed_user(item);\n                }\n            }\n            break;\n        }\n        case \"slash\":\n            beginning = beginning.slice(0, -this.token.length - 1) + \"/\" + item.name + \" \";\n            if (item.placeholder) {\n                beginning = beginning + item.placeholder;\n                highlight.start = item.name.length + 2;\n                highlight.end = highlight.start + item.placeholder.length;\n            }\n            break;\n        case \"stream\":\n            beginning = beginning.slice(0, -this.token.length - 1);\n            if (beginning.endsWith(\"#*\")) {\n                beginning = beginning.slice(0, -2);\n            }\n            beginning += \"#**\" + item.name;\n            if (event && event.key === \">\") {\n                // Normally, one accepts typeahead with `Tab` or `Enter`, but when completing\n                // stream typeahead, we allow `>`, the delimiter for stream+topic mentions,\n                // as a completion that automatically sets up stream+topic typeahead for you.\n                beginning += \">\";\n            } else {\n                beginning += \"** \";\n            }\n            compose_validate.warn_if_private_stream_is_linked(item);\n            break;\n        case \"syntax\": {\n            // Isolate the end index of the triple backticks/tildes, including\n            // possibly a space afterward\n            const backticks = beginning.length - this.token.length;\n            beginning = beginning.slice(0, backticks) + item;\n            if (item === \"spoiler\") {\n                // to add in and highlight placeholder \"Header\"\n                const placeholder = $t({defaultMessage: \"Header\"});\n                highlight.start = beginning.length + 1;\n                beginning = beginning + \" \" + placeholder;\n                highlight.end = highlight.start + placeholder.length;\n            }\n            // If cursor is at end of input (\"rest\" is empty), then\n            // add a closing fence after the cursor\n            // If there is more text after the cursor, then don't\n            // touch \"rest\" (i.e. do not add a closing fence)\n            if (rest === \"\") {\n                beginning = beginning + \"\\n\";\n                rest = \"\\n\" + beginning.slice(Math.max(0, backticks - 4), backticks).trim() + rest;\n            }\n            break;\n        }\n        case \"topic_jump\": {\n            // Put the cursor at the end of immediately preceding stream mention syntax,\n            // just before where the `**` at the end of the syntax.  This will delete that\n            // final ** and set things up for the topic_list typeahead.\n            const index = beginning.lastIndexOf(\"**\");\n            if (index !== -1) {\n                beginning = beginning.slice(0, index) + \">\";\n            }\n            break;\n        }\n        case \"topic_list\": {\n            // Stream + topic mention typeahead; close the stream+topic mention syntax\n            // with the topic and the final **.  Note that this.token.length can be 0\n            // if we are completing from `**streamname>`.\n            const start = beginning.length - this.token.length;\n            beginning = beginning.slice(0, start) + item + \"** \";\n            break;\n        }\n        case \"time_jump\": {\n            let timestring = beginning.slice(Math.max(0, beginning.lastIndexOf(\"<time:\")));\n            if (timestring.startsWith(\"<time:\") && timestring.endsWith(\">\")) {\n                timestring = timestring.slice(6, -1);\n            }\n            const timestamp = timerender.get_timestamp_for_flatpickr(timestring);\n\n            const on_timestamp_selection = (val) => {\n                const datestr = val;\n                beginning =\n                    beginning.slice(0, Math.max(0, beginning.lastIndexOf(\"<time\"))) +\n                    `<time:${datestr}> `;\n                if (rest.startsWith(\">\")) {\n                    rest = rest.slice(1);\n                }\n                $textbox.val(beginning + rest);\n                $textbox.caret(beginning.length, beginning.length);\n                compose_ui.autosize_textarea($textbox);\n            };\n            flatpickr.show_flatpickr(this.$element[0], on_timestamp_selection, timestamp);\n            return beginning + rest;\n        }\n    }\n\n    // Keep the cursor after the newly inserted text / selecting the\n    // placeholder text, as Bootstrap will call $textbox.change() to\n    // overwrite the text in the textbox.\n    setTimeout(() => {\n        // Select any placeholder text configured to be highlighted.\n        if (highlight.start && highlight.end) {\n            $textbox.range(highlight.start, highlight.end);\n        } else {\n            $textbox.caret(beginning.length, beginning.length);\n        }\n        // Also, trigger autosize to check if compose box needs to be resized.\n        compose_ui.autosize_textarea($textbox);\n    }, 0);\n    return beginning + rest;\n}\n\nexport function compose_content_matcher(completing, token) {\n    switch (completing) {\n        case \"emoji\":\n            return typeahead.get_emoji_matcher(token);\n        case \"slash\":\n            return get_slash_matcher(token);\n        case \"stream\":\n            return get_stream_or_user_group_matcher(token);\n        case \"syntax\":\n            return get_language_matcher(token);\n        case \"topic_list\":\n            return get_topic_matcher(token);\n    }\n\n    return function () {\n        switch (completing) {\n            case \"topic_jump\":\n            case \"time_jump\":\n                // these don't actually have a typeahead popover, so we return quickly here.\n                return true;\n            default:\n                return undefined;\n        }\n    };\n}\n\nexport function sort_results(completing, matches, token) {\n    switch (completing) {\n        case \"emoji\":\n            return typeahead.sort_emojis(matches, token);\n        case \"slash\":\n            return typeahead_helper.sort_slash_commands(matches, token);\n        case \"stream\":\n            return typeahead_helper.sort_streams(matches, token);\n        case \"syntax\":\n            return typeahead_helper.sort_languages(matches, token);\n        case \"topic_jump\":\n        case \"time_jump\":\n            // topic_jump doesn't actually have a typeahead popover, so we return quickly here.\n            return matches;\n        case \"topic_list\":\n            return typeahead_helper.sorter(token, matches, (x) => x);\n        default:\n            return undefined;\n    }\n}\n\nexport function compose_automated_selection() {\n    if (this.completing === \"topic_jump\") {\n        // automatically jump inside stream mention on typing > just after\n        // a stream mention, to begin stream+topic mention typeahead (topic_list).\n        return true;\n    }\n    return false;\n}\n\nexport function compose_trigger_selection(event) {\n    if (this.completing === \"stream\" && event.key === \">\") {\n        // complete stream typeahead partially to immediately start the topic_list typeahead.\n        return true;\n    }\n    return false;\n}\n\nexport function initialize_topic_edit_typeahead(form_field, stream_name, dropup) {\n    const options = {\n        fixed: true,\n        dropup,\n        highlighter(item) {\n            return typeahead_helper.render_typeahead_item({primary: item});\n        },\n        sorter(items) {\n            const sorted = typeahead_helper.sorter(this.query, items, (x) => x);\n            if (sorted.length > 0 && !sorted.includes(this.query)) {\n                sorted.unshift(this.query);\n            }\n            return sorted;\n        },\n        source() {\n            return topics_seen_for(stream_name);\n        },\n        items: 5,\n    };\n    form_field.typeahead(options);\n}\n\nfunction get_header_html() {\n    let tip_text = \"\";\n    switch (this.completing) {\n        case \"stream\":\n            tip_text = $t({defaultMessage: \"Press > for list of topics\"});\n            break;\n        case \"silent_mention\":\n            tip_text = $t({defaultMessage: \"Silent mentions do not trigger notifications.\"});\n            break;\n        case \"syntax\":\n            if (page_params.realm_default_code_block_language !== null) {\n                tip_text = $t(\n                    {defaultMessage: \"Default is {language}. Use 'text' to disable highlighting.\"},\n                    {language: page_params.realm_default_code_block_language},\n                );\n                break;\n            }\n            return false;\n        default:\n            return false;\n    }\n    return `<em>${_.escape(tip_text)}</em>`;\n}\n\nexport function initialize_compose_typeahead(selector) {\n    const completions = {\n        mention: true,\n        emoji: true,\n        silent_mention: true,\n        slash: true,\n        stream: true,\n        syntax: true,\n        topic: true,\n        timestamp: true,\n    };\n\n    $(selector).typeahead({\n        items: max_num_items,\n        dropup: true,\n        fixed: true,\n        // Performance note: We have trivial matcher/sorters to do\n        // matching and sorting inside the `source` field to avoid\n        // O(n) behavior in the number of users in the organization\n        // inside the typeahead library.\n        source: get_sorted_filtered_items,\n        highlighter: content_highlighter,\n        matcher() {\n            return true;\n        },\n        sorter(items) {\n            return items;\n        },\n        updater: content_typeahead_selected,\n        stopAdvance: true, // Do not advance to the next field on a Tab or Enter\n        completions,\n        automated: compose_automated_selection,\n        trigger_selection: compose_trigger_selection,\n        header: get_header_html,\n    });\n}\n\nexport function initialize() {\n    update_emoji_data();\n\n    // These handlers are at the \"form\" level so that they are called after typeahead\n    $(\"form#send_message_form\").on(\"keydown\", handle_keydown);\n    $(\"form#send_message_form\").on(\"keyup\", handle_keyup);\n\n    // limit number of items so the list doesn't fall off the screen\n    $(\"#stream_message_recipient_stream\").typeahead({\n        source() {\n            return stream_data.subscribed_streams();\n        },\n        items: 3,\n        fixed: true,\n        highlighter(item) {\n            return typeahead_helper.render_typeahead_item({primary: item});\n        },\n        matcher(item) {\n            // The matcher for \"stream\" is strictly prefix-based,\n            // because we want to avoid mixing up streams.\n            const q = this.query.trim().toLowerCase();\n            return item.toLowerCase().startsWith(q);\n        },\n    });\n\n    $(\"#stream_message_recipient_topic\").typeahead({\n        source() {\n            const stream_name = compose_state.stream_name();\n            return topics_seen_for(stream_name);\n        },\n        items: 3,\n        fixed: true,\n        highlighter(item) {\n            return typeahead_helper.render_typeahead_item({primary: item});\n        },\n        sorter(items) {\n            const sorted = typeahead_helper.sorter(this.query, items, (x) => x);\n            if (sorted.length > 0 && !sorted.includes(this.query)) {\n                sorted.unshift(this.query);\n            }\n            return sorted;\n        },\n    });\n\n    $(\"#private_message_recipient\").typeahead({\n        source: get_pm_people,\n        items: max_num_items,\n        dropup: true,\n        fixed: true,\n        highlighter(item) {\n            return typeahead_helper.render_person_or_user_group(item);\n        },\n        matcher() {\n            return true;\n        },\n        sorter(items) {\n            return items;\n        },\n        updater(item) {\n            if (user_groups.is_user_group(item)) {\n                for (const user_id of item.members) {\n                    const user = people.get_by_user_id(user_id);\n                    // filter out inserted users and current user from pill insertion\n                    const inserted_users = user_pill.get_user_ids(compose_pm_pill.widget);\n                    const current_user = people.is_current_user(user.email);\n                    if (!inserted_users.includes(user.user_id) && !current_user) {\n                        compose_pm_pill.set_from_typeahead(user);\n                    }\n                }\n                // clear input pill in the event no pills were added\n                const pill_widget = compose_pm_pill.widget;\n                if (pill_widget.clear_text !== undefined) {\n                    pill_widget.clear_text();\n                }\n            } else {\n                compose_pm_pill.set_from_typeahead(item);\n            }\n        },\n        stopAdvance: true, // Do not advance to the next field on a Tab or Enter\n    });\n\n    initialize_compose_typeahead(\"#compose-textarea\");\n\n    $(\"#private_message_recipient\").on(\"blur\", function () {\n        const val = $(this).val();\n        const recipients = typeahead_helper.get_cleaned_pm_recipients(val);\n        $(this).val(recipients.join(\", \"));\n    });\n}\n","import $ from \"jquery\";\n\nimport * as message_flags from \"./message_flags\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_viewport from \"./message_viewport\";\nimport * as recent_topics_util from \"./recent_topics_util\";\nimport * as rows from \"./rows\";\n\n/*\nThis library implements two related, similar concepts:\n\n- condensing, i.e. cutting off messages taller than about a half\n  screen so that they aren't distractingly tall (and offering a button\n  to uncondense them).\n\n- Collapsing, i.e. taking a message and reducing its height to a\n  single line, with a button to see the content.\n\n*/\n\nconst _message_content_height_cache = new Map();\n\nfunction show_more_link($row) {\n    $row.find(\".message_condenser\").hide();\n    $row.find(\".message_expander\").show();\n}\n\nfunction show_condense_link($row) {\n    $row.find(\".message_expander\").hide();\n    $row.find(\".message_condenser\").show();\n}\n\nfunction condense_row($row) {\n    const $content = $row.find(\".message_content\");\n    $content.addClass(\"condensed\");\n    show_more_link($row);\n}\n\nfunction uncondense_row($row) {\n    const $content = $row.find(\".message_content\");\n    $content.removeClass(\"condensed\");\n    show_condense_link($row);\n}\n\nexport function uncollapse($row) {\n    // Uncollapse a message, restoring the condensed message [More] or\n    // [Show less] link if necessary.\n    const message = message_lists.current.get(rows.id($row));\n    message.collapsed = false;\n    message_flags.save_uncollapsed(message);\n\n    const process_row = function process_row($row) {\n        const $content = $row.find(\".message_content\");\n        $content.removeClass(\"collapsed\");\n\n        if (message.condensed === true) {\n            // This message was condensed by the user, so re-show the\n            // [More] link.\n            condense_row($row);\n        } else if (message.condensed === false) {\n            // This message was un-condensed by the user, so re-show the\n            // [Show less] link.\n            uncondense_row($row);\n        } else if ($content.hasClass(\"could-be-condensed\")) {\n            // By default, condense a long message.\n            condense_row($row);\n        } else {\n            // This was a short message, no more need for a [More] link.\n            $row.find(\".message_expander\").hide();\n        }\n    };\n\n    // We also need to collapse this message in the home view\n    const $home_row = message_lists.home.get_row(rows.id($row));\n\n    process_row($row);\n    process_row($home_row);\n}\n\nexport function collapse($row) {\n    // Collapse a message, hiding the condensed message [More] or\n    // [Show less] link if necessary.\n    const message = message_lists.current.get(rows.id($row));\n    message.collapsed = true;\n\n    if (message.locally_echoed) {\n        // Trying to collapse a locally echoed message is\n        // very rare, and in our current implementation the\n        // server response overwrites the flag, so we just\n        // punt for now.\n        return;\n    }\n\n    message_flags.save_collapsed(message);\n\n    const process_row = function process_row($row) {\n        $row.find(\".message_content\").addClass(\"collapsed\");\n        show_more_link($row);\n    };\n\n    // We also need to collapse this message in the home view\n    const $home_row = message_lists.home.get_row(rows.id($row));\n\n    process_row($row);\n    process_row($home_row);\n}\n\nexport function toggle_collapse(message) {\n    if (message.is_me_message) {\n        // Disabled temporarily because /me messages don't have a\n        // styling for collapsing /me messages (they only recently\n        // added multi-line support).  See also popovers.js.\n        return;\n    }\n\n    // This function implements a multi-way toggle, to try to do what\n    // the user wants for messages:\n    //\n    // * If the message is currently showing any [More] link, either\n    //   because it was previously condensed or collapsed, fully display it.\n    // * If the message is fully visible, either because it's too short to\n    //   condense or because it's already uncondensed, collapse it\n\n    const $row = message_lists.current.get_row(message.id);\n    if (!$row) {\n        return;\n    }\n\n    const $content = $row.find(\".message_content\");\n    const is_condensable = $content.hasClass(\"could-be-condensed\");\n    const is_condensed = $content.hasClass(\"condensed\");\n    if (message.collapsed) {\n        if (is_condensable) {\n            message.condensed = true;\n            $content.addClass(\"condensed\");\n            show_message_expander($row);\n            $row.find(\".message_condenser\").hide();\n        }\n        uncollapse($row);\n    } else {\n        if (is_condensed) {\n            message.condensed = false;\n            $content.removeClass(\"condensed\");\n            hide_message_expander($row);\n            $row.find(\".message_condenser\").show();\n        } else {\n            collapse($row);\n        }\n    }\n}\n\nexport function clear_message_content_height_cache() {\n    _message_content_height_cache.clear();\n}\n\nexport function un_cache_message_content_height(message_id) {\n    _message_content_height_cache.delete(message_id);\n}\n\nfunction get_message_height(elem, message_id) {\n    if (_message_content_height_cache.has(message_id)) {\n        return _message_content_height_cache.get(message_id);\n    }\n\n    // shown to be ~2.5x faster than Node.getBoundingClientRect().\n    const height = elem.offsetHeight;\n    if (!recent_topics_util.is_visible()) {\n        _message_content_height_cache.set(message_id, height);\n    }\n    return height;\n}\n\nexport function hide_message_expander($row) {\n    if ($row.find(\".could-be-condensed\").length !== 0) {\n        $row.find(\".message_expander\").hide();\n    }\n}\n\nexport function hide_message_condenser($row) {\n    if ($row.find(\".could-be-condensed\").length !== 0) {\n        $row.find(\".message_condenser\").hide();\n    }\n}\n\nexport function show_message_expander($row) {\n    if ($row.find(\".could-be-condensed\").length !== 0) {\n        $row.find(\".message_expander\").show();\n    }\n}\n\nexport function show_message_condenser($row) {\n    if ($row.find(\".could-be-condensed\").length !== 0) {\n        $row.find(\".message_condenser\").show();\n    }\n}\n\nexport function condense_and_collapse(elems) {\n    const height_cutoff = message_viewport.height() * 0.65;\n\n    for (const elem of elems) {\n        const $content = $(elem).find(\".message_content\");\n\n        if ($content.length !== 1) {\n            // We could have a \"/me did this\" message or something\n            // else without a `message_content` div.\n            continue;\n        }\n\n        const message_id = rows.id($(elem));\n\n        if (!message_id) {\n            continue;\n        }\n\n        const message = message_lists.current.get(message_id);\n        if (message === undefined) {\n            continue;\n        }\n\n        const message_height = get_message_height(elem, message.id);\n        const long_message = message_height > height_cutoff;\n        if (long_message) {\n            // All long messages are flagged as such.\n            $content.addClass(\"could-be-condensed\");\n        } else {\n            $content.removeClass(\"could-be-condensed\");\n        }\n\n        // If message.condensed is defined, then the user has manually\n        // specified whether this message should be expanded or condensed.\n        if (message.condensed === true) {\n            condense_row($(elem));\n            continue;\n        }\n\n        if (message.condensed === false) {\n            uncondense_row($(elem));\n            continue;\n        }\n\n        if (long_message) {\n            // By default, condense a long message.\n            condense_row($(elem));\n        } else {\n            $content.removeClass(\"condensed\");\n            $(elem).find(\".message_expander\").hide();\n        }\n\n        // Completely hide the message and replace it with a [More]\n        // link if the user has collapsed it.\n        if (message.collapsed) {\n            $content.addClass(\"collapsed\");\n            $(elem).find(\".message_expander\").show();\n        }\n    }\n}\n\nexport function initialize() {\n    $(\"#message_feed_container\").on(\"click\", \".message_expander\", function (e) {\n        // Expanding a message can mean either uncollapsing or\n        // uncondensing it.\n        const $row = $(this).closest(\".message_row\");\n        const message = message_lists.current.get(rows.id($row));\n        const $content = $row.find(\".message_content\");\n        if (message.collapsed) {\n            // Uncollapse.\n            uncollapse($row);\n        } else if ($content.hasClass(\"condensed\")) {\n            // Uncondense (show the full long message).\n            message.condensed = false;\n            $content.removeClass(\"condensed\");\n            $(this).hide();\n            $row.find(\".message_condenser\").show();\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    $(\"#message_feed_container\").on(\"click\", \".message_condenser\", function (e) {\n        const $row = $(this).closest(\".message_row\");\n        message_lists.current.get(rows.id($row)).condensed = true;\n        condense_row($row);\n        e.stopPropagation();\n        e.preventDefault();\n    });\n}\n","import * as dialog_widget from \"./dialog_widget\";\nimport {$t_html} from \"./i18n\";\n\nexport function launch(conf) {\n    dialog_widget.launch({\n        ...conf,\n        close_on_submit: true,\n        focus_submit_on_open: true,\n        html_submit_button: $t_html({defaultMessage: \"Confirm\"}),\n        // Used to control button colors in the template.\n    });\n}\n","import $ from \"jquery\";\nimport TurndownService from \"turndown\";\n\nimport * as compose_ui from \"./compose_ui\";\nimport * as message_lists from \"./message_lists\";\nimport {page_params} from \"./page_params\";\nimport * as rows from \"./rows\";\n\nfunction find_boundary_tr($initial_tr, iterate_row) {\n    let j;\n    let skip_same_td_check = false;\n    let $tr = $initial_tr;\n\n    // If the selection boundary is somewhere that does not have a\n    // parent tr, we should let the browser handle the copy-paste\n    // entirely on its own\n    if ($tr.length === 0) {\n        return undefined;\n    }\n\n    // If the selection boundary is on a table row that does not have an\n    // associated message id (because the user clicked between messages),\n    // then scan downwards until we hit a table row with a message id.\n    // To ensure we can't enter an infinite loop, bail out (and let the\n    // browser handle the copy-paste on its own) if we don't hit what we\n    // are looking for within 10 rows.\n    for (j = 0; !$tr.is(\".message_row\") && j < 10; j += 1) {\n        $tr = iterate_row($tr);\n    }\n    if (j === 10) {\n        return undefined;\n    } else if (j !== 0) {\n        // If we updated tr, then we are not dealing with a selection\n        // that is entirely within one td, and we can skip the same td\n        // check (In fact, we need to because it won't work correctly\n        // in this case)\n        skip_same_td_check = true;\n    }\n    return [rows.id($tr), skip_same_td_check];\n}\n\nfunction construct_recipient_header($message_row) {\n    const message_header_content = rows\n        .get_message_recipient_header($message_row)\n        .text()\n        .replace(/\\s+/g, \" \")\n        .replace(/^\\s/, \"\")\n        .replace(/\\s$/, \"\");\n    return $(\"<p>\").append($(\"<strong>\").text(message_header_content));\n}\n\n/*\nThe techniques we use in this code date back to\n2013 and may be obsolete today (and may not have\nbeen even the best workaround back then).\n\nhttps://github.com/zulip/zulip/commit/fc0b7c00f16316a554349f0ad58c6517ebdd7ac4\n\nThe idea is that we build a temp div, let jQuery process the\nselection, then restore the selection on a zero-second timer back\nto the original selection.\n\nDo not be afraid to change this code if you understand\nhow modern browsers deal with copy/paste.  Just test\nyour changes carefully.\n*/\nfunction construct_copy_div($div, start_id, end_id) {\n    const copy_rows = rows.visible_range(start_id, end_id);\n\n    const $start_row = copy_rows[0];\n    const $start_recipient_row = rows.get_message_recipient_row($start_row);\n    const start_recipient_row_id = rows.id_for_recipient_row($start_recipient_row);\n    let should_include_start_recipient_header = false;\n    let last_recipient_row_id = start_recipient_row_id;\n\n    for (const $row of copy_rows) {\n        const recipient_row_id = rows.id_for_recipient_row(rows.get_message_recipient_row($row));\n        // if we found a message from another recipient,\n        // it means that we have messages from several recipients,\n        // so we have to add new recipient's bar to final copied message\n        // and wouldn't forget to add start_recipient's bar at the beginning of final message\n        if (recipient_row_id !== last_recipient_row_id) {\n            $div.append(construct_recipient_header($row));\n            last_recipient_row_id = recipient_row_id;\n            should_include_start_recipient_header = true;\n        }\n        const message = message_lists.current.get(rows.id($row));\n        const $content = $(message.content);\n        $content.first().prepend(message.sender_full_name + \": \");\n        $div.append($content);\n    }\n\n    if (should_include_start_recipient_header) {\n        $div.prepend(construct_recipient_header($start_row));\n    }\n}\n\nfunction select_div($div, selection) {\n    $div.css({\n        position: \"absolute\",\n        left: \"-99999px\",\n        // Color and background is made according to \"light theme\"\n        // exclusively here because when copying the content\n        // into, say, Gmail compose box, the styles come along.\n        // This is done to avoid copying the content with dark\n        // background when using the app in dark theme.\n        // We can avoid other custom styles since they are wrapped\n        // inside another parent such as `.message_content`.\n        color: \"#333\",\n        background: \"#FFF\",\n    }).attr(\"id\", \"copytempdiv\");\n    $(\"body\").append($div);\n    selection.selectAllChildren($div[0]);\n}\n\nfunction remove_div(div, ranges, selection) {\n    window.setTimeout(() => {\n        selection = window.getSelection();\n        selection.removeAllRanges();\n\n        for (const range of ranges) {\n            selection.addRange(range);\n        }\n\n        $(\"#copytempdiv\").remove();\n    }, 0);\n}\n\nexport function copy_handler() {\n    // This is the main handler for copying message content via\n    // `Ctrl+C` in Zulip (note that this is totally independent of the\n    // \"select region\" copy behavior on Linux; that is handled\n    // entirely by the browser, our HTML layout, and our use of the\n    // no-select/auto-select CSS classes).  We put considerable effort\n    // into producing a nice result that pastes well into other tools.\n    // Our user-facing specification is the following:\n    //\n    // * If the selection is contained within a single message, we\n    //   want to just copy the portion that was selected, which we\n    //   implement by letting the browser handle the Ctrl+C event.\n    //\n    // * Otherwise, we want to copy the bodies of all messages that\n    //   were partially covered by the selection.\n\n    const selection = window.getSelection();\n    const analysis = analyze_selection(selection);\n    const ranges = analysis.ranges;\n    const start_id = analysis.start_id;\n    const end_id = analysis.end_id;\n    const skip_same_td_check = analysis.skip_same_td_check;\n    const $div = $(\"<div>\");\n\n    if (start_id === undefined || end_id === undefined) {\n        // In this case either the starting message or the ending\n        // message is not defined, so this is definitely not a\n        // multi-message selection and we can let the browser handle\n        // the copy.\n        document.execCommand(\"copy\");\n        return;\n    }\n\n    if (!skip_same_td_check && start_id === end_id) {\n        // Check whether the selection both starts and ends in the\n        // same message.  If so, Let the browser handle this.\n        document.execCommand(\"copy\");\n        return;\n    }\n\n    // We've now decided to handle the copy event ourselves.\n    //\n    // We construct a temporary div for what we want the copy to pick up.\n    // We construct the div only once, rather than for each range as we can\n    // determine the starting and ending point with more confidence for the\n    // whole selection. When constructing for each `Range`, there is a high\n    // chance for overlaps between same message ids, avoiding which is much\n    // more difficult since we can get a range (start_id and end_id) for\n    // each selection `Range`.\n    construct_copy_div($div, start_id, end_id);\n\n    // Select div so that the browser will copy it\n    // instead of copying the original selection\n    select_div($div, selection);\n    document.execCommand(\"copy\");\n    remove_div($div, ranges, selection);\n}\n\nexport function analyze_selection(selection) {\n    // Here we analyze our selection to determine if part of a message\n    // or multiple messages are selected.\n    //\n    // Firefox and Chrome handle selection of multiple messages\n    // differently. Firefox typically creates multiple ranges for the\n    // selection, whereas Chrome typically creates just one.\n    //\n    // Our goal in the below loop is to compute and be prepared to\n    // analyze the combined range of the selections, and copy their\n    // full content.\n\n    let i;\n    let range;\n    const ranges = [];\n    let $startc;\n    let $endc;\n    let $initial_end_tr;\n    let start_id;\n    let end_id;\n    let start_data;\n    let end_data;\n    // skip_same_td_check is true whenever we know for a fact that the\n    // selection covers multiple messages (and thus we should no\n    // longer consider letting the browser handle the copy event).\n    let skip_same_td_check = false;\n\n    for (i = 0; i < selection.rangeCount; i += 1) {\n        range = selection.getRangeAt(i);\n        ranges.push(range);\n\n        $startc = $(range.startContainer);\n        start_data = find_boundary_tr(\n            $startc.parents(\".selectable_row, .message_header\").first(),\n            ($row) => $row.next(),\n        );\n        if (start_data === undefined) {\n            // Skip any selection sections that don't intersect a message.\n            continue;\n        }\n        if (start_id === undefined) {\n            // start_id is the Zulip message ID of the first message\n            // touched by the selection.\n            start_id = start_data[0];\n        }\n\n        $endc = $(range.endContainer);\n        $initial_end_tr = get_end_tr_from_endc($endc);\n        end_data = find_boundary_tr($initial_end_tr, ($row) => $row.prev());\n\n        if (end_data === undefined) {\n            // Skip any selection sections that don't intersect a message.\n            continue;\n        }\n        if (end_data[0] !== undefined) {\n            end_id = end_data[0];\n        }\n\n        if (start_data[1] || end_data[1]) {\n            // If the find_boundary_tr call for either the first or\n            // the last message covered by the selection\n            skip_same_td_check = true;\n        }\n    }\n\n    return {\n        ranges,\n        start_id,\n        end_id,\n        skip_same_td_check,\n    };\n}\n\nfunction get_end_tr_from_endc($endc) {\n    if ($endc.attr(\"id\") === \"bottom_whitespace\" || $endc.attr(\"id\") === \"compose_close\") {\n        // If the selection ends in the bottom whitespace, we should\n        // act as though the selection ends on the final message.\n        // This handles the issue that Chrome seems to like selecting\n        // the compose_close button when you go off the end of the\n        // last message\n        return $(\".message_row\").last();\n    }\n\n    // Sometimes (especially when three click selecting in Chrome) the selection\n    // can end in a hidden element in e.g. the next message, a date divider.\n    // We can tell this is the case because the selection isn't inside a\n    // `messagebox-content` div, which is where the message text itself is.\n    // TODO: Ideally make it so that the selection cannot end there.\n    // For now, we find find the message row directly above wherever the\n    // selection ended.\n    if ($endc.closest(\".messagebox-content\").length === 0) {\n        // If the selection ends within the message following the selected\n        // messages, go back to use the actual last message.\n        if ($endc.parents(\".message_row\").length > 0) {\n            const $parent_msg = $endc.parents(\".message_row\").first();\n            return $parent_msg.prev(\".message_row\");\n        }\n        // If it's not in a .message_row, it's probably in a .message_header and\n        // we can use the last message from the previous recipient_row.\n        if ($endc.parents(\".message_header\").length > 0) {\n            const $overflow_recipient_row = $endc.parents(\".recipient_row\").first();\n            return $overflow_recipient_row.prev(\".recipient_row\").last(\".message_row\");\n        }\n        // If somehow we get here, do the default return.\n    }\n\n    return $endc.parents(\".selectable_row\").first();\n}\n\nexport function paste_handler_converter(paste_html) {\n    const turndownService = new TurndownService();\n    turndownService.addRule(\"headings\", {\n        filter: [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"],\n        replacement(content) {\n            return content;\n        },\n    });\n    turndownService.addRule(\"emphasis\", {\n        filter: [\"em\", \"i\"],\n        replacement(content) {\n            return \"*\" + content + \"*\";\n        },\n    });\n    // Checks for raw links without custom text or title.\n    turndownService.addRule(\"links\", {\n        filter(node) {\n            return (\n                node.nodeName === \"A\" && node.href === node.innerHTML && node.href === node.title\n            );\n        },\n        replacement(content) {\n            return content;\n        },\n    });\n\n    let markdown_text = turndownService.turndown(paste_html);\n\n    // Checks for escaped ordered list syntax.\n    markdown_text = markdown_text.replace(/^(\\W* {0,3})(\\d+)\\\\\\. /gm, \"$1$2. \");\n\n    // Removes newlines before the start of a list and between list elements.\n    markdown_text = markdown_text.replace(/\\n+([*+-])/g, \"\\n$1\");\n    return markdown_text;\n}\n\nexport function paste_handler(event) {\n    const clipboardData = event.originalEvent.clipboardData;\n    if (!clipboardData) {\n        // On IE11, ClipboardData isn't defined.  One can instead\n        // access it with `window.clipboardData`, but even that\n        // doesn't support text/html, so this code path couldn't do\n        // anything special anyway.  So we instead just let the\n        // default paste handler run on IE11.\n        return;\n    }\n\n    if (clipboardData.getData) {\n        const paste_html = clipboardData.getData(\"text/html\");\n        if (paste_html && page_params.development_environment) {\n            const text = paste_handler_converter(paste_html);\n            const mdImageRegex = /^!\\[.*]\\(.*\\)$/;\n            if (mdImageRegex.test(text)) {\n                // This block catches cases where we are pasting an\n                // image into Zulip, which is handled by upload.js.\n                return;\n            }\n            event.preventDefault();\n            event.stopPropagation();\n            compose_ui.insert_syntax_and_focus(text);\n        }\n    }\n}\n\nexport function initialize() {\n    $(\"#compose-textarea\").on(\"paste\", paste_handler);\n    $(\"body\").on(\"paste\", \".message_edit_form\", paste_handler);\n}\n","/* eslint-env commonjs */\n\n\"use strict\";\n\n// Media query breakpoints according to Bootstrap 4.5\nconst xs = 0;\nconst sm = 576;\nconst md = 768;\nconst lg = 992;\nconst xl = 1200;\n\n// Breakpoints for mobile devices used by Google Chrome as of Version 86\nconst ml = 425; // Mobile large\nconst mm = 375; // Mobile medium\nconst ms = 320; // Mobile small\n\nmodule.exports = {\n    media_breakpoints: {\n        xs_min: xs + \"px\",\n        sm_min: sm + \"px\",\n        md_min: md + \"px\",\n        lg_min: lg + \"px\",\n        xl_min: xl + \"px\",\n        ml_min: ml + \"px\",\n        mm_min: mm + \"px\",\n        ms_min: ms + \"px\",\n    },\n\n    media_breakpoints_num: {\n        xs,\n        sm,\n        md,\n        lg,\n        xl,\n        ml,\n        mm,\n        ms,\n    },\n};\n","import $ from \"jquery\";\n\nimport {localstorage} from \"./localstorage\";\nimport {page_params} from \"./page_params\";\n\nexport function enable() {\n    $(\":root\").removeClass(\"color-scheme-automatic\").addClass(\"dark-theme\");\n\n    if (page_params.is_spectator) {\n        const ls = localstorage();\n        ls.set(\"spectator-theme-preference\", \"dark\");\n    }\n}\n\nexport function disable() {\n    $(\":root\").removeClass(\"color-scheme-automatic\").removeClass(\"dark-theme\");\n\n    if (page_params.is_spectator) {\n        const ls = localstorage();\n        ls.set(\"spectator-theme-preference\", \"light\");\n    }\n}\n\nexport function default_preference_checker() {\n    $(\":root\").removeClass(\"dark-theme\").addClass(\"color-scheme-automatic\");\n}\n","import * as blueslip from \"./blueslip\";\nimport * as common from \"./common\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport {$t_html} from \"./i18n\";\nimport {localstorage} from \"./localstorage\";\n\nexport function get_hotkey_deprecation_notice(originalHotkey, replacementHotkey) {\n    return $t_html(\n        {\n            defaultMessage:\n                'We\\'ve replaced the \"{originalHotkey}\" hotkey with \"{replacementHotkey}\" to make this common shortcut easier to trigger.',\n        },\n        {originalHotkey, replacementHotkey},\n    );\n}\n\nlet shown_deprecation_notices = [];\n\nexport function maybe_show_deprecation_notice(key) {\n    let message;\n    const isCmdOrCtrl = common.has_mac_keyboard() ? \"Cmd\" : \"Ctrl\";\n    if (key === \"C\") {\n        message = get_hotkey_deprecation_notice(\"C\", \"x\");\n    } else if (key === \"*\") {\n        message = get_hotkey_deprecation_notice(\"*\", isCmdOrCtrl + \" + s\");\n    } else {\n        blueslip.error(\"Unexpected deprecation notice for hotkey:\", key);\n        return;\n    }\n\n    // Here we handle the tracking for showing deprecation notices,\n    // whether or not local storage is available.\n    if (localstorage.supported()) {\n        const notices_from_storage = JSON.parse(localStorage.getItem(\"shown_deprecation_notices\"));\n        if (notices_from_storage !== null) {\n            shown_deprecation_notices = notices_from_storage;\n        } else {\n            shown_deprecation_notices = [];\n        }\n    }\n\n    if (!shown_deprecation_notices.includes(key)) {\n        dialog_widget.launch({\n            html_heading: $t_html({defaultMessage: \"Deprecation notice\"}),\n            html_body: message,\n            html_submit_button: $t_html({defaultMessage: \"Got it\"}),\n            on_click() {},\n            close_on_submit: true,\n            focus_submit_on_open: true,\n            single_footer_button: true,\n        });\n\n        shown_deprecation_notices.push(key);\n        if (localstorage.supported()) {\n            localStorage.setItem(\n                \"shown_deprecation_notices\",\n                JSON.stringify(shown_deprecation_notices),\n            );\n        }\n    }\n}\n","import $ from \"jquery\";\n\nimport render_dialog_widget from \"../templates/dialog_widget.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport {$t_html} from \"./i18n\";\nimport * as loading from \"./loading\";\nimport * as overlays from \"./overlays\";\nimport * as ui_report from \"./ui_report\";\n\n/*\n *  Look for confirm_dialog in settings_user_groups\n *  to see an example of how to use this widget.  It's\n *  pretty simple to use!\n *\n *  Some things to note:\n *      1) We create DOM on the fly, and we remove\n *         the DOM once it's closed.\n *\n *      2) We attach the DOM for the modal to the body element\n *         to avoid interference from other elements.\n *\n *      3) For settings, we have a click handler in settings.js\n *         that will close the dialog via overlays.close_active_modal.\n *\n *      4) We assume that since this is a modal, you will\n *         only ever have one confirm dialog active at any\n *         time.\n *\n *      5) If a modal wants a loading spinner, it should pass loading_spinner: true.\n *         This will show a loading spinner when the yes button is clicked.\n *         The caller is responsible for calling hide_confirm_dialog_spinner()\n *         to hide the spinner in both success and error handlers.\n *\n *      6) If loading_spinner is used, don't hide it on `success`. This modal has a fade out\n *         animation. This causes the `Confirm` button to be shown for a split second if the\n *         spinner is hidden.\n *         Just close the modal. This will remove the whole modal from the DOM without\n *         needing to remove the spinner.\n *\n *      7) If a caller needs to run code after the modal body is added\n *          to DOM, it can do so by passing a post_render hook.\n */\n\nexport function hide_dialog_spinner() {\n    $(\".dialog_submit_button span\").show();\n    $(\"#dialog_widget_modal .modal__btn\").prop(\"disabled\", false);\n\n    const $spinner = $(\"#dialog_widget_modal .modal__spinner\");\n    loading.destroy_indicator($spinner);\n}\n\nexport function show_dialog_spinner() {\n    $(\".dialog_submit_button span\").hide();\n    // Disable both the buttons.\n    $(\"#dialog_widget_modal .modal__btn\").prop(\"disabled\", true);\n\n    const $spinner = $(\"#dialog_widget_modal .modal__spinner\");\n    const dialog_submit_button_span_width = $(\".dialog_submit_button span\").width();\n    const dialog_submit_button_span_height = $(\".dialog_submit_button span\").height();\n    loading.make_indicator($spinner, {\n        width: dialog_submit_button_span_width,\n        height: dialog_submit_button_span_height,\n    });\n}\n\n// Supports a callback to be called once the modal finishes closing.\nexport function close_modal(on_hidden_callback) {\n    overlays.close_modal(\"dialog_widget_modal\", {on_hidden: on_hidden_callback});\n}\n\nexport function launch(conf) {\n    const mandatory_fields = [\n        // The html_ fields should be safe HTML. If callers\n        // interpolate user data into strings, they should use\n        // templates.\n        \"html_heading\",\n        \"html_body\",\n        \"on_click\",\n    ];\n\n    // Optional parameters:\n    // * html_submit_button: Submit button text.\n    // * close_on_submit: Whether to close modal on clicking submit.\n    // * focus_submit_on_open: Whether to focus submit button on open.\n    // * help_link: A help link in the heading area.\n    // * id: Custom id to the container element to modify styles.\n    // * single_footer_button: If true, don't include the \"Cancel\" button.\n    // * form_id: Id of the form element in the modal if it exists.\n    // * validate_input: Function to validate the input of the modal.\n    // * on_show: Callback to run when the modal is triggered to show.\n    // * on_shown: Callback to run when the modal is shown.\n    // * on_hide: Callback to run when the modal is triggered to hide.\n    // * on_hidden: Callback to run when the modal is hidden.\n    // * post_render: Callback to run after the modal body is added to DOM.\n\n    for (const f of mandatory_fields) {\n        if (conf[f] === undefined) {\n            blueslip.error(\"programmer omitted \" + f);\n        }\n    }\n\n    const html_submit_button = conf.html_submit_button || $t_html({defaultMessage: \"Save changes\"});\n    const html = render_dialog_widget({\n        heading_text: conf.html_heading,\n        link: conf.help_link,\n        html_submit_button,\n        html_body: conf.html_body,\n        id: conf.id,\n        single_footer_button: conf.single_footer_button,\n    });\n    const $dialog = $(html);\n    $(\"body\").append($dialog);\n\n    if (conf.post_render !== undefined) {\n        conf.post_render();\n    }\n\n    const $submit_button = $dialog.find(\".dialog_submit_button\");\n    const $send_email_checkbox = $dialog.find(\".send_email\");\n    const $email_field = $dialog.find(\".email_field\");\n\n    $email_field.hide();\n\n    // This is used to link the submit button with the form, if present, in the modal.\n    // This makes it so that submitting this form by pressing Enter on an input element\n    // triggers a click on the submit button.\n    if (conf.form_id) {\n        $submit_button.attr(\"form\", conf.form_id);\n    }\n\n    // Set up handlers.\n    $submit_button.on(\"click\", (e) => {\n        if (conf.validate_input && !conf.validate_input(e)) {\n            return;\n        }\n        if (conf.loading_spinner) {\n            show_dialog_spinner();\n        } else if (conf.close_on_submit) {\n            close_modal();\n        }\n        $(\"#dialog_error\").hide();\n        conf.on_click(e);\n    });\n\n    $send_email_checkbox.on(\"change\", () => {\n        if ($send_email_checkbox.is(\":checked\")) {\n            $email_field.show();\n        } else {\n            $email_field.hide();\n        }\n    });\n\n    overlays.open_modal(\"dialog_widget_modal\", {\n        autoremove: true,\n        on_show() {\n            if (conf.focus_submit_on_open) {\n                $submit_button.trigger(\"focus\");\n            }\n            if (conf.on_show) {\n                conf.on_show();\n            }\n        },\n        on_hide: conf?.on_hide,\n        on_shown: conf?.on_shown,\n        on_hidden: conf?.on_hidden,\n    });\n}\n\nexport function submit_api_request(\n    request_method,\n    url,\n    data = {},\n    {\n        failure_msg_html = $t_html({defaultMessage: \"Failed\"}),\n        success_continuation,\n        error_continuation,\n    } = {},\n) {\n    show_dialog_spinner();\n    request_method({\n        url,\n        data,\n        success(reponse_data) {\n            close_modal();\n            if (success_continuation !== undefined) {\n                success_continuation(reponse_data);\n            }\n        },\n        error(xhr) {\n            ui_report.error(failure_msg_html, xhr, $(\"#dialog_error\"));\n            hide_dialog_spinner();\n            if (error_continuation !== undefined) {\n                error_continuation(xhr);\n            }\n        },\n    });\n}\n","import {subDays} from \"date-fns\";\nimport Handlebars from \"handlebars/runtime\";\nimport $ from \"jquery\";\nimport _ from \"lodash\";\nimport tippy from \"tippy.js\";\n\nimport render_confirm_delete_all_drafts from \"../templates/confirm_dialog/confirm_delete_all_drafts.hbs\";\nimport render_draft_table_body from \"../templates/draft_table_body.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as browser_history from \"./browser_history\";\nimport * as color_class from \"./color_class\";\nimport * as compose from \"./compose\";\nimport * as compose_actions from \"./compose_actions\";\nimport * as compose_fade from \"./compose_fade\";\nimport * as compose_state from \"./compose_state\";\nimport * as compose_ui from \"./compose_ui\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport {$t, $t_html} from \"./i18n\";\nimport {localstorage} from \"./localstorage\";\nimport * as markdown from \"./markdown\";\nimport * as narrow from \"./narrow\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as overlays from \"./overlays\";\nimport * as people from \"./people\";\nimport * as rendered_markdown from \"./rendered_markdown\";\nimport * as stream_data from \"./stream_data\";\nimport * as sub_store from \"./sub_store\";\nimport * as timerender from \"./timerender\";\nimport * as ui_util from \"./ui_util\";\nimport * as util from \"./util\";\n\nfunction set_count(count) {\n    const $drafts_li = $(\".top_left_drafts\");\n    ui_util.update_unread_count_in_dom($drafts_li, count);\n}\n\nexport const draft_model = (function () {\n    const exports = {};\n\n    // the key that the drafts are stored under.\n    const KEY = \"drafts\";\n    const ls = localstorage();\n    ls.version = 1;\n\n    function getTimestamp() {\n        return Date.now();\n    }\n\n    function get() {\n        return ls.get(KEY) || {};\n    }\n    exports.get = get;\n\n    exports.getDraft = function (id) {\n        return get()[id] || false;\n    };\n\n    function save(drafts, update_count = true) {\n        ls.set(KEY, drafts);\n        if (update_count) {\n            set_count(Object.keys(drafts).length);\n        }\n    }\n\n    exports.addDraft = function (draft, update_count = true) {\n        const drafts = get();\n\n        // use the base16 of the current time + a random string to reduce\n        // collisions to essentially zero.\n        const id = getTimestamp().toString(16) + \"-\" + Math.random().toString(16).split(/\\./).pop();\n\n        draft.updatedAt = getTimestamp();\n        drafts[id] = draft;\n        save(drafts, update_count);\n\n        return id;\n    };\n\n    exports.editDraft = function (id, draft, update_timestamp = true) {\n        const drafts = get();\n        let changed = false;\n\n        function check_if_equal(draft_a, draft_b) {\n            return _.isEqual(_.omit(draft_a, [\"updatedAt\"]), _.omit(draft_b, [\"updatedAt\"]));\n        }\n\n        if (drafts[id]) {\n            changed = !check_if_equal(drafts[id], draft);\n            if (update_timestamp) {\n                draft.updatedAt = getTimestamp();\n            }\n            drafts[id] = draft;\n            save(drafts);\n        }\n        return changed;\n    };\n\n    exports.deleteDraft = function (id) {\n        const drafts = get();\n\n        delete drafts[id];\n        save(drafts);\n    };\n\n    return exports;\n})();\n\n// A one-time fix for buggy drafts that had their topics renamed to\n// `undefined` when the topic was moved to another stream without\n// changing the topic. The bug was introduced in\n// 4c8079c49a81b08b29871f9f1625c6149f48b579 and fixed in\n// aebdf6af8c6675fbd2792888d701d582c4a1110a; but servers running\n// intermediate versions may have generated some bugged drafts with\n// this invalid topic value.\n//\n// TODO/compatibility: This can be deleted once servers can no longer\n// directly upgrade from Zulip 6.0beta1 and earlier development branch where the bug was present,\n// since we expect bugged drafts will have either been run through\n// this code or else been deleted after 30 (DRAFT_LIFETIME) days.\nlet fixed_buggy_drafts = false;\nexport function fix_drafts_with_undefined_topics() {\n    const data = draft_model.get();\n    for (const draft_id of Object.keys(data)) {\n        const draft = data[draft_id];\n        if (draft.type === \"stream\" && draft.topic === undefined) {\n            const draft = data[draft_id];\n            draft.topic = \"\";\n            draft_model.editDraft(draft_id, draft, false);\n        }\n    }\n    fixed_buggy_drafts = true;\n}\n\nexport function sync_count() {\n    const drafts = draft_model.get();\n    set_count(Object.keys(drafts).length);\n}\n\nexport function delete_all_drafts() {\n    const drafts = draft_model.get();\n    for (const [id] of Object.entries(drafts)) {\n        draft_model.deleteDraft(id);\n    }\n}\n\nexport function confirm_delete_all_drafts() {\n    const html_body = render_confirm_delete_all_drafts();\n\n    confirm_dialog.launch({\n        html_heading: $t_html({defaultMessage: \"Delete all drafts\"}),\n        html_body,\n        on_click: delete_all_drafts,\n    });\n}\n\nexport function rename_stream_recipient(old_stream_id, old_topic, new_stream_id, new_topic) {\n    const current_drafts = draft_model.get();\n    for (const draft_id of Object.keys(current_drafts)) {\n        const draft = current_drafts[draft_id];\n        if (util.same_stream_and_topic(draft, {stream_id: old_stream_id, topic: old_topic})) {\n            // If new_stream_id is undefined, that means the stream wasn't updated.\n            if (new_stream_id !== undefined) {\n                draft.stream_id = new_stream_id;\n                // TODO: For now we need both a stream_id and stream (stream name)\n                // because there can be partial input in the stream field.\n                // Once we complete our UI plan to change the stream input field\n                // to a dropdown_list_widget, there will no longer be the possibility\n                // of invalid partial input in the stream field, and we can have the\n                // drafts system ignore the legacy `stream` field, using only `stream_id`.\n                // After enough drafts are autodeleted, we'd no longer have a `stream` field.\n                draft.stream = sub_store.get(new_stream_id).name;\n            }\n            // If new_topic is undefined, that means the topic wasn't updated.\n            if (new_topic !== undefined) {\n                draft.topic = new_topic;\n            }\n            draft_model.editDraft(draft_id, draft, false);\n        }\n    }\n}\n\nexport function snapshot_message() {\n    if (!compose_state.composing() || compose_state.message_content().length <= 2) {\n        // If you aren't in the middle of composing the body of a\n        // message or the message is shorter than 2 characters long, don't try to snapshot.\n        return undefined;\n    }\n\n    // Save what we can.\n    const message = {\n        type: compose_state.get_message_type(),\n        content: compose_state.message_content(),\n    };\n    if (message.type === \"private\") {\n        const recipient = compose_state.private_message_recipient();\n        message.reply_to = recipient;\n        message.private_message_recipient = recipient;\n    } else {\n        message.stream = compose_state.stream_name();\n        const sub = stream_data.get_sub(message.stream);\n        if (sub) {\n            message.stream_id = sub.stream_id;\n        }\n        message.topic = compose_state.topic();\n    }\n    return message;\n}\n\nexport function restore_message(draft) {\n    // This is kinda the inverse of snapshot_message, and\n    // we are essentially making a deep copy of the draft,\n    // being explicit about which fields we send to the compose\n    // system.\n    let compose_args;\n\n    if (draft.type === \"stream\") {\n        compose_args = {\n            type: \"stream\",\n            stream: draft.stream,\n            topic: draft.topic,\n            content: draft.content,\n        };\n    } else {\n        compose_args = {\n            type: draft.type,\n            private_message_recipient: draft.private_message_recipient,\n            content: draft.content,\n        };\n    }\n\n    return compose_args;\n}\n\nfunction draft_notify() {\n    // Display a tooltip to notify the user about the saved draft.\n    const instance = tippy(\".top_left_drafts .unread_count\", {\n        content: $t({defaultMessage: \"Saved as draft\"}),\n        arrow: true,\n        placement: \"right\",\n    })[0];\n    instance.show();\n    function remove_instance() {\n        instance.destroy();\n    }\n    setTimeout(remove_instance, 3000);\n}\n\nfunction maybe_notify(no_notify) {\n    if (!no_notify) {\n        draft_notify();\n    }\n}\n\nexport function update_draft(opts = {}) {\n    const no_notify = opts.no_notify || false;\n    const draft = snapshot_message();\n\n    if (draft === undefined) {\n        // The user cleared the compose box, which means\n        // there is nothing to save here.  Don't obliterate\n        // the existing draft yet--the user may have mistakenly\n        // hit delete after select-all or something.\n        // Just do nothing.\n        return undefined;\n    }\n\n    const draft_id = $(\"#compose-textarea\").data(\"draft-id\");\n\n    if (draft_id !== undefined) {\n        // We don't save multiple drafts of the same message;\n        // just update the existing draft.\n        const changed = draft_model.editDraft(draft_id, draft);\n        if (changed) {\n            maybe_notify(no_notify);\n        }\n        return draft_id;\n    }\n\n    // We have never saved a draft for this message, so add one.\n    const update_count = opts.update_count === undefined ? true : opts.update_count;\n    const new_draft_id = draft_model.addDraft(draft, update_count);\n    $(\"#compose-textarea\").data(\"draft-id\", new_draft_id);\n    maybe_notify(no_notify);\n\n    return new_draft_id;\n}\n\nexport function restore_draft(draft_id) {\n    const draft = draft_model.getDraft(draft_id);\n    if (!draft) {\n        return;\n    }\n\n    const compose_args = restore_message(draft);\n\n    if (compose_args.type === \"stream\") {\n        if (draft.stream !== \"\" && draft.topic !== \"\") {\n            narrow.activate(\n                [\n                    {operator: \"stream\", operand: compose_args.stream},\n                    {operator: \"topic\", operand: compose_args.topic},\n                ],\n                {trigger: \"restore draft\"},\n            );\n        }\n    } else {\n        if (compose_args.private_message_recipient !== \"\") {\n            narrow.activate(\n                [{operator: \"pm-with\", operand: compose_args.private_message_recipient}],\n                {trigger: \"restore draft\"},\n            );\n        }\n    }\n\n    overlays.close_overlay(\"drafts\");\n    compose_fade.clear_compose();\n    compose.clear_preview_area();\n    compose_actions.start(compose_args.type, compose_args);\n    compose_ui.autosize_textarea($(\"#compose-textarea\"));\n    $(\"#compose-textarea\").data(\"draft-id\", draft_id);\n}\n\nconst DRAFT_LIFETIME = 30;\n\nexport function remove_old_drafts() {\n    const old_date = subDays(new Date(), DRAFT_LIFETIME).getTime();\n    const drafts = draft_model.get();\n    for (const [id, draft] of Object.entries(drafts)) {\n        if (draft.updatedAt < old_date) {\n            draft_model.deleteDraft(id);\n        }\n    }\n}\n\nexport function format_draft(draft) {\n    const id = draft.id;\n    let formatted;\n    const time = new Date(draft.updatedAt);\n    let time_stamp = timerender.render_now(time).time_str;\n    if (time_stamp === $t({defaultMessage: \"Today\"})) {\n        time_stamp = timerender.stringify_time(time);\n    }\n    if (draft.type === \"stream\") {\n        // In case there is no stream for the draft, we need a\n        // single space char for proper rendering of the stream label\n        const space_string = new Handlebars.SafeString(\"&nbsp;\");\n        let stream_name = draft.stream.length > 0 ? draft.stream : space_string;\n        if (draft.stream_id) {\n            const sub = sub_store.get(draft.stream_id);\n            if (sub && sub.name !== stream_name) {\n                stream_name = sub.name;\n                draft.stream = stream_name;\n                draft_model.editDraft(id, draft);\n            }\n        }\n        const draft_topic = draft.topic || compose.empty_topic_placeholder();\n        const draft_stream_color = stream_data.get_color(stream_name);\n\n        formatted = {\n            draft_id: draft.id,\n            is_stream: true,\n            stream_name,\n            stream_color: draft_stream_color,\n            dark_background: color_class.get_css_class(draft_stream_color),\n            topic: draft_topic,\n            raw_content: draft.content,\n            time_stamp,\n        };\n    } else {\n        const emails = util.extract_pm_recipients(draft.private_message_recipient);\n        const recipients = people.emails_to_full_names_string(emails);\n\n        formatted = {\n            draft_id: draft.id,\n            is_stream: false,\n            recipients,\n            raw_content: draft.content,\n            time_stamp,\n        };\n    }\n\n    try {\n        markdown.apply_markdown(formatted);\n    } catch (error) {\n        // In the unlikely event that there is syntax in the\n        // draft content which our Markdown processor is\n        // unable to process, we delete the draft, so that the\n        // drafts overlay can be opened without any errors.\n        // We also report the exception to the server so that\n        // the bug can be fixed.\n        draft_model.deleteDraft(id);\n        blueslip.error(\n            \"Error in rendering draft.\",\n            {\n                draft_content: draft.content,\n            },\n            error.stack,\n        );\n        return undefined;\n    }\n\n    return formatted;\n}\n\nfunction row_with_focus() {\n    const focused_draft = $(\".draft-info-box:focus\")[0];\n    return $(focused_draft).parent(\".draft-row\");\n}\n\nfunction row_before_focus() {\n    const $focused_row = row_with_focus();\n    const $prev_row = $focused_row.prev(\".draft-row:visible\");\n    // The draft modal can have two sub-sections. This handles the edge case\n    // when the user moves from the second \"Other drafts\" section to the first\n    // section which contains drafts from a particular narrow.\n    if (\n        $prev_row.length === 0 &&\n        $focused_row.parent().attr(\"id\") === \"other-drafts\" &&\n        $(\"#drafts-from-conversation\").is(\":visible\")\n    ) {\n        return $($(\"#drafts-from-conversation\").children(\".draft-row:visible\").last());\n    }\n\n    return $prev_row;\n}\n\nfunction row_after_focus() {\n    const $focused_row = row_with_focus();\n    const $next_row = $focused_row.next(\".draft-row:visible\");\n    // The draft modal can have two sub-sections. This handles the edge case\n    // when the user moves from the first section (drafts from a particular\n    // narrow) to the second section which contains the rest of the drafts.\n    if (\n        $next_row.length === 0 &&\n        $focused_row.parent().attr(\"id\") === \"drafts-from-conversation\" &&\n        $(\"#other-drafts\").is(\":visible\")\n    ) {\n        return $(\"#other-drafts\").children(\".draft-row:visible\").first();\n    }\n    return $next_row;\n}\n\nfunction remove_draft($draft_row) {\n    // Deletes the draft and removes it from the list\n    const draft_id = $draft_row.data(\"draft-id\");\n\n    draft_model.deleteDraft(draft_id);\n\n    $draft_row.remove();\n\n    if ($(\"#drafts_table .draft-row\").length === 0) {\n        $(\"#drafts_table .no-drafts\").show();\n    }\n    update_rendered_drafts(\n        $(\"#drafts-from-conversation .draft-row\").length > 0,\n        $(\"#other-drafts .draft-row\").length > 0,\n    );\n}\n\nfunction update_rendered_drafts(has_drafts_from_conversation, has_other_drafts) {\n    if (has_drafts_from_conversation) {\n        $(\"#drafts-from-conversation\").show();\n    } else {\n        // Since there are no relevant drafts from this conversation left, switch to the \"all drafts\" view and remove headers.\n        $(\"#drafts-from-conversation\").hide();\n        $(\"#other-drafts-header\").hide();\n    }\n\n    if (!has_other_drafts) {\n        $(\"#other-drafts\").hide();\n    }\n}\n\nfunction current_recipient_data() {\n    // Prioritize recipients from the compose box first. If the compose\n    // box isn't open, just return data from the current narrow.\n    if (!compose_state.composing()) {\n        const stream_name = narrow_state.stream();\n        return {\n            stream_name,\n            topic: narrow_state.topic(),\n            private_recipients: narrow_state.pm_emails_string(),\n        };\n    }\n\n    if (compose_state.get_message_type() === \"stream\") {\n        const stream_name = compose_state.stream_name();\n        return {\n            stream_name,\n            topic: compose_state.topic(),\n            private_recipients: undefined,\n        };\n    } else if (compose_state.get_message_type() === \"private\") {\n        return {\n            stream_name: undefined,\n            topic: undefined,\n            private_recipients: compose_state.private_message_recipient(),\n        };\n    }\n    return {\n        stream_name: undefined,\n        topic: undefined,\n        private_recipients: undefined,\n    };\n}\n\nfunction filter_drafts_by_compose_box_and_recipient(drafts) {\n    const {stream_name, topic, private_recipients} = current_recipient_data();\n    const stream_id = stream_name ? stream_data.get_stream_id(stream_name) : undefined;\n    const narrow_drafts_ids = [];\n    for (const [id, draft] of Object.entries(drafts)) {\n        // Match by stream and topic.\n        if (\n            stream_id &&\n            topic &&\n            draft.topic &&\n            util.same_recipient(draft, {type: \"stream\", stream_id, topic})\n        ) {\n            narrow_drafts_ids.push(id);\n        }\n        // Match by only stream.\n        else if (draft.type === \"stream\" && stream_id && !topic && draft.stream_id === stream_id) {\n            narrow_drafts_ids.push(id);\n        }\n        // Match by private message recipient.\n        else if (\n            draft.type === \"private\" &&\n            private_recipients &&\n            _.isEqual(\n                draft.private_message_recipient\n                    .split(\",\")\n                    .map((s) => s.trim())\n                    .sort(),\n                private_recipients\n                    .split(\",\")\n                    .map((s) => s.trim())\n                    .sort(),\n            )\n        ) {\n            narrow_drafts_ids.push(id);\n        }\n    }\n    return _.pick(drafts, narrow_drafts_ids);\n}\n\nexport function launch() {\n    function format_drafts(data) {\n        for (const [id, draft] of Object.entries(data)) {\n            draft.id = id;\n        }\n\n        const unsorted_raw_drafts = Object.values(data);\n\n        const sorted_raw_drafts = unsorted_raw_drafts.sort(\n            (draft_a, draft_b) => draft_b.updatedAt - draft_a.updatedAt,\n        );\n\n        const sorted_formatted_drafts = sorted_raw_drafts\n            .map((draft_row) => format_draft(draft_row))\n            .filter(Boolean);\n\n        return sorted_formatted_drafts;\n    }\n\n    function get_header_for_narrow_drafts() {\n        const {stream_name, topic, private_recipients} = current_recipient_data();\n        if (private_recipients) {\n            return $t(\n                {defaultMessage: \"Drafts from conversation with {recipient}\"},\n                {\n                    recipient: people.emails_to_full_names_string(private_recipients.split(\",\")),\n                },\n            );\n        }\n        const recipient = topic ? `#${stream_name} > ${topic}` : `#${stream_name}`;\n        return $t({defaultMessage: \"Drafts from {recipient}\"}, {recipient});\n    }\n\n    function render_widgets(narrow_drafts, other_drafts) {\n        $(\"#drafts_table\").empty();\n\n        const narrow_drafts_header = get_header_for_narrow_drafts();\n\n        const rendered = render_draft_table_body({\n            narrow_drafts_header,\n            narrow_drafts,\n            other_drafts,\n            draft_lifetime: DRAFT_LIFETIME,\n        });\n        const $drafts_table = $(\"#drafts_table\");\n        $drafts_table.append(rendered);\n        if ($(\"#drafts_table .draft-row\").length > 0) {\n            $(\"#drafts_table .no-drafts\").hide();\n            // Update possible dynamic elements.\n            const $rendered_drafts = $drafts_table.find(\n                \".message_content.rendered_markdown.restore-draft\",\n            );\n            $rendered_drafts.each(function () {\n                rendered_markdown.update_elements($(this));\n            });\n        }\n        update_rendered_drafts(narrow_drafts.length > 0, other_drafts.length > 0);\n    }\n\n    function setup_event_handlers() {\n        $(\".restore-draft\").on(\"click\", function (e) {\n            if (document.getSelection().type === \"Range\") {\n                return;\n            }\n\n            e.stopPropagation();\n\n            const $draft_row = $(this).closest(\".draft-row\");\n            const $draft_id = $draft_row.data(\"draft-id\");\n            restore_draft($draft_id);\n        });\n\n        $(\".draft_controls .delete-draft\").on(\"click\", function () {\n            const $draft_row = $(this).closest(\".draft-row\");\n\n            remove_draft($draft_row);\n        });\n    }\n\n    const drafts = draft_model.get();\n    const narrow_drafts = filter_drafts_by_compose_box_and_recipient(drafts);\n    const other_drafts = _.pick(\n        drafts,\n        _.difference(Object.keys(drafts), Object.keys(narrow_drafts)),\n    );\n    const formatted_narrow_drafts = format_drafts(narrow_drafts);\n    const formatted_other_drafts = format_drafts(other_drafts);\n\n    render_widgets(formatted_narrow_drafts, formatted_other_drafts);\n\n    // We need to force a style calculation on the newly created\n    // element in order for the CSS transition to take effect.\n    $(\"#draft_overlay\").css(\"opacity\");\n\n    open_overlay();\n    set_initial_element(formatted_narrow_drafts.concat(formatted_other_drafts));\n    setup_event_handlers();\n}\n\nfunction activate_element(elem) {\n    $(\".draft-info-box\").removeClass(\"active\");\n    $(elem).expectOne().addClass(\"active\");\n    elem.focus();\n}\n\nfunction drafts_initialize_focus(event_name) {\n    // If a draft is not focused in draft modal, then focus the last draft\n    // if up_arrow is clicked or the first draft if down_arrow is clicked.\n    if (\n        (event_name !== \"up_arrow\" && event_name !== \"down_arrow\") ||\n        $(\".draft-info-box:focus\")[0]\n    ) {\n        return;\n    }\n\n    const draft_arrow = draft_model.get();\n    const draft_id_arrow = Object.getOwnPropertyNames(draft_arrow);\n    if (draft_id_arrow.length === 0) {\n        // empty drafts modal\n        return;\n    }\n\n    let draft_element;\n    if (event_name === \"up_arrow\") {\n        draft_element = document.querySelectorAll(\n            '[data-draft-id=\"' + draft_id_arrow.at(-1) + '\"]',\n        );\n    } else if (event_name === \"down_arrow\") {\n        draft_element = document.querySelectorAll('[data-draft-id=\"' + draft_id_arrow[0] + '\"]');\n    }\n    const focus_element = draft_element[0].children[0];\n\n    activate_element(focus_element);\n}\n\nfunction drafts_scroll($next_focus_draft_row) {\n    if ($next_focus_draft_row[0] === undefined) {\n        return;\n    }\n    if ($next_focus_draft_row[0].children[0] === undefined) {\n        return;\n    }\n    activate_element($next_focus_draft_row[0].children[0]);\n\n    // If focused draft is first draft, scroll to the top.\n    if ($(\".draft-info-box\").first()[0].parentElement === $next_focus_draft_row[0]) {\n        $(\".drafts-list\")[0].scrollTop = 0;\n    }\n\n    // If focused draft is the last draft, scroll to the bottom.\n    if ($(\".draft-info-box\").last()[0].parentElement === $next_focus_draft_row[0]) {\n        $(\".drafts-list\")[0].scrollTop =\n            $(\".drafts-list\")[0].scrollHeight - $(\".drafts-list\").height();\n    }\n\n    // If focused draft is cut off from the top, scroll up halfway in draft modal.\n    if ($next_focus_draft_row.position().top < 55) {\n        // 55 is the minimum distance from the top that will require extra scrolling.\n        $(\".drafts-list\")[0].scrollTop -= $(\".drafts-list\")[0].clientHeight / 2;\n    }\n\n    // If focused draft is cut off from the bottom, scroll down halfway in draft modal.\n    const dist_from_top = $next_focus_draft_row.position().top;\n    const total_dist = dist_from_top + $next_focus_draft_row[0].clientHeight;\n    const dist_from_bottom = $(\".drafts-container\")[0].clientHeight - total_dist;\n    if (dist_from_bottom < -4) {\n        // -4 is the min dist from the bottom that will require extra scrolling.\n        $(\".drafts-list\")[0].scrollTop += $(\".drafts-list\")[0].clientHeight / 2;\n    }\n}\n\nexport function drafts_handle_events(e, event_key) {\n    const draft_arrow = draft_model.get();\n    const draft_id_arrow = Object.getOwnPropertyNames(draft_arrow);\n    drafts_initialize_focus(event_key);\n\n    // This detects up arrow key presses when the draft overlay\n    // is open and scrolls through the drafts.\n    if (event_key === \"up_arrow\" || event_key === \"vim_up\") {\n        drafts_scroll(row_before_focus());\n    }\n\n    // This detects down arrow key presses when the draft overlay\n    // is open and scrolls through the drafts.\n    if (event_key === \"down_arrow\" || event_key === \"vim_down\") {\n        drafts_scroll(row_after_focus());\n    }\n\n    const focused_draft_id = row_with_focus().data(\"draft-id\");\n    // Allows user to delete drafts with Backspace\n    if ((event_key === \"backspace\" || event_key === \"delete\") && focused_draft_id !== undefined) {\n        const $draft_row = row_with_focus();\n        const $next_draft_row = row_after_focus();\n        const $prev_draft_row = row_before_focus();\n        let draft_to_be_focused_id;\n\n        // Try to get the next draft in the list and 'focus' it\n        // Use previous draft as a fallback\n        if ($next_draft_row[0] !== undefined) {\n            draft_to_be_focused_id = $next_draft_row.data(\"draft-id\");\n        } else if ($prev_draft_row[0] !== undefined) {\n            draft_to_be_focused_id = $prev_draft_row.data(\"draft-id\");\n        }\n\n        const new_focus_element = document.querySelectorAll(\n            '[data-draft-id=\"' + draft_to_be_focused_id + '\"]',\n        );\n        if (new_focus_element[0] !== undefined) {\n            activate_element(new_focus_element[0].children[0]);\n        }\n\n        remove_draft($draft_row);\n    }\n\n    // This handles when pressing Enter while looking at drafts.\n    // It restores draft that is focused.\n    if (event_key === \"enter\") {\n        if (Object.hasOwn(document.activeElement.parentElement.dataset, \"draftId\")) {\n            restore_draft(focused_draft_id);\n        } else {\n            const first_draft = draft_id_arrow.at(-1);\n            restore_draft(first_draft);\n        }\n    }\n}\n\nexport function open_overlay() {\n    overlays.open_overlay({\n        name: \"drafts\",\n        $overlay: $(\"#draft_overlay\"),\n        on_close() {\n            browser_history.exit_overlay();\n        },\n    });\n}\n\nexport function set_initial_element(drafts) {\n    if (drafts.length > 0) {\n        const curr_draft_id = drafts[0].draft_id;\n        const selector = '[data-draft-id=\"' + curr_draft_id + '\"]';\n        const curr_draft_element = document.querySelectorAll(selector);\n        const focus_element = curr_draft_element[0].children[0];\n        activate_element(focus_element);\n        $(\".drafts-list\")[0].scrollTop = 0;\n    }\n}\n\nexport function initialize() {\n    remove_old_drafts();\n\n    if (!fixed_buggy_drafts) {\n        fix_drafts_with_undefined_topics();\n    }\n\n    window.addEventListener(\"beforeunload\", () => {\n        update_draft();\n    });\n\n    set_count(Object.keys(draft_model.get()).length);\n\n    $(\"body\").on(\"focus\", \".draft-info-box\", (e) => {\n        activate_element(e.target);\n    });\n}\n","import $ from \"jquery\";\nimport _ from \"lodash\";\nimport tippy from \"tippy.js\";\n\nimport render_dropdown_list from \"../templates/settings/dropdown_list.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport {$t} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as ListWidget from \"./list_widget\";\n\nexport class DropdownListWidget {\n    constructor({\n        widget_name,\n        data,\n        default_text,\n        render_text = (item_name) => item_name,\n        null_value = null,\n        include_current_item = true,\n        value,\n        on_update = () => {},\n    }) {\n        // Initializing values\n        this.widget_name = widget_name;\n        this.data = data;\n        this.default_text = default_text;\n        this.render_text = render_text;\n        this.null_value = null_value;\n        this.include_current_item = include_current_item;\n        this.initial_value = value;\n        this.on_update = on_update;\n\n        this.container_id = `${widget_name}_widget`;\n        this.value_id = `id_${widget_name}`;\n\n        if (value === undefined) {\n            this.initial_value = null_value;\n            blueslip.warn(\"dropdown-list-widget: Called without a default value; using null value\");\n        }\n    }\n\n    render_default_text($elem) {\n        $elem.text(this.default_text);\n        $elem.addClass(\"text-warning\");\n        $elem.closest(\".input-group\").find(\".dropdown_list_reset_button\").hide();\n    }\n\n    render(value) {\n        $(`#${CSS.escape(this.container_id)} #${CSS.escape(this.value_id)}`).data(\"value\", value);\n\n        const $elem = $(`#${CSS.escape(this.container_id)} #${CSS.escape(this.widget_name)}_name`);\n\n        if (!value || value === this.null_value) {\n            this.render_default_text($elem);\n            return;\n        }\n\n        // Happy path\n        const item = this.data.find((x) => x.value === value.toString());\n\n        if (item === undefined) {\n            this.render_default_text($elem);\n            return;\n        }\n\n        const text = this.render_text(item.name);\n        $elem.text(text);\n        $elem.removeClass(\"text-warning\");\n        $elem.closest(\".input-group\").find(\".dropdown_list_reset_button\").show();\n    }\n\n    update(value) {\n        this.render(value);\n        this.on_update(value);\n    }\n\n    register_event_handlers() {\n        $(`#${CSS.escape(this.container_id)} .dropdown-list-body`).on(\n            \"click keypress\",\n            \".list_item\",\n            (e) => {\n                const $setting_elem = $(e.currentTarget).closest(\n                    `.${CSS.escape(this.widget_name)}_setting`,\n                );\n                if (e.type === \"keypress\") {\n                    if (keydown_util.is_enter_event(e)) {\n                        $setting_elem.find(\".dropdown-menu\").dropdown(\"toggle\");\n                    } else {\n                        return;\n                    }\n                }\n                const value = $(e.currentTarget).attr(\"data-value\");\n                this.update(value);\n            },\n        );\n        $(`#${CSS.escape(this.container_id)} .dropdown_list_reset_button`).on(\"click\", (e) => {\n            this.update(this.null_value);\n            e.preventDefault();\n        });\n    }\n\n    setup_dropdown_widget(data) {\n        const $dropdown_list_body = $(\n            `#${CSS.escape(this.container_id)} .dropdown-list-body`,\n        ).expectOne();\n        const $search_input = $(\n            `#${CSS.escape(this.container_id)} .dropdown-search > input[type=text]`,\n        );\n        const get_data = () => {\n            if (this.include_current_item) {\n                return data;\n            }\n            return data.filter((x) => x.value !== this.value.toString());\n        };\n\n        ListWidget.create($dropdown_list_body, get_data(data), {\n            name: `${CSS.escape(this.widget_name)}_list`,\n            modifier(item) {\n                return render_dropdown_list({item});\n            },\n            filter: {\n                $element: $search_input,\n                predicate(item, value) {\n                    return item.name.toLowerCase().includes(value);\n                },\n            },\n            $simplebar_container: $(`#${CSS.escape(this.container_id)} .dropdown-list-wrapper`),\n        });\n    }\n\n    // Sets the focus to the ListWidget input once the dropdown button is clicked.\n    dropdown_toggle_click_handler() {\n        const $dropdown_toggle = $(`#${CSS.escape(this.container_id)} .dropdown-toggle`);\n        const $search_input = $(\n            `#${CSS.escape(this.container_id)} .dropdown-search > input[type=text]`,\n        );\n\n        $dropdown_toggle.on(\"click\", () => {\n            $search_input.val(\"\").trigger(\"input\");\n        });\n    }\n\n    dropdown_focus_events() {\n        const $search_input = $(\n            `#${CSS.escape(this.container_id)} .dropdown-search > input[type=text]`,\n        );\n        const $dropdown_menu = $(`.${CSS.escape(this.widget_name)}_setting .dropdown-menu`);\n\n        const dropdown_elements = () => {\n            const $dropdown_list_body = $(\n                `#${CSS.escape(this.container_id)} .dropdown-list-body`,\n            ).expectOne();\n\n            return $dropdown_list_body.children().find(\"a\");\n        };\n\n        // Rest of the key handlers are supported by our\n        // bootstrap library.\n        $dropdown_menu.on(\"keydown\", (e) => {\n            function trigger_element_focus($element) {\n                e.preventDefault();\n                e.stopPropagation();\n                $element.trigger(\"focus\");\n            }\n\n            switch (e.key) {\n                case \"ArrowDown\": {\n                    switch (e.target) {\n                        case dropdown_elements().last()[0]:\n                            trigger_element_focus($search_input);\n                            break;\n                        case $search_input[0]:\n                            trigger_element_focus(dropdown_elements().first());\n                            break;\n                    }\n\n                    break;\n                }\n                case \"ArrowUp\": {\n                    switch (e.target) {\n                        case dropdown_elements().first()[0]:\n                            trigger_element_focus($search_input);\n                            break;\n                        case $search_input[0]:\n                            trigger_element_focus(dropdown_elements().last());\n                    }\n\n                    break;\n                }\n                case \"Tab\": {\n                    switch (e.target) {\n                        case $search_input[0]:\n                            trigger_element_focus(dropdown_elements().first());\n                            break;\n                        case dropdown_elements().last()[0]:\n                            trigger_element_focus($search_input);\n                            break;\n                    }\n\n                    break;\n                }\n            }\n        });\n    }\n\n    setup() {\n        // populate the dropdown\n        const $dropdown_list_body = $(\n            `#${CSS.escape(this.container_id)} .dropdown-list-body`,\n        ).expectOne();\n        const $search_input = $(\n            `#${CSS.escape(this.container_id)} .dropdown-search > input[type=text]`,\n        );\n        const $dropdown_toggle = $(`#${CSS.escape(this.container_id)} .dropdown-toggle`);\n\n        this.setup_dropdown_widget(this.data);\n\n        $(`#${CSS.escape(this.container_id)} .dropdown-search`).on(\"click\", (e) => {\n            e.stopPropagation();\n        });\n\n        this.dropdown_toggle_click_handler();\n\n        $dropdown_toggle.on(\"focus\", (e) => {\n            // On opening a Bootstrap Dropdown, the parent element receives focus.\n            // Here, we want our search input to have focus instead.\n            e.preventDefault();\n            // This function gets called twice when focusing the\n            // dropdown, and only in the second call is the input\n            // field visible in the DOM; so the following visibility\n            // check ensures we wait for the second call to focus.\n            if ($dropdown_list_body.is(\":visible\")) {\n                $search_input.trigger(\"focus\");\n            }\n        });\n\n        this.dropdown_focus_events();\n\n        this.render(this.initial_value);\n        this.register_event_handlers();\n    }\n\n    // Returns the updated value\n    value() {\n        let val = $(`#${CSS.escape(this.container_id)} #${CSS.escape(this.value_id)}`).data(\n            \"value\",\n        );\n        if (val === null) {\n            val = \"\";\n        }\n        return val;\n    }\n}\n\n// A widget mostly similar to `DropdownListWidget` but\n// used in cases of multiple dropdown selection.\nexport class MultiSelectDropdownListWidget extends DropdownListWidget {\n    constructor({\n        widget_name,\n        data,\n        default_text,\n        null_value = null,\n        on_update = () => {},\n        on_close,\n        value,\n        limit,\n    }) {\n        super({\n            widget_name,\n            data,\n            default_text,\n            null_value,\n            on_update,\n            value,\n        });\n\n        // Initializing values specific to `MultiSelectDropdownListWidget`.\n        this.limit = limit;\n        this.on_close = on_close;\n\n        // Important thing to note is that this needs to be maintained as\n        // a reference type and not to deep clone it/assign it to a\n        // different variable, so that it can be later referenced within\n        // `list_widget` as well. The way we manage dropdown elements are\n        // essentially by just modifying the values in `data_selected` variable.\n        this.data_selected = []; // Populate the dropdown values selected by user.\n\n        if (limit === undefined) {\n            this.limit = 2;\n            blueslip.warn(\n                \"Multiselect dropdown-list-widget: Called without limit value; using 2 as the limit\",\n            );\n        }\n    }\n\n    setup() {\n        super.setup(this);\n        this.initialize_dropdown_values();\n    }\n\n    initialize_dropdown_values() {\n        // Stop the execution if value parameter is undefined and null_value is passed.\n        if (!this.initial_value || this.initial_value === this.null_value) {\n            return;\n        }\n        const $elem = $(`#${CSS.escape(this.container_id)} #${CSS.escape(this.widget_name)}_name`);\n\n        // Push values from initial valued array to `data_selected`.\n        this.data_selected.push(...this.initial_value);\n        this.render_button_text($elem, this.limit);\n    }\n\n    // Set the button text as per the selected data.\n    render_button_text($elem, limit) {\n        const items_selected = this.data_selected.length;\n        let text = \"\";\n\n        // Destroy the tooltip once the button text reloads.\n        this.destroy_tooltip();\n\n        if (items_selected === 0) {\n            this.render_default_text($elem);\n            return;\n        } else if (limit >= items_selected) {\n            const data_selected = this.data.filter((data) =>\n                this.data_selected.includes(data.value),\n            );\n            text = data_selected.map((data) => data.name).toString();\n        } else {\n            text = $t({defaultMessage: \"{items_selected} selected\"}, {items_selected});\n            this.render_tooltip();\n        }\n\n        $elem.text(text);\n        $elem.removeClass(\"text-warning\");\n        $elem.closest(\".input-group\").find(\".dropdown_list_reset_button\").show();\n    }\n\n    // Override the DrodownListWidget `render` function.\n    render(value) {\n        const $elem = $(`#${CSS.escape(this.container_id)} #${CSS.escape(this.widget_name)}_name`);\n\n        if (!value || value === this.null_value) {\n            this.render_default_text($elem);\n            return;\n        }\n        this.render_button_text($elem, this.limit);\n    }\n\n    dropdown_toggle_click_handler() {\n        const $dropdown_toggle = $(`#${CSS.escape(this.container_id)} .dropdown-toggle`);\n        const $search_input = $(\n            `#${CSS.escape(this.container_id)} .dropdown-search > input[type=text]`,\n        );\n\n        $dropdown_toggle.on(\"click\", () => {\n            this.reset_dropdown_items();\n            $search_input.val(\"\").trigger(\"input\");\n        });\n    }\n\n    // Cases where a user presses any dropdown item but accidentally closes\n    // the dropdown list.\n    reset_dropdown_items() {\n        // Clear the data selected and stop the execution once the user has\n        // pressed the `reset` button.\n        if (this.is_reset) {\n            this.data_selected.splice(0, this.data_selected.length);\n            return;\n        }\n\n        const original_items = this.checked_items ?? this.initial_value;\n        const items_added = _.difference(this.data_selected, original_items);\n\n        // Removing the unnecessary items from dropdown.\n        for (const val of items_added) {\n            const index = this.data_selected.indexOf(val);\n            if (index > -1) {\n                this.data_selected.splice(index, 1);\n            }\n        }\n\n        // Items that are removed in dropdown but should have been a part of it\n        const items_removed = _.difference(original_items, this.data_selected);\n        this.data_selected.push(...items_removed);\n    }\n\n    // Override the DrodownListWidget `setup_dropdown_widget` function.\n    setup_dropdown_widget(data) {\n        const $dropdown_list_body = $(\n            `#${CSS.escape(this.container_id)} .dropdown-list-body`,\n        ).expectOne();\n        const $search_input = $(\n            `#${CSS.escape(this.container_id)} .dropdown-search > input[type=text]`,\n        );\n\n        ListWidget.create($dropdown_list_body, data, {\n            name: `${CSS.escape(this.widget_name)}_list`,\n            modifier(item) {\n                return render_dropdown_list({item});\n            },\n            multiselect: {\n                selected_items: this.data_selected,\n            },\n            filter: {\n                $element: $search_input,\n                predicate(item, value) {\n                    return item.name.toLowerCase().includes(value);\n                },\n            },\n            $simplebar_container: $(`#${CSS.escape(this.container_id)} .dropdown-list-wrapper`),\n        });\n    }\n\n    // Add the check mark to dropdown element passed.\n    add_check_mark($element) {\n        const value = $element.attr(\"data-value\");\n        const $link_elem = $element.find(\"a\").expectOne();\n        $link_elem.prepend($(\"<i>\").addClass([\"fa\", \"fa-check\"]));\n        $element.addClass(\"checked\");\n        this.data_selected.push(value);\n    }\n\n    // Remove the check mark from dropdown element.\n    remove_check_mark($element) {\n        const $icon = $element.find(\"i\").expectOne();\n        const value = $element.attr(\"data-value\");\n        const index = this.data_selected.indexOf(value);\n\n        if (index > -1) {\n            $icon.remove();\n            $element.removeClass(\"checked\");\n            this.data_selected.splice(index, 1);\n        }\n    }\n\n    // Render the tooltip once the text changes to `n` selected.\n    render_tooltip() {\n        const $elem = $(`#${CSS.escape(this.container_id)}`);\n        const selected_items = this.data.filter((item) => this.checked_items.includes(item.value));\n\n        tippy($elem[0], {\n            content: selected_items.map((item) => item.name).join(\", \"),\n            placement: \"top\",\n        });\n    }\n\n    destroy_tooltip() {\n        const $elem = $(`#${CSS.escape(this.container_id)}`);\n        const tippy_instance = $elem[0]._tippy;\n        if (!tippy_instance) {\n            return;\n        }\n\n        tippy_instance.destroy();\n    }\n\n    dropdown_focus_events() {\n        // Main keydown event handler which transfers the focus from one child element\n        // to another.\n\n        const $search_input = $(\n            `#${CSS.escape(this.container_id)} .dropdown-search > input[type=text]`,\n        );\n        const $dropdown_menu = $(`.${CSS.escape(this.widget_name)}_setting .dropdown-menu`);\n        const $filter_button = $(`#${CSS.escape(this.container_id)} .multiselect_btn`);\n\n        const dropdown_elements = () => {\n            const $dropdown_list_body = $(\n                `#${CSS.escape(this.container_id)} .dropdown-list-body`,\n            ).expectOne();\n\n            return $dropdown_list_body.children().find(\"a\");\n        };\n\n        $dropdown_menu.on(\"keydown\", (e) => {\n            function trigger_element_focus($element) {\n                e.preventDefault();\n                e.stopPropagation();\n                $element.trigger(\"focus\");\n            }\n\n            switch (e.key) {\n                case \"ArrowDown\": {\n                    switch (e.target) {\n                        case dropdown_elements().last()[0]:\n                            trigger_element_focus($filter_button);\n                            break;\n                        case $(`#${CSS.escape(this.container_id)} .multiselect_btn`)[0]:\n                            trigger_element_focus($search_input);\n                            break;\n                        case $search_input[0]:\n                            trigger_element_focus(dropdown_elements().first());\n                            break;\n                    }\n\n                    break;\n                }\n                case \"ArrowUp\": {\n                    switch (e.target) {\n                        case dropdown_elements().first()[0]:\n                            trigger_element_focus($search_input);\n                            break;\n                        case $search_input[0]:\n                            trigger_element_focus($filter_button);\n                            break;\n                        case $(`#${CSS.escape(this.container_id)} .multiselect_btn`)[0]:\n                            trigger_element_focus(dropdown_elements().last());\n                            break;\n                    }\n\n                    break;\n                }\n                case \"Tab\": {\n                    switch (e.target) {\n                        case $search_input[0]:\n                            trigger_element_focus(dropdown_elements().first());\n                            break;\n                        case $filter_button[0]:\n                            trigger_element_focus($search_input);\n                            break;\n                    }\n\n                    break;\n                }\n            }\n        });\n    }\n\n    // Override the `register_event_handlers` function.\n    register_event_handlers() {\n        const $dropdown_list_body = $(\n            `#${CSS.escape(this.container_id)} .dropdown-list-body`,\n        ).expectOne();\n\n        $dropdown_list_body.on(\"click keypress\", \".list_item\", (e) => {\n            if (e.type === \"keypress\" && !keydown_util.is_enter_event(e)) {\n                return;\n            }\n\n            const $element = e.target.closest(\"li\");\n            if ($element.hasClass(\"checked\")) {\n                this.remove_check_mark($element);\n            } else {\n                this.add_check_mark($element);\n            }\n\n            e.stopPropagation();\n        });\n\n        $(`#${CSS.escape(this.container_id)} .dropdown_list_reset_button`).on(\"click\", (e) => {\n            // Default back the values.\n            this.is_reset = true;\n            this.checked_items = undefined;\n\n            this.update(this.null_value);\n            e.preventDefault();\n        });\n\n        $(`#${CSS.escape(this.container_id)} .multiselect_btn`).on(\"click\", (e) => {\n            e.preventDefault();\n\n            // Set the value to `false` to end the scope of the\n            // `reset` button.\n            this.is_reset = false;\n            // We deep clone the values of `data_selected` to a new\n            // variable. This is so because arrays are reference types\n            // and modifying the parent array can change the values\n            // within the child array. Here, `checked_items` copies over the\n            // value and not just the reference.\n            this.checked_items = _.cloneDeep(this.data_selected);\n            this.update(this.data_selected);\n\n            // Cases when the user wants to pass a successful event after\n            // the dropdown is closed.\n            if (this.on_close) {\n                e.stopPropagation();\n                const $setting_elem = $(e.currentTarget).closest(\n                    `.${CSS.escape(this.widget_name)}_setting`,\n                );\n                $setting_elem.find(\".dropdown-menu\").dropdown(\"toggle\");\n\n                this.on_close();\n            }\n        });\n    }\n\n    // Returns array of values selected by user.\n    value() {\n        let val = this.checked_items;\n        // Cases taken care of -\n        // - User never pressed the filter button -> We return the initial value.\n        // - User pressed the `reset` button -> We return an empty array.\n        if (val === undefined) {\n            val = this.is_reset ? [] : this.initial_value;\n        }\n        return val;\n    }\n}\n","import $ from \"jquery\";\n\nimport * as alert_words from \"./alert_words\";\nimport {all_messages_data} from \"./all_messages_data\";\nimport * as blueslip from \"./blueslip\";\nimport * as compose from \"./compose\";\nimport * as compose_ui from \"./compose_ui\";\nimport * as drafts from \"./drafts\";\nimport * as local_message from \"./local_message\";\nimport * as markdown from \"./markdown\";\nimport * as message_events from \"./message_events\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_store from \"./message_store\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as notifications from \"./notifications\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as pm_list from \"./pm_list\";\nimport * as popovers from \"./popovers\";\nimport * as recent_topics_data from \"./recent_topics_data\";\nimport * as rows from \"./rows\";\nimport * as sent_messages from \"./sent_messages\";\nimport * as stream_list from \"./stream_list\";\nimport * as stream_topic_history from \"./stream_topic_history\";\nimport * as transmit from \"./transmit\";\nimport * as ui from \"./ui\";\nimport * as util from \"./util\";\n\n// Docs: https://zulip.readthedocs.io/en/latest/subsystems/sending-messages.html\n\nconst waiting_for_id = new Map();\nlet waiting_for_ack = new Map();\n\n// These retry spinner functions return true if and only if the\n// spinner already is in the requested state, which can be used to\n// avoid sending duplicate requests.\nfunction show_retry_spinner($row) {\n    const $retry_spinner = $row.find(\".refresh-failed-message\");\n\n    if (!$retry_spinner.hasClass(\"rotating\")) {\n        $retry_spinner.toggleClass(\"rotating\", true);\n        return false;\n    }\n    return true;\n}\n\nfunction hide_retry_spinner($row) {\n    const $retry_spinner = $row.find(\".refresh-failed-message\");\n\n    if ($retry_spinner.hasClass(\"rotating\")) {\n        $retry_spinner.toggleClass(\"rotating\", false);\n        return false;\n    }\n    return true;\n}\n\nfunction insert_message(message) {\n    // It is a little bit funny to go through the message_events\n    // codepath, but it's sort of the idea behind local echo that\n    // we are simulating server events before they actually arrive.\n    message_events.insert_new_messages([message], true);\n}\n\nfunction failed_message_success(message_id) {\n    message_store.get(message_id).failed_request = false;\n    ui.show_failed_message_success(message_id);\n}\n\nfunction resend_message(message, $row) {\n    message.content = message.raw_content;\n    if (show_retry_spinner($row)) {\n        // retry already in in progress\n        return;\n    }\n\n    // Always re-set queue_id if we've gotten a new one\n    // since the time when the message object was initially created\n    message.queue_id = page_params.queue_id;\n\n    const local_id = message.local_id;\n\n    function on_success(data) {\n        const message_id = data.id;\n        const locally_echoed = true;\n\n        hide_retry_spinner($row);\n\n        compose.send_message_success(local_id, message_id, locally_echoed);\n\n        // Resend succeeded, so mark as no longer failed\n        failed_message_success(message_id);\n    }\n\n    function on_error(response) {\n        message_send_error(message.id, response);\n        setTimeout(() => {\n            hide_retry_spinner($row);\n        }, 300);\n        blueslip.log(\"Manual resend of message failed\");\n    }\n\n    sent_messages.start_resend(local_id);\n    transmit.send_message(message, on_success, on_error);\n}\n\nexport function build_display_recipient(message) {\n    if (message.type === \"stream\") {\n        return message.stream;\n    }\n\n    // Build a display recipient with the full names of each\n    // recipient.  Note that it's important that use\n    // util.extract_pm_recipients, which filters out any spurious\n    // \", \" at the end of the recipient list\n    const emails = util.extract_pm_recipients(message.private_message_recipient);\n\n    let sender_in_display_recipients = false;\n    const display_recipient = emails.map((email) => {\n        email = email.trim();\n        const person = people.get_by_email(email);\n        if (person === undefined) {\n            // For unknown users, we return a skeleton object.\n            //\n            // This allows us to support zephyr mirroring situations\n            // where the server might dynamically create users in\n            // response to messages being sent to their email address.\n            //\n            // TODO: It might be cleaner for the web app for such\n            // dynamic user creation to happen inside a separate API\n            // call when the pill is constructed, and then enforcing\n            // the requirement that we have an actual user object in\n            // `people.js` when sending messages.\n            return {\n                email,\n                full_name: email,\n                unknown_local_echo_user: true,\n            };\n        }\n\n        if (person.user_id === message.sender_id) {\n            sender_in_display_recipients = true;\n        }\n\n        // NORMAL PATH\n        //\n        // This should match the format of display_recipient\n        // objects generated by the backend code in models.py,\n        // which is why we create a new object with a `.id` field\n        // rather than a `.user_id` field.\n        return {\n            id: person.user_id,\n            email: person.email,\n            full_name: person.full_name,\n        };\n    });\n\n    if (!sender_in_display_recipients) {\n        // Ensure that the current user is included in\n        // display_recipient for group PMs.\n        display_recipient.push({\n            id: message.sender_id,\n            email: message.sender_email,\n            full_name: message.sender_full_name,\n        });\n    }\n    return display_recipient;\n}\n\nexport function insert_local_message(message_request, local_id_float) {\n    // Shallow clone of message request object that is turned into something suitable\n    // for zulip.js:add_message\n    // Keep this in sync with changes to compose.create_message_object\n    const message = {...message_request};\n\n    message.raw_content = message.content;\n\n    // NOTE: This will parse synchronously. We're not using the async pipeline\n    markdown.apply_markdown(message);\n\n    message.content_type = \"text/html\";\n    message.sender_email = people.my_current_email();\n    message.sender_full_name = people.my_full_name();\n    message.avatar_url = page_params.avatar_url;\n    message.timestamp = Date.now() / 1000;\n    message.local_id = local_id_float.toString();\n    message.locally_echoed = true;\n    message.id = local_id_float;\n    markdown.add_topic_links(message);\n\n    waiting_for_id.set(message.local_id, message);\n    waiting_for_ack.set(message.local_id, message);\n\n    message.display_recipient = build_display_recipient(message);\n\n    insert_message(message);\n    return message;\n}\n\nexport function is_slash_command(content) {\n    return !content.startsWith(\"/me\") && content.startsWith(\"/\");\n}\n\nexport function try_deliver_locally(message_request) {\n    if (markdown.contains_backend_only_syntax(message_request.content)) {\n        return undefined;\n    }\n\n    if (narrow_state.active() && !narrow_state.filter().can_apply_locally(true)) {\n        return undefined;\n    }\n\n    if (is_slash_command(message_request.content)) {\n        return undefined;\n    }\n\n    if (!message_lists.current.data.fetch_status.has_found_newest()) {\n        // If the current message list doesn't yet have the latest\n        // messages before the one we just sent, local echo would make\n        // it appear as though there were no messages between what we\n        // have and the new message we just sent, when in fact we're\n        // in the process of fetching those from the server.  In this\n        // case, it's correct to skip local echo; we'll get the\n        // message we just sent placed appropriately when we get it\n        // from either server_events or message_fetch.\n        blueslip.info(\"Skipping local echo until newest messages get loaded.\");\n        return undefined;\n    }\n\n    const local_id_float = local_message.get_next_id_float();\n\n    if (!local_id_float) {\n        // This can happen for legit reasons.\n        return undefined;\n    }\n\n    // Save a locally echoed message in drafts, so it cannot be\n    // lost. It will be cleared if the message is sent successfully.\n    // We ask the drafts system to not notify the user or update the\n    // draft count, since that would be quite distracting in the very\n    // common case that the message sends normally.\n    const draft_id = drafts.update_draft({no_notify: true, update_count: false});\n    message_request.draft_id = draft_id;\n\n    // Now that we've committed to delivering the message locally, we\n    // shrink the compose-box if it is in the full-screen state. This\n    // would have happened anyway in clear_compose_box, however, we\n    // need to this operation before inserting the local message into\n    // the feed. Otherwise, the out-of-view notification will be\n    // always triggered on the top of compose-box, regardless of\n    // whether the message would be visible after shrinking compose,\n    // because compose occludes the whole screen.\n    if (compose_ui.is_full_size()) {\n        compose_ui.make_compose_box_original_size();\n    }\n\n    const message = insert_local_message(message_request, local_id_float);\n    return message;\n}\n\nexport function edit_locally(message, request) {\n    // Responsible for doing the rendering work of locally editing the\n    // content of a message.  This is used in several code paths:\n    // * Editing a message where a message was locally echoed but\n    //   it got an error back from the server\n    // * Locally echoing any content-only edits to fully sent messages\n    // * Restoring the original content should the server return an\n    //   error after having locally echoed content-only messages.\n    // The details of what should be changed are encoded in the request.\n    const raw_content = request.raw_content;\n    const message_content_edited = raw_content !== undefined && message.raw_content !== raw_content;\n\n    if (request.new_topic !== undefined || request.new_stream_id !== undefined) {\n        const new_stream_id = request.new_stream_id;\n        const new_topic = request.new_topic;\n        stream_topic_history.remove_messages({\n            stream_id: message.stream_id,\n            topic_name: message.topic,\n            num_messages: 1,\n            max_removed_msg_id: message.id,\n        });\n\n        if (new_stream_id !== undefined) {\n            message.stream_id = new_stream_id;\n        }\n        if (new_topic !== undefined) {\n            message.topic = new_topic;\n        }\n\n        stream_topic_history.add_message({\n            stream_id: message.stream_id,\n            topic_name: message.topic,\n            message_id: message.id,\n        });\n    }\n\n    if (message_content_edited) {\n        message.raw_content = raw_content;\n        if (request.content !== undefined) {\n            // This happens in the code path where message editing\n            // failed and we're trying to undo the local echo.  We use\n            // the saved content and flags rather than rendering; this\n            // is important in case\n            // markdown.contains_backend_only_syntax(message) is true.\n            message.content = request.content;\n            message.mentioned = request.mentioned;\n            message.mentioned_me_directly = request.mentioned_me_directly;\n            message.alerted = request.alerted;\n        } else {\n            // Otherwise, we Markdown-render the message; this resets\n            // all flags, so we need to restore those flags that are\n            // properties of how the user has interacted with the\n            // message, and not its rendering.\n            markdown.apply_markdown(message);\n            if (request.starred !== undefined) {\n                message.starred = request.starred;\n            }\n            if (request.historical !== undefined) {\n                message.historical = request.historical;\n            }\n            if (request.collapsed !== undefined) {\n                message.collapsed = request.collapsed;\n            }\n        }\n    }\n\n    // We don't have logic to adjust unread counts, because message\n    // reaching this code path must either have been sent by us or the\n    // topic isn't being edited, so unread counts can't have changed.\n    for (const msg_list of message_lists.all_rendered_message_lists()) {\n        msg_list.view.rerender_messages([message]);\n    }\n    stream_list.update_streams_sidebar();\n    pm_list.update_private_messages();\n}\n\nexport function reify_message_id(local_id, server_id) {\n    const message = waiting_for_id.get(local_id);\n    waiting_for_id.delete(local_id);\n\n    // reify_message_id is called both on receiving a self-sent message\n    // from the server, and on receiving the response to the send request\n    // Reification is only needed the first time the server id is found\n    if (message === undefined) {\n        return;\n    }\n\n    message.id = server_id;\n    message.locally_echoed = false;\n\n    if (message.draft_id) {\n        // Delete the draft if message was locally echoed\n        drafts.draft_model.deleteDraft(message.draft_id);\n    }\n\n    const opts = {old_id: Number.parseFloat(local_id), new_id: server_id};\n\n    message_store.reify_message_id(opts);\n    update_message_lists(opts);\n    notifications.reify_message_id(opts);\n    recent_topics_data.reify_message_id_if_available(opts);\n}\n\nexport function update_message_lists({old_id, new_id}) {\n    if (all_messages_data !== undefined) {\n        all_messages_data.change_message_id(old_id, new_id);\n    }\n    for (const msg_list of message_lists.all_rendered_message_lists()) {\n        msg_list.change_message_id(old_id, new_id);\n        msg_list.view.change_message_id(old_id, new_id);\n    }\n}\n\nexport function process_from_server(messages) {\n    const msgs_to_rerender = [];\n    const non_echo_messages = [];\n\n    for (const message of messages) {\n        // In case we get the sent message before we get the send ACK, reify here\n\n        const local_id = message.local_id;\n        const client_message = waiting_for_ack.get(local_id);\n        if (client_message === undefined) {\n            // For messages that weren't locally echoed, we go through\n            // the \"main\" codepath that doesn't have to id reconciliation.\n            // We simply return non-echo messages to our caller.\n            non_echo_messages.push(message);\n            continue;\n        }\n\n        reify_message_id(local_id, message.id);\n\n        if (message_store.get(message.id).failed_request) {\n            failed_message_success(message.id);\n        }\n\n        if (client_message.content !== message.content) {\n            client_message.content = message.content;\n            sent_messages.mark_disparity(local_id);\n        }\n\n        message_store.update_booleans(client_message, message.flags);\n\n        // We don't try to highlight alert words locally, so we have to\n        // do it now.  (Note that we will indeed highlight alert words in\n        // messages that we sent to ourselves, since we might want to test\n        // that our alert words are set up correctly.)\n        alert_words.process_message(client_message);\n\n        // Previously, the message had the \"local echo\" timestamp set\n        // by the browser; if there was some round-trip delay to the\n        // server, the actual server-side timestamp could be slightly\n        // different.  This corrects the frontend timestamp to match\n        // the backend.\n        client_message.timestamp = message.timestamp;\n\n        client_message.topic_links = message.topic_links;\n        client_message.is_me_message = message.is_me_message;\n        client_message.submessages = message.submessages;\n\n        msgs_to_rerender.push(client_message);\n        waiting_for_ack.delete(local_id);\n    }\n\n    if (msgs_to_rerender.length > 0) {\n        // In theory, we could just rerender messages where there were\n        // changes in either the rounded timestamp we display or the\n        // message content, but in practice, there's no harm to just\n        // doing it unconditionally.\n        for (const msg_list of message_lists.all_rendered_message_lists()) {\n            msg_list.view.rerender_messages(msgs_to_rerender);\n        }\n    }\n\n    return non_echo_messages;\n}\n\nexport function _patch_waiting_for_ack(data) {\n    // Only for testing\n    waiting_for_ack = data;\n}\n\nexport function message_send_error(message_id, error_response) {\n    // Error sending message, show inline\n    message_store.get(message_id).failed_request = true;\n    ui.show_message_failed(message_id, error_response);\n}\n\nfunction abort_message(message) {\n    // Remove in all lists in which it exists\n    all_messages_data.remove([message.id]);\n    for (const msg_list of [message_lists.home, message_lists.current]) {\n        msg_list.remove_and_rerender([message.id]);\n    }\n}\n\nexport function initialize() {\n    function on_failed_action(selector, callback) {\n        $(\"#main_div\").on(\"click\", selector, function (e) {\n            e.stopPropagation();\n            popovers.hide_all();\n            const $row = $(this).closest(\".message_row\");\n            const local_id = rows.local_echo_id($row);\n            // Message should be waiting for ack and only have a local id,\n            // otherwise send would not have failed\n            const message = waiting_for_ack.get(local_id);\n            if (message === undefined) {\n                blueslip.warn(\n                    \"Got resend or retry on failure request but did not find message in ack list \" +\n                        local_id,\n                );\n                return;\n            }\n            callback(message, $row);\n        });\n    }\n\n    on_failed_action(\".remove-failed-message\", abort_message);\n    on_failed_action(\".refresh-failed-message\", resend_message);\n}\n","import _ from \"lodash\";\n\n// We will get actual values when we get initialized.\nlet emoji_codes = {};\n\n// `emojis_by_name` is the central data source that is supposed to be\n// used by every widget in the web app for gathering data for displaying\n// emojis. Emoji picker uses this data to derive data for its own use.\nexport let emojis_by_name = new Map();\n\nexport const all_realm_emojis = new Map();\nexport const active_realm_emojis = new Map();\nexport const deactivated_emoji_name_to_code = new Map();\n\nlet default_emoji_aliases = new Map();\n\n// For legacy reasons we track server_realm_emoji_data,\n// since our settings code builds off that format.  We\n// should move it to use all_realm_emojis, which requires\n// adding author_id here and then changing the settings code\n// in a slightly non-trivial way.\nlet server_realm_emoji_data = {};\n\n// We really want to deprecate this, too.\nexport function get_server_realm_emoji_data() {\n    return server_realm_emoji_data;\n}\n\nlet emoticon_translations = [];\n\nfunction build_emoticon_translations({emoticon_conversions}) {\n    /*\n\n    Please keep this as a pure function so that we can\n    eventually share this code with the mobile codebase.\n\n    Build a data structure that looks like something\n    like this:\n\n    [\n        { regex: /(\\:\\))/g, replacement_text: ':smile:' },\n        { regex: /(\\(\\:)/g, replacement_text: ':smile:' },\n        { regex: /(\\:\\/)/g, replacement_text: ':confused:' },\n        { regex: /(<3)/g, replacement_text: ':heart:' },\n        { regex: /(\\:\\()/g, replacement_text: ':frown:' },\n        { regex: /(\\:\\|)/g, replacement_text: ':expressionless:' },\n        ....\n    ]\n\n        We build up this list of ~12 emoticon translations even\n        if user_settings.translate_emoticons is false, since\n        that setting can be flipped via live update events.\n        On the other hand, we assume that emoticon_conversions\n        won't change until the next reload, which is fine for\n        now (and we want to avoid creating new regexes on\n        every new message).\n    */\n\n    const translations = [];\n    for (const [emoticon, replacement_text] of Object.entries(emoticon_conversions)) {\n        const regex = new RegExp(\"(\" + _.escapeRegExp(emoticon) + \")\", \"g\");\n\n        translations.push({\n            regex,\n            replacement_text,\n        });\n    }\n\n    return translations;\n}\n\nconst zulip_emoji = {\n    id: \"zulip\",\n    emoji_name: \"zulip\",\n    emoji_url: \"/static/generated/emoji/images/emoji/unicode/zulip.png\",\n    is_realm_emoji: true,\n    deactivated: false,\n};\n\nexport function get_emoji_name(codepoint) {\n    // get_emoji_name('1f384') === 'holiday_tree'\n    if (Object.hasOwn(emoji_codes.codepoint_to_name, codepoint)) {\n        return emoji_codes.codepoint_to_name[codepoint];\n    }\n    return undefined;\n}\n\nexport function get_emoji_codepoint(emoji_name) {\n    // get_emoji_codepoint('avocado') === '1f951'\n    if (Object.hasOwn(emoji_codes.name_to_codepoint, emoji_name)) {\n        return emoji_codes.name_to_codepoint[emoji_name];\n    }\n    return undefined;\n}\n\nexport function get_realm_emoji_url(emoji_name) {\n    // If the emoji name is a realm emoji, returns the URL for it.\n    // Returns undefined for Unicode emoji.\n    // get_realm_emoji_url('shrug') === '/user_avatars/2/emoji/images/31.png'\n\n    const data = active_realm_emojis.get(emoji_name);\n\n    if (!data) {\n        // Not all emojis have URLs, plus the user\n        // may have hand-typed an invalid emoji.\n        // The caller can check the result for falsiness\n        // and then try alternate ways of parsing the\n        // emoji (in the case of Markdown) or just do\n        // whatever makes sense for the caller.\n        return undefined;\n    }\n\n    return data.emoji_url;\n}\n\nfunction build_emojis_by_name({\n    realm_emojis,\n    emoji_catalog,\n    get_emoji_name,\n    default_emoji_aliases,\n}) {\n    // Please keep this as a pure function so that we can\n    // eventually share this code with the mobile codebase.\n    const map = new Map();\n\n    for (const codepoints of Object.values(emoji_catalog)) {\n        for (const codepoint of codepoints) {\n            const emoji_name = get_emoji_name(codepoint);\n            if (emoji_name !== undefined) {\n                const emoji_dict = {\n                    name: emoji_name,\n                    display_name: emoji_name,\n                    aliases: default_emoji_aliases.get(codepoint),\n                    is_realm_emoji: false,\n                    emoji_code: codepoint,\n                    has_reacted: false,\n                };\n                // We may later get overridden by a realm emoji.\n                map.set(emoji_name, emoji_dict);\n            }\n        }\n    }\n\n    for (const [realm_emoji_name, realm_emoji] of realm_emojis) {\n        const emoji_dict = {\n            name: realm_emoji_name,\n            display_name: realm_emoji_name,\n            aliases: [realm_emoji_name],\n            is_realm_emoji: true,\n            url: realm_emoji.emoji_url,\n            has_reacted: false,\n        };\n\n        // We want the realm emoji to overwrite any existing entry in this map.\n        map.set(realm_emoji_name, emoji_dict);\n    }\n\n    return map;\n}\n\nexport function update_emojis(realm_emojis) {\n    // The settings code still works with the\n    // server format of the data.\n    server_realm_emoji_data = realm_emojis;\n\n    // all_realm_emojis is emptied before adding the realm-specific emoji\n    // to it. This makes sure that in case of deletion, the deleted realm_emojis\n    // don't persist in active_realm_emojis.\n    all_realm_emojis.clear();\n    active_realm_emojis.clear();\n\n    for (const data of Object.values(realm_emojis)) {\n        all_realm_emojis.set(data.id, {\n            id: data.id,\n            emoji_name: data.name,\n            emoji_url: data.source_url,\n            still_url: data.still_url,\n            deactivated: data.deactivated,\n        });\n        if (data.deactivated !== true) {\n            active_realm_emojis.set(data.name, {\n                id: data.id,\n                emoji_name: data.name,\n                emoji_url: data.source_url,\n                still_url: data.still_url,\n            });\n        }\n    }\n\n    // Add the special Zulip emoji as though it were a realm emoji.\n\n    // The Zulip emoji is the only emoji that uses a string (\"zulip\")\n    // as its ID. All other emoji use numeric IDs. This special case\n    // is confusing; ideally we'd convert the Zulip emoji to be\n    // implemented using the RealmEmoji infrastructure.\n    all_realm_emojis.set(\"zulip\", zulip_emoji);\n\n    // here \"zulip\" is an emoji name, which is fine.\n    active_realm_emojis.set(\"zulip\", zulip_emoji);\n\n    emojis_by_name = build_emojis_by_name({\n        realm_emojis: active_realm_emojis,\n        emoji_catalog: emoji_codes.emoji_catalog,\n        get_emoji_name,\n        default_emoji_aliases,\n    });\n}\n\n// This function will provide required parameters that would\n// need by template to render an emoji.\nexport function get_emoji_details_by_name(emoji_name) {\n    // To call this function you must pass an emoji name.\n    if (!emoji_name) {\n        throw new Error(\"Emoji name must be passed.\");\n    }\n\n    const emoji_info = {emoji_name};\n\n    if (active_realm_emojis.has(emoji_name)) {\n        if (emoji_name === \"zulip\") {\n            emoji_info.reaction_type = \"zulip_extra_emoji\";\n        } else {\n            emoji_info.reaction_type = \"realm_emoji\";\n        }\n        const emoji_code_info = active_realm_emojis.get(emoji_name);\n        emoji_info.emoji_code = emoji_code_info.id;\n        emoji_info.url = emoji_code_info.emoji_url;\n        if (emoji_code_info.still_url) {\n            emoji_info.still_url = emoji_code_info.still_url;\n        }\n    } else {\n        const codepoint = get_emoji_codepoint(emoji_name);\n        if (codepoint === undefined) {\n            throw new Error(\"Bad emoji name: \" + emoji_name);\n        }\n        emoji_info.reaction_type = \"unicode_emoji\";\n        emoji_info.emoji_code = codepoint;\n    }\n    return emoji_info;\n}\n\nexport function get_emoji_details_for_rendering(opts) {\n    if (!opts.emoji_name || !opts.emoji_code || !opts.reaction_type) {\n        throw new Error(\"Invalid params.\");\n    }\n\n    if (opts.reaction_type !== \"unicode_emoji\") {\n        const realm_emoji = all_realm_emojis.get(opts.emoji_code);\n        if (!realm_emoji) {\n            throw new Error(`Cannot find realm emoji for code '${opts.emoji_code}'.`);\n        }\n        return {\n            url: realm_emoji.emoji_url,\n            still_url: realm_emoji.still_url,\n            emoji_name: opts.emoji_name,\n            emoji_code: opts.emoji_code,\n            reaction_type: opts.reaction_type,\n        };\n    }\n    // else\n    return {\n        emoji_name: opts.emoji_name,\n        emoji_code: opts.emoji_code,\n        reaction_type: opts.reaction_type,\n    };\n}\n\nfunction build_default_emoji_aliases({names, get_emoji_codepoint}) {\n    // Please keep this as a pure function so that we can\n    // eventually share this code with the mobile codebase.\n\n    // Create a map of codepoint -> names\n    const map = new Map();\n\n    for (const name of names) {\n        const base_name = get_emoji_codepoint(name);\n\n        if (map.has(base_name)) {\n            map.get(base_name).push(name);\n        } else {\n            map.set(base_name, [name]);\n        }\n    }\n\n    return map;\n}\n\nexport function initialize(params) {\n    emoji_codes = params.emoji_codes;\n\n    emoticon_translations = build_emoticon_translations({\n        emoticon_conversions: emoji_codes.emoticon_conversions,\n    });\n\n    default_emoji_aliases = build_default_emoji_aliases({\n        names: emoji_codes.names,\n        get_emoji_codepoint,\n    });\n\n    update_emojis(params.realm_emoji);\n}\n\nexport function get_canonical_name(emoji_name) {\n    if (active_realm_emojis.has(emoji_name)) {\n        return emoji_name;\n    }\n    const codepoint = get_emoji_codepoint(emoji_name);\n    if (codepoint === undefined) {\n        // Our caller needs to handle this possibility.\n        return undefined;\n    }\n\n    return get_emoji_name(codepoint);\n}\n\nexport function get_emoticon_translations() {\n    return emoticon_translations;\n}\n","import $ from \"jquery\";\n\n// import emoji_codes from \"../generated/emoji/emoji_codes.json\";\nimport * as typeahead from \"../shared/js/typeahead\";\nimport render_emoji_popover from \"../templates/emoji_popover.hbs\";\nimport render_emoji_popover_content from \"../templates/emoji_popover_content.hbs\";\nimport render_emoji_popover_search_results from \"../templates/emoji_popover_search_results.hbs\";\nimport render_emoji_showcase from \"../templates/emoji_showcase.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as compose_ui from \"./compose_ui\";\nimport * as emoji from \"./emoji\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_store from \"./message_store\";\nimport {page_params} from \"./page_params\";\nimport * as popovers from \"./popovers\";\nimport * as reactions from \"./reactions\";\nimport * as rows from \"./rows\";\nimport * as spectators from \"./spectators\";\nimport * as ui from \"./ui\";\nimport {user_settings} from \"./user_settings\";\nimport * as user_status_ui from \"./user_status_ui\";\n\n// Emoji picker is of fixed width and height. Update these\n// whenever these values are changed in `reactions.css`.\nconst APPROX_HEIGHT = 375;\nconst APPROX_WIDTH = 255;\n\n// The functionalities for reacting to a message with an emoji\n// and composing a message with an emoji share a single widget,\n// implemented as the emoji_popover.\nexport let complete_emoji_catalog = [];\n\nlet $current_message_emoji_popover_elem;\nlet emoji_catalog_last_coordinates = {\n    section: 0,\n    index: 0,\n};\nlet current_section = 0;\nlet current_index = 0;\nlet search_is_active = false;\nconst search_results = [];\nlet section_head_offsets = [];\nlet edit_message_id = null;\n\nconst EMOJI_CATEGORIES = [\n    {name: \"Popular\", icon: \"fa-star-o\"},\n    {name: \"Smileys & Emotion\", icon: \"fa-smile-o\"},\n    {name: \"People & Body\", icon: \"fa-thumbs-o-up\"},\n    {name: \"Animals & Nature\", icon: \"fa-leaf\"},\n    {name: \"Food & Drink\", icon: \"fa-cutlery\"},\n    {name: \"Activities\", icon: \"fa-soccer-ball-o\"},\n    {name: \"Travel & Places\", icon: \"fa-car\"},\n    {name: \"Objects\", icon: \"fa-lightbulb-o\"},\n    {name: \"Symbols\", icon: \"fa-hashtag\"},\n    {name: \"Flags\", icon: \"fa-flag\"},\n    {name: \"Custom\", icon: \"fa-cog\"},\n];\n\nfunction get_total_sections() {\n    if (search_is_active) {\n        return 1;\n    }\n    return complete_emoji_catalog.length;\n}\n\nfunction get_max_index(section) {\n    if (search_is_active) {\n        return search_results.length;\n    } else if (section >= 0 && section < get_total_sections()) {\n        return complete_emoji_catalog[section].emojis.length;\n    }\n    return undefined;\n}\n\nfunction get_emoji_id(section, index) {\n    let type = \"emoji_picker_emoji\";\n    if (search_is_active) {\n        type = \"emoji_search_result\";\n    }\n    const emoji_id = [type, section, index].join(\",\");\n    return emoji_id;\n}\n\nfunction get_emoji_coordinates(emoji_id) {\n    // Emoji id is of the following form:\n    //    <emoji_type>_<section_number>_<index>.\n    // See `get_emoji_id()`.\n    const emoji_info = emoji_id.split(\",\");\n    return {\n        section: Number.parseInt(emoji_info[1], 10),\n        index: Number.parseInt(emoji_info[2], 10),\n    };\n}\n\nfunction show_search_results() {\n    $(\".emoji-popover-emoji-map\").hide();\n    $(\".emoji-popover-category-tabs\").hide();\n    $(\".emoji-search-results-container\").show();\n    emoji_catalog_last_coordinates = {\n        section: current_section,\n        index: current_index,\n    };\n    current_section = 0;\n    current_index = 0;\n    search_is_active = true;\n}\n\nfunction show_emoji_catalog() {\n    $(\".emoji-popover-emoji-map\").show();\n    $(\".emoji-popover-category-tabs\").show();\n    $(\".emoji-search-results-container\").hide();\n    current_section = emoji_catalog_last_coordinates.section;\n    current_index = emoji_catalog_last_coordinates.index;\n    search_is_active = false;\n}\n\nexport function rebuild_catalog() {\n    const realm_emojis = emoji.active_realm_emojis;\n\n    const catalog = new Map();\n    catalog.set(\n        \"Custom\",\n        Array.from(realm_emojis.keys(), (realm_emoji_name) =>\n            emoji.emojis_by_name.get(realm_emoji_name),\n        ),\n    );\n\n    for (const [category, codepoints] of Object.entries(emoji_codes.emoji_catalog)) {\n        const emojis = [];\n        for (const codepoint of codepoints) {\n            const name = emoji.get_emoji_name(codepoint);\n            if (name !== undefined) {\n                const emoji_dict = emoji.emojis_by_name.get(name);\n                if (emoji_dict !== undefined && emoji_dict.is_realm_emoji !== true) {\n                    emojis.push(emoji_dict);\n                }\n            }\n        }\n        catalog.set(category, emojis);\n    }\n\n    const popular = [];\n    for (const codepoint of typeahead.popular_emojis) {\n        const name = emoji.get_emoji_name(codepoint);\n        if (name !== undefined) {\n            const emoji_dict = emoji.emojis_by_name.get(name);\n            if (emoji_dict !== undefined) {\n                popular.push(emoji_dict);\n            }\n        }\n    }\n    catalog.set(\"Popular\", popular);\n\n    const categories = EMOJI_CATEGORIES.filter((category) => catalog.has(category.name));\n    complete_emoji_catalog = categories.map((category) => ({\n        name: category.name,\n        icon: category.icon,\n        emojis: catalog.get(category.name),\n    }));\n}\n\nconst generate_emoji_picker_content = function (id) {\n    let emojis_used = [];\n\n    if (id !== undefined) {\n        emojis_used = reactions.get_emojis_used_by_user_for_message_id(id);\n    }\n    for (const emoji_dict of emoji.emojis_by_name.values()) {\n        emoji_dict.has_reacted = emoji_dict.aliases.some((alias) => emojis_used.includes(alias));\n    }\n\n    return render_emoji_popover_content({\n        message_id: id,\n        emoji_categories: complete_emoji_catalog,\n        is_status_emoji_popover: user_status_ui.user_status_picker_open(),\n    });\n};\n\nfunction refill_section_head_offsets($popover) {\n    section_head_offsets = [];\n    $popover.find(\".emoji-popover-subheading\").each(function () {\n        section_head_offsets.push({\n            section: $(this).attr(\"data-section\"),\n            position_y: $(this).position().top,\n        });\n    });\n}\n\nexport function reactions_popped() {\n    return $current_message_emoji_popover_elem !== undefined;\n}\n\nexport function hide_emoji_popover() {\n    $(\".has_popover\").removeClass(\"has_popover has_emoji_popover\");\n    if (user_status_ui.user_status_picker_open()) {\n        // Re-enable clicking events for other elements after closing\n        // the popover.  This is the inverse of the hack of in the\n        // handler that opens the \"user status modal\" emoji picker.\n        $(\".app, .header, .modal__overlay, #set_user_status_modal\").css(\"pointer-events\", \"all\");\n    }\n    if (reactions_popped()) {\n        $current_message_emoji_popover_elem.popover(\"destroy\");\n        $current_message_emoji_popover_elem.removeClass(\"reaction_button_visible\");\n        $current_message_emoji_popover_elem = undefined;\n    }\n}\n\nfunction get_selected_emoji() {\n    return $(\".emoji-popover-emoji:focus\")[0];\n}\n\nfunction get_rendered_emoji(section, index) {\n    const emoji_id = get_emoji_id(section, index);\n    const $emoji = $(`.emoji-popover-emoji[data-emoji-id='${CSS.escape(emoji_id)}']`);\n    if ($emoji.length > 0) {\n        return $emoji;\n    }\n    return undefined;\n}\n\nexport function is_emoji_present_in_text(text, emoji_dict) {\n    // fetching emoji details to ensure emoji_code and reaction_type are present\n    const emoji_info = emoji.get_emoji_details_by_name(emoji_dict.name);\n    if (typeahead.is_unicode_emoji(emoji_info)) {\n        // convert emoji_dict to an actual emoji character\n        const parsed_emoji_code = typeahead.parse_unicode_emoji_code(emoji_info.emoji_code);\n\n        return text.includes(parsed_emoji_code);\n    }\n\n    return false;\n}\n\nfunction filter_emojis() {\n    const $elt = $(\".emoji-popover-filter\").expectOne();\n    const query = $elt.val().trim().toLowerCase();\n    const message_id = $(\".emoji-search-results-container\").data(\"message-id\");\n    const search_results_visible = $(\".emoji-search-results-container\").is(\":visible\");\n    if (query !== \"\") {\n        const categories = complete_emoji_catalog;\n        const search_terms = query.split(\" \");\n        search_results.length = 0;\n\n        for (const category of categories) {\n            if (category.name === \"Popular\") {\n                continue;\n            }\n            const emojis = category.emojis;\n            for (const emoji_dict of emojis) {\n                for (const alias of emoji_dict.aliases) {\n                    const match = search_terms.every((search_term) => alias.includes(search_term));\n                    if (match) {\n                        search_results.push({...emoji_dict, emoji_name: alias});\n                        break; // We only need the first matching alias per emoji.\n                    }\n                }\n\n                // using query instead of search_terms because it's possible multiple emojis were input\n                // without being separated by spaces\n                if (is_emoji_present_in_text(query, emoji_dict)) {\n                    search_results.push({...emoji_dict, emoji_name: emoji_dict.name});\n                }\n            }\n        }\n\n        const sorted_search_results = typeahead.sort_emojis(search_results, query);\n        const rendered_search_results = render_emoji_popover_search_results({\n            search_results: sorted_search_results,\n            is_status_emoji_popover: user_status_ui.user_status_picker_open(),\n            message_id,\n        });\n        $(\".emoji-search-results\").html(rendered_search_results);\n        ui.reset_scrollbar($(\".emoji-search-results-container\"));\n        if (!search_results_visible) {\n            show_search_results();\n        }\n    } else {\n        show_emoji_catalog();\n    }\n}\n\nfunction toggle_reaction(emoji_name, event) {\n    const message_id = message_lists.current.selected_id();\n    const message = message_store.get(message_id);\n    if (!message) {\n        blueslip.error(\"reactions: Bad message id: \" + message_id);\n        return;\n    }\n\n    reactions.toggle_emoji_reaction(message_id, emoji_name, event);\n\n    if (!event.shiftKey) {\n        hide_emoji_popover();\n    }\n\n    $(event.target).closest(\".reaction\").toggleClass(\"reacted\");\n}\n\nfunction is_composition(emoji) {\n    return $(emoji).hasClass(\"composition\");\n}\n\nfunction is_status_emoji(emoji) {\n    return $(emoji).hasClass(\"status_emoji\");\n}\n\nfunction process_enter_while_filtering(e) {\n    if (keydown_util.is_enter_event(e)) {\n        e.preventDefault();\n        const $first_emoji = get_rendered_emoji(0, 0);\n        if ($first_emoji) {\n            if (is_composition($first_emoji)) {\n                $first_emoji.trigger(\"click\");\n            } else {\n                toggle_reaction($first_emoji.attr(\"data-emoji-name\"), e);\n            }\n        }\n    }\n}\n\nfunction toggle_selected_emoji(e) {\n    // Toggle the currently selected emoji.\n    const selected_emoji = get_selected_emoji();\n\n    if (selected_emoji === undefined) {\n        return;\n    }\n\n    const emoji_name = $(selected_emoji).attr(\"data-emoji-name\");\n\n    toggle_reaction(emoji_name, e);\n}\n\nfunction round_off_to_previous_multiple(number_to_round, multiple) {\n    return number_to_round - (number_to_round % multiple);\n}\n\nfunction reset_emoji_showcase() {\n    $(\".emoji-showcase-container\").empty();\n}\n\nfunction update_emoji_showcase($focused_emoji) {\n    // Don't use jQuery's data() function here. It has the side-effect\n    // of converting emoji names like :100:, :1234: etc to number.\n    const focused_emoji_name = $focused_emoji.attr(\"data-emoji-name\");\n    const canonical_name = emoji.get_canonical_name(focused_emoji_name);\n\n    if (!canonical_name) {\n        blueslip.error(\"Invalid focused_emoji_name: \" + focused_emoji_name);\n        return;\n    }\n\n    const focused_emoji_dict = emoji.emojis_by_name.get(canonical_name);\n\n    const emoji_dict = {\n        ...focused_emoji_dict,\n        name: focused_emoji_name.replace(/_/g, \" \"),\n    };\n    const rendered_showcase = render_emoji_showcase({\n        emoji_dict,\n    });\n\n    $(\".emoji-showcase-container\").html(rendered_showcase);\n}\n\nfunction maybe_change_focused_emoji($emoji_map, next_section, next_index, preserve_scroll) {\n    const $next_emoji = get_rendered_emoji(next_section, next_index);\n    if ($next_emoji) {\n        current_section = next_section;\n        current_index = next_index;\n        if (!preserve_scroll) {\n            $next_emoji.trigger(\"focus\");\n        } else {\n            const start = ui.get_scroll_element($emoji_map).scrollTop();\n            $next_emoji.trigger(\"focus\");\n            if (ui.get_scroll_element($emoji_map).scrollTop() !== start) {\n                ui.get_scroll_element($emoji_map).scrollTop(start);\n            }\n        }\n        update_emoji_showcase($next_emoji);\n        return true;\n    }\n    return false;\n}\n\nfunction maybe_change_active_section(next_section) {\n    const $emoji_map = $(\".emoji-popover-emoji-map\");\n\n    if (next_section >= 0 && next_section < get_total_sections()) {\n        current_section = next_section;\n        current_index = 0;\n        const offset = section_head_offsets[current_section];\n        if (offset) {\n            ui.get_scroll_element($emoji_map).scrollTop(offset.position_y);\n            maybe_change_focused_emoji($emoji_map, current_section, current_index);\n        }\n    }\n}\n\nfunction get_next_emoji_coordinates(move_by) {\n    let next_section = current_section;\n    let next_index = current_index + move_by;\n    let max_len;\n    if (next_index < 0) {\n        next_section = next_section - 1;\n        if (next_section >= 0) {\n            next_index = get_max_index(next_section) - 1;\n            if (move_by === -6) {\n                max_len = get_max_index(next_section);\n                const prev_multiple = round_off_to_previous_multiple(max_len, 6);\n                next_index = prev_multiple + current_index;\n                next_index = next_index >= max_len ? prev_multiple + current_index - 6 : next_index;\n            }\n        }\n    } else if (next_index >= get_max_index(next_section)) {\n        next_section = next_section + 1;\n        if (next_section < get_total_sections()) {\n            next_index = 0;\n            if (move_by === 6) {\n                max_len = get_max_index(next_index);\n                next_index = current_index % 6;\n                next_index = next_index >= max_len ? max_len - 1 : next_index;\n            }\n        }\n    }\n\n    return {\n        section: next_section,\n        index: next_index,\n    };\n}\n\nfunction change_focus_to_filter() {\n    $(\".emoji-popover-filter\").trigger(\"focus\");\n    // If search is active reset current selected emoji to first emoji.\n    if (search_is_active) {\n        current_section = 0;\n        current_index = 0;\n    }\n    reset_emoji_showcase();\n}\n\nexport function navigate(event_name, e) {\n    if (\n        event_name === \"toggle_reactions_popover\" &&\n        reactions_popped() &&\n        (search_is_active === false || search_results.length === 0)\n    ) {\n        hide_emoji_popover();\n        return true;\n    }\n\n    // If search is active and results are empty then return immediately.\n    if (search_is_active === true && search_results.length === 0) {\n        // We don't want to prevent default for keys like Backspace and space.\n        return false;\n    }\n\n    if (event_name === \"enter\") {\n        if (is_composition(e.target) || is_status_emoji(e.target)) {\n            e.target.click();\n        } else {\n            toggle_selected_emoji(e);\n        }\n        return true;\n    }\n\n    const $popover = $(\".emoji-popover\").expectOne();\n    const $emoji_map = $popover.find(\".emoji-popover-emoji-map\").expectOne();\n\n    const $selected_emoji = get_rendered_emoji(current_section, current_index);\n    const is_filter_focused = $(\".emoji-popover-filter\").is(\":focus\");\n    // special cases\n    if (is_filter_focused) {\n        // Move down into emoji map.\n        const filter_text = $(\".emoji-popover-filter\").val();\n        const is_cursor_at_end = $(\".emoji-popover-filter\").caret() === filter_text.length;\n        if (event_name === \"down_arrow\" || (is_cursor_at_end && event_name === \"right_arrow\")) {\n            $selected_emoji.trigger(\"focus\");\n            if (current_section === 0 && current_index < 6) {\n                ui.get_scroll_element($emoji_map).scrollTop(0);\n            }\n            update_emoji_showcase($selected_emoji);\n            return true;\n        }\n        if (event_name === \"tab\") {\n            $selected_emoji.trigger(\"focus\");\n            update_emoji_showcase($selected_emoji);\n            return true;\n        }\n        return false;\n    } else if (\n        (current_section === 0 && current_index < 6 && event_name === \"up_arrow\") ||\n        (current_section === 0 && current_index === 0 && event_name === \"left_arrow\")\n    ) {\n        if ($selected_emoji) {\n            // In this case, we're move up into the reaction\n            // filter. Here, we override the default browser\n            // behavior, which in Firefox is good (preserving\n            // the cursor position) and in Chrome is bad (cursor\n            // goes to beginning) with something reasonable and\n            // consistent (cursor goes to the end of the filter\n            // string).\n            $(\".emoji-popover-filter\").trigger(\"focus\").caret(Number.POSITIVE_INFINITY);\n            ui.get_scroll_element($emoji_map).scrollTop(0);\n            ui.get_scroll_element($(\".emoji-search-results-container\")).scrollTop(0);\n            current_section = 0;\n            current_index = 0;\n            reset_emoji_showcase();\n            return true;\n        }\n        return false;\n    }\n\n    switch (event_name) {\n        case \"tab\":\n        case \"shift_tab\":\n            change_focus_to_filter();\n            return true;\n        case \"page_up\":\n            maybe_change_active_section(current_section - 1);\n            return true;\n        case \"page_down\":\n            maybe_change_active_section(current_section + 1);\n            return true;\n        case \"down_arrow\":\n        case \"up_arrow\":\n        case \"left_arrow\":\n        case \"right_arrow\": {\n            const next_coord = get_next_emoji_coordinates(\n                {down_arrow: 6, up_arrow: -6, left_arrow: -1, right_arrow: 1}[event_name],\n            );\n            return maybe_change_focused_emoji($emoji_map, next_coord.section, next_coord.index);\n        }\n        default:\n            return false;\n    }\n}\n\nfunction process_keypress(e) {\n    const is_filter_focused = $(\".emoji-popover-filter\").is(\":focus\");\n    const pressed_key = e.which;\n    if (\n        !is_filter_focused &&\n        // ':' => 58, is a hotkey for toggling reactions popover.\n        pressed_key !== 58 &&\n        ((pressed_key >= 32 && pressed_key <= 126) || pressed_key === 8)\n    ) {\n        // Handle only printable characters or Backspace.\n        e.preventDefault();\n        e.stopPropagation();\n\n        const $emoji_filter = $(\".emoji-popover-filter\");\n        const old_query = $emoji_filter.val();\n        let new_query = \"\";\n\n        if (pressed_key === 8) {\n            // Handles Backspace.\n            new_query = old_query.slice(0, -1);\n        } else {\n            // Handles any printable character.\n            const key_str = String.fromCodePoint(e.which);\n            new_query = old_query + key_str;\n        }\n\n        $emoji_filter.val(new_query);\n        change_focus_to_filter();\n        filter_emojis();\n    }\n}\n\nexport function emoji_select_tab($elt) {\n    const scrolltop = $elt.scrollTop();\n    const scrollheight = $elt.prop(\"scrollHeight\");\n    const elt_height = $elt.height();\n    let currently_selected = \"\";\n    for (const o of section_head_offsets) {\n        if (scrolltop + elt_height / 2 >= o.position_y) {\n            currently_selected = o.section;\n        }\n    }\n    // Handles the corner case of the last category being\n    // smaller than half of the emoji picker height.\n    if (elt_height + scrolltop === scrollheight) {\n        currently_selected = section_head_offsets.at(-1).section;\n    }\n    // Handles the corner case of the scrolling back to top.\n    if (scrolltop === 0) {\n        currently_selected = section_head_offsets[0].section;\n    }\n    if (currently_selected) {\n        $(\".emoji-popover-tab-item.active\").removeClass(\"active\");\n        $(`.emoji-popover-tab-item[data-tab-name=\"${CSS.escape(currently_selected)}\"]`).addClass(\n            \"active\",\n        );\n    }\n}\n\nfunction register_popover_events($popover) {\n    const $emoji_map = $popover.find(\".emoji-popover-emoji-map\");\n\n    ui.get_scroll_element($emoji_map).on(\"scroll\", () => {\n        emoji_select_tab(ui.get_scroll_element($emoji_map));\n    });\n\n    $(\".emoji-popover-filter\").on(\"input\", filter_emojis);\n    $(\".emoji-popover-filter\").on(\"keydown\", process_enter_while_filtering);\n    $(\".emoji-popover\").on(\"keypress\", process_keypress);\n    $(\".emoji-popover\").on(\"keydown\", (e) => {\n        // Because of cross-browser issues we need to handle Backspace\n        // key separately. Firefox fires `keypress` event for Backspace\n        // key but chrome doesn't so we need to trigger the logic for\n        // handling Backspace in `keydown` event which is fired by both.\n        if (e.which === 8) {\n            process_keypress(e);\n        }\n    });\n}\n\nexport function build_emoji_popover($elt, id) {\n    const template_args = {\n        class: \"emoji-info-popover\",\n    };\n    let placement = popovers.compute_placement($elt, APPROX_HEIGHT, APPROX_WIDTH, true);\n\n    if (placement === \"viewport_center\") {\n        // For legacy reasons `compute_placement` actually can\n        // return `viewport_center`, but bootstrap doesn't actually\n        // support that.\n        placement = \"left\";\n    }\n\n    let template = render_emoji_popover(template_args);\n\n    // if the window is mobile sized, add the `.popover-flex` wrapper to the emoji\n    // popover so that it will be wrapped in flex and centered in the screen.\n    if (window.innerWidth <= 768) {\n        template = \"<div class='popover-flex'>\" + template + \"</div>\";\n    }\n\n    $elt.popover({\n        // temporary patch for handling popover placement of `viewport_center`\n        placement,\n        fix_positions: true,\n        template,\n        title: \"\",\n        content: generate_emoji_picker_content(id),\n        html: true,\n        trigger: \"manual\",\n    });\n    $elt.popover(\"show\");\n\n    const $popover = $elt.data(\"popover\").$tip;\n    $popover.find(\".emoji-popover-filter\").trigger(\"focus\");\n    $current_message_emoji_popover_elem = $elt;\n\n    emoji_catalog_last_coordinates = {\n        section: 0,\n        index: 0,\n    };\n    show_emoji_catalog();\n\n    $(() => refill_section_head_offsets($popover));\n    register_popover_events($popover);\n}\n\nexport function toggle_emoji_popover(element, id, coming_from_actions_popover) {\n    const $last_popover_elem = $current_message_emoji_popover_elem;\n    popovers.hide_all();\n    if ($last_popover_elem !== undefined && $last_popover_elem.get()[0] === element) {\n        // We want it to be the case that a user can dismiss a popover\n        // by clicking on the same element that caused the popover.\n        return;\n    }\n\n    const $elt = $(element);\n    $elt.closest(\".message_row\").toggleClass(\"has_popover has_emoji_popover\");\n    if (id !== undefined) {\n        message_lists.current.select_id(id);\n    }\n\n    if (user_status_ui.user_status_picker_open()) {\n        build_emoji_popover($elt, id);\n    } else if ($elt.data(\"popover\") === undefined || coming_from_actions_popover) {\n        // Keep the element over which the popover is based off visible.\n        $elt.addClass(\"reaction_button_visible\");\n        build_emoji_popover($elt, id);\n    }\n    reset_emoji_showcase();\n}\n\nexport function register_click_handlers() {\n    $(document).on(\"click\", \".emoji-popover-emoji.reaction\", function (e) {\n        // When an emoji is clicked in the popover,\n        // if the user has reacted to this message with this emoji\n        // the reaction is removed\n        // otherwise, the reaction is added\n        const emoji_name = $(this).attr(\"data-emoji-name\");\n        toggle_reaction(emoji_name, e);\n    });\n\n    $(document).on(\"click\", \".emoji-popover-emoji.composition\", function (e) {\n        const emoji_name = $(this).attr(\"data-emoji-name\");\n        const emoji_text = \":\" + emoji_name + \":\";\n        // The following check will return false if emoji was not selected in\n        // message edit form.\n        if (edit_message_id !== null) {\n            const $edit_message_textarea = $(\n                `#edit_form_${CSS.escape(edit_message_id)} .message_edit_content`,\n            );\n            // Assign null to edit_message_id so that the selection of emoji in new\n            // message composition form works correctly.\n            edit_message_id = null;\n            compose_ui.insert_syntax_and_focus(emoji_text, $edit_message_textarea);\n        } else {\n            compose_ui.insert_syntax_and_focus(emoji_text);\n        }\n        e.stopPropagation();\n        hide_emoji_popover();\n    });\n\n    $(\"body\").on(\"click\", \".emoji_map\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const compose_click_target = compose_ui.get_compose_click_target(e);\n        if ($(compose_click_target).parents(\".message_edit_form\").length === 1) {\n            // Store message id in global variable edit_message_id so that\n            // its value can be further used to correctly find the message textarea element.\n            edit_message_id = rows.get_message_id(compose_click_target);\n        } else {\n            edit_message_id = null;\n        }\n        toggle_emoji_popover(compose_click_target);\n    });\n\n    $(\"#main_div\").on(\"click\", \".reaction_button\", function (e) {\n        e.stopPropagation();\n\n        if (page_params.is_spectator) {\n            spectators.login_to_access();\n            return;\n        }\n\n        const message_id = rows.get_message_id(this);\n        toggle_emoji_popover(this, message_id);\n    });\n\n    $(\"body\").on(\"click\", \".emoji-popover-tab-item\", function (e) {\n        e.stopPropagation();\n        e.preventDefault();\n\n        const $popover = $(e.currentTarget).closest(\".emoji-info-popover\").expectOne();\n        const $emoji_map = $popover.find(\".emoji-popover-emoji-map\");\n\n        const offset = section_head_offsets.find(\n            (o) => o.section === $(this).attr(\"data-tab-name\"),\n        );\n\n        if (offset) {\n            ui.get_scroll_element($emoji_map).scrollTop(offset.position_y);\n        }\n    });\n\n    $(\"body\").on(\"click\", \".emoji-popover-filter\", () => {\n        reset_emoji_showcase();\n    });\n\n    $(\"body\").on(\"mouseenter\", \".emoji-popover-emoji\", (e) => {\n        const emoji_id = $(e.currentTarget).data(\"emoji-id\");\n        const emoji_coordinates = get_emoji_coordinates(emoji_id);\n\n        const $emoji_map = $(e.currentTarget)\n            .closest(\".emoji-popover\")\n            .expectOne()\n            .find(\".emoji-popover-emoji-map\");\n        maybe_change_focused_emoji(\n            $emoji_map,\n            emoji_coordinates.section,\n            emoji_coordinates.index,\n            true,\n        );\n    });\n\n    $(\"body\").on(\"click\", \"#set_user_status_modal #selected_emoji\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        toggle_emoji_popover(e.target);\n        // Because the emoji picker gets drawn on top of the user\n        // status modal, we need this hack to make clicking outside\n        // the emoji picker only close the emoji picker, and not the\n        // whole user status modal.\n        $(\".app, .header, .modal__overlay, #set_user_status_modal\").css(\"pointer-events\", \"none\");\n    });\n\n    $(document).on(\"click\", \".emoji-popover-emoji.status_emoji\", function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n        hide_emoji_popover();\n        const emoji_name = $(this).attr(\"data-emoji-name\");\n        let emoji_info = {\n            emoji_name,\n            emoji_alt_code: user_settings.emojiset === \"text\",\n        };\n        if (!emoji_info.emoji_alt_code) {\n            emoji_info = {...emoji_info, ...emoji.get_emoji_details_by_name(emoji_name)};\n        }\n        user_status_ui.set_selected_emoji_info(emoji_info);\n        user_status_ui.update_button();\n        user_status_ui.toggle_clear_message_button();\n    });\n}\n\nexport function initialize() {\n    rebuild_catalog();\n}\n","import google_blob_sheet from \"emoji-datasource-google-blob/img/google/sheets-256/64.png\";\nimport google_sheet from \"emoji-datasource-google/img/google/sheets-256/64.png\";\nimport twitter_sheet from \"emoji-datasource-twitter/img/twitter/sheets-256/64.png\";\n\n// import octopus_url from \"../generated/emoji/images-google-64/1f419.png\";\n\nimport {user_settings} from \"./user_settings\";\n\n// import google_blob_css from \"!style-loader?injectType=lazyStyleTag!css-loader!../generated/emoji-styles/google-blob-sprite.css\";\n// import google_css from \"!style-loader?injectType=lazyStyleTag!css-loader!../generated/emoji-styles/google-sprite.css\";\n// import twitter_css from \"!style-loader?injectType=lazyStyleTag!css-loader!../generated/emoji-styles/twitter-sprite.css\";\n\n// const emojisets = new Map([\n//     [\"google\", {css: google_css, sheet: google_sheet}],\n//     [\"google-blob\", {css: google_blob_css, sheet: google_blob_sheet}],\n//     [\"twitter\", {css: twitter_css, sheet: twitter_sheet}],\n// ]);\nconst emojisets = new Map([\n    [\"google\", {sheet: google_sheet}],\n    [\"google-blob\", { sheet: google_blob_sheet}],\n    [\"twitter\", {sheet: twitter_sheet}],\n]);\n\n// For `text` emoji set we fallback to `google` emoji set\n// for displaying emojis in emoji picker and typeahead.\nemojisets.set(\"text\", emojisets.get(\"google\"));\n\nlet current_emojiset;\n\nexport async function select(name) {\n    const new_emojiset = emojisets.get(name);\n    if (new_emojiset === current_emojiset) {\n        return;\n    }\n    await new Promise((resolve, reject) => {\n        const sheet = new Image();\n        sheet.addEventListener(\"load\", resolve);\n        sheet.addEventListener(\"error\", reject);\n        sheet.src = new_emojiset.sheet;\n    });\n    if (current_emojiset) {\n        current_emojiset.css.unuse();\n    }\n    new_emojiset.css.use();\n    current_emojiset = new_emojiset;\n}\n\nexport function initialize() {\n    select(user_settings.emojiset);\n\n    // Load the octopus image in the background, so that the browser\n    // will cache it for later use.  Note that we hardcode the octopus\n    // emoji to the old Google one because it's better.\n    //\n    // TODO: We should probably just make this work just like the Zulip emoji.\n    const octopus_image = new Image();\n    octopus_image.src = octopus_url;\n}\n","import $ from \"jquery\";\n\nimport render_favicon_svg from \"../templates/favicon.svg.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport favicon_font_url from \"./favicon_font_url!=!url-loader!font-subset-loader2?glyphs=0123456789KMGT∞!source-sans/TTF/SourceSans3-Bold.ttf\";\n\nlet favicon_state;\n\nfunction load_and_set_favicon(rendered_favicon) {\n    favicon_state = {\n        url: URL.createObjectURL(new Blob([rendered_favicon], {type: \"image/svg+xml\"})),\n        image: new Image(),\n    };\n\n    // Without loading the SVG in an Image first, Chrome mysteriously fails to\n    // render the webfont (https://crbug.com/1140920).\n    favicon_state.image.src = favicon_state.url;\n    favicon_state.image.addEventListener(\"load\", set_favicon);\n}\n\nfunction set_favicon() {\n    $(\"#favicon\").attr(\"href\", favicon_state.url);\n}\n\nexport function update_favicon(new_message_count, pm_count) {\n    try {\n        if (favicon_state !== undefined) {\n            favicon_state.image.removeEventListener(\"load\", set_favicon);\n\n            // We need to remove this src so revokeObjectURL doesn't cause a\n            // net::ERR_FILE_NOT_FOUND error in Chrome. This seems to be the\n            // simplest way to do that without triggering an expensive network\n            // request or spewing a different console error.\n            favicon_state.image.src = \"data:,\";\n\n            URL.revokeObjectURL(favicon_state.url);\n            favicon_state = undefined;\n        }\n\n        if (new_message_count === 0 && pm_count === 0) {\n            $(\"#favicon\").attr(\"href\", \"/static/images/favicon.svg?v=4\");\n            return;\n        }\n\n        const pow = Math.floor(Math.log10(new_message_count) / 3);\n        const suffix = [\"\", \"K\", \"M\", \"G\", \"T\"][pow];\n        const count =\n            new_message_count === 0\n                ? \"\"\n                : pow < 5\n                ? `${Math.floor(new_message_count / 1e3 ** pow)}${suffix}`\n                : \"∞\";\n        const count_long = count.length > 2;\n        const rendered_favicon = render_favicon_svg({\n            count,\n            count_long,\n            have_pm: pm_count !== 0,\n            favicon_font_url,\n        });\n\n        load_and_set_favicon(rendered_favicon);\n    } catch (error) {\n        blueslip.error(\"Failed to update favicon\", undefined, error.stack);\n    }\n}\n","import $ from \"jquery\";\n\nimport render_feedback_container from \"../templates/feedback_container.hbs\";\n\nimport * as blueslip from \"./blueslip\";\n\n/*\n\nThis code lets you show something like this:\n\n    +-----\n    | TOPIC MUTES [undo] [x]\n    |\n    | You muted stream Foo, topic Bar.\n    +-----\n\nAnd then you configure the undo behavior, and\neverything else is controlled by the widget.\n\nCode-wise it's a singleton widget that controls the DOM inside\n#feedback_container, which gets served up by server.\n\n*/\n\nconst meta = {\n    hide_me_time: null,\n    alert_hover_state: false,\n    $container: null,\n    opened: false,\n};\n\nconst animate = {\n    maybe_close() {\n        if (!meta.opened) {\n            return;\n        }\n\n        if (meta.hide_me_time < Date.now() && !meta.alert_hover_state) {\n            animate.fadeOut();\n            return;\n        }\n\n        setTimeout(animate.maybe_close, 100);\n    },\n    fadeOut() {\n        if (!meta.opened) {\n            return;\n        }\n\n        if (meta.$container) {\n            meta.$container.fadeOut(500).removeClass(\"show\");\n            meta.opened = false;\n            meta.alert_hover_state = false;\n        }\n    },\n    fadeIn() {\n        if (meta.opened) {\n            return;\n        }\n\n        if (meta.$container) {\n            meta.$container.fadeIn(500).addClass(\"show\");\n            meta.opened = true;\n            setTimeout(animate.maybe_close, 100);\n        }\n    },\n};\n\nfunction set_up_handlers() {\n    if (meta.handlers_set) {\n        return;\n    }\n\n    meta.handlers_set = true;\n\n    // if the user mouses over the notification, don't hide it.\n    meta.$container.on(\"mouseenter\", () => {\n        if (!meta.opened) {\n            return;\n        }\n\n        meta.alert_hover_state = true;\n    });\n\n    // once the user's mouse leaves the notification, restart the countdown.\n    meta.$container.on(\"mouseleave\", () => {\n        if (!meta.opened) {\n            return;\n        }\n\n        meta.alert_hover_state = false;\n        // add at least 2000ms but if more than that exists just keep the\n        // current amount.\n        meta.hide_me_time = Math.max(meta.hide_me_time, Date.now() + 2000);\n    });\n\n    meta.$container.on(\"click\", \".exit-me\", () => {\n        animate.fadeOut();\n    });\n\n    meta.$container.on(\"click\", \".feedback_undo\", () => {\n        if (meta.undo) {\n            meta.undo();\n        }\n        animate.fadeOut();\n    });\n}\n\nexport function is_open() {\n    return meta.opened;\n}\n\nexport function dismiss() {\n    animate.fadeOut();\n}\n\nexport function show(opts) {\n    if (!opts.populate) {\n        blueslip.error(\"programmer needs to supply populate callback.\");\n        return;\n    }\n\n    meta.$container = $(\"#feedback_container\");\n\n    const html = render_feedback_container();\n    meta.$container.html(html);\n\n    set_up_handlers();\n\n    meta.undo = opts.on_undo;\n\n    // add a four second delay before closing up.\n    meta.hide_me_time = Date.now() + 4000;\n\n    meta.$container.find(\".feedback_title\").text(opts.title_text);\n    meta.$container.find(\".feedback_undo\").text(opts.undo_button_text);\n    opts.populate(meta.$container.find(\".feedback_content\"));\n\n    animate.fadeIn();\n}\n","import * as message_scroll from \"./message_scroll\";\n\nfunction max_id_for_messages(messages) {\n    let max_id = 0;\n    for (const msg of messages) {\n        max_id = Math.max(max_id, msg.id);\n    }\n    return max_id;\n}\n\nexport class FetchStatus {\n    // The FetchStatus object tracks the state of a\n    // message_list_data object, whether rendered in the DOM or not,\n    // and is the source of truth for whether the message_list_data\n    // object has the complete history of the view or whether more\n    // messages should be loaded when scrolling to the top or bottom\n    // of the message feed.\n    _loading_older = false;\n    _loading_newer = false;\n    _found_oldest = false;\n    _found_newest = false;\n    _history_limited = false;\n\n    // Tracks the highest message ID that we know exist in this view,\n    // but are not within the contiguous range of messages we have\n    // received from the server.  Used to correctly handle a rare race\n    // condition where a newly sent message races with fetching a\n    // group of messages that would lead to found_newest being set\n    // (described in detail below).\n    _expected_max_message_id = 0;\n\n    start_older_batch(opts) {\n        this._loading_older = true;\n        if (opts.update_loading_indicator) {\n            message_scroll.show_loading_older();\n        }\n    }\n\n    finish_older_batch(opts) {\n        this._loading_older = false;\n        this._found_oldest = opts.found_oldest;\n        this._history_limited = opts.history_limited;\n        if (opts.update_loading_indicator) {\n            message_scroll.hide_loading_older();\n        }\n    }\n\n    can_load_older_messages() {\n        return !this._loading_older && !this._found_oldest;\n    }\n\n    has_found_oldest() {\n        return this._found_oldest;\n    }\n\n    history_limited() {\n        return this._history_limited;\n    }\n\n    start_newer_batch(opts) {\n        this._loading_newer = true;\n        if (opts.update_loading_indicator) {\n            message_scroll.show_loading_newer();\n        }\n    }\n\n    finish_newer_batch(messages, opts) {\n        // Returns true if and only if the caller needs to trigger an\n        // additional fetch due to the race described below.\n        const found_max_message_id = max_id_for_messages(messages);\n        this._loading_newer = false;\n        this._found_newest = opts.found_newest;\n        if (opts.update_loading_indicator) {\n            message_scroll.hide_loading_newer();\n        }\n        if (this._found_newest && this._expected_max_message_id > found_max_message_id) {\n            // This expected_max_message_id logic is designed to\n            // resolve a subtle race condition involving newly sent\n            // messages in a view that does not display the currently\n            // latest messages.\n            //\n            // When a new message arrives matching the current view\n            // and found_newest is false, we cannot add the message to\n            // the view in-order without creating invalid output\n            // (where two messages are display adjacent but might be\n            // weeks and hundreds of messages apart in actuality).\n            //\n            // So we have to discard those messages.  Usually, this is\n            // fine; the client will receive those when the user\n            // scrolls to the bottom of the page, triggering another\n            // fetch.  With that solution, a rare race is still possible,\n            // with this sequence:\n            //\n            // 1. Client initiates GET /messages to fetch the last\n            //    batch of messages in this view.  The server\n            //    completes the database access and and starts sending\n            //    the response with found_newest=true.\n            // 1. A new message is sent matching the view, the event reaches\n            //    the client.  We discard the message because found_newest=false.\n            // 1. The client receives the GET /messages response, and\n            //    marks found_newest=true.  As a result, it believes is has\n            //    the latest messages and won't fetch more, but is missing the\n            //    recently sent message.\n            //\n            // To address this problem, we track the highest message\n            // ID among messages that were discarded due to\n            // fetch_status in expected_max_message_id.  If that is\n            // higher than the highest ID returned in a GET /messages\n            // response with found_newest=true, we know the above race\n            // has happened and trigger an additional fetch.\n            this._found_newest = false;\n\n            // Resetting our tracked last message id is an important\n            // circuit-breaker for cases where the message(s) that we\n            // \"know\" exist were deleted or moved to another topic.\n            this._expected_max_message_id = 0;\n            return true;\n        }\n        return false;\n    }\n\n    can_load_newer_messages() {\n        return !this._loading_newer && !this._found_newest;\n    }\n\n    has_found_newest() {\n        return this._found_newest;\n    }\n\n    update_expected_max_message_id(messages) {\n        this._expected_max_message_id = Math.max(\n            this._expected_max_message_id,\n            max_id_for_messages(messages),\n        );\n    }\n}\n","import Handlebars from \"handlebars/runtime\";\nimport _ from \"lodash\";\n\nimport * as resolved_topic from \"../shared/js/resolved_topic\";\n\nimport * as hash_util from \"./hash_util\";\nimport {$t} from \"./i18n\";\nimport * as message_parser from \"./message_parser\";\nimport * as message_store from \"./message_store\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as stream_data from \"./stream_data\";\nimport * as unread from \"./unread\";\nimport * as util from \"./util\";\n\nfunction zephyr_stream_name_match(message, operand) {\n    // Zephyr users expect narrowing to \"social\" to also show messages to /^(un)*social(.d)*$/\n    // (unsocial, ununsocial, social.d, etc)\n    // TODO: hoist the regex compiling out of the closure\n    const m = /^(?:un)*(.+?)(?:\\.d)*$/i.exec(operand);\n    let base_stream_name = operand;\n    if (m !== null && m[1] !== undefined) {\n        base_stream_name = m[1];\n    }\n    const related_regexp = new RegExp(\n        /^(un)*/.source + _.escapeRegExp(base_stream_name) + /(\\.d)*$/.source,\n        \"i\",\n    );\n    return related_regexp.test(message.stream);\n}\n\nfunction zephyr_topic_name_match(message, operand) {\n    // Zephyr users expect narrowing to topic \"foo\" to also show messages to /^foo(.d)*$/\n    // (foo, foo.d, foo.d.d, etc)\n    // TODO: hoist the regex compiling out of the closure\n    const m = /^(.*?)(?:\\.d)*$/i.exec(operand);\n    const base_topic = m[1];\n    let related_regexp;\n\n    // Additionally, Zephyr users expect the empty instance and\n    // instance \"personal\" to be the same.\n    if (\n        base_topic === \"\" ||\n        base_topic.toLowerCase() === \"personal\" ||\n        base_topic.toLowerCase() === '(instance \"\")'\n    ) {\n        related_regexp = /^(|personal|\\(instance \"\"\\))(\\.d)*$/i;\n    } else {\n        related_regexp = new RegExp(\n            /^/.source + _.escapeRegExp(base_topic) + /(\\.d)*$/.source,\n            \"i\",\n        );\n    }\n\n    return related_regexp.test(message.topic);\n}\n\nfunction message_in_home(message) {\n    if (\n        message.type === \"private\" ||\n        message.mentioned ||\n        (page_params.narrow_stream !== undefined &&\n            message.stream.toLowerCase() === page_params.narrow_stream.toLowerCase())\n    ) {\n        return true;\n    }\n\n    // We don't display muted streams in 'All messages' view\n    return !stream_data.is_muted(message.stream_id);\n}\n\nfunction message_matches_search_term(message, operator, operand) {\n    switch (operator) {\n        case \"has\":\n            switch (operand) {\n                case \"image\":\n                    return message_parser.message_has_image(message);\n                case \"link\":\n                    return message_parser.message_has_link(message);\n                case \"attachment\":\n                    return message_parser.message_has_attachment(message);\n                default:\n                    return false; // has:something_else returns false\n            }\n\n        case \"is\":\n            switch (operand) {\n                case \"private\":\n                    return message.type === \"private\";\n                case \"starred\":\n                    return message.starred;\n                case \"mentioned\":\n                    return message.mentioned;\n                case \"alerted\":\n                    return message.alerted;\n                case \"unread\":\n                    return unread.message_unread(message);\n                case \"resolved\":\n                    return message.type === \"stream\" && resolved_topic.is_resolved(message.topic);\n                default:\n                    return false; // is:whatever returns false\n            }\n\n        case \"in\":\n            switch (operand) {\n                case \"home\":\n                    return message_in_home(message);\n                case \"all\":\n                    return true;\n                default:\n                    return false; // in:whatever returns false\n            }\n\n        case \"near\":\n            // this is all handled server side\n            return true;\n\n        case \"id\":\n            return message.id.toString() === operand;\n\n        case \"stream\": {\n            if (message.type !== \"stream\") {\n                return false;\n            }\n\n            operand = operand.toLowerCase();\n            if (page_params.realm_is_zephyr_mirror_realm) {\n                return zephyr_stream_name_match(message, operand);\n            }\n\n            // Try to match by stream_id if have a valid sub for\n            // the operand.\n            const stream_id = stream_data.get_stream_id(operand);\n            if (stream_id) {\n                return message.stream_id === stream_id;\n            }\n\n            // We need this fallback logic in case we have a message\n            // loaded for a stream that we are no longer\n            // subscribed to (or that was deleted).\n            return message.stream.toLowerCase() === operand;\n        }\n\n        case \"topic\":\n            if (message.type !== \"stream\") {\n                return false;\n            }\n\n            operand = operand.toLowerCase();\n            if (page_params.realm_is_zephyr_mirror_realm) {\n                return zephyr_topic_name_match(message, operand);\n            }\n            return message.topic.toLowerCase() === operand;\n\n        case \"sender\":\n            return people.id_matches_email_operand(message.sender_id, operand);\n\n        case \"group-pm-with\": {\n            const operand_ids = people.pm_with_operand_ids(operand);\n            if (!operand_ids) {\n                return false;\n            }\n            const user_ids = people.group_pm_with_user_ids(message);\n            if (!user_ids) {\n                return false;\n            }\n            return user_ids.includes(operand_ids[0]);\n            // We should also check if the current user is in the recipient list (user_ids) of the\n            // message, but it is implicit by the fact that the current user has access to the message.\n        }\n\n        case \"pm-with\": {\n            // TODO: use user_ids, not emails here\n            if (message.type !== \"private\") {\n                return false;\n            }\n            const operand_ids = people.pm_with_operand_ids(operand);\n            if (!operand_ids) {\n                return false;\n            }\n            const user_ids = people.pm_with_user_ids(message);\n            if (!user_ids) {\n                return false;\n            }\n\n            return _.isEqual(operand_ids, user_ids);\n        }\n    }\n\n    return true; // unknown operators return true (effectively ignored)\n}\n\nexport class Filter {\n    constructor(operators) {\n        if (operators === undefined) {\n            this._operators = [];\n            this._sub = undefined;\n        } else {\n            this._operators = this.fix_operators(operators);\n            if (this.has_operator(\"stream\")) {\n                this._sub = stream_data.get_sub_by_name(this.operands(\"stream\")[0]);\n            }\n        }\n    }\n\n    static canonicalize_operator(operator) {\n        operator = operator.toLowerCase();\n\n        if (operator === \"from\") {\n            return \"sender\";\n        }\n\n        if (util.is_topic_synonym(operator)) {\n            return \"topic\";\n        }\n        return operator;\n    }\n\n    static canonicalize_term({negated = false, operator, operand}) {\n        // Make negated explicitly default to false for both clarity and\n        // simplifying deepEqual checks in the tests.\n        operator = Filter.canonicalize_operator(operator);\n\n        switch (operator) {\n            case \"has\":\n                // images -> image, etc.\n                operand = operand.replace(/s$/, \"\");\n                break;\n\n            case \"stream\":\n                operand = stream_data.get_name(operand);\n                break;\n            case \"topic\":\n                break;\n            case \"sender\":\n            case \"pm-with\":\n                operand = operand.toString().toLowerCase();\n                if (operand === \"me\") {\n                    operand = people.my_current_email();\n                }\n                break;\n            case \"group-pm-with\":\n                operand = operand.toString().toLowerCase();\n                break;\n            case \"search\":\n                // The mac app automatically substitutes regular quotes with curly\n                // quotes when typing in the search bar.  Curly quotes don't trigger our\n                // phrase search behavior, however.  So, we replace all instances of\n                // curly quotes with regular quotes when doing a search.  This is\n                // unlikely to cause any problems and is probably what the user wants.\n                operand = operand\n                    .toString()\n                    .toLowerCase()\n                    .replace(/[\\u201C\\u201D]/g, '\"');\n                break;\n            default:\n                operand = operand.toString().toLowerCase();\n        }\n\n        // We may want to consider allowing mixed-case operators at some point\n        return {\n            negated,\n            operator,\n            operand,\n        };\n    }\n\n    /* We use a variant of URI encoding which looks reasonably\n       nice and still handles unambiguously cases such as\n       spaces in operands.\n\n       This is just for the search bar, not for saving the\n       narrow in the URL fragment.  There we do use full\n       URI encoding to avoid problematic characters. */\n    static encodeOperand(operand) {\n        return operand\n            .replace(/%/g, \"%25\")\n            .replace(/\\+/g, \"%2B\")\n            .replace(/ /g, \"+\")\n            .replace(/\"/g, \"%22\");\n    }\n\n    static decodeOperand(encoded, operator) {\n        encoded = encoded.replace(/\"/g, \"\");\n        if ([\"group-pm-with\", \"pm-with\", \"sender\", \"from\"].includes(operator) === false) {\n            encoded = encoded.replace(/\\+/g, \" \");\n        }\n        return util.robust_uri_decode(encoded).trim();\n    }\n\n    // Parse a string into a list of operators (see below).\n    static parse(str) {\n        const operators = [];\n        let search_term = [];\n        let negated;\n        let operator;\n        let operand;\n        let term;\n\n        function maybe_add_search_terms() {\n            if (search_term.length > 0) {\n                operator = \"search\";\n                const _operand = search_term.join(\" \");\n                term = {operator, operand: _operand, negated: false};\n                operators.push(term);\n                search_term = [];\n            }\n        }\n\n        // Match all operands that either have no spaces, or are surrounded by\n        // quotes, preceded by an optional operator that may have a space after it.\n        const matches = str.match(/([^\\s:]+: ?)?(\"[^\"]+\"?|\\S+)/g);\n        if (matches === null) {\n            return operators;\n        }\n\n        for (const token of matches) {\n            let operator;\n            const parts = token.split(\":\");\n            if (token[0] === '\"' || parts.length === 1) {\n                // Looks like a normal search term.\n                search_term.push(token);\n            } else {\n                // Looks like an operator.\n                negated = false;\n                operator = parts.shift();\n                if (operator[0] === \"-\") {\n                    negated = true;\n                    operator = operator.slice(1);\n                }\n                operand = Filter.decodeOperand(parts.join(\":\"), operator);\n\n                // We use Filter.operator_to_prefix() checks if the\n                // operator is known.  If it is not known, then we treat\n                // it as a search for the given string (which may contain\n                // a `:`), not as a search operator.\n                if (Filter.operator_to_prefix(operator, negated) === \"\") {\n                    // Put it as a search term, to not have duplicate operators\n                    search_term.push(token);\n                    continue;\n                }\n                // If any search query was present and it is followed by some other filters\n                // then we must add that search filter in its current position in the\n                // operators list. This is done so that the last active filter is correctly\n                // detected by the `get_search_result` function (in search_suggestions.js).\n                maybe_add_search_terms();\n                term = {negated, operator, operand};\n                operators.push(term);\n            }\n        }\n\n        maybe_add_search_terms();\n        return operators;\n    }\n\n    /* Convert a list of operators to a string.\n   Each operator is a key-value pair like\n\n       ['topic', 'my amazing topic']\n\n   These are not keys in a JavaScript object, because we\n   might need to support multiple operators of the same type.\n*/\n    static unparse(operators) {\n        const parts = operators.map((elem) => {\n            if (elem.operator === \"search\") {\n                // Search terms are the catch-all case.\n                // All tokens that don't start with a known operator and\n                // a colon are glued together to form a search term.\n                return elem.operand;\n            }\n            const sign = elem.negated ? \"-\" : \"\";\n            if (elem.operator === \"\") {\n                return elem.operand;\n            }\n            return sign + elem.operator + \":\" + Filter.encodeOperand(elem.operand.toString());\n        });\n        return parts.join(\" \");\n    }\n\n    predicate() {\n        if (this._predicate === undefined) {\n            this._predicate = this._build_predicate();\n        }\n        return this._predicate;\n    }\n\n    operators() {\n        return this._operators;\n    }\n\n    public_operators() {\n        const safe_to_return = this._operators.filter(\n            // Filter out the embedded narrow (if any).\n            (value) =>\n                !(\n                    page_params.narrow_stream !== undefined &&\n                    value.operator === \"stream\" &&\n                    value.operand.toLowerCase() === page_params.narrow_stream.toLowerCase()\n                ),\n        );\n        return safe_to_return;\n    }\n\n    operands(operator) {\n        return this._operators\n            .filter((elem) => !elem.negated && elem.operator === operator)\n            .map((elem) => elem.operand);\n    }\n\n    has_negated_operand(operator, operand) {\n        return this._operators.some(\n            (elem) => elem.negated && elem.operator === operator && elem.operand === operand,\n        );\n    }\n\n    has_operand(operator, operand) {\n        return this._operators.some(\n            (elem) => !elem.negated && elem.operator === operator && elem.operand === operand,\n        );\n    }\n\n    has_operator(operator) {\n        return this._operators.some((elem) => {\n            if (elem.negated && ![\"search\", \"has\"].includes(elem.operator)) {\n                return false;\n            }\n            return elem.operator === operator;\n        });\n    }\n\n    is_search() {\n        return this.has_operator(\"search\");\n    }\n\n    is_non_huddle_pm() {\n        return this.has_operator(\"pm-with\") && this.operands(\"pm-with\")[0].split(\",\").length === 1;\n    }\n\n    supports_collapsing_recipients() {\n        // Determines whether a view is guaranteed, by construction,\n        // to contain consecutive messages in a given topic, and thus\n        // it is appropriate to collapse recipient/sender headings.\n        const term_types = this.sorted_term_types();\n\n        // All search/narrow term types, including negations, with the\n        // property that if a message is in the view, then any other\n        // message sharing its recipient (stream/topic or private\n        // message recipient) must also be present in the view.\n        const valid_term_types = new Set([\n            \"stream\",\n            \"not-stream\",\n            \"topic\",\n            \"not-topic\",\n            \"pm-with\",\n            \"group-pm-with\",\n            \"not-group-pm-with\",\n            \"is-private\",\n            \"not-is-private\",\n            \"is-resolved\",\n            \"not-is-resolved\",\n            \"in-home\",\n            \"in-all\",\n            \"streams-public\",\n            \"not-streams-public\",\n            \"streams-web-public\",\n            \"not-streams-web-public\",\n            \"near\",\n        ]);\n\n        for (const term of term_types) {\n            if (!valid_term_types.has(term)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    calc_can_mark_messages_read() {\n        // Arguably this should match supports_collapsing_recipients.\n        // We may want to standardize on that in the future.  (At\n        // present, this function does not allow combining valid filters).\n        const term_types = this.sorted_term_types();\n\n        if (_.isEqual(term_types, [\"stream\", \"topic\"])) {\n            return true;\n        }\n\n        if (_.isEqual(term_types, [\"pm-with\"])) {\n            return true;\n        }\n\n        // TODO: Some users really hate it when Zulip marks messages as read\n        // in interleaved views, so we will eventually have a setting\n        // that early-exits before the subsequent checks.\n        // (in which case, is_common_narrow would also need to be modified)\n\n        if (_.isEqual(term_types, [\"stream\"])) {\n            return true;\n        }\n\n        if (_.isEqual(term_types, [\"is-private\"])) {\n            return true;\n        }\n\n        if (_.isEqual(term_types, [\"is-mentioned\"])) {\n            return true;\n        }\n\n        if (_.isEqual(term_types, [\"is-resolved\"])) {\n            return true;\n        }\n\n        if (_.isEqual(term_types, [])) {\n            // All view\n            return true;\n        }\n\n        if (term_types.length === 1 && [\"in-home\", \"in-all\"].includes(term_types[0])) {\n            return true;\n        }\n\n        return false;\n    }\n\n    can_mark_messages_read() {\n        if (this._can_mark_messages_read === undefined) {\n            this._can_mark_messages_read = this.calc_can_mark_messages_read();\n        }\n        return this._can_mark_messages_read;\n    }\n\n    // This is used to control the behaviour for \"exiting search\",\n    // given the ability to flip between displaying the search bar and the narrow description in UI\n    // here we define a narrow as a \"common narrow\" on the basis of\n    // https://paper.dropbox.com/doc/Navbar-behavior-table--AvnMKN4ogj3k2YF5jTbOiVv_AQ-cNOGtu7kSdtnKBizKXJge\n    // common narrows show a narrow description and allow the user to\n    // close search bar UI and show the narrow description UI.\n    //\n    // TODO: We likely will want to rewrite this to not piggy-back on\n    // can_mark_messages_read, since that might gain some more complex behavior\n    // with near: narrows.\n    is_common_narrow() {\n        // can_mark_messages_read tests the following filters:\n        // stream, stream + topic,\n        // is: private, pm-with:,\n        // is: mentioned, is: resolved\n        if (this.can_mark_messages_read()) {\n            return true;\n        }\n        // that leaves us with checking:\n        // is: starred\n        // (which can_mark_messages_read_does not check as starred messages are always read)\n        const term_types = this.sorted_term_types();\n\n        if (_.isEqual(term_types, [\"is-starred\"])) {\n            return true;\n        }\n        if (_.isEqual(term_types, [\"streams-public\"])) {\n            return true;\n        }\n        return false;\n    }\n\n    // This is used to control the behaviour for \"exiting search\"\n    // within a narrow (E.g. a stream/topic + search) to bring you to\n    // the containing common narrow (stream/topic, in the example)\n    // rather than \"All messages\".\n    //\n    // Note from tabbott: The slug-based approach may not be ideal; we\n    // may be able to do better another way.\n    generate_redirect_url() {\n        const term_types = this.sorted_term_types();\n\n        // this comes first because it has 3 term_types but is not a \"complex filter\"\n        if (_.isEqual(term_types, [\"stream\", \"topic\", \"search\"])) {\n            // if stream does not exist, redirect to All\n            if (!this._sub) {\n                return \"#\";\n            }\n            return (\n                \"/#narrow/stream/\" +\n                stream_data.name_to_slug(this.operands(\"stream\")[0]) +\n                \"/topic/\" +\n                this.operands(\"topic\")[0]\n            );\n        }\n\n        // eliminate \"complex filters\"\n        if (term_types.length >= 3) {\n            return \"#\"; // redirect to All\n        }\n\n        if (term_types[1] === \"search\") {\n            switch (term_types[0]) {\n                case \"stream\":\n                    // if stream does not exist, redirect to All\n                    if (!this._sub) {\n                        return \"#\";\n                    }\n                    return (\n                        \"/#narrow/stream/\" + stream_data.name_to_slug(this.operands(\"stream\")[0])\n                    );\n                case \"is-private\":\n                    return \"/#narrow/is/private\";\n                case \"is-starred\":\n                    return \"/#narrow/is/starred\";\n                case \"is-mentioned\":\n                    return \"/#narrow/is/mentioned\";\n                case \"streams-public\":\n                    return \"/#narrow/streams/public\";\n                case \"pm-with\":\n                    return (\n                        \"/#narrow/pm-with/\" +\n                        people.emails_to_slug(this.operands(\"pm-with\").join(\",\"))\n                    );\n                case \"is-resolved\":\n                    return \"/#narrow/topics/is/resolved\";\n                // TODO: It is ambiguous how we want to handle the 'sender' case,\n                // we may remove it in the future based on design decisions\n                case \"sender\":\n                    return \"/#narrow/sender/\" + people.emails_to_slug(this.operands(\"sender\")[0]);\n            }\n        }\n\n        return \"#\"; // redirect to All\n    }\n\n    get_icon() {\n        // We have special icons for the simple narrows available for the via sidebars.\n        const term_types = this.sorted_term_types();\n        switch (term_types[0]) {\n            case \"in-home\":\n            case \"in-all\":\n                return \"home\";\n            case \"stream\":\n                if (!this._sub) {\n                    return \"question-circle-o\";\n                }\n                if (this._sub.invite_only) {\n                    return \"lock\";\n                }\n                if (this._sub.is_web_public) {\n                    return \"globe\";\n                }\n                return \"hashtag\";\n            case \"is-private\":\n                return \"envelope\";\n            case \"is-starred\":\n                return \"star\";\n            case \"is-mentioned\":\n                return \"at\";\n            case \"pm-with\":\n                return \"envelope\";\n            case \"is-resolved\":\n                return \"check\";\n            default:\n                return undefined;\n        }\n    }\n\n    get_title() {\n        // Nice explanatory titles for common views.\n        const term_types = this.sorted_term_types();\n        if (\n            (term_types.length === 3 && _.isEqual(term_types, [\"stream\", \"topic\", \"near\"])) ||\n            (term_types.length === 2 && _.isEqual(term_types, [\"stream\", \"topic\"])) ||\n            (term_types.length === 1 && _.isEqual(term_types, [\"stream\"]))\n        ) {\n            if (!this._sub) {\n                const search_text = this.operands(\"stream\")[0];\n                return $t({defaultMessage: \"Unknown stream #{search_text}\"}, {search_text});\n            }\n            return this._sub.name;\n        }\n        if (\n            (term_types.length === 2 && _.isEqual(term_types, [\"pm-with\", \"near\"])) ||\n            (term_types.length === 1 && _.isEqual(term_types, [\"pm-with\"]))\n        ) {\n            const emails = this.operands(\"pm-with\")[0].split(\",\");\n            const names = emails.map((email) => {\n                if (!people.get_by_email(email)) {\n                    return email;\n                }\n                return people.get_by_email(email).full_name;\n            });\n\n            // We use join to handle the addition of a comma and space after every name\n            // and also to ensure that we return a string and not an array so that we\n            // can have the same return type as other cases.\n            return names.join(\", \");\n        }\n        if (term_types.length === 1) {\n            switch (term_types[0]) {\n                case \"in-home\":\n                    return $t({defaultMessage: \"All messages\"});\n                case \"in-all\":\n                    return $t({defaultMessage: \"All messages including muted streams\"});\n                case \"streams-public\":\n                    return $t({defaultMessage: \"Messages in all public streams\"});\n                case \"is-starred\":\n                    return $t({defaultMessage: \"Starred messages\"});\n                case \"is-mentioned\":\n                    return $t({defaultMessage: \"Mentions\"});\n                case \"is-private\":\n                    return $t({defaultMessage: \"Private messages\"});\n                case \"is-resolved\":\n                    return $t({defaultMessage: \"Topics marked as resolved\"});\n                // These cases return false for is_common_narrow, and therefore are not\n                // formatted in the message view header. They are used in narrow.js to\n                // update the browser title.\n                case \"is-alerted\":\n                    return $t({defaultMessage: \"Alerted messages\"});\n                case \"is-unread\":\n                    return $t({defaultMessage: \"Unread messages\"});\n            }\n        }\n        /* istanbul ignore next */\n        return undefined;\n    }\n\n    allow_use_first_unread_when_narrowing() {\n        return this.can_mark_messages_read() || this.has_operator(\"is\");\n    }\n\n    contains_only_private_messages() {\n        return (\n            (this.has_operator(\"is\") && this.operands(\"is\")[0] === \"private\") ||\n            this.has_operator(\"pm-with\") ||\n            this.has_operator(\"group-pm-with\")\n        );\n    }\n\n    includes_full_stream_history() {\n        return this.has_operator(\"stream\") || this.has_operator(\"streams\");\n    }\n\n    is_personal_filter() {\n        // Whether the filter filters for user-specific data in the\n        // UserMessage table, such as stars or mentions.\n        //\n        // Such filters should not advertise \"streams:public\" as it\n        // will never add additional results.\n        return this.has_operand(\"is\", \"mentioned\") || this.has_operand(\"is\", \"starred\");\n    }\n\n    can_apply_locally(is_local_echo) {\n        // Since there can be multiple operators, each block should\n        // just return false here.\n\n        if (this.is_search()) {\n            // The semantics for matching keywords are implemented\n            // by database plugins, and we don't have JS code for\n            // that, plus search queries tend to go too far back in\n            // history.\n            return false;\n        }\n\n        if (this.has_operator(\"has\") && is_local_echo) {\n            // The has: operators can be applied locally for messages\n            // rendered by the backend; links, attachments, and images\n            // are not handled properly by the local echo Markdown\n            // processor.\n            return false;\n        }\n\n        // TODO: It's not clear why `streams:` filters would not be\n        // applicable locally.\n        if (this.has_operator(\"streams\") || this.has_negated_operand(\"streams\", \"public\")) {\n            return false;\n        }\n\n        // If we get this far, we're good!\n        return true;\n    }\n\n    fix_operators(operators) {\n        operators = this._canonicalize_operators(operators);\n        operators = this._fix_redundant_is_private(operators);\n        return operators;\n    }\n\n    _fix_redundant_is_private(terms) {\n        if (!terms.some((term) => Filter.term_type(term) === \"pm-with\")) {\n            return terms;\n        }\n\n        return terms.filter((term) => Filter.term_type(term) !== \"is-private\");\n    }\n\n    _canonicalize_operators(operators_mixed_case) {\n        return operators_mixed_case.map((tuple) => Filter.canonicalize_term(tuple));\n    }\n\n    filter_with_new_params(params) {\n        const terms = this._operators.map((term) => {\n            const new_term = {...term};\n            if (new_term.operator === params.operator && !new_term.negated) {\n                new_term.operand = params.operand;\n            }\n            return new_term;\n        });\n        return new Filter(terms);\n    }\n\n    has_topic(stream_name, topic) {\n        return this.has_operand(\"stream\", stream_name) && this.has_operand(\"topic\", topic);\n    }\n\n    sorted_term_types() {\n        if (this._sorted_term_types === undefined) {\n            this._sorted_term_types = this._build_sorted_term_types();\n        }\n        return this._sorted_term_types;\n    }\n\n    _build_sorted_term_types() {\n        const terms = this._operators;\n        const term_types = terms.map((term) => Filter.term_type(term));\n        const sorted_terms = Filter.sorted_term_types(term_types);\n        return sorted_terms;\n    }\n\n    can_bucket_by(...wanted_term_types) {\n        // Examples call:\n        //     filter.can_bucket_by('stream', 'topic')\n        //\n        // The use case of this function is that we want\n        // to know if a filter can start with a bucketing\n        // data structure similar to the ones we have in\n        // unread.js to pre-filter ids, rather than apply\n        // a predicate to a larger list of candidate ids.\n        //\n        // (It's for optimization, basically.)\n        const all_term_types = this.sorted_term_types();\n        const term_types = all_term_types.slice(0, wanted_term_types.length);\n\n        return _.isEqual(term_types, wanted_term_types);\n    }\n\n    first_valid_id_from(msg_ids) {\n        const predicate = this.predicate();\n\n        const first_id = msg_ids.find((msg_id) => {\n            const message = message_store.get(msg_id);\n\n            if (message === undefined) {\n                return false;\n            }\n\n            return predicate(message);\n        });\n\n        return first_id;\n    }\n\n    update_email(user_id, new_email) {\n        for (const term of this._operators) {\n            switch (term.operator) {\n                case \"group-pm-with\":\n                case \"pm-with\":\n                case \"sender\":\n                case \"from\":\n                    term.operand = people.update_email_in_reply_to(\n                        term.operand,\n                        user_id,\n                        new_email,\n                    );\n            }\n        }\n    }\n\n    // Build a filter function from a list of operators.\n    _build_predicate() {\n        const operators = this._operators;\n\n        if (!this.can_apply_locally()) {\n            return () => true;\n        }\n\n        // FIXME: This is probably pretty slow.\n        // We could turn it into something more like a compiler:\n        // build JavaScript code in a string and then eval() it.\n\n        return (message) =>\n            operators.every((term) => {\n                let ok = message_matches_search_term(message, term.operator, term.operand);\n                if (term.negated) {\n                    ok = !ok;\n                }\n                return ok;\n            });\n    }\n\n    static term_type(term) {\n        const operator = term.operator;\n        const operand = term.operand;\n        const negated = term.negated;\n\n        let result = negated ? \"not-\" : \"\";\n\n        result += operator;\n\n        if ([\"is\", \"has\", \"in\", \"streams\"].includes(operator)) {\n            result += \"-\" + operand;\n        }\n\n        return result;\n    }\n\n    static sorted_term_types(term_types) {\n        const levels = [\n            \"in\",\n            \"streams-public\",\n            \"stream\",\n            \"topic\",\n            \"pm-with\",\n            \"group-pm-with\",\n            \"sender\",\n            \"near\",\n            \"id\",\n            \"is-alerted\",\n            \"is-mentioned\",\n            \"is-private\",\n            \"is-starred\",\n            \"is-unread\",\n            \"is-resolved\",\n            \"has-link\",\n            \"has-image\",\n            \"has-attachment\",\n            \"search\",\n        ];\n\n        const level = (term_type) => {\n            let i = levels.indexOf(term_type);\n            if (i === -1) {\n                i = 999;\n            }\n            return i;\n        };\n\n        const compare = (a, b) => {\n            const diff = level(a) - level(b);\n            if (diff !== 0) {\n                return diff;\n            }\n            return util.strcmp(a, b);\n        };\n\n        return term_types.slice().sort(compare);\n    }\n\n    static operator_to_prefix(operator, negated) {\n        operator = Filter.canonicalize_operator(operator);\n\n        if (operator === \"search\") {\n            return negated ? \"exclude\" : \"search for\";\n        }\n\n        const verb = negated ? \"exclude \" : \"\";\n\n        switch (operator) {\n            case \"stream\":\n                return verb + \"stream\";\n            case \"streams\":\n                return verb + \"streams\";\n            case \"near\":\n                return verb + \"messages around\";\n\n            // Note: We hack around using this in \"describe\" below.\n            case \"has\":\n                return verb + \"messages with one or more\";\n\n            case \"id\":\n                return verb + \"message ID\";\n\n            case \"topic\":\n                return verb + \"topic\";\n\n            case \"sender\":\n                return verb + \"sent by\";\n\n            case \"pm-with\":\n                return verb + \"private messages with\";\n\n            case \"in\":\n                return verb + \"messages in\";\n\n            // Note: We hack around using this in \"describe\" below.\n            case \"is\":\n                return verb + \"messages that are\";\n\n            case \"group-pm-with\":\n                return verb + \"group private messages including\";\n        }\n        return \"\";\n    }\n\n    static describe_is_operator(operator) {\n        const verb = operator.negated ? \"exclude \" : \"\";\n        const operand = operator.operand;\n        const operand_list = [\"private\", \"starred\", \"alerted\", \"unread\"];\n        if (operand_list.includes(operand)) {\n            return verb + operand + \" messages\";\n        } else if (operand === \"mentioned\") {\n            return verb + \"@-mentions\";\n        }\n        return \"invalid \" + operand + \" operand for is operator\";\n    }\n\n    // Convert a list of operators to a human-readable description.\n    static describe_unescaped(operators) {\n        if (operators.length === 0) {\n            return \"all messages\";\n        }\n\n        let parts = [];\n\n        if (operators.length >= 2) {\n            const is = (term, expected) => term.operator === expected && !term.negated;\n\n            if (is(operators[0], \"stream\") && is(operators[1], \"topic\")) {\n                const stream = operators[0].operand;\n                const topic = operators[1].operand;\n                const part = \"stream \" + stream + \" > \" + topic;\n                parts = [part];\n                operators = operators.slice(2);\n            }\n        }\n\n        const more_parts = operators.map((elem) => {\n            const operand = elem.operand;\n            const canonicalized_operator = Filter.canonicalize_operator(elem.operator);\n            if (canonicalized_operator === \"is\") {\n                return Filter.describe_is_operator(elem);\n            }\n            if (canonicalized_operator === \"has\") {\n                // search_suggestion.get_suggestions takes care that this message will\n                // only be shown if the `has` operator is not at the last.\n                const valid_has_operands = [\n                    \"image\",\n                    \"images\",\n                    \"link\",\n                    \"links\",\n                    \"attachment\",\n                    \"attachments\",\n                ];\n                if (!valid_has_operands.includes(operand)) {\n                    return \"invalid \" + operand + \" operand for has operator\";\n                }\n            }\n            const prefix_for_operator = Filter.operator_to_prefix(\n                canonicalized_operator,\n                elem.negated,\n            );\n            if (prefix_for_operator !== \"\") {\n                return prefix_for_operator + \" \" + operand;\n            }\n            return \"unknown operator\";\n        });\n        return parts.concat(more_parts).join(\", \");\n    }\n\n    static describe(operators) {\n        return Handlebars.Utils.escapeExpression(Filter.describe_unescaped(operators));\n    }\n\n    static is_spectator_compatible(ops) {\n        for (const op of ops) {\n            if (op.operand === undefined) {\n                return false;\n            }\n            if (!hash_util.allowed_web_public_narrows.includes(op.operator)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n","import {formatISO} from \"date-fns\";\nimport ConfirmDatePlugin from \"flatpickr/dist/plugins/confirmDate/confirmDate\";\nimport $ from \"jquery\";\n\nimport {get_keydown_hotkey} from \"./hotkey\";\nimport {$t} from \"./i18n\";\nimport {user_settings} from \"./user_settings\";\n\nfunction is_numeric_key(key) {\n    return [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"].includes(key);\n}\n\nexport function show_flatpickr(element, callback, default_timestamp, options = {}) {\n    const $flatpickr_input = $(\"<input>\").attr(\"id\", \"#timestamp_flatpickr\");\n\n    const instance = $flatpickr_input.flatpickr({\n        mode: \"single\",\n        enableTime: true,\n        clickOpens: false,\n        defaultDate: default_timestamp,\n        plugins: [\n            new ConfirmDatePlugin({\n                showAlways: true,\n                confirmText: $t({defaultMessage: \"Confirm\"}),\n                confirmIcon: \"\",\n            }),\n        ],\n        positionElement: element,\n        dateFormat: \"Z\",\n        formatDate: (date) => formatISO(date),\n        disableMobile: true,\n        time_24hr: user_settings.twenty_four_hour_time,\n        onKeyDown(selectedDates, dateStr, instance, event) {\n            if (is_numeric_key(event.key)) {\n                // Don't attempt to get_keydown_hotkey for numeric inputs\n                // as it would return undefined.\n                return;\n            }\n\n            const hotkey = get_keydown_hotkey(event);\n\n            if ([\"tab\", \"shift_tab\"].includes(hotkey.name)) {\n                const elems = [\n                    instance.selectedDateElem,\n                    instance.hourElement,\n                    instance.minuteElement,\n                    instance.amPM,\n                    $(\".flatpickr-confirm\")[0],\n                ];\n                const i = elems.indexOf(event.target);\n                const n = elems.length;\n                const remain = (i + (event.shiftKey ? -1 : 1)) % n;\n                const target = elems[Math.floor(remain >= 0 ? remain : remain + n)];\n                event.preventDefault();\n                event.stopPropagation();\n                target.focus();\n            }\n\n            event.stopPropagation();\n        },\n        ...options,\n    });\n\n    const $container = $(instance.innerContainer).parent();\n\n    $container.on(\"keydown\", (e) => {\n        if (is_numeric_key(e.key)) {\n            // Let users type numeric values\n            return true;\n        }\n\n        const hotkey = get_keydown_hotkey(e);\n\n        if (!hotkey) {\n            return false;\n        }\n\n        if (hotkey.name === \"backspace\" || hotkey.name === \"delete\") {\n            // Let backspace or delete be handled normally\n            return true;\n        }\n\n        if (hotkey.name === \"enter\") {\n            if (e.target.classList[0] === \"flatpickr-day\") {\n                return true; // use flatpickr default implementation\n            }\n            $(element).toggleClass(\"has_popover\");\n            $container.find(\".flatpickr-confirm\").trigger(\"click\");\n        }\n\n        if (hotkey.name === \"escape\") {\n            $(element).toggleClass(\"has_popover\");\n            instance.close();\n            instance.destroy();\n        }\n\n        if ([\"tab\", \"shift_tab\"].includes(hotkey.name)) {\n            return true; // use flatpickr default implementation\n        }\n\n        if ([\"right_arrow\", \"up_arrow\", \"left_arrow\", \"down_arrow\"].includes(hotkey.name)) {\n            return true; // use flatpickr default implementation\n        }\n\n        e.stopPropagation();\n        e.preventDefault();\n\n        return true;\n    });\n\n    $container.on(\"click\", \".flatpickr-confirm\", () => {\n        callback($flatpickr_input.val());\n        instance.close();\n        instance.destroy();\n    });\n    instance.open();\n    instance.selectedDateElem.focus();\n\n    return instance;\n}\n","import $ from \"jquery\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_store from \"./message_store\";\nimport * as rows from \"./rows\";\nimport * as timerender from \"./timerender\";\n\nlet is_floating_recipient_bar_showing = false;\n\nfunction top_offset($elem) {\n    return (\n        $elem.offset().top -\n        $(\"#message_view_header\").safeOuterHeight() -\n        $(\"#navbar_alerts_wrapper\").height()\n    );\n}\n\nexport function first_visible_message($bar) {\n    // The first truly visible message would be computed using the\n    // bottom of the floating recipient bar; but we want the date from\n    // the first visible message were the floating recipient bar not\n    // displayed, which will always be the first messages whose bottom\n    // overlaps the floating recipient bar's space (since you ).\n\n    const $messages = $bar.children(\".message_row\");\n    const $frb = $(\"#floating_recipient_bar\");\n    const frb_top = top_offset($frb);\n    const frb_bottom = frb_top + $frb.safeOuterHeight();\n    let $result;\n\n    for (const message_element of $messages) {\n        // The details of this comparison function are sensitive, since we're\n        // balancing between three possible bugs:\n        //\n        // * If we compare against the bottom of the floating\n        //   recipient bar, we end up with a bug where if the floating\n        //   recipient bar is just above a normal recipient bar while\n        //   overlapping a series of 1-line messages, there might be 2\n        //   messages occluded by the recipient bar, and we want the\n        //   second one, not the first.\n        //\n        // * If we compare the message bottom against the top of the\n        //   floating recipient bar, and the floating recipient bar is\n        //   over a \"Yesterday/Today\" message date row, we might\n        //   confusingly have the floating recipient bar display\n        //   e.g. \"Yesterday\" even though all messages in view were\n        //   actually sent \"Today\".\n        //\n        // * If the the floating recipient bar is over a\n        //   between-message groups date separator or similar widget,\n        //   there might be no message overlap with the floating\n        //   recipient bar.\n        //\n        // Careful testing of these two corner cases with\n        // message_viewport.scrollTop() to set precise scrolling\n        // positions determines the value for date_bar_height_offset.\n\n        let $message = $(message_element);\n        const message_bottom = top_offset($message) + $message.safeOuterHeight();\n        const date_bar_height_offset = 10;\n\n        if (message_bottom > frb_top) {\n            $result = $message;\n        }\n\n        // Important: This will break if we ever have things that are\n        // not message rows inside a recipient_row block.\n        $message = $message.next(\".message_row\");\n        if (\n            $message.length > 0 &&\n            $result &&\n            // Before returning a result, we check whether the next\n            // message's top is actually below the bottom of the\n            // floating recipient bar; this is different from the\n            // bottom of our current message because there may be a\n            // between-messages date separator row in between.\n            top_offset($message) < frb_bottom - date_bar_height_offset\n        ) {\n            $result = $message;\n        }\n        if ($result) {\n            return $result;\n        }\n    }\n\n    // If none of the messages are visible, just take the last message.\n    return $messages.last();\n}\n\nexport function get_date($elem) {\n    const message_row = first_visible_message($elem);\n\n    if (!message_row || !message_row.length) {\n        return undefined;\n    }\n\n    const msg_id = rows.id(message_row);\n\n    if (msg_id === undefined) {\n        return undefined;\n    }\n\n    const message = message_store.get(msg_id);\n\n    if (!message) {\n        return undefined;\n    }\n\n    const time = new Date(message.timestamp * 1000);\n    const today = new Date();\n    const rendered_date = timerender.render_date(time, undefined, today)[0].outerHTML;\n\n    return rendered_date;\n}\n\nexport function relevant_recipient_bars() {\n    let elems = [];\n\n    // This line of code does a reverse traversal\n    // from the selected message, which should be\n    // in the visible part of the feed, but is sometimes\n    // not exactly where we want.  The value we get\n    // may be be too far up in the feed, but we can\n    // deal with that later.\n    let $first_elem = candidate_recipient_bar();\n\n    if (!$first_elem) {\n        $first_elem = $(\".focused_table\").find(\".recipient_row\").first();\n    }\n\n    if ($first_elem.length === 0) {\n        return [];\n    }\n\n    elems.push($first_elem);\n\n    const max_offset = top_offset($(\"#compose\"));\n    let header_height = $first_elem.find(\".message_header\").safeOuterHeight();\n\n    // It's okay to overestimate header_height a bit, as we don't\n    // really need an FRB for a section that barely shows.\n    header_height += 10;\n\n    function next($elem) {\n        $elem = $elem.next();\n        while ($elem.length !== 0 && !$elem.hasClass(\"recipient_row\")) {\n            $elem = $elem.next();\n        }\n        return $elem;\n    }\n\n    // Now start the forward traversal of recipient bars.\n    // We'll stop when we go below the fold.\n    let $elem = next($first_elem);\n\n    while ($elem.length) {\n        if (top_offset($elem) < header_height) {\n            // If we are close to the top, then the prior\n            // elements we found are no longer relevant,\n            // because either the selected item we started\n            // with in our reverse traversal was too high,\n            // or there's simply not enough room to draw\n            // a recipient bar without it being ugly.\n            elems = [];\n        }\n\n        if (top_offset($elem) > max_offset) {\n            // Out of sight, out of mind!\n            // (The element is below the fold, so we stop the\n            // traversal.)\n            break;\n        }\n\n        elems.push($elem);\n        $elem = next($elem);\n    }\n\n    if (elems.length === 0) {\n        blueslip.warn(\"Unexpected situation--maybe viewport height is very short.\");\n        return [];\n    }\n\n    const items = elems.map(($elem, i) => {\n        let date_html;\n        let need_frb;\n\n        if (i === 0) {\n            date_html = get_date($elem);\n            need_frb = top_offset($elem) < 0;\n        } else {\n            date_html = $elem.find(\".recipient_row_date\").html();\n            need_frb = false;\n        }\n\n        const date_text = $(date_html).text();\n\n        // Add title here to facilitate troubleshooting.\n        const title = $elem.find(\".message_label_clickable\").last().attr(\"title\");\n\n        const item = {\n            $elem,\n            title,\n            date_html,\n            date_text,\n            need_frb,\n        };\n\n        return item;\n    });\n\n    items[0].show_date = true;\n\n    for (let i = 1; i < items.length; i += 1) {\n        items[i].show_date = items[i].date_text !== items[i - 1].date_text;\n    }\n\n    for (const item of items) {\n        if (!item.need_frb) {\n            delete item.date_html;\n        }\n    }\n\n    return items;\n}\n\nexport function candidate_recipient_bar() {\n    // Find a recipient bar that is close to being onscreen\n    // but above the \"top\".  This function is guaranteed to\n    // return **some** recipient bar that is above the fold,\n    // if there is one, but it may not be the optimal one if\n    // our pointer is messed up.  Starting with the pointer\n    // is just an optimization here, and our caller will do\n    // a forward traversal and clean up as necessary.\n    // In most cases we find the bottom-most of recipient\n    // bars that is still above the fold.\n\n    // Start with the pointer's current location.\n    const $selected_row = message_lists.current.selected_row();\n\n    if ($selected_row === undefined || $selected_row.length === 0) {\n        return undefined;\n    }\n\n    let $candidate = rows.get_message_recipient_row($selected_row);\n    if ($candidate === undefined) {\n        return undefined;\n    }\n\n    while ($candidate.length) {\n        if ($candidate.hasClass(\"recipient_row\") && top_offset($candidate) < 0) {\n            return $candidate;\n        }\n        // We cannot use .prev(\".recipient_row\") here, because that\n        // returns nothing if the previous element is not a recipient\n        // row, rather than finding the first recipient_row.\n        $candidate = $candidate.prev();\n    }\n\n    return undefined;\n}\n\nfunction show_floating_recipient_bar() {\n    if (!is_floating_recipient_bar_showing) {\n        $(\"#floating_recipient_bar\").css(\"visibility\", \"visible\");\n        is_floating_recipient_bar_showing = true;\n    }\n}\n\nlet $old_source;\nfunction replace_floating_recipient_bar(source_info) {\n    const $source_recipient_bar = source_info.$elem;\n\n    let $new_label;\n    let $other_label;\n    let $header;\n\n    if ($source_recipient_bar !== $old_source) {\n        if ($source_recipient_bar.children(\".message_header_stream\").length !== 0) {\n            $new_label = $(\"#current_label_stream\");\n            $other_label = $(\"#current_label_private_message\");\n            $header = $source_recipient_bar.children(\".message_header_stream\");\n        } else {\n            $new_label = $(\"#current_label_private_message\");\n            $other_label = $(\"#current_label_stream\");\n            $header = $source_recipient_bar.children(\".message_header_private_message\");\n        }\n        $new_label.find(\".message_header\").replaceWith($header.clone());\n        $other_label.css(\"display\", \"none\");\n        $new_label.css(\"display\", \"block\");\n        $new_label.attr(\"zid\", rows.id(rows.first_message_in_group($source_recipient_bar)));\n\n        $new_label.toggleClass(\"message-fade\", $source_recipient_bar.hasClass(\"message-fade\"));\n        $old_source = $source_recipient_bar;\n    }\n\n    const rendered_date = source_info.date_html || \"\";\n\n    $(\"#floating_recipient_bar\").find(\".recipient_row_date\").html(rendered_date);\n\n    show_floating_recipient_bar();\n}\n\nexport function hide() {\n    if (is_floating_recipient_bar_showing) {\n        $(\"#floating_recipient_bar\").css(\"visibility\", \"hidden\");\n        is_floating_recipient_bar_showing = false;\n    }\n}\n\nexport function de_clutter_dates(items) {\n    for (const item of items) {\n        item.$elem.find(\".recipient_row_date\").toggle(item.show_date);\n    }\n}\n\nexport function update() {\n    const items = relevant_recipient_bars();\n\n    if (!items || items.length === 0) {\n        hide();\n        return;\n    }\n\n    de_clutter_dates(items);\n\n    if (!items[0].need_frb) {\n        hide();\n        return;\n    }\n\n    replace_floating_recipient_bar(items[0]);\n}\n","import $ from \"jquery\";\n\nimport render_gear_menu from \"../templates/gear_menu.hbs\";\n\nimport {$t} from \"./i18n\";\nimport {page_params} from \"./page_params\";\nimport * as settings_data from \"./settings_data\";\n\n/*\nFor various historical reasons there isn't one\nsingle chunk of code that really makes our gear\nmenu function.  In this comment I try to help\nyou know where to look for relevant code.\n\nThe module that you're reading now doesn't\nactually do much of the work.\n\nOur gear menu has these choices:\n\n=================\nhash:  Manage streams\nhash:  Settings\nhash:  Organization settings\nlink:  Usage statistics\n---\nlink:  Help center\ninfo:  Keyboard shortcuts\ninfo:  Message formatting\ninfo:  Search filters\nhash:  About Zulip\n---\nlink:  Desktop & mobile apps\nlink:  Integrations\nlink:  API documentation\nlink:  Sponsor Zulip\nlink:  Plans and pricing\n---\nhash:   Invite users\n---\nmisc:  Logout\n=================\n\nDepending on settings, there may also be choices\nlike \"Feedback\" or \"Debug\".\n\nThe menu items get built in a server-side template called\ntemplates/zerver/app/navbar.html.  Each item is\nan HTML anchor tag with a \"role\" of \"menuitem\".\n\nThe menu itself has the selector\n\"settings-dropdown\".\n\nThe items with the prefix of \"hash:\" are in-page\nlinks:\n\n    #streams\n    #settings\n    #organization\n    #about-zulip\n    #invite\n\nWhen you click on the links there is a function\ncalled hashchanged() in static/js/hashchange.js\nthat gets invoked.  (We register this as a listener\nfor the hashchange event.)  This function then\nlaunches the appropriate modal for each menu item.\nLook for things like subs.launch(...) or\ninvite.launch() in that code.\n\nSome items above are prefixed with \"link:\".  Those\nitems, when clicked, just use the normal browser\nmechanism to link to external pages, and they\nhave a target of \"_blank\".\n\nThe \"info:\" items use our info overlay system\nin static/js/info_overlay.js.  They are dispatched\nusing a click handler in static/js/click_handlers.js.\nThe click handler uses \"[data-overlay-trigger]\" as\nthe selector and then calls browser_history.go_to_location.\n*/\n\nexport function update_org_settings_menu_item() {\n    const $item = $(\".admin-menu-item\").expectOne();\n    if (page_params.is_admin) {\n        $item.find(\"span\").text($t({defaultMessage: \"Manage organization\"}));\n    } else {\n        $item.find(\"span\").text($t({defaultMessage: \"Organization settings\"}));\n    }\n}\n\nexport function version_display_string() {\n    const version = page_params.zulip_version;\n    const is_fork = page_params.zulip_merge_base && page_params.zulip_merge_base !== version;\n\n    if (page_params.zulip_version.endsWith(\"-dev+git\")) {\n        // The development environment uses this version string format.\n        return $t({defaultMessage: \"Zulip Server dev environment\"});\n    }\n\n    if (is_fork) {\n        // For forks, we want to describe the Zulip version this was\n        // forked from, and that it was modified.\n        const display_version = page_params.zulip_merge_base\n            .replace(/\\+git.*/, \"\")\n            .replace(/-dev.*/, \"-dev\");\n        return $t({defaultMessage: \"Zulip Server {display_version} (modified)\"}, {display_version});\n    }\n\n    // The below cases are all for official versions; either a\n    // release, or Git commit from one of Zulip's official branches.\n\n    if (version.includes(\"+git\")) {\n        // A version from a Zulip official maintenance branch such as 5.x.\n        const display_version = version.replace(/\\+git.*/, \"\");\n        return $t({defaultMessage: \"Zulip Server {display_version} (patched)\"}, {display_version});\n    }\n\n    const display_version = version.replace(/\\+git.*/, \"\").replace(/-dev.*/, \"-dev\");\n    return $t({defaultMessage: \"Zulip Server {display_version}\"}, {display_version});\n}\n\nexport function initialize() {\n    const rendered_gear_menu = render_gear_menu({\n        realm_name: page_params.realm_name,\n        realm_uri: new URL(page_params.realm_uri).hostname,\n        is_owner: page_params.is_owner,\n        is_admin: page_params.is_admin,\n        is_self_hosted: page_params.realm_plan_type === 1,\n        is_plan_limited: page_params.realm_plan_type === 2,\n        is_plan_standard: page_params.realm_plan_type === 3,\n        is_plan_standard_sponsored_for_free: page_params.realm_plan_type === 4,\n        is_business_org: page_params.realm_org_type === 10,\n        is_education_org: page_params.realm_org_type === 30 || page_params.realm_org_type === 35,\n        standard_plan_name: \"Zulip Cloud Standard\",\n        server_needs_upgrade: page_params.server_needs_upgrade,\n        version_display_string: version_display_string(),\n        apps_page_url: page_params.apps_page_url,\n        can_invite_others_to_realm: settings_data.user_can_invite_others_to_realm(),\n        corporate_enabled: page_params.corporate_enabled,\n        is_guest: page_params.is_guest,\n        login_link: page_params.development_environment ? \"/devlogin/\" : \"/login/\",\n        promote_sponsoring_zulip: page_params.promote_sponsoring_zulip,\n        show_billing: page_params.show_billing,\n        show_plans: page_params.show_plans,\n        show_webathena: page_params.show_webathena,\n    });\n    $(\"#navbar-buttons\").html(rendered_gear_menu);\n    update_org_settings_menu_item();\n}\n\nexport function open() {\n    $(\"#settings-dropdown\").trigger(\"click\");\n    // there are invisible li tabs, which should not be clicked.\n    $(\"#gear-menu\").find(\"li:not(.invisible) a\").eq(0).trigger(\"focus\");\n}\n\nexport function is_open() {\n    return $(\".dropdown\").hasClass(\"open\");\n}\n\nexport function close() {\n    if (is_open()) {\n        $(\".dropdown\").removeClass(\"open\");\n    }\n}\n","import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport render_giphy_picker from \"../templates/giphy_picker.hbs\";\nimport render_giphy_picker_mobile from \"../templates/giphy_picker_mobile.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as compose_ui from \"./compose_ui\";\nimport {media_breakpoints_num} from \"./css_variables\";\nimport {page_params} from \"./page_params\";\nimport * as popovers from \"./popovers\";\nimport * as rows from \"./rows\";\nimport * as ui_util from \"./ui_util\";\n\nlet giphy_fetch;\nlet search_term = \"\";\nlet gifs_grid;\nlet $active_popover_element;\n\n// Only used if popover called from edit message, otherwise it is `undefined`.\nlet edit_message_id;\n\nexport function is_popped_from_edit_messsage() {\n    return $active_popover_element && edit_message_id !== undefined;\n}\n\nexport function focus_current_edit_message() {\n    $(`#edit_form_${CSS.escape(edit_message_id)} .message_edit_content`).trigger(\"focus\");\n}\n\nexport function is_giphy_enabled() {\n    return (\n        page_params.giphy_api_key !== \"\" &&\n        page_params.realm_giphy_rating !== page_params.giphy_rating_options.disabled.id\n    );\n}\n\n// Approximate width and height of\n// giphy popover as computed by chrome\n// + 25px;\nconst APPROX_HEIGHT = 350;\nconst APPROX_WIDTH = 300;\n\nexport function update_giphy_rating() {\n    if (\n        page_params.realm_giphy_rating === page_params.giphy_rating_options.disabled.id ||\n        page_params.giphy_api_key === \"\"\n    ) {\n        $(\".compose_gif_icon\").hide();\n    } else {\n        $(\".compose_gif_icon\").show();\n    }\n}\n\nfunction get_rating() {\n    const options = page_params.giphy_rating_options;\n    for (const rating in page_params.giphy_rating_options) {\n        if (options[rating].id === page_params.realm_giphy_rating) {\n            return rating;\n        }\n    }\n\n    // The below should never run unless a server bug allowed a\n    // `giphy_rating` value not present in `giphy_rating_options`.\n    blueslip.error(\"Invalid giphy_rating value: \" + page_params.realm_giphy_rating);\n    return \"g\";\n}\n\nasync function renderGIPHYGrid(targetEl) {\n    const {renderGrid} = await import(/* webpackChunkName: \"giphy-sdk\" */ \"@giphy/js-components\");\n    const {GiphyFetch} = await import(/* webpackChunkName: \"giphy-sdk\" */ \"@giphy/js-fetch-api\");\n\n    if (giphy_fetch === undefined) {\n        giphy_fetch = new GiphyFetch(page_params.giphy_api_key);\n    }\n\n    function fetchGifs(offset) {\n        const config = {\n            offset,\n            limit: 25,\n            rating: get_rating(),\n            // We don't pass random_id here, for privacy reasons.\n        };\n        if (search_term === \"\") {\n            // Get the trending gifs by default.\n            return giphy_fetch.trending(config);\n        }\n        return giphy_fetch.search(search_term, config);\n    }\n\n    const render = () =>\n        // See https://github.com/Giphy/giphy-js/blob/master/packages/components/README.md#grid\n        // for detailed documentation.\n        renderGrid(\n            {\n                width: 300,\n                fetchGifs,\n                columns: 3,\n                gutter: 6,\n                noLink: true,\n                // Hide the creator attribution that appears over a\n                // GIF; nice in principle but too distracting.\n                hideAttribution: true,\n                onGifClick(props) {\n                    let $textarea = $(\"#compose-textarea\");\n                    if (edit_message_id !== undefined) {\n                        $textarea = $(\n                            `#edit_form_${CSS.escape(edit_message_id)} .message_edit_content`,\n                        );\n                    }\n\n                    compose_ui.insert_syntax_and_focus(\n                        `[](${props.images.downsized_medium.url})`,\n                        $textarea,\n                    );\n                    hide_giphy_popover();\n                },\n                onGifVisible(gif, e) {\n                    // Set tabindex for all the GIFs that\n                    // are visible to the user. This allows\n                    // user to navigate the GIFs using tab.\n                    // TODO: Remove this after https://github.com/Giphy/giphy-js/issues/174\n                    // is closed.\n                    e.target.tabIndex = 0;\n                },\n            },\n            targetEl,\n        );\n\n    // Limit the rate at which we do queries to the GIPHY API to\n    // one per 300ms, in line with animation timing, basically to avoid\n    // content appearing while the user is typing.\n    const resizeRender = _.throttle(render, 300);\n    window.addEventListener(\"resize\", resizeRender, false);\n    const remove = render();\n    return {\n        remove() {\n            remove();\n            window.removeEventListener(\"resize\", resizeRender, false);\n        },\n    };\n}\n\nasync function update_grid_with_search_term() {\n    if (!gifs_grid) {\n        return;\n    }\n\n    const $search_elem = $(\"#giphy-search-query\");\n    // GIPHY popover may have been hidden by the\n    // time this function is called.\n    if ($search_elem.length) {\n        search_term = $search_elem[0].value;\n        gifs_grid.remove();\n        gifs_grid = await renderGIPHYGrid($(\"#giphy_grid_in_popover .giphy-content\")[0]);\n        return;\n    }\n\n    // Set to undefined to stop searching.\n    gifs_grid = undefined;\n}\n\nexport function hide_giphy_popover() {\n    // Returns `true` if the popover was open.\n    if ($active_popover_element) {\n        // We need to destroy the popover because when\n        // we hide it, bootstrap popover\n        // library removes `giphy-content` element\n        // as part of cleaning up everything inside\n        // `popover-content`, so we need to reinitialize\n        // the popover by destroying it.\n        $active_popover_element.popover(\"destroy\");\n        $active_popover_element = undefined;\n        edit_message_id = undefined;\n        gifs_grid = undefined;\n        return true;\n    }\n    return false;\n}\n\nfunction get_popover_content() {\n    if (window.innerWidth <= media_breakpoints_num.md) {\n        // Show as modal in the center for small screens.\n        return render_giphy_picker_mobile();\n    }\n    return render_giphy_picker();\n}\n\nfunction get_popover_placement() {\n    let placement = popovers.compute_placement(\n        $active_popover_element,\n        APPROX_HEIGHT,\n        APPROX_WIDTH,\n        true,\n    );\n\n    if (placement === \"viewport_center\") {\n        // For legacy reasons `compute_placement` actually can\n        // return `viewport_center` which used to place popover in\n        // the center of the screen, but bootstrap doesn't actually\n        // support that and we already handle it on small screen sizes\n        // by placing it in center using `popover-flex`.\n        placement = \"left\";\n    }\n\n    return placement;\n}\n\nexport function initialize() {\n    $(\"body\").on(\"keydown\", \".giphy-gif\", ui_util.convert_enter_to_click);\n    $(\"body\").on(\"keydown\", \".compose_gif_icon\", ui_util.convert_enter_to_click);\n\n    $(\"body\").on(\"click\", \"#giphy_search_clear\", async (e) => {\n        e.stopPropagation();\n        $(\"#giphy-search-query\").val(\"\");\n        await update_grid_with_search_term();\n    });\n\n    $(\"body\").on(\"click\", \".compose_gif_icon\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const compose_click_target = compose_ui.get_compose_click_target(e);\n        if ($active_popover_element && $active_popover_element.get()[0] === compose_click_target) {\n            // Hide giphy popover if already active.\n            hide_giphy_popover();\n            return;\n        }\n        popovers.hide_all();\n\n        const $elt = $(compose_click_target);\n        if ($elt.parents(\".message_edit_form\").length === 1) {\n            // Store message id in global variable edit_message_id so that\n            // its value can be further used to correctly find the message textarea element.\n            edit_message_id = rows.id($elt.parents(\".message_row\"));\n        } else {\n            edit_message_id = undefined;\n        }\n\n        $active_popover_element = $elt;\n        $active_popover_element.popover({\n            animation: true,\n            placement: get_popover_placement(),\n            html: true,\n            trigger: \"manual\",\n            template: get_popover_content(),\n            /* Popovers without a content property are not displayed,\n             * so we need something here; but we haven't contacted the\n             * Giphy API yet to get the actual content to display. */\n            content: \" \",\n        });\n\n        $active_popover_element.popover(\"show\");\n        // It takes about 1s for the popover to show; So,\n        // we wait for popover to display before rendering GIFs\n        // in it, otherwise popover is rendered with empty content.\n        const popover_observer = new MutationObserver(async () => {\n            if ($(\"#giphy_grid_in_popover .giphy-content\").is(\":visible\")) {\n                popover_observer.disconnect();\n                gifs_grid = await renderGIPHYGrid($(\"#giphy_grid_in_popover .giphy-content\")[0]);\n            }\n        });\n        const opts = {attributes: false, childList: true, characterData: false, subtree: true};\n        popover_observer.observe(document, opts);\n\n        $(\"body\").on(\n            \"keyup\",\n            \"#giphy-search-query\",\n            // Use debounce to create a 300ms interval between\n            // every search. This makes the UX of searching pleasant\n            // by allowing user to finish typing before search\n            // is executed.\n            _.debounce(update_grid_with_search_term, 300),\n        );\n\n        $(document).one(\"compose_canceled.zulip compose_finished.zulip\", () => {\n            hide_giphy_popover();\n        });\n\n        // Focus on search box by default.\n        // This is specially helpful for users\n        // navigating via keyboard.\n        $(\"#giphy-search-query\").trigger(\"focus\");\n    });\n}\n","import * as internal_url from \"../shared/js/internal_url\";\n\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as stream_data from \"./stream_data\";\n\nexport function get_hash_category(hash) {\n    // given \"#streams/subscribed\", returns \"streams\"\n    return hash ? hash.replace(/^#/, \"\").split(/\\//)[0] : \"\";\n}\n\nexport function get_hash_section(hash) {\n    // given \"#settings/profile\", returns \"profile\"\n    // given '#streams/5/social\", returns \"5\"\n    if (!hash) {\n        return \"\";\n    }\n\n    const parts = hash.replace(/\\/$/, \"\").split(/\\//);\n\n    return parts[1] || \"\";\n}\n\nexport function get_current_hash_category() {\n    return get_hash_category(window.location.hash);\n}\n\nexport function get_current_hash_section() {\n    return get_hash_section(window.location.hash);\n}\n\nexport function build_reload_url() {\n    let hash = window.location.hash;\n    if (hash.length !== 0 && hash[0] === \"#\") {\n        hash = hash.slice(1);\n    }\n    return \"+oldhash=\" + encodeURIComponent(hash);\n}\n\nexport function encode_operand(operator, operand) {\n    if (operator === \"group-pm-with\" || operator === \"pm-with\" || operator === \"sender\") {\n        const slug = people.emails_to_slug(operand);\n        if (slug) {\n            return slug;\n        }\n    }\n\n    if (operator === \"stream\") {\n        return encode_stream_name(operand);\n    }\n\n    return internal_url.encodeHashComponent(operand);\n}\n\nexport function encode_stream_name(operand) {\n    // stream_data prefixes the stream id, but it does not do the\n    // URI encoding piece\n    operand = stream_data.name_to_slug(operand);\n\n    return internal_url.encodeHashComponent(operand);\n}\n\nexport function decode_operand(operator, operand) {\n    if (operator === \"group-pm-with\" || operator === \"pm-with\" || operator === \"sender\") {\n        const emails = people.slug_to_emails(operand);\n        if (emails) {\n            return emails;\n        }\n    }\n\n    operand = internal_url.decodeHashComponent(operand);\n\n    if (operator === \"stream\") {\n        return stream_data.slug_to_name(operand);\n    }\n\n    return operand;\n}\n\nexport function by_stream_url(stream_id) {\n    // Wrapper for web use of internal_url.by_stream_url\n    return internal_url.by_stream_url(stream_id, stream_data.maybe_get_stream_name);\n}\n\nexport function by_stream_topic_url(stream_id, topic) {\n    // Wrapper for web use of internal_url.by_stream_topic_url\n    return internal_url.by_stream_topic_url(stream_id, topic, stream_data.maybe_get_stream_name);\n}\n\n// Encodes an operator list into the\n// corresponding hash: the # component\n// of the narrow URL\nexport function operators_to_hash(operators) {\n    let hash = \"#\";\n\n    if (operators !== undefined) {\n        hash = \"#narrow\";\n\n        for (const elem of operators) {\n            // Support legacy tuples.\n            const operator = elem.operator;\n            const operand = elem.operand;\n\n            const sign = elem.negated ? \"-\" : \"\";\n            hash +=\n                \"/\" +\n                sign +\n                internal_url.encodeHashComponent(operator) +\n                \"/\" +\n                encode_operand(operator, operand);\n        }\n    }\n\n    return hash;\n}\n\nexport function by_sender_url(reply_to) {\n    return operators_to_hash([{operator: \"sender\", operand: reply_to}]);\n}\n\nexport function pm_with_url(reply_to) {\n    const slug = people.emails_to_slug(reply_to);\n    return \"#narrow/pm-with/\" + slug;\n}\n\nexport function huddle_with_url(user_ids_string) {\n    // This method is convenient for callers\n    // that have already converted emails to a comma-delimited\n    // list of user_ids.  We should be careful to keep this\n    // consistent with hash_util.decode_operand.\n    return \"#narrow/pm-with/\" + user_ids_string + \"-group\";\n}\n\nexport function by_conversation_and_time_url(message) {\n    const absolute_url =\n        window.location.protocol +\n        \"//\" +\n        window.location.host +\n        \"/\" +\n        window.location.pathname.split(\"/\")[1];\n\n    const suffix = \"/near/\" + internal_url.encodeHashComponent(message.id);\n\n    if (message.type === \"stream\") {\n        return absolute_url + by_stream_topic_url(message.stream_id, message.topic) + suffix;\n    }\n\n    return absolute_url + people.pm_perma_link(message) + suffix;\n}\n\nexport function stream_edit_url(sub) {\n    const hash = `#streams/${sub.stream_id}/${internal_url.encodeHashComponent(sub.name)}`;\n    return hash;\n}\n\nexport function group_edit_url(group) {\n    const hash = `#groups/${group.id}/${internal_url.encodeHashComponent(group.name)}`;\n    return hash;\n}\n\nexport function search_public_streams_notice_url(operators) {\n    const public_operator = {operator: \"streams\", operand: \"public\"};\n    return operators_to_hash([public_operator].concat(operators));\n}\n\nexport function parse_narrow(hash) {\n    // This will throw an exception when passed an invalid hash\n    // at the decodeHashComponent call, handle appropriately.\n    let i;\n    const operators = [];\n    for (i = 1; i < hash.length; i += 2) {\n        // We don't construct URLs with an odd number of components,\n        // but the user might write one.\n        let operator = internal_url.decodeHashComponent(hash[i]);\n        // Do not parse further if empty operator encountered.\n        if (operator === \"\") {\n            break;\n        }\n\n        const raw_operand = hash[i + 1];\n\n        if (!raw_operand) {\n            return undefined;\n        }\n\n        let negated = false;\n        if (operator[0] === \"-\") {\n            negated = true;\n            operator = operator.slice(1);\n        }\n\n        const operand = decode_operand(operator, raw_operand);\n        operators.push({negated, operator, operand});\n    }\n    return operators;\n}\n\nexport function is_overlay_hash(hash) {\n    // Hash changes within this list are overlays and should not unnarrow (etc.)\n    const overlay_list = [\n        \"streams\",\n        \"drafts\",\n        \"groups\",\n        \"settings\",\n        \"organization\",\n        \"invite\",\n        \"keyboard-shortcuts\",\n        \"message-formatting\",\n        \"search-operators\",\n        \"about-zulip\",\n    ];\n    const main_hash = get_hash_category(hash);\n\n    return overlay_list.includes(main_hash);\n}\n\n// this finds the stream that is actively open in the settings and focused in\n// the left side.\nexport function is_editing_stream(desired_stream_id) {\n    const hash_components = window.location.hash.slice(1).split(/\\//);\n\n    if (hash_components[0] !== \"streams\") {\n        return false;\n    }\n\n    if (!hash_components[2]) {\n        return false;\n    }\n\n    // if the string casted to a number is valid, and another component\n    // after exists then it's a stream name/id pair.\n    const stream_id = Number.parseFloat(hash_components[1]);\n\n    return stream_id === desired_stream_id;\n}\n\nexport function is_editing_group(desired_group_id) {\n    const hash_components = window.location.hash.slice(1).split(/\\//);\n\n    if (hash_components[0] !== \"groups\") {\n        return false;\n    }\n\n    if (!hash_components[2]) {\n        return false;\n    }\n\n    // if the string casted to a number is valid, and another component\n    // after exists then it's a stream name/id pair.\n    const group_id = Number.parseFloat(hash_components[1]);\n\n    return group_id === desired_group_id;\n}\n\nexport function is_create_new_stream_narrow() {\n    return window.location.hash === \"#streams/new\";\n}\n\nexport const allowed_web_public_narrows = [\n    \"streams\",\n    \"stream\",\n    \"topic\",\n    \"sender\",\n    \"has\",\n    \"search\",\n    \"near\",\n    \"id\",\n];\n\nexport function is_spectator_compatible(hash) {\n    // Defines which views are supported for spectators.\n    // This implementation should agree with the similar function in zerver/lib/narrow.py.\n    const web_public_allowed_hashes = [\n        \"\",\n        // full #narrow hash handled in narrow.is_spectator_compatible\n        \"narrow\",\n        // TODO/compatibility: #recent_topics was renamed to #recent\n        // in 2022. We should support the old URL fragment at least\n        // until one cannot directly upgrade from Zulip 5.x.\n        \"recent_topics\",\n        \"recent\",\n        \"keyboard-shortcuts\",\n        \"message-formatting\",\n        \"search-operators\",\n        \"all_messages\",\n        \"about-zulip\",\n    ];\n\n    const main_hash = get_hash_category(hash);\n\n    if (main_hash === \"narrow\") {\n        const hash_section = get_hash_section(hash);\n        if (!allowed_web_public_narrows.includes(hash_section)) {\n            return false;\n        }\n        return true;\n    }\n\n    return web_public_allowed_hashes.includes(main_hash);\n}\n\nexport function current_hash_as_next() {\n    return `next=/${encodeURIComponent(window.location.hash)}`;\n}\n\nexport function build_login_link() {\n    let login_link = \"/login/?\" + current_hash_as_next();\n    if (page_params.development_environment) {\n        login_link = \"/devlogin/?\" + current_hash_as_next();\n    }\n    return login_link;\n}\n","import $ from \"jquery\";\n\nimport * as about_zulip from \"./about_zulip\";\nimport * as admin from \"./admin\";\nimport * as blueslip from \"./blueslip\";\nimport * as browser_history from \"./browser_history\";\nimport * as drafts from \"./drafts\";\nimport * as floating_recipient_bar from \"./floating_recipient_bar\";\nimport * as hash_util from \"./hash_util\";\nimport {$t_html} from \"./i18n\";\nimport * as info_overlay from \"./info_overlay\";\nimport * as invite from \"./invite\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_viewport from \"./message_viewport\";\nimport * as narrow from \"./narrow\";\nimport * as navigate from \"./navigate\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\nimport * as recent_topics_ui from \"./recent_topics_ui\";\nimport * as recent_topics_util from \"./recent_topics_util\";\nimport * as search from \"./search\";\nimport * as settings from \"./settings\";\nimport * as settings_panel_menu from \"./settings_panel_menu\";\nimport * as settings_toggle from \"./settings_toggle\";\nimport * as spectators from \"./spectators\";\nimport * as stream_settings_ui from \"./stream_settings_ui\";\nimport * as top_left_corner from \"./top_left_corner\";\nimport * as ui_report from \"./ui_report\";\nimport * as user_groups_settings_ui from \"./user_groups_settings_ui\";\nimport {user_settings} from \"./user_settings\";\n\n// Read https://zulip.readthedocs.io/en/latest/subsystems/hashchange-system.html\n// or locally: docs/subsystems/hashchange-system.md\n\nfunction get_full_url(hash) {\n    const location = window.location;\n\n    if (hash === \"\" || hash.charAt(0) !== \"#\") {\n        hash = \"#\" + hash;\n    }\n\n    // IE returns pathname as undefined and missing the leading /\n    let pathname = location.pathname;\n    if (pathname === undefined) {\n        pathname = \"/\";\n    } else if (pathname === \"\" || pathname.charAt(0) !== \"/\") {\n        pathname = \"/\" + pathname;\n    }\n\n    // Build a full URL to not have same origin problems\n    const url = location.protocol + \"//\" + location.host + pathname + hash;\n    return url;\n}\n\nfunction set_hash(hash) {\n    if (history.pushState) {\n        const url = get_full_url(hash);\n        history.pushState(null, null, url);\n        browser_history.update_web_public_hash(hash);\n    } else {\n        blueslip.warn(\"browser does not support pushState\");\n        window.location.hash = hash;\n    }\n}\n\nfunction maybe_hide_recent_topics() {\n    if (recent_topics_util.is_visible()) {\n        recent_topics_ui.hide();\n        return true;\n    }\n    return false;\n}\n\nexport function changehash(newhash) {\n    if (browser_history.state.changing_hash) {\n        return;\n    }\n    maybe_hide_recent_topics();\n    message_viewport.stop_auto_scrolling();\n    set_hash(newhash);\n}\n\nexport function save_narrow(operators) {\n    if (browser_history.state.changing_hash) {\n        return;\n    }\n    const new_hash = hash_util.operators_to_hash(operators);\n    changehash(new_hash);\n}\n\nfunction show_all_message_view() {\n    const coming_from_recent_topics = maybe_hide_recent_topics();\n    narrow.deactivate(coming_from_recent_topics);\n    top_left_corner.handle_narrow_deactivated();\n    floating_recipient_bar.update();\n    search.update_button_visibility();\n    // We need to maybe scroll to the selected message\n    // once we have the proper viewport set up\n    setTimeout(navigate.maybe_scroll_to_selected, 0);\n}\n\nexport function set_hash_to_default_view() {\n    window.location.hash = \"\";\n}\n\nfunction show_default_view() {\n    // This function should only be called from the hashchange\n    // handlers, as it does not set the hash to \"\".\n    //\n    // We only allow all_messages and recent_topics\n    // to be rendered without a hash.\n    if (user_settings.default_view === \"recent_topics\") {\n        recent_topics_ui.show();\n    } else if (user_settings.default_view === \"all_messages\") {\n        show_all_message_view();\n    } else {\n        // NOTE: Setting a hash which is not rendered on\n        // empty hash (like a stream narrow) will\n        // introduce a bug that user will not be able to\n        // go back in browser history. See\n        // https://chat.zulip.org/#narrow/stream/9-issues/topic/Browser.20back.20button.20on.20RT\n        // for detailed description of the issue.\n        window.location.hash = user_settings.default_view;\n    }\n}\n\n// Returns true if this function performed a narrow\nfunction do_hashchange_normal(from_reload) {\n    message_viewport.stop_auto_scrolling();\n\n    // NB: In Firefox, window.location.hash is URI-decoded.\n    // Even if the URL bar says #%41%42%43%44, the value here will\n    // be #ABCD.\n    const hash = window.location.hash.split(\"/\");\n\n    switch (hash[0]) {\n        case \"#narrow\": {\n            maybe_hide_recent_topics();\n            let operators;\n            try {\n                // TODO: Show possible valid URLs to the user.\n                operators = hash_util.parse_narrow(hash);\n            } catch {\n                ui_report.error(\n                    $t_html({defaultMessage: \"Invalid URL\"}),\n                    undefined,\n                    $(\"#home-error\"),\n                    2000,\n                );\n            }\n            if (operators === undefined) {\n                // If the narrow URL didn't parse,\n                // send them to default_view.\n                // We cannot clear hash here since\n                // it will block user from going back\n                // in browser history.\n                show_default_view();\n                return false;\n            }\n            const narrow_opts = {\n                change_hash: false, // already set\n                trigger: \"hash change\",\n            };\n            if (from_reload) {\n                blueslip.debug(\"We are narrowing as part of a reload.\");\n                if (page_params.initial_narrow_pointer !== undefined) {\n                    message_lists.home.pre_narrow_offset = page_params.initial_offset;\n                    narrow_opts.then_select_id = page_params.initial_narrow_pointer;\n                    narrow_opts.then_select_offset = page_params.initial_narrow_offset;\n                }\n            }\n            narrow.activate(operators, narrow_opts);\n            floating_recipient_bar.update();\n            return true;\n        }\n        case \"\":\n        case \"#\":\n            show_default_view();\n            break;\n        case \"#recent_topics\":\n            // The URL for Recent Conversations was changed from\n            // #recent_topics to #recent in 2022. Because pre-change\n            // Welcome Bot messages included links to this URL, we\n            // need to support the \"#recent_topics\" hash as an alias\n            // for #recent permanently. We show the view and then\n            // replace the current URL hash in a way designed to hide\n            // this detail in the browser's forward/back session history.\n            recent_topics_ui.show();\n            window.location.replace(\"#recent\");\n            break;\n        case \"#recent\":\n            recent_topics_ui.show();\n            break;\n        case \"#all_messages\":\n            show_all_message_view();\n            break;\n        case \"#keyboard-shortcuts\":\n        case \"#message-formatting\":\n        case \"#search-operators\":\n        case \"#drafts\":\n        case \"#invite\":\n        case \"#streams\":\n        case \"#organization\":\n        case \"#settings\":\n        case \"#about-zulip\":\n            blueslip.error(\"overlay logic skipped for: \" + hash);\n            break;\n        default:\n            show_default_view();\n    }\n    return false;\n}\n\nfunction do_hashchange_overlay(old_hash) {\n    if (old_hash === undefined) {\n        // The user opened the app with an overlay hash; we need to\n        // show the user's default view behind it.\n        show_default_view();\n    }\n    const base = hash_util.get_current_hash_category();\n    const old_base = hash_util.get_hash_category(old_hash);\n    const section = hash_util.get_current_hash_section();\n\n    if (base === \"groups\" && (!page_params.development_environment || page_params.is_guest)) {\n        // The #groups settings page is unfinished, and disabled in production.\n        show_default_view();\n        return;\n    }\n\n    const coming_from_overlay = hash_util.is_overlay_hash(old_hash || \"#\");\n\n    if ((base === \"settings\" || base === \"organization\") && !section) {\n        let settings_panel_object = settings_panel_menu.normal_settings;\n        if (base === \"organization\") {\n            settings_panel_object = settings_panel_menu.org_settings;\n        }\n        history.replaceState(\n            null,\n            \"\",\n            get_full_url(base + \"/\" + settings_panel_object.current_tab()),\n        );\n    }\n\n    if (base === \"streams\" && !section) {\n        history.replaceState(null, \"\", get_full_url(\"streams/subscribed\"));\n    }\n\n    // Start by handling the specific case of going\n    // from something like streams/all to streams_subscribed.\n    //\n    // In most situations we skip by this logic and load\n    // the new overlay.\n    if (coming_from_overlay && base === old_base) {\n        if (base === \"streams\") {\n            stream_settings_ui.change_state(section);\n            return;\n        }\n\n        if (base === \"groups\") {\n            user_groups_settings_ui.change_state(section);\n        }\n\n        if (base === \"settings\") {\n            if (!section) {\n                // We may be on a really old browser or somebody\n                // hand-typed a hash.\n                blueslip.warn(\"missing section for settings\");\n            }\n            settings_panel_menu.normal_settings.activate_section_or_default(section);\n            return;\n        }\n\n        if (base === \"organization\") {\n            if (!section) {\n                // We may be on a really old browser or somebody\n                // hand-typed a hash.\n                blueslip.warn(\"missing section for organization\");\n            }\n            settings_panel_menu.org_settings.activate_section_or_default(section);\n            return;\n        }\n\n        // TODO: handle other cases like internal settings\n        //       changes.\n        return;\n    }\n\n    // This is a special case when user clicks on a URL that makes the overlay switch\n    // from org settings to user settings or user edits the URL to switch between them.\n    const settings_hashes = new Set([\"settings\", \"organization\"]);\n    // Ensure that we are just switching between user and org settings and the settings\n    // overlay is open.\n    const is_hashchange_internal =\n        settings_hashes.has(base) && settings_hashes.has(old_base) && overlays.settings_open();\n    if (is_hashchange_internal) {\n        if (base === \"settings\") {\n            settings_panel_menu.normal_settings.activate_section_or_default(section);\n        } else {\n            settings_panel_menu.org_settings.activate_section_or_default(section);\n        }\n        settings_toggle.highlight_toggle(base);\n        return;\n    }\n\n    // It's not super likely that an overlay is already open,\n    // but you can jump from /settings to /streams by using\n    // the browser's history menu or hand-editing the URL or\n    // whatever.  If so, just close the overlays.\n    if (base !== old_base) {\n        overlays.close_for_hash_change();\n    }\n\n    // NORMAL FLOW: basically, launch the overlay:\n\n    if (!coming_from_overlay) {\n        browser_history.set_hash_before_overlay(old_hash);\n    }\n\n    if (base === \"streams\") {\n        stream_settings_ui.launch(section);\n        return;\n    }\n\n    if (base === \"groups\") {\n        user_groups_settings_ui.launch(section);\n        return;\n    }\n\n    if (base === \"drafts\") {\n        drafts.launch();\n        return;\n    }\n\n    if (base === \"settings\") {\n        settings.launch(section);\n        return;\n    }\n\n    if (base === \"organization\") {\n        admin.launch(section);\n        return;\n    }\n\n    if (base === \"invite\") {\n        invite.launch();\n        return;\n    }\n\n    if (base === \"keyboard-shortcuts\") {\n        info_overlay.show(\"keyboard-shortcuts\");\n        return;\n    }\n\n    if (base === \"message-formatting\") {\n        info_overlay.show(\"message-formatting\");\n        return;\n    }\n\n    if (base === \"search-operators\") {\n        info_overlay.show(\"search-operators\");\n        return;\n    }\n\n    if (base === \"about-zulip\") {\n        about_zulip.launch();\n    }\n}\n\nfunction hashchanged(from_reload, e) {\n    const current_hash = window.location.hash;\n    const old_hash = e && (e.oldURL ? new URL(e.oldURL).hash : browser_history.old_hash());\n    const is_hash_web_public_compatible = browser_history.update_web_public_hash(current_hash);\n\n    const was_internal_change = browser_history.save_old_hash();\n    if (was_internal_change) {\n        return undefined;\n    }\n\n    // TODO: Migrate the `#reload` syntax to use slashes as separators\n    // so that this can be part of the main switch statement.\n    if (window.location.hash.startsWith(\"#reload\")) {\n        // We don't want to change narrow if app is undergoing reload.\n        return undefined;\n    }\n\n    if (page_params.is_spectator && !is_hash_web_public_compatible) {\n        spectators.login_to_access();\n        return undefined;\n    }\n\n    if (hash_util.is_overlay_hash(current_hash)) {\n        browser_history.state.changing_hash = true;\n        do_hashchange_overlay(old_hash);\n        browser_history.state.changing_hash = false;\n        return undefined;\n    }\n\n    // We are changing to a \"main screen\" view.\n    overlays.close_for_hash_change();\n    browser_history.state.changing_hash = true;\n    const ret = do_hashchange_normal(from_reload);\n    browser_history.state.changing_hash = false;\n    return ret;\n}\n\nexport function initialize() {\n    $(window).on(\"hashchange\", (e) => {\n        hashchanged(false, e.originalEvent);\n    });\n    hashchanged(true);\n}\n","import $ from \"jquery\";\n\nimport * as activity from \"./activity\";\nimport * as browser_history from \"./browser_history\";\nimport * as common from \"./common\";\nimport * as compose from \"./compose\";\nimport * as compose_actions from \"./compose_actions\";\nimport * as compose_banner from \"./compose_banner\";\nimport * as compose_state from \"./compose_state\";\nimport * as condense from \"./condense\";\nimport * as copy_and_paste from \"./copy_and_paste\";\nimport * as deprecated_feature_notice from \"./deprecated_feature_notice\";\nimport * as drafts from \"./drafts\";\nimport * as emoji from \"./emoji\";\nimport * as emoji_picker from \"./emoji_picker\";\nimport * as feedback_widget from \"./feedback_widget\";\nimport * as gear_menu from \"./gear_menu\";\nimport * as giphy from \"./giphy\";\nimport * as hashchange from \"./hashchange\";\nimport * as hotspots from \"./hotspots\";\nimport * as lightbox from \"./lightbox\";\nimport * as list_util from \"./list_util\";\nimport * as message_edit from \"./message_edit\";\nimport * as message_flags from \"./message_flags\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_scroll from \"./message_scroll\";\nimport * as message_view_header from \"./message_view_header\";\nimport * as muted_topics_ui from \"./muted_topics_ui\";\nimport * as narrow from \"./narrow\";\nimport * as navigate from \"./navigate\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\nimport * as popover_menus from \"./popover_menus\";\nimport * as popovers from \"./popovers\";\nimport * as reactions from \"./reactions\";\nimport * as recent_topics_ui from \"./recent_topics_ui\";\nimport * as recent_topics_util from \"./recent_topics_util\";\nimport * as search from \"./search\";\nimport * as settings_data from \"./settings_data\";\nimport * as spectators from \"./spectators\";\nimport * as stream_list from \"./stream_list\";\nimport * as stream_popover from \"./stream_popover\";\nimport * as stream_settings_ui from \"./stream_settings_ui\";\nimport * as topic_zoom from \"./topic_zoom\";\nimport * as ui from \"./ui\";\nimport * as unread_ops from \"./unread_ops\";\nimport {user_settings} from \"./user_settings\";\n\nfunction do_narrow_action(action) {\n    action(message_lists.current.selected_id(), {trigger: \"hotkey\"});\n    return true;\n}\n\n// For message actions and user profile menu.\nconst menu_dropdown_hotkeys = new Set([\"down_arrow\", \"up_arrow\", \"vim_up\", \"vim_down\", \"enter\"]);\n\n// Note that multiple keys can map to the same event_name, which\n// we'll do in cases where they have the exact same semantics.\n// DON'T FORGET: update keyboard_shortcuts.html\n\n// The `message_view_only` property is a convenient and performant way\n// to express a common case of which hotkeys do something in which\n// views.  It is set for hotkeys (like `Ctrl + S`) that only have an effect\n// in the main message view with a selected message.\n// `message_view_only` hotkeys, as a group, are not processed if any\n// overlays are open (e.g. settings, streams, etc.).\n\nconst keydown_shift_mappings = {\n    // these can be triggered by Shift + key only\n    9: {name: \"shift_tab\", message_view_only: false}, // Tab\n    32: {name: \"shift_spacebar\", message_view_only: true}, // space bar\n    37: {name: \"left_arrow\", message_view_only: false}, // left arrow\n    39: {name: \"right_arrow\", message_view_only: false}, // right arrow\n    38: {name: \"up_arrow\", message_view_only: false}, // up arrow\n    40: {name: \"down_arrow\", message_view_only: false}, // down arrow\n};\n\nconst keydown_unshift_mappings = {\n    // these can be triggered by key only (without Shift)\n    9: {name: \"tab\", message_view_only: false}, // Tab\n    27: {name: \"escape\", message_view_only: false}, // Esc\n    32: {name: \"spacebar\", message_view_only: true}, // space bar\n    33: {name: \"page_up\", message_view_only: true}, // PgUp\n    34: {name: \"page_down\", message_view_only: true}, // PgDn\n    35: {name: \"end\", message_view_only: true}, // End\n    36: {name: \"home\", message_view_only: true}, // Home\n    37: {name: \"left_arrow\", message_view_only: false}, // left arrow\n    39: {name: \"right_arrow\", message_view_only: false}, // right arrow\n    38: {name: \"up_arrow\", message_view_only: false}, // up arrow\n    40: {name: \"down_arrow\", message_view_only: false}, // down arrow\n};\n\nconst keydown_ctrl_mappings = {\n    219: {name: \"escape\", message_view_only: false}, // '['\n    13: {name: \"ctrl_enter\", message_view_only: true}, // enter\n};\n\nconst keydown_cmd_or_ctrl_mappings = {\n    67: {name: \"copy_with_c\", message_view_only: false}, // 'C'\n    75: {name: \"search_with_k\", message_view_only: false}, // 'K'\n    83: {name: \"star_message\", message_view_only: true}, // 'S'\n    190: {name: \"narrow_to_compose_target\", message_view_only: true}, // '.'\n};\n\nconst keydown_either_mappings = {\n    // these can be triggered by key or Shift + key\n    // Note that codes for letters are still case sensitive!\n    //\n    // We may want to revisit both of these.  For Backspace, we don't\n    // have any specific mapping behavior; we are just trying to disable\n    // the normal browser features for certain OSes when we are in the\n    // compose box, and the little bit of Backspace-related code here is\n    // dubious, but may apply to Shift-Backspace.\n    // For Enter, there is some possibly that Shift-Enter is intended to\n    // have special behavior for folks that are used to Shift-Enter behavior\n    // in other apps, but that's also slightly dubious.\n    8: {name: \"backspace\", message_view_only: true}, // Backspace\n    13: {name: \"enter\", message_view_only: false}, // Enter\n    46: {name: \"delete\", message_view_only: false}, // Delete\n};\n\nconst keypress_mappings = {\n    42: {name: \"star_deprecated\", message_view_only: true}, // '*'\n    43: {name: \"thumbs_up_emoji\", message_view_only: true}, // '+'\n    45: {name: \"toggle_message_collapse\", message_view_only: true}, // '-'\n    47: {name: \"search\", message_view_only: false}, // '/'\n    58: {name: \"toggle_reactions_popover\", message_view_only: true}, // ':'\n    62: {name: \"compose_quote_reply\", message_view_only: true}, // '>'\n    63: {name: \"show_shortcuts\", message_view_only: false}, // '?'\n    64: {name: \"compose_reply_with_mention\", message_view_only: true}, // '@'\n    65: {name: \"stream_cycle_backward\", message_view_only: true}, // 'A'\n    67: {name: \"C_deprecated\", message_view_only: true}, // 'C'\n    68: {name: \"stream_cycle_forward\", message_view_only: true}, // 'D'\n    71: {name: \"G_end\", message_view_only: true}, // 'G'\n    74: {name: \"vim_page_down\", message_view_only: true}, // 'J'\n    75: {name: \"vim_page_up\", message_view_only: true}, // 'K'\n    77: {name: \"toggle_topic_mute\", message_view_only: true}, // 'M'\n    80: {name: \"narrow_private\", message_view_only: true}, // 'P'\n    82: {name: \"respond_to_author\", message_view_only: true}, // 'R'\n    83: {name: \"narrow_by_topic\", message_view_only: true}, // 'S'\n    85: {name: \"mark_unread\", message_view_only: true}, // 'U'\n    86: {name: \"view_selected_stream\", message_view_only: false}, // 'V'\n    97: {name: \"all_messages\", message_view_only: true}, // 'a'\n    99: {name: \"compose\", message_view_only: true}, // 'c'\n    100: {name: \"open_drafts\", message_view_only: true}, // 'd'\n    101: {name: \"edit_message\", message_view_only: true}, // 'e'\n    103: {name: \"gear_menu\", message_view_only: true}, // 'g'\n    104: {name: \"vim_left\", message_view_only: true}, // 'h'\n    105: {name: \"message_actions\", message_view_only: true}, // 'i'\n    106: {name: \"vim_down\", message_view_only: true}, // 'j'\n    107: {name: \"vim_up\", message_view_only: true}, // 'k'\n    108: {name: \"vim_right\", message_view_only: true}, // 'l'\n    109: {name: \"move_message\", message_view_only: true}, // 'm'\n    110: {name: \"n_key\", message_view_only: false}, // 'n'\n    112: {name: \"p_key\", message_view_only: false}, // 'p'\n    113: {name: \"query_streams\", message_view_only: true}, // 'q'\n    114: {name: \"reply_message\", message_view_only: true}, // 'r'\n    115: {name: \"narrow_by_recipient\", message_view_only: true}, // 's'\n    116: {name: \"open_recent_topics\", message_view_only: true}, // 't'\n    117: {name: \"show_sender_info\", message_view_only: true}, // 'u'\n    118: {name: \"show_lightbox\", message_view_only: true}, // 'v'\n    119: {name: \"query_users\", message_view_only: true}, // 'w'\n    120: {name: \"compose_private_message\", message_view_only: true}, // 'x'\n};\n\nexport function get_keydown_hotkey(e) {\n    if (e.altKey) {\n        return undefined;\n    }\n\n    let hotkey;\n\n    if (e.ctrlKey && !e.shiftKey) {\n        hotkey = keydown_ctrl_mappings[e.which];\n        if (hotkey) {\n            return hotkey;\n        }\n    }\n\n    const isCmdOrCtrl = common.has_mac_keyboard() ? e.metaKey : e.ctrlKey;\n    if (isCmdOrCtrl && !e.shiftKey) {\n        hotkey = keydown_cmd_or_ctrl_mappings[e.which];\n        if (hotkey) {\n            return hotkey;\n        }\n        return undefined;\n    } else if (e.metaKey || e.ctrlKey) {\n        return undefined;\n    }\n\n    if (e.shiftKey) {\n        hotkey = keydown_shift_mappings[e.which];\n        if (hotkey) {\n            return hotkey;\n        }\n    }\n\n    if (!e.shiftKey) {\n        hotkey = keydown_unshift_mappings[e.which];\n        if (hotkey) {\n            return hotkey;\n        }\n    }\n\n    return keydown_either_mappings[e.which];\n}\n\nexport function get_keypress_hotkey(e) {\n    if (e.metaKey || e.ctrlKey || e.altKey) {\n        return undefined;\n    }\n\n    return keypress_mappings[e.which];\n}\n\nexport function processing_text() {\n    const $focused_elt = $(\":focus\");\n    return (\n        $focused_elt.is(\"input\") ||\n        $focused_elt.is(\"select\") ||\n        $focused_elt.is(\"textarea\") ||\n        $focused_elt.parents(\".pill-container\").length >= 1 ||\n        $focused_elt.attr(\"id\") === \"compose-send-button\"\n    );\n}\n\nexport function in_content_editable_widget(e) {\n    return $(e.target).is(\".editable-section\");\n}\n\n// Returns true if we handled it, false if the browser should.\nexport function process_escape_key(e) {\n    if (\n        recent_topics_util.is_in_focus() &&\n        // This will return false if `e.target` is not\n        // any of the recent topics elements by design.\n        recent_topics_ui.change_focused_element($(e.target), \"escape\")\n    ) {\n        // Recent topics uses escape to switch focus from RT search / filters to topics table.\n        // If focus is already on the table it returns false.\n        return true;\n    }\n\n    if (feedback_widget.is_open()) {\n        feedback_widget.dismiss();\n        return true;\n    }\n\n    if (popovers.any_active()) {\n        if (popovers.user_info_manage_menu_popped()) {\n            popovers.hide_user_info_popover_manage_menu();\n            $(\"#user_info_popover .user_info_popover_manage_menu_btn\").trigger(\"focus\");\n            return true;\n        }\n        popovers.hide_all();\n        return true;\n    }\n\n    if (overlays.is_modal_open()) {\n        overlays.close_active_modal();\n        return true;\n    }\n\n    if (overlays.is_active()) {\n        overlays.close_active();\n        return true;\n    }\n\n    if (gear_menu.is_open()) {\n        gear_menu.close();\n        return true;\n    }\n\n    if (processing_text()) {\n        if (activity.searching()) {\n            activity.escape_search();\n            return true;\n        }\n\n        if (stream_list.searching()) {\n            stream_list.escape_search();\n            return true;\n        }\n\n        // Emoji picker goes before compose so compose emoji picker is closed properly.\n        if (emoji_picker.reactions_popped()) {\n            emoji_picker.hide_emoji_popover();\n            return true;\n        }\n\n        if (giphy.is_popped_from_edit_messsage()) {\n            giphy.focus_current_edit_message();\n            // Hide after setting focus so that `edit_message_id` is\n            // still set in giphy.\n            giphy.hide_giphy_popover();\n            return true;\n        }\n\n        if (compose_state.composing()) {\n            // Check if the giphy popover was open using compose box.\n            // Hide GIPHY popover if it's open.\n            if (!giphy.is_popped_from_edit_messsage() && giphy.hide_giphy_popover()) {\n                $(\"#compose-textarea\").trigger(\"focus\");\n                return true;\n            }\n\n            // Check for errors in compose box; close errors if they exist\n            if ($(\"#compose-send-status\").css(\"display\") !== \"none\") {\n                $(\"#compose-send-status\").hide();\n                return true;\n            }\n\n            // Clear open compose banners, if present.\n            if ($(\".compose_banner\").length) {\n                compose_banner.clear_errors();\n                compose_banner.clear_warnings();\n                return true;\n            }\n\n            // If the user hit the Esc key, cancel the current compose\n            compose_actions.cancel();\n            return true;\n        }\n\n        if ($(\"#searchbox\").has(\":focus\")) {\n            $(\"input:focus,textarea:focus\").trigger(\"blur\");\n            if (page_params.search_pills_enabled) {\n                $(\"#searchbox .pill\").trigger(\"blur\");\n                $(\"#searchbox #search_query\").trigger(\"blur\");\n            } else {\n                message_view_header.exit_search();\n            }\n            return true;\n        }\n\n        // We pressed Esc and something was focused, and the composebox\n        // wasn't open. In that case, we should blur the input.\n        $(\"input:focus,textarea:focus\").trigger(\"blur\");\n        return true;\n    }\n\n    if (compose_state.composing()) {\n        compose_actions.cancel();\n        return true;\n    }\n\n    if (topic_zoom.is_zoomed_in()) {\n        topic_zoom.zoom_out();\n        return true;\n    }\n\n    /* The Ctrl+[ hotkey navigates to the default view\n     * unconditionally; Esc's behavior depends on a setting. */\n    if (user_settings.escape_navigates_to_default_view || e.which === 219) {\n        hashchange.set_hash_to_default_view();\n        return true;\n    }\n\n    return false;\n}\n\nfunction handle_popover_events(event_name) {\n    if (popover_menus.actions_popped()) {\n        popovers.actions_menu_handle_keyboard(event_name);\n        return true;\n    }\n\n    if (popovers.user_info_manage_menu_popped()) {\n        popovers.user_info_popover_manage_menu_handle_keyboard(event_name);\n        return true;\n    }\n\n    if (popovers.message_info_popped()) {\n        popovers.user_info_popover_for_message_handle_keyboard(event_name);\n        return true;\n    }\n\n    if (popovers.user_info_popped()) {\n        popovers.user_info_popover_handle_keyboard(event_name);\n        return true;\n    }\n\n    if (popovers.user_sidebar_popped()) {\n        popovers.user_sidebar_popover_handle_keyboard(event_name);\n        return true;\n    }\n\n    if (stream_popover.stream_popped()) {\n        stream_popover.stream_sidebar_menu_handle_keyboard(event_name);\n        return true;\n    }\n\n    if (stream_popover.topic_popped()) {\n        stream_popover.topic_sidebar_menu_handle_keyboard(event_name);\n        return true;\n    }\n\n    if (stream_popover.all_messages_popped()) {\n        stream_popover.all_messages_sidebar_menu_handle_keyboard(event_name);\n        return true;\n    }\n\n    if (stream_popover.starred_messages_popped()) {\n        stream_popover.starred_messages_sidebar_menu_handle_keyboard(event_name);\n        return true;\n    }\n    return false;\n}\n\n// Returns true if we handled it, false if the browser should.\nexport function process_enter_key(e) {\n    if ($(\".dropdown.open\").length && $(e.target).attr(\"role\") === \"menuitem\") {\n        // on #gear-menu li a[tabindex] elements, force a click and prevent default.\n        // this is because these links do not have an href and so don't force a\n        // default action.\n        e.target.click();\n        return true;\n    }\n\n    if (hotspots.is_open()) {\n        $(e.target).find(\".hotspot.overlay.show .hotspot-confirm\").trigger(\"click\");\n        return false;\n    }\n\n    if (emoji_picker.reactions_popped()) {\n        return emoji_picker.navigate(\"enter\", e);\n    }\n\n    if (handle_popover_events(\"enter\")) {\n        return true;\n    }\n\n    if (overlays.settings_open()) {\n        // On the settings page just let the browser handle\n        // the Enter key for things like submitting forms.\n        return false;\n    }\n\n    if (overlays.streams_open()) {\n        return false;\n    }\n\n    if (processing_text()) {\n        if (stream_list.searching()) {\n            // This is sort of funny behavior, but I think\n            // the intention is that we want it super easy\n            // to close stream search.\n            stream_list.clear_and_hide_search();\n            return true;\n        }\n\n        return false;\n    }\n\n    // This handles when pressing Enter while looking at drafts.\n    // It restores draft that is focused.\n    if (overlays.drafts_open()) {\n        drafts.drafts_handle_events(e, \"enter\");\n        return true;\n    }\n\n    if ($(e.target).attr(\"role\") === \"button\") {\n        e.target.click();\n        return true;\n    }\n\n    // All custom logic for overlays/modals is above; if we're in a\n    // modal at this point, let the browser handle the event.\n    if (overlays.is_modal_open()) {\n        return false;\n    }\n\n    // If we're on a button or a link and have pressed Enter, let the\n    // browser handle the keypress\n    //\n    // This is subtle and here's why: Suppose you have the focus on a\n    // stream name in your left sidebar. j and k will still move your\n    // cursor up and down, but Enter won't reply -- it'll just trigger\n    // the link on the sidebar! So you keep pressing Enter over and\n    // over again. Until you click somewhere or press r.\n    if ($(\"a:focus,button:focus\").length > 0) {\n        return false;\n    }\n\n    if ($(\"#preview_message_area\").is(\":visible\")) {\n        compose.enter_with_preview_open();\n        return true;\n    }\n\n    if (recent_topics_util.is_visible()) {\n        if (e.target === $(\"body\")[0]) {\n            // There's a race when using `Esc` and `Enter` to navigate to\n            // Recent Topics and then navigate to the next topic, wherein\n            // Recent Topics won't have applied focus to its table yet.\n            //\n            // Recent Topics's own navigation just lets `Enter` be\n            // treated as a click on the highlighted message, so we\n            // don't need to do anything there. But if nothing is\n            // focused (say, during the race or after clicking on the\n            // sidebars, it's worth focusing the table so that hitting\n            // `Enter` again will navigate you somewhere.\n            const focus_changed = recent_topics_ui.revive_current_focus();\n            return focus_changed;\n        }\n\n        // Never fall through to opening the compose box to reply.\n        return false;\n    }\n\n    // If we got this far, then we're presumably in the message\n    // view, so in that case \"Enter\" is the hotkey to respond to a message.\n    // Note that \"r\" has same effect, but that is handled in process_hotkey().\n    compose_actions.respond_to_message({trigger: \"hotkey enter\"});\n    return true;\n}\n\nexport function process_ctrl_enter_key() {\n    if ($(\"#preview_message_area\").is(\":visible\")) {\n        const ctrl_pressed = true;\n        compose.enter_with_preview_open(ctrl_pressed);\n        return true;\n    }\n\n    return false;\n}\n\nexport function process_tab_key() {\n    // Returns true if we handled it, false if the browser should.\n    // TODO: See if browsers like Safari can now handle tabbing correctly\n    // without our intervention.\n\n    let $message_edit_form;\n\n    const $focused_message_edit_content = $(\".message_edit_content:focus\");\n    if ($focused_message_edit_content.length > 0) {\n        $message_edit_form = $focused_message_edit_content.closest(\".message_edit_form\");\n        // Open message edit forms either have a save button or a close button, but not both.\n        $message_edit_form.find(\".message_edit_save,.message_edit_close\").trigger(\"focus\");\n        return true;\n    }\n\n    const $focused_message_edit_save = $(\".message_edit_save:focus\");\n    if ($focused_message_edit_save.length > 0) {\n        $message_edit_form = $focused_message_edit_save.closest(\".message_edit_form\");\n        $message_edit_form.find(\".message_edit_cancel\").trigger(\"focus\");\n        return true;\n    }\n\n    if (emoji_picker.reactions_popped()) {\n        return emoji_picker.navigate(\"tab\");\n    }\n\n    return false;\n}\n\nexport function process_shift_tab_key() {\n    // Returns true if we handled it, false if the browser should.\n    // TODO: See if browsers like Safari can now handle tabbing correctly\n    // without our intervention.\n\n    if ($(\"#compose-send-button\").is(\":focus\")) {\n        // Shift-Tab: go back to content textarea and restore\n        // cursor position.\n        ui.restore_compose_cursor();\n        return true;\n    }\n\n    // Shift-Tabbing from the edit message cancel button takes you to save.\n    if ($(\".message_edit_cancel:focus\").length > 0) {\n        $(\".message_edit_save\").trigger(\"focus\");\n        return true;\n    }\n\n    // Shift-Tabbing from the edit message save button takes you to the content.\n    const $focused_message_edit_save = $(\".message_edit_save:focus\");\n    if ($focused_message_edit_save.length > 0) {\n        $focused_message_edit_save\n            .closest(\".message_edit_form\")\n            .find(\".message_edit_content\")\n            .trigger(\"focus\");\n        return true;\n    }\n\n    // Shift-Tabbing from emoji catalog/search results takes you back to search textbox.\n    if (emoji_picker.reactions_popped()) {\n        return emoji_picker.navigate(\"shift_tab\");\n    }\n\n    return false;\n}\n\n// Process a keydown or keypress event.\n//\n// Returns true if we handled it, false if the browser should.\nexport function process_hotkey(e, hotkey) {\n    const event_name = hotkey.name;\n\n    // This block needs to be before the `Tab` handler.\n    switch (event_name) {\n        case \"up_arrow\":\n        case \"down_arrow\":\n        case \"left_arrow\":\n        case \"right_arrow\":\n        case \"page_down\":\n        case \"page_up\":\n        case \"vim_up\":\n        case \"vim_down\":\n        case \"vim_left\":\n        case \"vim_right\":\n        case \"tab\":\n        case \"shift_tab\":\n        case \"open_recent_topics\":\n            if (recent_topics_util.is_in_focus()) {\n                return recent_topics_ui.change_focused_element($(e.target), event_name);\n            }\n    }\n\n    // We handle the most complex keys in their own functions.\n    switch (event_name) {\n        case \"escape\":\n            return process_escape_key(e);\n        case \"enter\":\n            return process_enter_key(e);\n        case \"ctrl_enter\":\n            return process_ctrl_enter_key(e);\n        case \"tab\":\n            return process_tab_key();\n        case \"shift_tab\":\n            return process_shift_tab_key();\n    }\n\n    // This block needs to be before the open modals check, because\n    // the \"user status\" modal can show the emoji picker.\n    if (emoji_picker.reactions_popped()) {\n        return emoji_picker.navigate(event_name);\n    }\n\n    if (overlays.is_modal_open()) {\n        return false;\n    }\n\n    // TODO: break out specific handlers for up_arrow,\n    //       down_arrow, and backspace\n    switch (event_name) {\n        case \"up_arrow\":\n        case \"down_arrow\":\n        case \"vim_up\":\n        case \"vim_down\":\n        case \"backspace\":\n        case \"delete\":\n            if (overlays.drafts_open()) {\n                drafts.drafts_handle_events(e, event_name);\n                return true;\n            }\n    }\n\n    if (hotkey.message_view_only && overlays.is_active()) {\n        if (processing_text()) {\n            return false;\n        }\n        if (event_name === \"narrow_by_topic\" && overlays.streams_open()) {\n            stream_settings_ui.keyboard_sub();\n            return true;\n        }\n        if (event_name === \"show_lightbox\" && overlays.lightbox_open()) {\n            overlays.close_overlay(\"lightbox\");\n            return true;\n        }\n        if (event_name === \"open_drafts\" && overlays.drafts_open()) {\n            overlays.close_overlay(\"drafts\");\n            return true;\n        }\n        return false;\n    }\n\n    if (hotkey.message_view_only && gear_menu.is_open()) {\n        return false;\n    }\n\n    if (overlays.settings_open() && !popovers.user_info_popped()) {\n        return false;\n    }\n\n    if (hotspots.is_open()) {\n        return false;\n    }\n\n    if (overlays.info_overlay_open()) {\n        if (event_name === \"show_shortcuts\") {\n            overlays.close_active();\n            return true;\n        }\n        return false;\n    }\n\n    if ((event_name === \"up_arrow\" || event_name === \"down_arrow\") && overlays.streams_open()) {\n        return stream_settings_ui.switch_rows(event_name);\n    }\n\n    if (event_name === \"up_arrow\" && list_util.inside_list(e)) {\n        list_util.go_up(e);\n        return true;\n    }\n\n    if (event_name === \"down_arrow\" && list_util.inside_list(e)) {\n        list_util.go_down(e);\n        return true;\n    }\n\n    if (menu_dropdown_hotkeys.has(event_name) && handle_popover_events(event_name)) {\n        return true;\n    }\n\n    // The next two sections date back to 00445c84 and are Mac/Chrome-specific,\n    // and they should possibly be eliminated in favor of keeping standard\n    // browser behavior.\n    if (event_name === \"backspace\" && $(\"#compose-send-button\").is(\":focus\")) {\n        // Ignore Backspace; don't navigate back a page.\n        return true;\n    }\n\n    if (event_name === \"narrow_to_compose_target\") {\n        narrow.to_compose_target();\n        return true;\n    }\n\n    // Process hotkeys specially when in an input, select, textarea, or send button\n    if (processing_text()) {\n        // Note that there is special handling for Enter/Esc too, but\n        // we handle this in other functions.\n\n        if (event_name === \"left_arrow\" && compose_state.focus_in_empty_compose()) {\n            message_edit.edit_last_sent_message();\n            return true;\n        }\n\n        if (\n            (event_name === \"up_arrow\" ||\n                event_name === \"down_arrow\" ||\n                event_name === \"page_up\" ||\n                event_name === \"page_down\" ||\n                event_name === \"home\" ||\n                event_name === \"end\") &&\n            compose_state.focus_in_empty_compose()\n        ) {\n            compose_actions.cancel();\n            // don't return, as we still want it to be picked up by the code below\n        } else {\n            switch (event_name) {\n                case \"page_up\":\n                    $(\":focus\").caret(0).animate({scrollTop: 0}, \"fast\");\n                    return true;\n                case \"page_down\": {\n                    // so that it always goes to the end of the text box.\n                    const height = $(\":focus\")[0].scrollHeight;\n                    $(\":focus\")\n                        .caret(Number.POSITIVE_INFINITY)\n                        .animate({scrollTop: height}, \"fast\");\n                    return true;\n                }\n                case \"search_with_k\":\n                    // Do nothing; this allows one to use Ctrl+K inside compose.\n                    break;\n                case \"star_message\":\n                    // Do nothing; this allows one to use Ctrl+S inside compose.\n                    break;\n                default:\n                    // Let the browser handle the key normally.\n                    return false;\n            }\n        }\n    }\n\n    if (event_name === \"left_arrow\") {\n        if (overlays.lightbox_open()) {\n            lightbox.prev();\n            return true;\n        } else if (overlays.streams_open()) {\n            stream_settings_ui.toggle_view(event_name);\n            return true;\n        }\n\n        message_edit.edit_last_sent_message();\n        return true;\n    }\n\n    if (event_name === \"right_arrow\") {\n        if (overlays.lightbox_open()) {\n            lightbox.next();\n            return true;\n        } else if (overlays.streams_open()) {\n            stream_settings_ui.toggle_view(event_name);\n            return true;\n        }\n    }\n\n    // Prevent navigation in the background when the overlays are active.\n    if (overlays.is_overlay_or_modal_open()) {\n        if (event_name === \"view_selected_stream\" && overlays.streams_open()) {\n            stream_settings_ui.view_stream();\n            return true;\n        }\n        if (\n            event_name === \"n_key\" &&\n            overlays.streams_open() &&\n            (settings_data.user_can_create_private_streams() ||\n                settings_data.user_can_create_public_streams() ||\n                settings_data.user_can_create_web_public_streams())\n        ) {\n            stream_settings_ui.open_create_stream();\n            return true;\n        }\n        return false;\n    }\n\n    // Shortcuts that don't require a message\n    switch (event_name) {\n        case \"narrow_private\":\n            return do_narrow_action((target, opts) => {\n                narrow.by(\"is\", \"private\", opts);\n            });\n        case \"query_streams\":\n            stream_list.initiate_search();\n            return true;\n        case \"query_users\":\n            activity.initiate_search();\n            return true;\n        case \"search\":\n        case \"search_with_k\":\n            search.initiate_search();\n            return true;\n        case \"gear_menu\":\n            gear_menu.open();\n            return true;\n        case \"show_shortcuts\": // Show keyboard shortcuts page\n            browser_history.go_to_location(\"keyboard-shortcuts\");\n            return true;\n        case \"stream_cycle_backward\":\n            narrow.stream_cycle_backward();\n            return true;\n        case \"stream_cycle_forward\":\n            narrow.stream_cycle_forward();\n            return true;\n        case \"n_key\":\n            narrow.narrow_to_next_topic();\n            return true;\n        case \"p_key\":\n            narrow.narrow_to_next_pm_string();\n            return true;\n        case \"open_recent_topics\":\n            browser_history.go_to_location(\"#recent\");\n            return true;\n        case \"all_messages\":\n            browser_history.go_to_location(\"#all_messages\");\n            return true;\n    }\n\n    // Shortcuts that are useful with an empty message feed, like opening compose.\n    switch (event_name) {\n        case \"reply_message\": // 'r': respond to message\n            // Note that you can \"Enter\" to respond to messages as well,\n            // but that is handled in process_enter_key().\n            compose_actions.respond_to_message({trigger: \"hotkey\"});\n            return true;\n        case \"compose\": // 'c': compose\n            if (!compose_state.composing()) {\n                compose_actions.start(\"stream\", {trigger: \"compose_hotkey\"});\n            }\n            return true;\n        case \"compose_private_message\":\n            if (!compose_state.composing()) {\n                compose_actions.start(\"private\", {trigger: \"compose_hotkey\"});\n            }\n            return true;\n        case \"open_drafts\":\n            browser_history.go_to_location(\"drafts\");\n            return true;\n        case \"C_deprecated\":\n            deprecated_feature_notice.maybe_show_deprecation_notice(\"C\");\n            return true;\n        case \"star_deprecated\":\n            deprecated_feature_notice.maybe_show_deprecation_notice(\"*\");\n            return true;\n    }\n\n    // We don't want hotkeys below this to work when recent topics is\n    // open. These involve hotkeys that can only be performed on a message.\n    if (recent_topics_util.is_visible()) {\n        return false;\n    }\n\n    if (message_lists.current.empty()) {\n        return false;\n    }\n\n    // Shortcuts for navigation and other applications that require a\n    // nonempty message feed but do not depend on the selected message.\n    switch (event_name) {\n        case \"down_arrow\":\n        case \"vim_down\":\n            message_scroll.mark_keyboard_triggered_current_scroll();\n            navigate.down(true); // with_centering\n            return true;\n        case \"up_arrow\":\n        case \"vim_up\":\n            message_scroll.mark_keyboard_triggered_current_scroll();\n            navigate.up();\n            return true;\n        case \"home\":\n            message_scroll.mark_keyboard_triggered_current_scroll();\n            navigate.to_home();\n            return true;\n        case \"end\":\n        case \"G_end\":\n            message_scroll.mark_keyboard_triggered_current_scroll();\n            navigate.to_end();\n            return true;\n        case \"page_up\":\n        case \"vim_page_up\":\n        case \"shift_spacebar\":\n            message_scroll.mark_keyboard_triggered_current_scroll();\n            navigate.page_up();\n            return true;\n        case \"page_down\":\n        case \"vim_page_down\":\n        case \"spacebar\":\n            message_scroll.mark_keyboard_triggered_current_scroll();\n            navigate.page_down();\n            return true;\n        case \"copy_with_c\":\n            copy_and_paste.copy_handler();\n            return true;\n    }\n\n    if (\n        // Allow UI only features for spectators which they can perform.\n        page_params.is_spectator &&\n        ![\"narrow_by_topic\", \"narrow_by_recipient\", \"show_lightbox\", \"show_sender_info\"].includes(\n            event_name,\n        )\n    ) {\n        spectators.login_to_access();\n        return true;\n    }\n\n    const msg = message_lists.current.selected_message();\n    // Shortcuts that operate on a message\n    switch (event_name) {\n        case \"message_actions\":\n            return popover_menus.toggle_message_actions_menu(msg);\n        case \"star_message\":\n            message_flags.toggle_starred_and_update_server(msg);\n            return true;\n        case \"narrow_by_recipient\":\n            return do_narrow_action(narrow.by_recipient);\n        case \"narrow_by_topic\":\n            return do_narrow_action(narrow.by_topic);\n        case \"respond_to_author\": // 'R': respond to author\n            compose_actions.respond_to_message({reply_type: \"personal\", trigger: \"hotkey pm\"});\n            return true;\n        case \"compose_reply_with_mention\": // '@': respond to message with mention to author\n            compose_actions.reply_with_mention({trigger: \"hotkey\"});\n            return true;\n        case \"show_lightbox\":\n            lightbox.show_from_selected_message();\n            return true;\n        case \"show_sender_info\":\n            popovers.show_sender_info();\n            return true;\n        case \"toggle_reactions_popover\": // ':': open reactions to message\n            reactions.open_reactions_popover();\n            return true;\n        case \"thumbs_up_emoji\": {\n            // '+': reacts with thumbs up emoji on selected message\n            // Use canonical name.\n            const thumbs_up_emoji_code = \"1f44d\";\n            const canonical_name = emoji.get_emoji_name(thumbs_up_emoji_code);\n            reactions.toggle_emoji_reaction(msg.id, canonical_name);\n            return true;\n        }\n        case \"toggle_topic_mute\":\n            muted_topics_ui.toggle_topic_mute(msg);\n            return true;\n        case \"toggle_message_collapse\":\n            condense.toggle_collapse(msg);\n            return true;\n        case \"mark_unread\":\n            unread_ops.mark_as_unread_from_here(msg.id);\n            return true;\n        case \"compose_quote_reply\": // > : respond to selected message with quote\n            compose_actions.quote_and_reply({trigger: \"hotkey\"});\n            return true;\n        case \"edit_message\": {\n            const $row = message_lists.current.get_row(msg.id);\n            message_edit.start($row);\n            return true;\n        }\n        case \"move_message\": {\n            if (!message_edit.can_move_message(msg)) {\n                return false;\n            }\n\n            stream_popover.build_move_topic_to_stream_popover(msg.stream_id, msg.topic, msg);\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/* We register both a keydown and a keypress function because\n   we want to intercept PgUp/PgDn, Esc, etc, and process them\n   as they happen on the keyboard. However, if we processed\n   letters/numbers in keydown, we wouldn't know what the case of\n   the letters were.\n\n   We want case-sensitive hotkeys (such as in the case of r vs R)\n   so we bail in .keydown if the event is a letter or number and\n   instead just let keypress go for it. */\n\nexport function process_keydown(e) {\n    activity.set_new_user_input(true);\n    const hotkey = get_keydown_hotkey(e);\n    if (!hotkey) {\n        return false;\n    }\n    return process_hotkey(e, hotkey);\n}\n\nexport function process_keypress(e) {\n    const hotkey = get_keypress_hotkey(e);\n    if (!hotkey) {\n        return false;\n    }\n    return process_hotkey(e, hotkey);\n}\n\nexport function initialize() {\n    $(document).on(\"keydown\", (e) => {\n        if (process_keydown(e)) {\n            e.preventDefault();\n        }\n    });\n\n    $(document).on(\"keypress\", (e) => {\n        if (process_keypress(e)) {\n            e.preventDefault();\n        }\n    });\n}\n","import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport render_hotspot_icon from \"../templates/hotspot_icon.hbs\";\nimport render_hotspot_overlay from \"../templates/hotspot_overlay.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport {page_params} from \"./page_params\";\nimport * as popovers from \"./popovers\";\n\n// popover orientations\nconst TOP = \"top\";\nconst LEFT = \"left\";\nconst RIGHT = \"right\";\nconst BOTTOM = \"bottom\";\nconst LEFT_BOTTOM = \"left_bottom\";\nconst VIEWPORT_CENTER = \"viewport_center\";\n\n// popover orientation can optionally be fixed here (property: popover),\n// otherwise popovers.compute_placement is used to compute orientation\nconst HOTSPOT_LOCATIONS = new Map([\n    [\n        \"intro_streams\",\n        {\n            element: \"#streams_header .sidebar-title\",\n            offset_x: 1.35,\n            offset_y: 0.39,\n        },\n    ],\n    [\n        \"intro_topics\",\n        {\n            element: \".topic-name\",\n            offset_x: 0.8,\n            offset_y: 0.39,\n        },\n    ],\n    [\n        \"intro_gear\",\n        {\n            element: \"#settings-dropdown\",\n            offset_x: -0.4,\n            offset_y: 1.2,\n            popover: LEFT_BOTTOM,\n        },\n    ],\n    [\n        \"intro_compose\",\n        {\n            element: \"#left_bar_compose_stream_button_big\",\n            offset_x: 0,\n            offset_y: 0,\n        },\n    ],\n]);\n\n// popover illustration url(s)\nconst WHALE = \"/static/images/hotspots/whale.svg\";\n\nexport function post_hotspot_as_read(hotspot_name) {\n    channel.post({\n        url: \"/json/users/me/hotspots\",\n        data: {hotspot: hotspot_name},\n        error(err) {\n            blueslip.error(err.responseText);\n        },\n    });\n}\n\nfunction place_icon(hotspot) {\n    const $element = $(hotspot.location.element);\n    const $icon = $(`#hotspot_${CSS.escape(hotspot.name)}_icon`);\n\n    if (\n        $element.length === 0 ||\n        $element.css(\"display\") === \"none\" ||\n        !$element.is(\":visible\") ||\n        $element.is(\":hidden\")\n    ) {\n        $icon.css(\"display\", \"none\");\n        return false;\n    }\n\n    const offset = {\n        top: $element.outerHeight() * hotspot.location.offset_y,\n        left: $element.outerWidth() * hotspot.location.offset_x,\n    };\n    const client_rect = $element.get(0).getBoundingClientRect();\n    const placement = {\n        top: client_rect.top + offset.top,\n        left: client_rect.left + offset.left,\n    };\n    $icon.css(\"display\", \"block\");\n    $icon.css(placement);\n    return true;\n}\n\nfunction place_popover(hotspot) {\n    if (!hotspot.location.element) {\n        return;\n    }\n\n    const popover_width = $(\n        `#hotspot_${CSS.escape(hotspot.name)}_overlay .hotspot-popover`,\n    ).outerWidth();\n    const popover_height = $(\n        `#hotspot_${CSS.escape(hotspot.name)}_overlay .hotspot-popover`,\n    ).outerHeight();\n    const el_width = $(hotspot.location.element).outerWidth();\n    const el_height = $(hotspot.location.element).outerHeight();\n    const arrow_offset = 20;\n\n    let popover_offset;\n    let arrow_placement;\n    const orientation =\n        hotspot.location.popover ||\n        popovers.compute_placement(\n            $(hotspot.location.element),\n            popover_height,\n            popover_width,\n            false,\n        );\n\n    switch (orientation) {\n        case TOP:\n            popover_offset = {\n                top: -(popover_height + arrow_offset),\n                left: el_width / 2 - popover_width / 2,\n            };\n            arrow_placement = \"bottom\";\n            break;\n\n        case LEFT:\n            popover_offset = {\n                top: el_height / 2 - popover_height / 2,\n                left: -(popover_width + arrow_offset),\n            };\n            arrow_placement = \"right\";\n            break;\n\n        case BOTTOM:\n            popover_offset = {\n                top: el_height + arrow_offset,\n                left: el_width / 2 - popover_width / 2,\n            };\n            arrow_placement = \"top\";\n            break;\n\n        case RIGHT:\n            popover_offset = {\n                top: el_height / 2 - popover_height / 2,\n                left: el_width + arrow_offset,\n            };\n            arrow_placement = \"left\";\n            break;\n\n        case LEFT_BOTTOM:\n            popover_offset = {\n                top: 0,\n                left: -(popover_width + arrow_offset / 2),\n            };\n            arrow_placement = \"\";\n            break;\n\n        case VIEWPORT_CENTER:\n            popover_offset = {\n                top: el_height / 2,\n                left: el_width / 2,\n            };\n            arrow_placement = \"\";\n            break;\n\n        default:\n            blueslip.error(\"Invalid popover placement value for hotspot '\" + hotspot.name + \"'\");\n            break;\n    }\n\n    // position arrow\n    arrow_placement = \"arrow-\" + arrow_placement;\n    $(`#hotspot_${CSS.escape(hotspot.name)}_overlay .hotspot-popover`)\n        .removeClass(\"arrow-top arrow-left arrow-bottom arrow-right\")\n        .addClass(arrow_placement);\n\n    // position popover\n    let popover_placement;\n    if (orientation === VIEWPORT_CENTER) {\n        popover_placement = {\n            top: \"45%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n        };\n    } else {\n        const client_rect = $(hotspot.location.element).get(0).getBoundingClientRect();\n        popover_placement = {\n            top: client_rect.top + popover_offset.top,\n            left: client_rect.left + popover_offset.left,\n            transform: \"\",\n        };\n    }\n\n    $(`#hotspot_${CSS.escape(hotspot.name)}_overlay .hotspot-popover`).css(popover_placement);\n}\n\nfunction insert_hotspot_into_DOM(hotspot) {\n    const hotspot_overlay_HTML = render_hotspot_overlay({\n        name: hotspot.name,\n        title: hotspot.title,\n        description: hotspot.description,\n        img: WHALE,\n    });\n\n    const hotspot_icon_HTML = render_hotspot_icon({\n        name: hotspot.name,\n    });\n\n    setTimeout(() => {\n        $(\"body\").prepend(hotspot_icon_HTML);\n        $(\"body\").prepend(hotspot_overlay_HTML);\n        if (place_icon(hotspot)) {\n            place_popover(hotspot);\n        }\n\n        // reposition on any event that might update the UI\n        for (const event_name of [\"resize\", \"scroll\", \"onkeydown\", \"click\"]) {\n            window.addEventListener(\n                event_name,\n                _.debounce(() => {\n                    if (place_icon(hotspot)) {\n                        place_popover(hotspot);\n                    }\n                }, 10),\n                true,\n            );\n        }\n    }, hotspot.delay * 1000);\n}\n\nexport function is_open() {\n    return $(\".hotspot.overlay\").hasClass(\"show\");\n}\n\nexport function close_hotspot_icon(elem) {\n    $(elem).animate(\n        {opacity: 0},\n        {\n            duration: 300,\n            done: function () {\n                $(elem).css({display: \"none\"});\n            }.bind(elem),\n        },\n    );\n}\n\nfunction close_read_hotspots(new_hotspots) {\n    const unwanted_hotspots = _.difference(\n        Array.from(HOTSPOT_LOCATIONS.keys()),\n        new_hotspots.map((hotspot) => hotspot.name),\n    );\n\n    for (const hotspot_name of unwanted_hotspots) {\n        close_hotspot_icon($(`#hotspot_${CSS.escape(hotspot_name)}_icon`));\n    }\n}\n\nexport function load_new(new_hotspots) {\n    close_read_hotspots(new_hotspots);\n    for (const hotspot of new_hotspots) {\n        hotspot.location = HOTSPOT_LOCATIONS.get(hotspot.name);\n        insert_hotspot_into_DOM(hotspot);\n    }\n}\n\nexport function initialize() {\n    load_new(page_params.hotspots);\n}\n","import _ from \"lodash\";\n\nimport * as people from \"./people\";\n\nconst huddle_timestamps = new Map();\n\nexport function clear_for_testing() {\n    huddle_timestamps.clear();\n}\n\nexport function process_loaded_messages(messages) {\n    for (const message of messages) {\n        const huddle_string = people.huddle_string(message);\n\n        if (huddle_string) {\n            const old_timestamp = huddle_timestamps.get(huddle_string);\n\n            if (!old_timestamp || old_timestamp < message.timestamp) {\n                huddle_timestamps.set(huddle_string, message.timestamp);\n            }\n        }\n    }\n}\n\nexport function get_huddles() {\n    let huddles = Array.from(huddle_timestamps.keys());\n    huddles = _.sortBy(huddles, (huddle) => huddle_timestamps.get(huddle));\n    return huddles.reverse();\n}\n","import $ from \"jquery\";\n\nimport render_keyboard_shortcut from \"../templates/keyboard_shortcuts.hbs\";\nimport render_markdown_help from \"../templates/markdown_help.hbs\";\nimport render_search_operator from \"../templates/search_operators.hbs\";\n\nimport * as browser_history from \"./browser_history\";\nimport * as common from \"./common\";\nimport * as components from \"./components\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as markdown from \"./markdown\";\nimport * as overlays from \"./overlays\";\nimport * as rendered_markdown from \"./rendered_markdown\";\nimport * as ui from \"./ui\";\nimport {user_settings} from \"./user_settings\";\nimport * as util from \"./util\";\n\n// Make it explicit that our toggler is undefined until\n// set_up_toggler is called.\nexport let toggler;\n\nconst markdown_help_rows = [\n    {\n        markdown: \"*italic*\",\n        usage_html: \"(or <kbd>Ctrl</kbd>+<kbd>I</kbd>)\",\n    },\n    {\n        markdown: \"**bold**\",\n        usage_html: \"(or <kbd>Ctrl</kbd>+<kbd>B</kbd>)\",\n    },\n    {\n        markdown: \"~~strikethrough~~\",\n    },\n    {\n        markdown: \"[Zulip website](https://zulip.org)\",\n        usage_html: \"(or <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>L</kbd>)\",\n    },\n    {\n        markdown: `\\\n* Milk\n* Tea\n  * Green tea\n  * Black tea\n  * Oolong tea\n* Coffee`,\n    },\n    {\n        markdown: `\\\n1. Milk\n1. Tea\n1. Coffee`,\n    },\n    {\n        markdown: \":heart:\",\n        usage_html:\n            '(and <a href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\" target=\"_blank\" rel=\"noopener noreferrer\">many others</a>, from the <a href=\"https://code.google.com/p/noto/\" target=\"_blank\" rel=\"noopener noreferrer\">Noto Project</a>)',\n    },\n    {\n        markdown: \"@**Joe Smith**\",\n        usage_html: \"(autocompletes from @joe)\",\n        output_html: '<p><span class=\"user-mention\">@Joe Smith</span></p>',\n        effect_html: \"(notifies Joe Smith)\",\n    },\n    {\n        markdown: \"@_**Joe Smith**\",\n        usage_html: \"(autocompletes from @_joe)\",\n        output_html: '<p><span class=\"user-mention\">Joe Smith</span></p>',\n        effect_html: \"(links to profile but doesn't notify Joe Smith)\",\n    },\n    {\n        markdown: \"@**all**\",\n        effect_html: \"(notifies all recipients)\",\n    },\n    {\n        markdown: \"#**streamName**\",\n        output_html: \"<p><a>#streamName</a></p>\",\n        effect_html: \"(links to a stream)\",\n    },\n    {\n        markdown: \"/me is busy working\",\n        output_html: '<p><span class=\"sender_name-in-status\">Iago</span> is busy working</p>',\n    },\n    {\n        markdown: `/poll What did you drink this morning?\nMilk\nTea\nCoffee`,\n        output_html: `\\\n<div class=\"poll-widget\">\n    <h4 class=\"poll-question-header reduced-font-size\">What did you drink this morning?</h4>\n    <i class=\"fa fa-pencil poll-edit-question\"></i>\n    <ul class=\"poll-widget\">\n    <li>\n        <button class=\"poll-vote\">\n            0\n        </button>\n        <span>Milk</span>\n    </li>\n    <li>\n        <button class=\"poll-vote\">\n            0\n        </button>\n        <span>Tea</span>\n    </li>\n    <li>\n        <button class=\"poll-vote\">\n            0\n        </button>\n        <span>Coffee</span>\n    </li>\n    </ul>\n</div>\n`,\n    },\n    {\n        markdown: \"Some inline `code`\",\n    },\n    {\n        markdown: `\\\n\\`\\`\\`\ndef zulip():\n    print \"Zulip\"\n\\`\\`\\``,\n    },\n    {\n        markdown: `\\\n\\`\\`\\`python\ndef zulip():\n    print \"Zulip\"\n\\`\\`\\``,\n        output_html: `\\\n<div class=\"codehilite\"><pre><span class=\"k\">def</span> <span class=\"nf\">zulip</span><span class=\"p\">():</span>\n    <span class=\"k\">print</span> <span class=\"s\">\"Zulip\"</span></pre></div>`,\n    },\n    {\n        note_html: $t_html(\n            {\n                defaultMessage:\n                    \"To add syntax highlighting to a multi-line code block, add the language's <b>first</b> <z-link>Pygments short name</z-link> after the first set of back-ticks. You can also make a code block by indenting each line with 4 spaces.\",\n            },\n            {\n                \"z-link\": (content_html) =>\n                    `<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://pygments.org/docs/lexers/\">${content_html.join(\n                        \"\",\n                    )}</a>`,\n            },\n        ),\n    },\n    {\n        markdown: \"> Quoted\",\n    },\n    {\n        markdown: `\\\n\\`\\`\\`quote\nQuoted block\n\\`\\`\\``,\n    },\n    {\n        markdown: `\\\n\\`\\`\\`spoiler Always visible heading\nThis text won't be visible until the user clicks.\n\\`\\`\\``,\n    },\n    {\n        markdown: \"Some inline math $$ e^{i \\\\pi} + 1 = 0 $$\",\n    },\n    {\n        markdown: `\\\n\\`\\`\\`math\n\\\\int_{0}^{1} f(x) dx\n\\`\\`\\``,\n    },\n    {\n        note_html: $t_html(\n            {\n                defaultMessage:\n                    \"You can also make <z-link>tables</z-link> with this <z-link>Markdown-ish table syntax</z-link>.\",\n            },\n            {\n                \"z-link\": (content_html) =>\n                    `<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet#wiki-tables\">${content_html.join(\n                        \"\",\n                    )}</a>`,\n            },\n        ),\n    },\n];\n\nexport function set_up_toggler() {\n    for (const row of markdown_help_rows) {\n        if (row.markdown && !row.output_html) {\n            const message = {raw_content: row.markdown};\n            markdown.apply_markdown(message);\n            row.output_html = util.clean_user_content_links(message.content);\n        }\n    }\n\n    const $markdown_help = $(render_markdown_help({markdown_help_rows}));\n    $markdown_help.find(\".rendered_markdown\").each(function () {\n        rendered_markdown.update_elements($(this));\n    });\n    $(\".informational-overlays .overlay-body\").append($markdown_help);\n\n    const $search_operators = $(render_search_operator());\n    $(\".informational-overlays .overlay-body\").append($search_operators);\n\n    const $keyboard_shortcuts = $(render_keyboard_shortcut());\n    $(\".informational-overlays .overlay-body\").append($keyboard_shortcuts);\n\n    const opts = {\n        selected: 0,\n        child_wants_focus: true,\n        values: [\n            {label: $t({defaultMessage: \"Keyboard shortcuts\"}), key: \"keyboard-shortcuts\"},\n            {label: $t({defaultMessage: \"Message formatting\"}), key: \"message-formatting\"},\n            {label: $t({defaultMessage: \"Search filters\"}), key: \"search-operators\"},\n        ],\n        callback(name, key) {\n            $(\".overlay-modal\").hide();\n            $(`#${CSS.escape(key)}`).show();\n            ui.get_scroll_element($(`#${CSS.escape(key)}`).find(\".modal-body\")).trigger(\"focus\");\n        },\n    };\n\n    toggler = components.toggle(opts);\n    const $elem = toggler.get();\n    $elem.addClass(\"large allow-overflow\");\n\n    const modals = opts.values.map((item) => {\n        const key = item.key; // e.g. message-formatting\n        const $modal = $(`#${CSS.escape(key)}`).find(\".modal-body\");\n        return $modal;\n    });\n\n    for (const $modal of modals) {\n        ui.get_scroll_element($modal).prop(\"tabindex\", 0);\n        keydown_util.handle({\n            $elem: $modal,\n            handlers: {\n                ArrowLeft: toggler.maybe_go_left,\n                ArrowRight: toggler.maybe_go_right,\n            },\n        });\n    }\n\n    $(\".informational-overlays .overlay-tabs\").append($elem);\n\n    $(\"#go-to-default-view-hotkey-help\").toggleClass(\n        \"notdisplayed\",\n        !user_settings.escape_navigates_to_default_view,\n    );\n    common.adjust_mac_shortcuts(\".hotkeys_table .hotkey kbd\");\n    common.adjust_mac_shortcuts(\"#markdown-instructions kbd\");\n}\n\nexport function show(target) {\n    if (!toggler) {\n        set_up_toggler();\n    }\n\n    const $overlay = $(\".informational-overlays\");\n\n    if (!$overlay.hasClass(\"show\")) {\n        overlays.open_overlay({\n            name: \"informationalOverlays\",\n            $overlay,\n            on_close() {\n                browser_history.exit_overlay();\n            },\n        });\n    }\n\n    if (target) {\n        toggler.goto(target);\n    }\n}\n","// todo: Refactor pills subsystem to use modern javascript classes?\n\nimport $ from \"jquery\";\n\nimport render_input_pill from \"../templates/input_pill.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as compose from \"./compose\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as ui_util from \"./ui_util\";\n\n// See https://zulip.readthedocs.io/en/latest/subsystems/input-pills.html\n\nexport function create(opts) {\n    if (!opts.$container) {\n        blueslip.error(\"Pill needs container.\");\n        return undefined;\n    }\n\n    if (!opts.create_item_from_text) {\n        blueslip.error(\"Pill needs create_item_from_text\");\n        return undefined;\n    }\n\n    if (!opts.get_text_from_item) {\n        blueslip.error(\"Pill needs get_text_from_item\");\n        return undefined;\n    }\n\n    // a stateful object of this `pill_container` instance.\n    // all unique instance information is stored in here.\n    const store = {\n        pills: [],\n        pill_config: opts.pill_config,\n        $parent: opts.$container,\n        $input: opts.$container.find(\".input\").expectOne(),\n        create_item_from_text: opts.create_item_from_text,\n        get_text_from_item: opts.get_text_from_item,\n    };\n\n    // a dictionary of internal functions. Some of these are exposed as well,\n    // and nothing in here should be assumed to be private (due to the passing)\n    // of the `this` arg in the `Function.prototype.bind` use in the prototype.\n    const funcs = {\n        // return the value of the contenteditable input form.\n        value(input_elem) {\n            return input_elem.textContent;\n        },\n\n        // clear the value of the input form.\n        clear(input_elem) {\n            input_elem.textContent = \"\";\n        },\n\n        clear_text() {\n            store.$input.text(\"\");\n        },\n\n        is_pending() {\n            // This function returns true if we have text\n            // in out widget that hasn't been turned into\n            // pills.  We use it to decide things like\n            // whether we're ready to send typing indicators.\n            return store.$input.text().trim() !== \"\";\n        },\n\n        create_item(text) {\n            const existing_items = funcs.items();\n            const item = store.create_item_from_text(text, existing_items);\n\n            if (!item || !item.display_value) {\n                store.$input.addClass(\"shake\");\n                return undefined;\n            }\n\n            return item;\n        },\n\n        // This is generally called by typeahead logic, where we have all\n        // the data we need (as opposed to, say, just a user-typed email).\n        appendValidatedData(item) {\n            if (!item.display_value) {\n                blueslip.error(\"no display_value returned\");\n                return;\n            }\n\n            if (!item.type) {\n                blueslip.error(\"no type defined for the item\");\n                return;\n            }\n\n            const payload = {\n                item,\n            };\n\n            store.pills.push(payload);\n\n            const has_image = item.img_src !== undefined;\n\n            const opts = {\n                display_value: item.display_value,\n                has_image,\n                deactivated: item.deactivated,\n            };\n\n            if (has_image) {\n                opts.img_src = item.img_src;\n            }\n\n            if (store.pill_config?.show_user_status_emoji === true) {\n                const has_status = item.status_emoji_info !== undefined;\n                if (has_status) {\n                    opts.status_emoji_info = item.status_emoji_info;\n                }\n                opts.has_status = has_status;\n            }\n\n            if (typeof store.onPillCreate === \"function\") {\n                store.onPillCreate();\n            }\n\n            const pill_html = render_input_pill(opts);\n            payload.$element = $(pill_html);\n            store.$input.before(payload.$element);\n        },\n\n        // this appends a pill to the end of the container but before the\n        // input block.\n        appendPill(value) {\n            if (value.length === 0) {\n                return true;\n            }\n            if (value.match(\",\")) {\n                funcs.insertManyPills(value);\n                return false;\n            }\n\n            const payload = this.create_item(value);\n            // if the pill object is undefined, then it means the pill was\n            // rejected so we should return out of this.\n            if (!payload) {\n                return false;\n            }\n\n            this.appendValidatedData(payload);\n            return true;\n        },\n\n        // this searches given the DOM node for a pill, removes the node\n        // from the DOM, removes it from the array and returns it.\n        // this would generally be used for DOM-provoked actions, such as a user\n        // clicking on a pill to remove it.\n        removePill(element) {\n            let idx;\n            for (let x = 0; x < store.pills.length; x += 1) {\n                if (store.pills[x].$element[0] === element) {\n                    idx = x;\n                }\n            }\n\n            if (typeof idx === \"number\") {\n                store.pills[idx].$element.remove();\n                const pill = store.pills.splice(idx, 1);\n                if (typeof store.removePillFunction === \"function\") {\n                    store.removePillFunction(pill);\n                }\n\n                return pill;\n            }\n\n            /* istanbul ignore next */\n            return undefined;\n        },\n\n        // this will remove the last pill in the container -- by default tied\n        // to the \"Backspace\" key when the value of the input is empty.\n        // If quiet is a truthy value, the event handler associated with the\n        // pill will not be evaluated. This is useful when using clear to reset\n        // the pills.\n        removeLastPill(quiet) {\n            const pill = store.pills.pop();\n\n            if (pill) {\n                pill.$element.remove();\n                if (!quiet && typeof store.removePillFunction === \"function\") {\n                    store.removePillFunction(pill);\n                }\n            }\n        },\n\n        removeAllPills(quiet) {\n            while (store.pills.length > 0) {\n                this.removeLastPill(quiet);\n            }\n\n            this.clear(store.$input[0]);\n        },\n\n        insertManyPills(pills) {\n            if (typeof pills === \"string\") {\n                pills = pills.split(/,/g).map((pill) => pill.trim());\n            }\n\n            // this is an array to push all the errored values to, so it's drafts\n            // of pills for the user to fix.\n            const drafts = pills.filter(\n                (pill) =>\n                    // if this returns `false`, it errored and we should push it to\n                    // the draft pills.\n                    funcs.appendPill(pill) === false,\n            );\n\n            store.$input.text(drafts.join(\", \"));\n            // when using the `text` insertion feature with jQuery the caret is\n            // placed at the beginning of the input field, so this moves it to\n            // the end.\n            ui_util.place_caret_at_end(store.$input[0]);\n\n            // this sends a flag if the operation wasn't completely successful,\n            // which in this case is defined as some of the pills not autofilling\n            // correctly.\n            return drafts.length === 0;\n        },\n\n        getByElement(element) {\n            return store.pills.find((pill) => pill.$element[0] === element);\n        },\n\n        _get_pills_for_testing() {\n            return store.pills;\n        },\n\n        items() {\n            return store.pills.map((pill) => pill.item);\n        },\n\n        createPillonPaste() {\n            if (typeof store.createPillonPaste === \"function\") {\n                return store.createPillonPaste();\n            }\n            return true;\n        },\n    };\n\n    {\n        store.$parent.on(\"keydown\", \".input\", (e) => {\n            if (keydown_util.is_enter_event(e)) {\n                // regardless of the value of the input, the ENTER keyword\n                // should be ignored in favor of keeping content to one line\n                // always.\n                e.preventDefault();\n\n                // if there is input, grab the input, make a pill from it,\n                // and append the pill, then clear the input.\n                const value = funcs.value(e.target).trim();\n                if (value.length > 0) {\n                    // append the pill and by proxy create the pill object.\n                    const ret = funcs.appendPill(value);\n\n                    // if the pill to append was rejected, no need to clear the\n                    // input; it may have just been a typo or something close but\n                    // incorrect.\n                    if (ret !== false) {\n                        // clear the input.\n                        funcs.clear(e.target);\n                        e.stopPropagation();\n                    }\n                }\n\n                return;\n            }\n\n            // if the user backspaces and there is input, just do normal char\n            // deletion, otherwise delete the last pill in the sequence.\n            if (\n                e.key === \"Backspace\" &&\n                (funcs.value(e.target).length === 0 || window.getSelection().anchorOffset === 0)\n            ) {\n                e.preventDefault();\n                funcs.removeLastPill();\n\n                return;\n            }\n\n            // if one is on the \".input\" element and back/left arrows, then it\n            // should switch to focus the last pill in the list.\n            // the rest of the events then will be taken care of in the function\n            // below that handles events on the \".pill\" class.\n            if (e.key === \"ArrowLeft\" && window.getSelection().anchorOffset === 0) {\n                store.$parent.find(\".pill\").last().trigger(\"focus\");\n            }\n\n            // Typing of the comma is prevented if the last field doesn't validate,\n            // as well as when the new pill is created.\n            if (e.key === \",\") {\n                // if the pill is successful, it will create the pill and clear\n                // the input.\n                if (funcs.appendPill(store.$input.text().trim()) !== false) {\n                    funcs.clear(store.$input[0]);\n                }\n                e.preventDefault();\n\n                return;\n            }\n        });\n\n        // handle events while hovering on \".pill\" elements.\n        // the three primary events are next, previous, and delete.\n        store.$parent.on(\"keydown\", \".pill\", (e) => {\n            const $pill = store.$parent.find(\".pill:focus\");\n\n            switch (e.key) {\n                case \"ArrowLeft\":\n                    $pill.prev().trigger(\"focus\");\n                    break;\n                case \"ArrowRight\":\n                    $pill.next().trigger(\"focus\");\n                    break;\n                case \"Backspace\": {\n                    const $next = $pill.next();\n                    funcs.removePill($pill[0]);\n                    $next.trigger(\"focus\");\n                    // the \"Backspace\" key in Firefox will go back a page if you do\n                    // not prevent it.\n                    e.preventDefault();\n                    break;\n                }\n            }\n        });\n\n        // when the shake animation is applied to the \".input\" on invalid input,\n        // we want to remove the class when finished automatically.\n        store.$parent.on(\"animationend\", \".input\", function () {\n            $(this).removeClass(\"shake\");\n        });\n\n        // replace formatted input with plaintext to allow for sane copy-paste\n        // actions.\n        store.$parent.on(\"paste\", \".input\", (e) => {\n            e.preventDefault();\n\n            // get text representation of clipboard\n            const text = (e.originalEvent || e).clipboardData.getData(\"text/plain\");\n\n            // insert text manually\n            document.execCommand(\"insertText\", false, text);\n\n            if (funcs.createPillonPaste()) {\n                funcs.insertManyPills(store.$input.text().trim());\n            }\n        });\n\n        // when the \"×\" is clicked on a pill, it should delete that pill and then\n        // select the next pill (or input).\n        store.$parent.on(\"click\", \".exit\", function (e) {\n            e.stopPropagation();\n            const $pill = $(this).closest(\".pill\");\n            const $next = $pill.next();\n\n            funcs.removePill($pill[0]);\n            $next.trigger(\"focus\");\n\n            compose.update_on_recipient_change();\n        });\n\n        store.$parent.on(\"click\", function (e) {\n            if ($(e.target).is(\".pill-container\")) {\n                $(this).find(\".input\").trigger(\"focus\");\n            }\n        });\n\n        store.$parent.on(\"copy\", \".pill\", (e) => {\n            const $element = store.$parent.find(\":focus\");\n            const data = funcs.getByElement($element[0]);\n            e.originalEvent.clipboardData.setData(\n                \"text/plain\",\n                store.get_text_from_item(data.item),\n            );\n            e.preventDefault();\n        });\n    }\n\n    // the external, user-accessible prototype.\n    const prototype = {\n        appendValue: funcs.appendPill.bind(funcs),\n        appendValidatedData: funcs.appendValidatedData.bind(funcs),\n\n        getByElement: funcs.getByElement,\n        items: funcs.items,\n\n        onPillCreate(callback) {\n            store.onPillCreate = callback;\n        },\n\n        onPillRemove(callback) {\n            store.removePillFunction = callback;\n        },\n\n        createPillonPaste(callback) {\n            store.createPillonPaste = callback;\n        },\n\n        clear: funcs.removeAllPills.bind(funcs),\n        clear_text: funcs.clear_text,\n        is_pending: funcs.is_pending,\n        _get_pills_for_testing: funcs._get_pills_for_testing,\n    };\n\n    return prototype;\n}\n","import autosize from \"autosize\";\nimport ClipboardJS from \"clipboard\";\nimport {add} from \"date-fns\";\nimport $ from \"jquery\";\n\nimport copy_invite_link from \"../templates/copy_invite_link.hbs\";\nimport render_invitation_failed_error from \"../templates/invitation_failed_error.hbs\";\nimport render_invite_subscription from \"../templates/invite_subscription.hbs\";\nimport render_invite_user from \"../templates/invite_user.hbs\";\nimport render_settings_dev_env_email_access from \"../templates/settings/dev_env_email_access.hbs\";\n\nimport * as browser_history from \"./browser_history\";\nimport * as channel from \"./channel\";\nimport * as common from \"./common\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\nimport * as settings_config from \"./settings_config\";\nimport * as stream_data from \"./stream_data\";\nimport * as ui from \"./ui\";\nimport * as ui_report from \"./ui_report\";\nimport {user_settings} from \"./user_settings\";\nimport * as util from \"./util\";\n\nlet custom_expiration_time_input = 10;\nlet custom_expiration_time_unit = \"days\";\n\nfunction reset_error_messages() {\n    $(\"#invite_status\").hide().text(\"\").removeClass(common.status_classes);\n    $(\"#multiuse_invite_status\").hide().text(\"\").removeClass(common.status_classes);\n\n    if (page_params.development_environment) {\n        $(\"#dev_env_msg\").hide().text(\"\").removeClass(common.status_classes);\n    }\n}\n\nfunction get_common_invitation_data() {\n    const invite_as = Number.parseInt($(\"#invite_as\").val(), 10);\n    let expires_in = $(\"#expires_in\").val();\n    // See settings_config.expires_in_values for why we do this conversion.\n    if (expires_in === \"null\") {\n        expires_in = JSON.stringify(null);\n    } else if (expires_in === \"custom\") {\n        expires_in = Number.parseFloat(get_expiration_time_in_minutes());\n    } else {\n        expires_in = Number.parseFloat($(\"#expires_in\").val());\n    }\n\n    const stream_ids = [];\n    $(\"#invite-stream-checkboxes input:checked\").each(function () {\n        const stream_id = Number.parseInt($(this).val(), 10);\n        stream_ids.push(stream_id);\n    });\n    const data = {\n        csrfmiddlewaretoken: $('input[name=\"csrfmiddlewaretoken\"]').attr(\"value\"),\n        invite_as,\n        stream_ids: JSON.stringify(stream_ids),\n        invite_expires_in_minutes: expires_in,\n    };\n    return data;\n}\n\nfunction beforeSend() {\n    reset_error_messages();\n    // TODO: You could alternatively parse the textarea here, and return errors to\n    // the user if they don't match certain constraints (i.e. not real email addresses,\n    // aren't in the right domain, etc.)\n    //\n    // OR, you could just let the server do it. Probably my temptation.\n    const loading_text = $(\"#submit-invitation\").data(\"loading-text\");\n    $(\"#submit-invitation\").text(loading_text);\n    $(\"#submit-invitation\").prop(\"disabled\", true);\n    return true;\n}\n\nfunction submit_invitation_form() {\n    const $invite_status = $(\"#invite_status\");\n    const $invitee_emails = $(\"#invitee_emails\");\n    const data = get_common_invitation_data();\n    data.invitee_emails = $(\"#invitee_emails\").val();\n\n    channel.post({\n        url: \"/json/invites\",\n        data,\n        beforeSend,\n        success() {\n            ui_report.success(\n                $t_html({defaultMessage: \"User(s) invited successfully.\"}),\n                $invite_status,\n            );\n            $invitee_emails.val(\"\");\n\n            if (page_params.development_environment) {\n                const rendered_email_msg = render_settings_dev_env_email_access();\n                $(\"#dev_env_msg\").html(rendered_email_msg).addClass(\"alert-info\").show();\n            }\n\n            if ($(\"#expires_in\").val() === \"custom\") {\n                // Hide the custom inputs if the custom input is set\n                // to one of the dropdown's standard options.\n                const time_in_minutes = get_expiration_time_in_minutes();\n                for (const option of Object.values(settings_config.expires_in_values)) {\n                    if (option.value === time_in_minutes) {\n                        $(\"#custom-invite-expiration-time\").hide();\n                        $(\"#expires_in\").val(time_in_minutes);\n                        return;\n                    }\n                }\n            }\n        },\n        error(xhr) {\n            const arr = JSON.parse(xhr.responseText);\n            if (arr.errors === undefined) {\n                // There was a fatal error, no partial processing occurred.\n                ui_report.error(\"\", xhr, $invite_status);\n            } else {\n                // Some users were not invited.\n                const invitee_emails_errored = [];\n                const error_list = [];\n                let is_invitee_deactivated = false;\n                for (const value of arr.errors) {\n                    const [email, error_message, deactivated] = value;\n                    error_list.push(`${email}: ${error_message}`);\n                    if (deactivated) {\n                        is_invitee_deactivated = true;\n                    }\n                    invitee_emails_errored.push(email);\n                }\n\n                const error_response = render_invitation_failed_error({\n                    error_message: arr.msg,\n                    error_list,\n                    is_admin: page_params.is_admin,\n                    is_invitee_deactivated,\n                    license_limit_reached: arr.license_limit_reached,\n                    has_billing_access: page_params.is_owner || page_params.is_billing_admin,\n                    daily_limit_reached: arr.daily_limit_reached,\n                });\n                ui_report.message(error_response, $invite_status, \"alert-warning\");\n\n                if (arr.sent_invitations) {\n                    $invitee_emails.val(invitee_emails_errored.join(\"\\n\"));\n                }\n            }\n        },\n        complete() {\n            $(\"#submit-invitation\").text($t({defaultMessage: \"Invite\"}));\n            $(\"#submit-invitation\").prop(\"disabled\", false);\n            $(\"#invitee_emails\").trigger(\"focus\");\n            ui.get_scroll_element($(\"#invite_user_form .modal-body\"))[0].scrollTop = 0;\n        },\n    });\n}\n\nfunction generate_multiuse_invite() {\n    const $invite_status = $(\"#multiuse_invite_status\");\n    const data = get_common_invitation_data();\n    channel.post({\n        url: \"/json/invites/multiuse\",\n        data,\n        beforeSend,\n        success(data) {\n            const copy_link_html = copy_invite_link(data);\n            ui_report.success(copy_link_html, $invite_status);\n            new ClipboardJS(\"#copy_generated_invite_link\");\n        },\n        error(xhr) {\n            ui_report.error(\"\", xhr, $invite_status);\n        },\n        complete() {\n            $(\"#submit-invitation\").text($t({defaultMessage: \"Generate invite link\"}));\n            $(\"#submit-invitation\").prop(\"disabled\", false);\n        },\n    });\n}\n\nexport function get_invite_streams() {\n    const streams = stream_data.get_invite_stream_data();\n    streams.sort((a, b) => util.strcmp(a.name, b.name));\n    return streams;\n}\n\nfunction update_subscription_checkboxes() {\n    const data = {\n        streams: get_invite_streams(),\n        notifications_stream: stream_data.get_notifications_stream(),\n    };\n    const html = render_invite_subscription(data);\n    $(\"#streams_to_add\").html(html);\n}\n\nfunction prepare_form_to_be_shown() {\n    update_subscription_checkboxes();\n    reset_error_messages();\n}\n\nexport function launch() {\n    $(\"#submit-invitation\").button();\n    prepare_form_to_be_shown();\n\n    overlays.open_overlay({\n        name: \"invite\",\n        $overlay: $(\"#invite-user\"),\n        on_close() {\n            browser_history.exit_overlay();\n        },\n    });\n\n    autosize($(\"#invitee_emails\").trigger(\"focus\"));\n\n    // Ctrl + Enter key to submit form\n    $(\"#invite-user\").on(\"keydown\", (e) => {\n        if (keydown_util.is_enter_event(e) && e.ctrlKey) {\n            submit_invitation_form();\n        }\n    });\n}\n\nfunction valid_to(expires_in) {\n    const time_valid = Number.parseFloat(expires_in);\n    if (!time_valid) {\n        return $t({defaultMessage: \"Never expires\"});\n    }\n    const valid_to = add(new Date(), {minutes: time_valid});\n    const options = {\n        year: \"numeric\",\n        month: \"numeric\",\n        day: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"2-digit\",\n        hour12: !user_settings.twenty_four_hour_time,\n    };\n    return $t(\n        {defaultMessage: \"Expires on {date}\"},\n        {date: valid_to.toLocaleTimeString([], options)},\n    );\n}\n\nfunction get_expiration_time_in_minutes() {\n    switch (custom_expiration_time_unit) {\n        case \"hours\":\n            return custom_expiration_time_input * 60;\n        case \"days\":\n            return custom_expiration_time_input * 24 * 60;\n        case \"weeks\":\n            return custom_expiration_time_input * 7 * 24 * 60;\n        default:\n            return custom_expiration_time_input;\n    }\n}\n\nfunction set_expires_on_text() {\n    if ($(\"#expires_in\").val() === \"custom\") {\n        $(\"#expires_on\").hide();\n        $(\"#custom_expires_on\").text(valid_to(get_expiration_time_in_minutes()));\n    } else {\n        $(\"#expires_on\").show();\n        $(\"#expires_on\").text(valid_to($(\"#expires_in\").val()));\n    }\n}\n\nfunction set_custom_time_inputs_visibility() {\n    if ($(\"#expires_in\").val() === \"custom\") {\n        $(\"#custom-expiration-time-input\").val(custom_expiration_time_input);\n        $(\"#custom-expiration-time-unit\").val(custom_expiration_time_unit);\n        $(\"#custom-invite-expiration-time\").show();\n    } else {\n        $(\"#custom-invite-expiration-time\").hide();\n    }\n}\n\nexport function initialize() {\n    const time_unit_choices = [\"minutes\", \"hours\", \"days\", \"weeks\"];\n    const rendered = render_invite_user({\n        is_admin: page_params.is_admin,\n        is_owner: page_params.is_owner,\n        development_environment: page_params.development_environment,\n        invite_as_options: settings_config.user_role_values,\n        expires_in_options: settings_config.expires_in_values,\n        time_choices: time_unit_choices,\n    });\n\n    $(\".app\").append(rendered);\n    set_custom_time_inputs_visibility();\n    set_expires_on_text();\n\n    $(document).on(\"click\", \"#invite_check_all_button\", () => {\n        $(\"#streams_to_add :checkbox\").prop(\"checked\", true);\n    });\n\n    $(document).on(\"click\", \"#invite_uncheck_all_button\", () => {\n        $(\"#streams_to_add :checkbox\").prop(\"checked\", false);\n    });\n\n    $(\"#submit-invitation\").on(\"click\", () => {\n        const is_generate_invite_link = $(\"#generate_multiuse_invite_radio\").prop(\"checked\");\n        if (is_generate_invite_link) {\n            generate_multiuse_invite();\n        } else {\n            submit_invitation_form();\n        }\n    });\n\n    $(\"#generate_multiuse_invite_button\").on(\"click\", () => {\n        $(\"#generate_multiuse_invite_radio\").prop(\"checked\", true);\n        $(\"#multiuse_radio_section\").show();\n        $(\"#invite-method-choice\").hide();\n        $(\"#invitee_emails\").prop(\"disabled\", true);\n        $(\"#submit-invitation\").text($t({defaultMessage: \"Generate invite link\"}));\n        $(\"#submit-invitation\").data(\"loading-text\", $t({defaultMessage: \"Generating link...\"}));\n        reset_error_messages();\n    });\n\n    $(\"#invite-user\").on(\"change\", \"#generate_multiuse_invite_radio\", () => {\n        $(\"#invitee_emails\").prop(\"disabled\", false);\n        $(\"#submit-invitation\").text($t({defaultMessage: \"Invite\"}));\n        $(\"#submit-invitation\").data(\"loading-text\", $t({defaultMessage: \"Inviting...\"}));\n        $(\"#multiuse_radio_section\").hide();\n        $(\"#invite-method-choice\").show();\n        reset_error_messages();\n    });\n\n    $(\"#expires_on\").text(valid_to($(\"#expires_in\").val()));\n    $(\"#expires_in\").on(\"change\", () => {\n        set_custom_time_inputs_visibility();\n        set_expires_on_text();\n    });\n\n    $(\".custom-expiration-time\").on(\"change\", () => {\n        custom_expiration_time_input = $(\"#custom-expiration-time-input\").val();\n        custom_expiration_time_unit = $(\"#custom-expiration-time-unit\").val();\n        $(\"#custom_expires_on\").text(valid_to(get_expiration_time_in_minutes()));\n    });\n\n    $(\"#custom-expiration-time-input\").on(\"keydown\", (e) => {\n        if (keydown_util.is_enter_event(e)) {\n            e.preventDefault();\n            return;\n        }\n    });\n}\n","import $ from \"jquery\";\nimport panzoom from \"panzoom\";\n\nimport render_lightbox_overlay from \"../templates/lightbox_overlay.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as message_store from \"./message_store\";\nimport * as overlays from \"./overlays\";\nimport * as people from \"./people\";\nimport * as popovers from \"./popovers\";\nimport * as rows from \"./rows\";\n\nlet is_open = false;\n// the asset map is a map of all retrieved images and YouTube videos that are\n// memoized instead of being looked up multiple times.\nconst asset_map = new Map();\n\nexport class PanZoomControl {\n    // Class for both initializing and controlling the\n    // the pan/zoom functionality.\n    constructor(container) {\n        this.container = container;\n        this.panzoom = panzoom(this.container, {\n            smoothScroll: false,\n            // Ideally we'd set `bounds` here, but that feature is\n            // currently broken upstream.  See\n            // https://github.com/anvaka/panzoom/issues/112.\n            maxZoom: 100,\n            minZoom: 0.1,\n            filterKey() {\n                // Disable the library's built in keybindings\n                return true;\n            },\n        });\n        // The following events are necessary to prevent the click event\n        // firing where the user \"unclicks\" at the end of the drag, which\n        // was causing accidental overlay closes in some situations.\n        this.panzoom.on(\"pan\", () => {\n            // Marks this overlay as needing to stay open.\n            $(\"#lightbox_overlay\").data(\"noclose\", true);\n\n            // Enable the panzoom reset button.\n            $(\"#lightbox_overlay .lightbox-zoom-reset\").removeClass(\"disabled\");\n        });\n\n        this.panzoom.on(\"panend\", (e) => {\n            // Check if the image has been panned out of view.\n            this.constrainImage(e);\n\n            // Don't remove the noclose attribute on this overlay until after paint,\n            // otherwise it will be removed too early and close the lightbox\n            // unintentionally.\n            setTimeout(() => {\n                $(\"#lightbox_overlay\").data(\"noclose\", false);\n            }, 0);\n        });\n\n        this.panzoom.on(\"zoom\", (e) => {\n            // Check if the image has been zoomed out of view.\n            // We are using the zoom event instead of zoomend because the zoomend\n            // event does not fire when using the scroll wheel or pinch to zoom.\n            // https://github.com/anvaka/panzoom/issues/250\n            this.constrainImage(e);\n\n            // Enable the panzoom reset button.\n            $(\"#lightbox_overlay .lightbox-zoom-reset\").removeClass(\"disabled\");\n        });\n\n        // key bindings\n        document.addEventListener(\"keydown\", (e) => {\n            if (!overlays.lightbox_open()) {\n                return;\n            }\n            switch (e.key) {\n                case \"Z\":\n                case \"+\":\n                    this.zoomIn();\n                    break;\n                case \"z\":\n                case \"-\":\n                    this.zoomOut();\n                    break;\n                case \"v\":\n                    overlays.close_overlay(\"lightbox\");\n                    break;\n            }\n            e.preventDefault();\n            e.stopPropagation();\n        });\n    }\n\n    constrainImage(e) {\n        // Instead of using panzoom's built in bounds option which was buggy\n        // at the time of this writing, we act on pan/zoom events and move the\n        // image back in to view if it is moved beyond the image-preview container.\n        // See https://github.com/anvaka/panzoom/issues/112 for upstream discussion.\n\n        const {scale, x, y} = e.getTransform();\n        const image_width = $(\".zoom-element > img\")[0].clientWidth * scale;\n        const image_height = $(\".zoom-element > img\")[0].clientHeight * scale;\n        const zoom_element_width = $(\".zoom-element\")[0].clientWidth * scale;\n        const zoom_element_height = $(\".zoom-element\")[0].clientHeight * scale;\n        const max_translate_x = $(\".image-preview\")[0].clientWidth;\n        const max_translate_y = $(\".image-preview\")[0].clientHeight;\n\n        // When the image is dragged out of the image-preview container\n        // (max_translate) it will be \"snapped\" back so that the number\n        // of pixels set below will remain visible in the dimension it was dragged.\n        const return_buffer = 50 * scale;\n        // Move the image if it gets within this many pixels of the edge.\n        const border = 20;\n\n        const zoom_border_width = (zoom_element_width - image_width) / 2 + image_width;\n        const zoom_border_height = (zoom_element_height - image_height) / 2 + image_height;\n        const modified_x = x + zoom_border_width;\n        const modified_y = y + zoom_border_height;\n\n        if (modified_x < 0 + border) {\n            // Image has been dragged beyond the LEFT of the view.\n            const move_by = modified_x * -1;\n            e.moveBy(move_by + return_buffer, 0, false);\n        } else if (modified_x - image_width > max_translate_x - border) {\n            // Image has been dragged beyond the RIGHT of the view.\n            const move_by = modified_x - max_translate_x - image_width;\n            e.moveBy(-move_by - return_buffer, 0, false);\n        }\n\n        if (modified_y < 0 + border) {\n            // Image has been dragged beyond the TOP of the view.\n            const move_by = modified_y * -1;\n            e.moveBy(0, move_by + return_buffer, false);\n        } else if (modified_y - image_height > max_translate_y - border) {\n            // Image has been dragged beyond the BOTTOM of the view.\n            const move_by = modified_y - max_translate_y - image_height;\n            e.moveBy(0, -move_by - return_buffer, false);\n        }\n    }\n\n    reset() {\n        // To reset the panzoom state, we want to:\n        // Reset zoom to the initial state.\n        this.panzoom.zoomAbs(0, 0, 1);\n        // Re-center the image.\n        this.panzoom.moveTo(0, 0);\n        // Always ensure that the overlay is available for click to close.\n        // This way we don't rely on the above events firing panend,\n        // of which there is some anecdotal evidence that suggests they\n        // might be prone to race conditions.\n        $(\"#lightbox_overlay\").data(\"noclose\", false);\n        // Disable the lightbox reset button to reflect the state that\n        // the image has not been panned or zoomed.\n        $(\"#lightbox_overlay .lightbox-zoom-reset\").addClass(\"disabled\");\n    }\n\n    zoomIn() {\n        const w = $(\".image-preview\").width();\n        const h = $(\".image-preview\").height();\n        this.panzoom.smoothZoom(w / 2, h / 2, 1.5);\n    }\n\n    zoomOut() {\n        const w = $(\".image-preview\").width();\n        const h = $(\".image-preview\").height();\n        this.panzoom.smoothZoom(w / 2, h / 2, 0.5);\n    }\n\n    isActive() {\n        return $(\".image-preview .zoom-element img\").length > 0;\n    }\n}\n\nexport function clear_for_testing() {\n    is_open = false;\n    asset_map.clear();\n}\n\nexport function render_lightbox_list_images(preview_source) {\n    if (!is_open) {\n        const images = Array.prototype.slice.call($(\".focused_table .message_inline_image img\"));\n        const $image_list = $(\"#lightbox_overlay .image-list\").empty();\n\n        for (const img of images) {\n            const src = img.getAttribute(\"src\");\n            const className = preview_source === src ? \"image selected\" : \"image\";\n\n            const $node = $(\"<div>\")\n                .addClass(className)\n                .attr(\"data-src\", src)\n                .css({backgroundImage: \"url(\" + src + \")\"});\n\n            $image_list.append($node);\n\n            // We parse the data for each image to show in the list,\n            // while we still have its original DOM element handy, so\n            // that navigating within the list only needs the `src`\n            // attribute used to construct the node object above.\n            parse_image_data(img);\n        }\n    }\n}\n\nfunction display_image(payload) {\n    render_lightbox_list_images(payload.preview);\n\n    $(\".player-container\").hide();\n    $(\".image-preview, .image-actions, .image-description, .download, .lightbox-zoom-reset\").show();\n\n    const $img_container = $(\"#lightbox_overlay .image-preview > .zoom-element\");\n    const img = new Image();\n    img.src = payload.source;\n    $img_container.html(img).show();\n\n    const filename = payload.url?.split(\"/\").pop();\n    $(\".image-description .title\")\n        .text(payload.title || \"N/A\")\n        .attr(\"aria-label\", payload.title || \"N/A\")\n        .prop(\"data-filename\", filename || \"N/A\");\n    $(\".image-description .user\").text(payload.user).prop(\"title\", payload.user);\n\n    $(\".image-actions .open\").attr(\"href\", payload.source);\n\n    const url = new URL(payload.source, window.location.href);\n    const same_origin = url.origin === window.location.origin;\n    if (same_origin && url.pathname.startsWith(\"/user_uploads/\")) {\n        // Switch to the \"download\" handler, so S3 URLs set their Content-Disposition\n        url.pathname = \"/user_uploads/download/\" + url.pathname.slice(\"/user_uploads/\".length);\n        $(\".image-actions .download\").attr(\"href\", url.href);\n    } else if (same_origin) {\n        $(\".image-actions .download\").attr(\"href\", payload.source);\n    } else {\n        // If it's not same-origin, and we don't know how to tell the remote service to put a\n        // content-disposition on it, the download can't possibly download, just show -- so hide the\n        // element.\n        $(\".image-actions .download\").hide();\n    }\n}\n\nfunction display_video(payload) {\n    render_lightbox_list_images(payload.preview);\n\n    $(\n        \"#lightbox_overlay .image-preview, .image-description, .download, .lightbox-zoom-reset\",\n    ).hide();\n\n    let source;\n    switch (payload.type) {\n        case \"youtube-video\":\n            source = \"https://www.youtube.com/embed/\" + payload.source;\n            break;\n        case \"vimeo-video\":\n            source = \"https://player.vimeo.com/video/\" + payload.source;\n            break;\n        case \"embed-video\":\n            // Use data: to load the player in a unique origin for security.\n            source =\n                \"data:text/html,\" +\n                window.encodeURIComponent(\n                    \"<!DOCTYPE html><style>iframe{position:absolute;left:0;top:0;width:100%;height:100%;box-sizing:border-box}</style>\" +\n                        payload.source,\n                );\n            break;\n    }\n\n    const $iframe = $(\"<iframe>\");\n    $iframe.attr(\n        \"sandbox\",\n        \"allow-forms allow-modals allow-orientation-lock allow-pointer-lock allow-popups allow-popups-to-escape-sandbox allow-presentation allow-same-origin allow-scripts\",\n    );\n    $iframe.attr(\"src\", source);\n    $iframe.attr(\"frameborder\", 0);\n    $iframe.attr(\"allowfullscreen\", true);\n\n    $(\"#lightbox_overlay .player-container\").html($iframe).show();\n    $(\".image-actions .open\").attr(\"href\", payload.url);\n}\n\nexport function build_open_image_function(on_close) {\n    if (on_close === undefined) {\n        on_close = function () {\n            $(\".player-container iframe\").remove();\n            is_open = false;\n            document.activeElement.blur();\n        };\n    }\n\n    return function ($image) {\n        // if the asset_map already contains the metadata required to display the\n        // asset, just recall that metadata.\n        let $preview_src = $image.attr(\"src\");\n        let payload = asset_map.get($preview_src);\n        if (payload === undefined) {\n            if ($preview_src.endsWith(\"&size=full\")) {\n                // while fetching an image for canvas, `src` attribute supplies\n                // full-sized image instead of thumbnail, so we have to replace\n                // `size=full` with `size=thumbnail`.\n                //\n                // TODO: This is a hack to work around the fact that for\n                // the lightbox canvas, the `src` is the data-fullsize-src\n                // for the image, not the original thumbnail used to open\n                // the lightbox.  A better fix will be to check a\n                // `data-thumbnail-src` attribute that we add to the\n                // canvas elements.\n                $preview_src = $preview_src.slice(0, -\"full\".length) + \"thumbnail\";\n                payload = asset_map.get($preview_src);\n            }\n            if (payload === undefined) {\n                payload = parse_image_data($image);\n            }\n        }\n\n        if (payload.type.match(\"-video\")) {\n            display_video(payload);\n        } else if (payload.type === \"image\") {\n            display_image(payload);\n        }\n\n        if (is_open) {\n            return;\n        }\n\n        overlays.open_overlay({\n            name: \"lightbox\",\n            $overlay: $(\"#lightbox_overlay\"),\n            on_close,\n        });\n\n        popovers.hide_all();\n        is_open = true;\n    };\n}\n\nexport function show_from_selected_message() {\n    const $message_selected = $(\".selected_message\");\n    let $message = $message_selected;\n    let $image = $message.find(\".message_inline_image img\");\n    let $prev_traverse = false;\n\n    while ($image.length === 0) {\n        if ($message.prev().length === 0) {\n            $message = $message.parent().prev();\n            if ($message.length === 0) {\n                $prev_traverse = true;\n                $message = $message_selected;\n                break;\n            } else {\n                $message = $message.find(\".last_message\");\n                continue;\n            }\n        }\n        $message = $message.prev();\n        $image = $message.find(\".message_inline_image img\");\n    }\n\n    if ($prev_traverse) {\n        while ($image.length === 0) {\n            if ($message.next().length === 0) {\n                $message = $message.parent().next();\n                if ($message.length === 0) {\n                    break;\n                } else {\n                    $message = $message.children().first();\n                    continue;\n                }\n            }\n            $message = $message.next();\n            $image = $message.find(\".message_inline_image img\");\n        }\n    }\n\n    if ($image.length !== 0) {\n        const open_image = build_open_image_function();\n        open_image($image);\n    }\n}\n\n// retrieve the metadata from the DOM and store into the asset_map.\nexport function parse_image_data(image) {\n    const $image = $(image);\n    const preview_src = $image.attr(\"src\");\n\n    if (asset_map.has(preview_src)) {\n        // check if image's data is already present in asset_map.\n        return asset_map.get(preview_src);\n    }\n\n    // if wrapped in the .youtube-video class, it will be length = 1, and therefore\n    // cast to true.\n    const is_youtube_video = Boolean($image.closest(\".youtube-video\").length);\n    const is_vimeo_video = Boolean($image.closest(\".vimeo-video\").length);\n    const is_embed_video = Boolean($image.closest(\".embed-video\").length);\n\n    // check if image is descendent of #compose .preview_content\n    const is_compose_preview_image = $image.closest(\"#compose .preview_content\").length === 1;\n\n    const $parent = $image.parent();\n    let type;\n    let source;\n    const url = $parent.attr(\"href\");\n    if (is_youtube_video) {\n        type = \"youtube-video\";\n        source = $parent.attr(\"data-id\");\n    } else if (is_vimeo_video) {\n        type = \"vimeo-video\";\n        source = $parent.attr(\"data-id\");\n    } else if (is_embed_video) {\n        type = \"embed-video\";\n        source = $parent.attr(\"data-id\");\n    } else {\n        type = \"image\";\n        if ($image.attr(\"data-src-fullsize\")) {\n            source = $image.attr(\"data-src-fullsize\");\n        } else {\n            source = preview_src;\n        }\n    }\n    let sender_full_name;\n    if (is_compose_preview_image) {\n        sender_full_name = people.my_full_name();\n    } else {\n        const $message = $parent.closest(\"[zid]\");\n        const zid = rows.id($message);\n        const message = message_store.get(zid);\n        if (message === undefined) {\n            blueslip.error(\"Lightbox for unknown message \" + zid);\n        } else {\n            sender_full_name = message.sender_full_name;\n        }\n    }\n    const payload = {\n        user: sender_full_name,\n        title: $parent.attr(\"aria-label\") || $parent.attr(\"href\"),\n        type,\n        preview: preview_src,\n        source,\n        url,\n    };\n\n    asset_map.set(preview_src, payload);\n    return payload;\n}\n\nexport function prev() {\n    $(\".image-list .image.selected\").prev().trigger(\"click\");\n}\n\nexport function next() {\n    $(\".image-list .image.selected\").next().trigger(\"click\");\n}\n\n// this is a block of events that are required for the lightbox to work.\nexport function initialize() {\n    // Renders the DOM for the lightbox.\n    const rendered_lightbox_overlay = render_lightbox_overlay();\n    $(\"body\").append(rendered_lightbox_overlay);\n\n    // Bind the pan/zoom control the newly created element.\n    const pan_zoom_control = new PanZoomControl(\n        $(\"#lightbox_overlay .image-preview > .zoom-element\")[0],\n    );\n\n    const reset_lightbox_state = function () {\n        $(\".player-container iframe\").remove();\n        is_open = false;\n        document.activeElement.blur();\n        if (pan_zoom_control.isActive()) {\n            pan_zoom_control.reset();\n        }\n    };\n\n    const open_image = build_open_image_function(reset_lightbox_state);\n\n    $(\"#main_div, #compose .preview_content\").on(\"click\", \".message_inline_image a\", function (e) {\n        // prevent the link from opening in a new page.\n        e.preventDefault();\n        // prevent the message compose dialog from happening.\n        e.stopPropagation();\n        const $img = $(this).find(\"img\");\n        open_image($img);\n    });\n\n    $(\"#lightbox_overlay .download\").on(\"click\", function () {\n        this.blur();\n    });\n\n    $(\"#lightbox_overlay\").on(\"click\", \".image-list .image\", function () {\n        const $image_list = $(this).parent();\n        const $original_image = $(\n            `.message_row img[src='${CSS.escape($(this).attr(\"data-src\"))}']`,\n        );\n\n        open_image($original_image);\n\n        $(\".image-list .image.selected\").removeClass(\"selected\");\n        $(this).addClass(\"selected\");\n        pan_zoom_control.reset();\n\n        const parentOffset = this.parentNode.clientWidth + this.parentNode.scrollLeft;\n        // this is the left and right of the image compared to its parent.\n        const coords = {\n            left: this.offsetLeft,\n            right: this.offsetLeft + this.clientWidth,\n        };\n\n        if (coords.right > parentOffset) {\n            // add 2px margin\n            $image_list.animate(\n                {\n                    scrollLeft: coords.right - this.parentNode.clientWidth + 2,\n                },\n                100,\n            );\n        } else if (coords.left < this.parentNode.scrollLeft) {\n            // subtract 2px margin\n            $image_list.animate({scrollLeft: coords.left - 2}, 100);\n        }\n    });\n\n    $(\"#lightbox_overlay\").on(\"click\", \".center .arrow\", function () {\n        const direction = $(this).attr(\"data-direction\");\n\n        if (direction === \"next\") {\n            next();\n        } else if (direction === \"prev\") {\n            prev();\n        }\n    });\n\n    $(\"#lightbox_overlay\").on(\"click\", \".lightbox-zoom-reset\", () => {\n        if (!$(\"#lightbox_overlay .lightbox-zoom-reset\").hasClass(\"disabled\")) {\n            const $img = $(\"#lightbox_overlay\").find(\".image-preview img\");\n            open_image($img);\n            pan_zoom_control.reset();\n        }\n    });\n\n    $(\"#lightbox_overlay .player-container\").on(\"click\", function () {\n        if ($(this).is(\".player-container\")) {\n            reset_lightbox_state();\n            overlays.close_active();\n        }\n    });\n\n    $(\"#lightbox_overlay\").on(\"click\", \".image-info-wrapper, .center\", (e) => {\n        if ($(e.target).is(\".image-info-wrapper, .center\")) {\n            reset_lightbox_state();\n            overlays.close_overlay(\"lightbox\");\n        }\n    });\n\n    $(\"#lightbox_overlay .image-preview\").on(\"click\", (e) => {\n        // Ensure that the click isn't on the image itself, and that\n        // the window isn't marked as disabled to click to close.\n        if (!$(e.target).is(\"img\") && !$(\"#lightbox_overlay\").data(\"noclose\")) {\n            reset_lightbox_state();\n            overlays.close_overlay(\"lightbox\");\n        }\n    });\n}\n","import * as blueslip from \"./blueslip\";\n\nconst linkifier_map = new Map(); // regex -> url\n\nexport function get_linkifier_map() {\n    return linkifier_map;\n}\n\nfunction python_to_js_linkifier(pattern, url) {\n    // Converts a python named-group regex to a javascript-compatible numbered\n    // group regex... with a regex!\n    const named_group_re = /\\(?P<([^>]+?)>/g;\n    let match = named_group_re.exec(pattern);\n    let current_group = 1;\n    while (match) {\n        const name = match[1];\n        // Replace named group with regular matching group\n        pattern = pattern.replace(\"(?P<\" + name + \">\", \"(\");\n        // Replace named reference in URL to numbered reference\n        url = url.replace(\"%(\" + name + \")s\", \"\\\\\" + current_group);\n\n        // Reset the RegExp state\n        named_group_re.lastIndex = 0;\n        match = named_group_re.exec(pattern);\n\n        current_group += 1;\n    }\n    // Convert any python in-regex flags to RegExp flags\n    let js_flags = \"g\";\n    const inline_flag_re = /\\(\\?([Limsux]+)\\)/;\n    match = inline_flag_re.exec(pattern);\n\n    // JS regexes only support i (case insensitivity) and m (multiline)\n    // flags, so keep those and ignore the rest\n    if (match) {\n        const py_flags = match[1].split(\"\");\n\n        for (const flag of py_flags) {\n            if (\"im\".includes(flag)) {\n                js_flags += flag;\n            }\n        }\n\n        pattern = pattern.replace(inline_flag_re, \"\");\n    }\n    // Ideally we should have been checking that linkifiers\n    // begin with certain characters but since there is no\n    // support for negative lookbehind in javascript, we check\n    // for this condition in `contains_backend_only_syntax()`\n    // function. If the condition is satisfied then the message\n    // is rendered locally, otherwise, we return false there and\n    // message is rendered on the backend which has proper support\n    // for negative lookbehind.\n    pattern = pattern + /(?!\\w)/.source;\n    let final_regex = null;\n    try {\n        final_regex = new RegExp(pattern, js_flags);\n    } catch (error) {\n        // We have an error computing the generated regex syntax.\n        // We'll ignore this linkifier for now, but log this\n        // failure for debugging later.\n        blueslip.error(\"python_to_js_linkifier: \" + error.message);\n    }\n    return [final_regex, url];\n}\n\nexport function update_linkifier_rules(linkifiers) {\n    linkifier_map.clear();\n\n    for (const linkifier of linkifiers) {\n        const [regex, final_url] = python_to_js_linkifier(linkifier.pattern, linkifier.url_format);\n        if (!regex) {\n            // Skip any linkifiers that could not be converted\n            continue;\n        }\n\n        linkifier_map.set(regex, final_url);\n    }\n}\n\nexport function initialize(linkifiers) {\n    update_linkifier_rules(linkifiers);\n}\n","import $ from \"jquery\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as scroll_util from \"./scroll_util\";\n\nexport class ListCursor {\n    constructor({highlight_class, list}) {\n        const config_ok =\n            highlight_class &&\n            list &&\n            list.scroll_container_sel &&\n            list.find_li &&\n            list.first_key &&\n            list.prev_key &&\n            list.next_key;\n        if (!config_ok) {\n            blueslip.error(\"Programming error\");\n            return;\n        }\n\n        this.highlight_class = highlight_class;\n        this.list = list;\n    }\n\n    clear() {\n        if (this.curr_key === undefined) {\n            return;\n        }\n        const row = this.get_row(this.curr_key);\n        if (row) {\n            row.clear();\n        }\n        this.curr_key = undefined;\n    }\n\n    get_key() {\n        return this.curr_key;\n    }\n\n    get_row(key) {\n        // TODO: The list class should probably do more of the work\n        //       here, so we're not so coupled to jQuery, and\n        //       so we instead just get back a widget we can say\n        //       something like widget.trigger(\"select\") on.  This will\n        //       be especially important if we do lazy rendering.\n        //       It would also give the caller more flexibility on\n        //       the actual styling.\n        if (key === undefined) {\n            return undefined;\n        }\n\n        const $li = this.list.find_li({\n            key,\n            force_render: true,\n        });\n\n        if (!$li || $li.length === 0) {\n            return undefined;\n        }\n\n        return {\n            highlight: () => {\n                $li.addClass(this.highlight_class);\n                this.adjust_scroll($li);\n            },\n            clear: () => {\n                $li.removeClass(this.highlight_class);\n            },\n        };\n    }\n\n    adjust_scroll($li) {\n        const $scroll_container = $(this.list.scroll_container_sel);\n        scroll_util.scroll_element_into_container($li, $scroll_container);\n    }\n\n    redraw() {\n        // We should only call this for situations like the buddy\n        // list where we redraw the whole list without necessarily\n        // changing it, so we just want to re-highlight the current\n        // row in the new DOM.  If you are filtering, for now you\n        // should call the 'reset()' method.\n        const row = this.get_row(this.curr_key);\n\n        if (row === undefined) {\n            return;\n        }\n        row.highlight();\n    }\n\n    go_to(key) {\n        if (key === undefined) {\n            blueslip.error(\"Caller is not checking keys for ListCursor.go_to\");\n            return;\n        }\n        if (key === this.curr_key) {\n            return;\n        }\n        this.clear();\n        const row = this.get_row(key);\n        if (row === undefined) {\n            blueslip.error(\"Cannot highlight key for ListCursor: \" + key);\n            return;\n        }\n        this.curr_key = key;\n        row.highlight();\n    }\n\n    reset() {\n        this.clear();\n        const key = this.list.first_key();\n        if (key === undefined) {\n            this.curr_key = undefined;\n            return;\n        }\n        this.go_to(key);\n    }\n\n    prev() {\n        if (this.curr_key === undefined) {\n            return;\n        }\n        const key = this.list.prev_key(this.curr_key);\n        if (key === undefined) {\n            // leave the current key\n            return;\n        }\n        this.go_to(key);\n    }\n\n    next() {\n        if (this.curr_key === undefined) {\n            // This is sort of a special case where we went from\n            // an empty filter to having data.\n            this.reset();\n            return;\n        }\n        const key = this.list.next_key(this.curr_key);\n        if (key === undefined) {\n            // leave the current key\n            return;\n        }\n        this.go_to(key);\n    }\n}\n","import $ from \"jquery\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as ui from \"./ui\";\n\nconst DEFAULTS = {\n    INITIAL_RENDER_COUNT: 80,\n    LOAD_COUNT: 20,\n    instances: new Map(),\n};\n\n// ----------------------------------------------------\n// This function describes (programmatically) how to use the ListWidget.\n// ----------------------------------------------------\n\nexport function validate_opts(opts) {\n    if (opts.html_selector && typeof opts.html_selector !== \"function\") {\n        // We have an html_selector, but it is not a function.\n        // This is a programming error.\n        blueslip.error(\"html_selector should be a function.\");\n        return false;\n    }\n    if (!opts.$simplebar_container) {\n        blueslip.error(\"$simplebar_container is missing.\");\n        return false;\n    }\n    return true;\n}\n\nexport function get_filtered_items(value, list, opts) {\n    /*\n        This is used by the main object (see `create`),\n        but we split it out to make it a bit easier\n        to test.\n    */\n    const get_item = opts.get_item;\n\n    if (!opts.filter) {\n        if (get_item) {\n            return list.map((key) => get_item(key));\n        }\n        return [...list];\n    }\n\n    if (opts.filter.filterer) {\n        if (get_item) {\n            return opts.filter.filterer(\n                list.map((key) => get_item(key)),\n                value,\n            );\n        }\n        return opts.filter.filterer(list, value);\n    }\n\n    const predicate = (item) => opts.filter.predicate(item, value);\n\n    if (get_item) {\n        const result = [];\n\n        for (const key of list) {\n            const item = get_item(key);\n            if (predicate(item)) {\n                result.push(item);\n            }\n        }\n\n        return result;\n    }\n\n    return list.filter((item) => predicate(item));\n}\n\nexport function alphabetic_sort(prop) {\n    return function (a, b) {\n        // The conversion to uppercase helps make the sorting case insensitive.\n        const str1 = a[prop].toUpperCase();\n        const str2 = b[prop].toUpperCase();\n\n        if (str1 === str2) {\n            return 0;\n        } else if (str1 > str2) {\n            return 1;\n        }\n\n        return -1;\n    };\n}\n\nexport function numeric_sort(prop) {\n    return function (a, b) {\n        if (Number.parseFloat(a[prop]) > Number.parseFloat(b[prop])) {\n            return 1;\n        } else if (Number.parseFloat(a[prop]) === Number.parseFloat(b[prop])) {\n            return 0;\n        }\n\n        return -1;\n    };\n}\n\nexport function valid_filter_opts(opts) {\n    if (!opts.filter) {\n        return true;\n    }\n    if (opts.filter.predicate) {\n        if (typeof opts.filter.predicate !== \"function\") {\n            blueslip.error(\"Filter predicate is not a function.\");\n            return false;\n        }\n        if (opts.filter.filterer) {\n            blueslip.error(\"Filterer and predicate are mutually exclusive.\");\n            return false;\n        }\n    } else {\n        if (typeof opts.filter.filterer !== \"function\") {\n            blueslip.error(\"Filter filterer is not a function (or missing).\");\n            return false;\n        }\n    }\n\n    return true;\n}\n\nfunction is_scroll_position_for_render(scroll_container) {\n    return (\n        scroll_container.scrollHeight -\n            (scroll_container.scrollTop + scroll_container.clientHeight) <\n        10\n    );\n}\n\n// @params\n// $container: jQuery object to append to.\n// list: The list of items to progressively append.\n// opts: An object of random preferences.\nexport function create($container, list, opts) {\n    if (!opts) {\n        blueslip.error(\"Need opts to create widget.\");\n        return undefined;\n    }\n\n    if (!validate_opts(opts)) {\n        return undefined;\n    }\n\n    if (opts.name && DEFAULTS.instances.get(opts.name)) {\n        // Clear event handlers for prior widget.\n        const old_widget = DEFAULTS.instances.get(opts.name);\n        old_widget.clear_event_handlers();\n    }\n\n    const meta = {\n        sorting_function: null,\n        sorting_functions: new Map(),\n        generic_sorting_functions: {\n            alphabetic: alphabetic_sort,\n            numeric: numeric_sort,\n        },\n        offset: 0,\n        list,\n        filtered_list: list,\n        reverse_mode: false,\n        filter_value: \"\",\n    };\n\n    if (!valid_filter_opts(opts)) {\n        return undefined;\n    }\n\n    if (opts.get_item && typeof opts.get_item !== \"function\") {\n        blueslip.error(\"get_item should be a function\");\n        return undefined;\n    }\n\n    const widget = {};\n\n    widget.get_current_list = function () {\n        return meta.filtered_list;\n    };\n\n    widget.filter_and_sort = function () {\n        meta.filtered_list = get_filtered_items(meta.filter_value, meta.list, opts);\n\n        if (meta.sorting_function) {\n            meta.filtered_list.sort(meta.sorting_function);\n        }\n\n        if (meta.reverse_mode) {\n            meta.filtered_list.reverse();\n        }\n    };\n\n    // Used in case of Multiselect DropdownListWidget to retain\n    // previously checked items even after widget redraws.\n    widget.retain_selected_items = function () {\n        const items = opts.multiselect;\n\n        if (items.selected_items) {\n            const data = items.selected_items;\n            for (const value of data) {\n                const $list_item = $container.find(`li[data-value = \"${value}\"]`);\n                if ($list_item.length) {\n                    const $link_elem = $list_item.find(\"a\").expectOne();\n                    $list_item.addClass(\"checked\");\n                    $link_elem.prepend($(\"<i>\").addClass([\"fa\", \"fa-check\"]));\n                }\n            }\n        }\n    };\n\n    // Reads the provided list (in the scope directly above)\n    // and renders the next block of messages automatically\n    // into the specified container.\n    widget.render = function (how_many) {\n        let load_count = how_many || DEFAULTS.LOAD_COUNT;\n        if (opts.get_min_load_count) {\n            load_count = opts.get_min_load_count(meta.offset, load_count);\n        }\n\n        // Stop once the offset reaches the length of the original list.\n        if (meta.offset >= meta.filtered_list.length) {\n            return;\n        }\n\n        const slice = meta.filtered_list.slice(meta.offset, meta.offset + load_count);\n\n        let html = \"\";\n        for (const item of slice) {\n            const s = opts.modifier(item);\n\n            if (typeof s !== \"string\") {\n                blueslip.error(\"List item is not a string: \" + s);\n                continue;\n            }\n\n            // append the HTML or nothing if corrupt (null, undef, etc.).\n            if (s) {\n                html += s;\n            }\n        }\n\n        $container.append($(html));\n        meta.offset += load_count;\n\n        if (opts.multiselect) {\n            widget.retain_selected_items();\n        }\n\n        if (opts.callback_after_render) {\n            opts.callback_after_render();\n        }\n    };\n\n    widget.render_item = (item) => {\n        if (!opts.html_selector) {\n            // We don't have any way to find the existing item.\n            return;\n        }\n        const $html_item = meta.$scroll_container.find(opts.html_selector(item));\n        if (!$html_item) {\n            // We don't have the item in the current scroll container; it'll be\n            // rendered with updated data when it is scrolled to.\n            return;\n        }\n\n        if (opts.get_item) {\n            item = opts.get_item(item);\n        }\n        const html = opts.modifier(item);\n        if (typeof html !== \"string\") {\n            blueslip.error(\"List item is not a string: \" + html);\n            return;\n        }\n\n        // At this point, we have asserted we have all the information to replace\n        // the html now.\n        $html_item.replaceWith(html);\n    };\n\n    widget.clear = function () {\n        $container.empty();\n        meta.offset = 0;\n    };\n\n    widget.set_filter_value = function (filter_value) {\n        meta.filter_value = filter_value;\n    };\n\n    widget.set_reverse_mode = function (reverse_mode) {\n        meta.reverse_mode = reverse_mode;\n    };\n\n    // the sorting function is either the function or string that calls the\n    // function to sort the list by. The prop is used for generic functions\n    // that can be called to sort with a particular prop.\n    widget.set_sorting_function = function (sorting_function, prop) {\n        if (typeof sorting_function === \"function\") {\n            meta.sorting_function = sorting_function;\n        } else if (typeof sorting_function === \"string\") {\n            if (typeof prop === \"string\") {\n                meta.sorting_function = meta.generic_sorting_functions[sorting_function](prop);\n            } else {\n                meta.sorting_function = meta.sorting_functions.get(sorting_function);\n            }\n        }\n    };\n\n    widget.set_up_event_handlers = function () {\n        meta.$scroll_container = ui.get_scroll_element(opts.$simplebar_container);\n\n        // on scroll of the nearest scrolling container, if it hits the bottom\n        // of the container then fetch a new block of items and render them.\n        meta.$scroll_container.on(\"scroll.list_widget_container\", function () {\n            if (opts.post_scroll__pre_render_callback) {\n                opts.post_scroll__pre_render_callback();\n            }\n\n            if (opts.is_scroll_position_for_render === undefined) {\n                opts.is_scroll_position_for_render = is_scroll_position_for_render;\n            }\n\n            const should_render = opts.is_scroll_position_for_render(this);\n            if (should_render) {\n                widget.render();\n            }\n        });\n\n        if (opts.$parent_container) {\n            opts.$parent_container.on(\"click.list_widget_sort\", \"[data-sort]\", function () {\n                handle_sort($(this), widget);\n            });\n        }\n\n        if (opts.filter && opts.filter.$element) {\n            opts.filter.$element.on(\"input.list_widget_filter\", function () {\n                const value = this.value.toLocaleLowerCase();\n                widget.set_filter_value(value);\n                widget.hard_redraw();\n            });\n        }\n    };\n\n    widget.clear_event_handlers = function () {\n        meta.$scroll_container.off(\"scroll.list_widget_container\");\n\n        if (opts.$parent_container) {\n            opts.$parent_container.off(\"click.list_widget_sort\", \"[data-sort]\");\n        }\n\n        if (opts.filter && opts.filter.$element) {\n            opts.filter.$element.off(\"input.list_widget_filter\");\n        }\n    };\n\n    widget.increase_rendered_offset = function () {\n        meta.offset = Math.min(meta.offset + 1, meta.filtered_list.length);\n    };\n\n    widget.reduce_rendered_offset = function () {\n        meta.offset = Math.max(meta.offset - 1, 0);\n    };\n\n    widget.remove_rendered_row = function (rendered_row) {\n        rendered_row.remove();\n        // We removed a rendered row, so we need to reduce one offset.\n        widget.reduce_rendered_offset();\n    };\n\n    widget.insert_rendered_row = function (item) {\n        // NOTE: Caller should call `filter_and_sort` before calling this function\n        // so that `meta.filtered_list` already has the `item`.\n        if (meta.filtered_list.length <= 2) {\n            // Avoids edge cases for us and could be faster too.\n            widget.clean_redraw();\n            return;\n        }\n        if (!opts.filter.predicate(item)) {\n            return;\n        }\n        // We need to insert the row for it to be displayed at the\n        // correct position. filtered_list must contain the new item\n        // since we know it is not hidden from the above check.\n        const topic_insert_index = meta.filtered_list.findIndex(\n            (list_item) => list_item.last_msg_id === item.last_msg_id,\n        );\n        // Rows greater than `offset` are not rendered in the DOM by list_widget;\n        // for those, there's nothing to update.\n        if (topic_insert_index <= meta.offset) {\n            if (!opts.modifier || !opts.html_selector) {\n                blueslip.error(\n                    \"Please specify modifier and html_selector when creating the widget.\",\n                );\n            }\n            const rendered_row = opts.modifier(item);\n            if (topic_insert_index === meta.filtered_list.length - 1) {\n                const $target_row = opts.html_selector(meta.filtered_list[topic_insert_index - 1]);\n                $target_row.after(rendered_row);\n            } else {\n                const $target_row = opts.html_selector(meta.filtered_list[topic_insert_index + 1]);\n                $target_row.before(rendered_row);\n            }\n            widget.increase_rendered_offset();\n        }\n    };\n\n    widget.sort = function (sorting_function, prop) {\n        widget.set_sorting_function(sorting_function, prop);\n        widget.hard_redraw();\n    };\n\n    widget.clean_redraw = function () {\n        widget.filter_and_sort();\n        widget.clear();\n        widget.render(DEFAULTS.INITIAL_RENDER_COUNT);\n    };\n\n    widget.hard_redraw = function () {\n        widget.clean_redraw();\n        if (opts.filter && opts.filter.onupdate) {\n            opts.filter.onupdate();\n        }\n    };\n\n    widget.replace_list_data = function (list) {\n        /*\n            We mostly use this widget for lists where you are\n            not adding or removing rows, so when you do modify\n            the list, we have a brute force solution.\n        */\n        meta.list = list;\n        widget.hard_redraw();\n    };\n\n    widget.set_up_event_handlers();\n\n    if (opts.sort_fields) {\n        for (const [name, sorting_function] of Object.entries(opts.sort_fields)) {\n            meta.sorting_functions.set(name, sorting_function);\n        }\n    }\n\n    if (opts.init_sort) {\n        widget.set_sorting_function(...opts.init_sort);\n    }\n\n    widget.clean_redraw();\n\n    // Save the instance for potential future retrieval if a name is provided.\n    if (opts.name) {\n        DEFAULTS.instances.set(opts.name, widget);\n    }\n\n    return widget;\n}\n\nexport function get(name) {\n    return DEFAULTS.instances.get(name) || false;\n}\n\nexport function handle_sort($th, list) {\n    /*\n        one would specify sort parameters like this:\n            - name => sort alphabetic.\n            - age  => sort numeric.\n            - status => look up `status` in sort_fields\n                        to find custom sort function\n\n        <thead>\n            <th data-sort=\"alphabetic\" data-sort-prop=\"name\"></th>\n            <th data-sort=\"numeric\" data-sort-prop=\"age\"></th>\n            <th data-sort=\"status\"></th>\n        </thead>\n        */\n    const sort_type = $th.data(\"sort\");\n    const prop_name = $th.data(\"sort-prop\");\n\n    if ($th.hasClass(\"active\")) {\n        if (!$th.hasClass(\"descend\")) {\n            $th.addClass(\"descend\");\n        } else {\n            $th.removeClass(\"descend\");\n        }\n    } else {\n        $th.siblings(\".active\").removeClass(\"active\");\n        $th.addClass(\"active\");\n    }\n\n    list.set_reverse_mode($th.hasClass(\"descend\"));\n\n    // if `prop_name` is defined, it will trigger the generic codepath,\n    // and not if it is undefined.\n    list.sort(sort_type, prop_name);\n}\n","import {all_messages_data} from \"./all_messages_data\";\nimport * as blueslip from \"./blueslip\";\nimport {page_params} from \"./page_params\";\n\nfunction truncate_precision(float) {\n    return Number.parseFloat(float.toFixed(3));\n}\n\nexport const get_next_id_float = (function () {\n    const already_used = new Set();\n\n    return function () {\n        const local_id_increment = 0.01;\n        let latest = page_params.max_message_id;\n        if (all_messages_data.last() !== undefined) {\n            latest = all_messages_data.last().id;\n        }\n        latest = Math.max(0, latest);\n        const local_id_float = truncate_precision(latest + local_id_increment);\n\n        if (already_used.has(local_id_float)) {\n            // If our id is already used, it is probably an edge case like we had\n            // to abort a very recent message.\n            blueslip.warn(\"We don't reuse ids for local echo.\");\n            return undefined;\n        }\n\n        if (local_id_float % 1 > local_id_increment * 5) {\n            blueslip.warn(\"Turning off local echo for this message to let host catch up\");\n            return undefined;\n        }\n\n        if (local_id_float % 1 === 0) {\n            // The logic to stop at 0.05 should prevent us from ever wrapping around\n            // to the next integer.\n            blueslip.error(\"Programming error\");\n            return undefined;\n        }\n\n        already_used.add(local_id_float);\n\n        return local_id_float;\n    };\n})();\n","import * as blueslip from \"./blueslip\";\n\nconst ls = {\n    // parse JSON without throwing an error.\n    parseJSON(str) {\n        try {\n            return JSON.parse(str);\n        } catch {\n            return undefined;\n        }\n    },\n\n    // check if the datestamp is from before now and if so return true.\n    isExpired(stamp) {\n        return new Date(stamp) < new Date();\n    },\n\n    // return the localStorage key that is bound to a version of a key.\n    formGetter(version, name) {\n        return \"ls__\" + version + \"__\" + name;\n    },\n\n    // create a formData object to put in the data, a signature that it was\n    // created with this library, and when it expires (if ever).\n    formData(data, expires) {\n        return {\n            data,\n            __valid: true,\n            expires: Date.now() + expires,\n        };\n    },\n\n    getData(version, name) {\n        const key = this.formGetter(version, name);\n        let data = localStorage.getItem(key);\n        data = ls.parseJSON(data);\n\n        if (\n            data &&\n            data.__valid &&\n            // JSON forms of data with `Infinity` turns into `null`,\n            // so if null then it hasn't expired since nothing was specified.\n            (!ls.isExpired(data.expires) || data.expires === null)\n        ) {\n            return data;\n        }\n\n        return undefined;\n    },\n\n    // set the wrapped version of the data into localStorage.\n    setData(version, name, data, expires) {\n        const key = this.formGetter(version, name);\n        const val = this.formData(data, expires);\n\n        localStorage.setItem(key, JSON.stringify(val));\n    },\n\n    // remove the key from localStorage and from memory.\n    removeData(version, name) {\n        const key = this.formGetter(version, name);\n\n        localStorage.removeItem(key);\n    },\n\n    // Remove keys which (1) map to a value that satisfies a\n    // property tested by `condition_checker` and (2) which match\n    // the pattern given by `name`.\n    removeDataRegexWithCondition(version, regex, condition_checker) {\n        const key_regex = new RegExp(this.formGetter(version, regex));\n        const keys = Object.keys(localStorage).filter(\n            (key) => key_regex.test(key) && condition_checker(localStorage.getItem(key)),\n        );\n\n        for (const key of keys) {\n            localStorage.removeItem(key);\n        }\n    },\n\n    // migrate from an older version of a data src to a newer one with a\n    // specified callback function.\n    migrate(name, v1, v2, callback) {\n        const old = this.getData(v1, name);\n        this.removeData(v1, name);\n\n        if (old && old.__valid) {\n            const data = callback(old.data);\n            this.setData(v2, name, data, Number.POSITIVE_INFINITY);\n\n            return data;\n        }\n\n        return undefined;\n    },\n};\n\n// return a new function instance that has instance-scoped variables.\nexport const localstorage = function () {\n    const _data = {\n        VERSION: 1,\n        expires: Number.POSITIVE_INFINITY,\n        expiresIsGlobal: false,\n    };\n\n    const prototype = {\n        // `expires` should be a Number that represents the number of ms from\n        // now that this should expire in.\n        // this allows for it to either be set only once or permanently.\n        setExpiry(expires, isGlobal) {\n            _data.expires = expires;\n            _data.expiresIsGlobal = isGlobal || false;\n\n            return this;\n        },\n\n        get(name) {\n            const data = ls.getData(_data.VERSION, name);\n\n            if (data) {\n                return data.data;\n            }\n\n            return undefined;\n        },\n\n        set(name, data) {\n            if (_data.VERSION !== undefined) {\n                ls.setData(_data.VERSION, name, data, _data.expires);\n\n                // if the expires attribute was not set as a global, then\n                // make sure to return it back to Infinity to not impose\n                // constraints on the next key.\n                if (!_data.expiresIsGlobal) {\n                    _data.expires = Number.POSITIVE_INFINITY;\n                }\n\n                return true;\n            }\n\n            return false;\n        },\n\n        // remove a key with a given version.\n        remove(name) {\n            ls.removeData(_data.VERSION, name);\n        },\n\n        // Remove keys which (1) map to a value that satisfies a\n        // property tested by `condition_checker` AND (2) which\n        // match the pattern given by `name`.\n        removeDataRegexWithCondition(name, condition_checker) {\n            ls.removeDataRegexWithCondition(_data.VERSION, name, condition_checker);\n        },\n\n        migrate(name, v1, v2, callback) {\n            return ls.migrate(name, v1, v2, callback);\n        },\n    };\n\n    // set a new master version for the LocalStorage instance.\n    Object.defineProperty(prototype, \"version\", {\n        get() {\n            return _data.VERSION;\n        },\n        set(version) {\n            _data.VERSION = version;\n        },\n    });\n\n    return prototype;\n};\n\nlet warned_of_localstorage = false;\n\nlocalstorage.supported = function supports_localstorage() {\n    try {\n        return window.localStorage !== undefined && window.localStorage !== null;\n    } catch {\n        if (!warned_of_localstorage) {\n            blueslip.error(\n                \"Client browser does not support local storage, will lose socket message on reload\",\n            );\n            warned_of_localstorage = true;\n        }\n        return false;\n    }\n};\n","/* eslint-disable no-else-return */\n/* eslint-disable unicorn/catch-error-name */\n/* eslint-disable no-console */\n/* eslint-disable unicorn/prefer-string-slice */\n/* eslint-disable prefer-const */\n/* eslint-disable no-undef */\n/* eslint-disable guard-for-in */\nimport {isValid} from \"date-fns\";\nimport katex from \"katex\"; // eslint-disable-line import/no-unresolved\nimport _ from \"lodash\";\n\nimport * as fenced_code from \"../shared/js/fenced_code\";\nimport marked from \"../third/marked/lib/marked.cjs\";\n\n\n// This contains zulip's frontend Markdown implementation; see\n// docs/subsystems/markdown.md for docs on our Markdown syntax.  The other\n// main piece in rendering Markdown client-side is\n// static/third/marked/lib/marked.js, which we have significantly\n// modified from the original implementation.\n\n// Docs: https://zulip.readthedocs.io/en/latest/subsystems/markdown.html\n\n// If we see preview-related syntax in our content, we will need the\n// backend to render it.\nconst preview_regexes = [\n    // Inline image previews, check for contiguous chars ending in image suffix\n    // To keep the below regexes simple, split them out for the end-of-message case\n\n    /\\S*(?:\\.bmp|\\.gif|\\.jpg|\\.jpeg|\\.png|\\.webp)\\)?\\s+/m,\n    /\\S*(?:\\.bmp|\\.gif|\\.jpg|\\.jpeg|\\.png|\\.webp)\\)?$/m,\n\n    // Twitter and youtube links are given previews\n\n    /\\S*(?:twitter|youtube)\\.com\\/\\S*/,\n];\n\nfunction contains_preview_link(content) {\n    return preview_regexes.some((re) => re.test(content));\n}\n\nexport function translate_emoticons_to_names({src, get_emoticon_translations}) {\n    // Translates emoticons in a string to their colon syntax.\n    let translated = src;\n    let replacement_text;\n    const terminal_symbols = \",.;?!()[] \\\"'\\n\\t\"; // From composebox_typeahead\n    const symbols_except_space = terminal_symbols.replace(\" \", \"\");\n\n    const emoticon_replacer = function (match, g1, offset, str) {\n        const prev_char = str[offset - 1];\n        const next_char = str[offset + match.length];\n\n        const symbol_at_start = terminal_symbols.includes(prev_char);\n        const symbol_at_end = terminal_symbols.includes(next_char);\n        const non_space_at_start = symbols_except_space.includes(prev_char);\n        const non_space_at_end = symbols_except_space.includes(next_char);\n        const valid_start = symbol_at_start || offset === 0;\n        const valid_end = symbol_at_end || offset === str.length - match.length;\n\n        if (non_space_at_start && non_space_at_end) {\n            // Hello!:)?\n            return match;\n        }\n        if (valid_start && valid_end) {\n            return replacement_text;\n        }\n        return match;\n    };\n\n    for (const translation of get_emoticon_translations()) {\n        // We can't pass replacement_text directly into\n        // emoticon_replacer, because emoticon_replacer is\n        // a callback for `replace()`.  Instead we just mutate\n        // the `replacement_text` that the function closes on.\n        replacement_text = translation.replacement_text;\n        translated = translated.replace(translation.regex, emoticon_replacer);\n    }\n\n    return translated;\n}\n\nfunction contains_problematic_linkifier({content, get_linkifier_map}) {\n    // If a linkifier doesn't start with some specified characters\n    // then don't render it locally. It is workaround for the fact that\n    // javascript regex doesn't support lookbehind.\n    for (const re of get_linkifier_map().keys()) {\n        const pattern = /[^\\s\"'(,:<]/.source + re.source + /(?!\\w)/.source;\n        const regex = new RegExp(pattern);\n        if (regex.test(content)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nfunction content_contains_backend_only_syntax({content, get_linkifier_map}) {\n    // Try to guess whether or not a message contains syntax that only the\n    // backend Markdown processor can correctly handle.\n    // If it doesn't, we can immediately render it client-side for local echo.\n    return (\n        contains_preview_link(content) ||\n        contains_problematic_linkifier({content, get_linkifier_map})\n    );\n}\n\nfunction parse_with_options({raw_content, helper_config, options}) {\n    // Given the raw markdown content of a message (raw_content)\n    // we return the HTML content (content) and flags.\n    // Our caller passes a helper_config object that has several\n    // helper functions for getting info about users, streams, etc.\n    // And it also passes in options for the marked processor.\n\n    let mentioned = false;\n    let mentioned_group = false;\n    let mentioned_wildcard = false;\n\n    const marked_options = {\n        ...options,\n        userMentionHandler(mention, silently) {\n            if (mention === \"all\" || mention === \"everyone\" || mention === \"stream\") {\n                let classes;\n                let display_text;\n                if (silently) {\n                    classes = \"user-mention silent\";\n                    display_text = mention;\n                } else {\n                    // Wildcard mention\n                    mentioned_wildcard = true;\n                    display_text = \"@\" + mention;\n                    classes = \"user-mention\";\n                }\n\n                return `<span class=\"${classes}\" data-user-id=\"*\">${_.escape(display_text)}</span>`;\n            }\n\n            let full_name;\n            let user_id;\n\n            const id_regex = /^(.+)?\\|(\\d+)$/; // For @**user|id** and @**|id** syntax\n            const match = id_regex.exec(mention);\n\n            if (match) {\n                /*\n                    If we have two users named Alice, we want\n                    users to provide mentions like this:\n\n                        alice|42\n                        alice|99\n\n                    The autocomplete feature will help users\n                    send correct mentions for duplicate names,\n                    but we also have to consider the possibility\n                    that the user will hand-type something\n                    incorrectly, in which case we'll fall\n                    through to the other code (which may be a\n                    misfeature).\n                */\n                full_name = match[1];\n                user_id = Number.parseInt(match[2], 10);\n\n                if (full_name === undefined) {\n                    // For @**|id** syntax\n                    if (!helper_config.is_valid_user_id(user_id)) {\n                        // silently ignore invalid user id.\n                        user_id = undefined;\n                    } else {\n                        full_name = helper_config.get_actual_name_from_user_id(user_id);\n                    }\n                } else {\n                    // For @**user|id** syntax\n                    if (!helper_config.is_valid_full_name_and_user_id(full_name, user_id)) {\n                        user_id = undefined;\n                        full_name = undefined;\n                    }\n                }\n            }\n\n            if (user_id === undefined) {\n                // Handle normal syntax\n                full_name = mention;\n                user_id = helper_config.get_user_id_from_name(full_name);\n            }\n\n            if (user_id === undefined) {\n                // This is nothing to be concerned about--the users\n                // are allowed to hand-type mentions and they may\n                // have had a typo in the name.\n                return undefined;\n            }\n\n            // HAPPY PATH! Note that we not only need to return the\n            // appropriate HTML snippet here; we also want to update\n            // flags on the message itself that get used by the message\n            // view code and possibly our filtering code.\n\n            // If I mention \"@aLiCe sMITH\", I still want \"Alice Smith\" to\n            // show in the pill.\n            let display_text = helper_config.get_actual_name_from_user_id(user_id);\n            let classes;\n            if (silently) {\n                classes = \"user-mention silent\";\n            } else {\n                if (helper_config.my_user_id() === user_id) {\n                    // Personal mention of current user.\n                    mentioned = true;\n                }\n                classes = \"user-mention\";\n                display_text = \"@\" + display_text;\n            }\n\n            return `<span class=\"${classes}\" data-user-id=\"${_.escape(user_id)}\">${_.escape(\n                display_text,\n            )}</span>`;\n        },\n        groupMentionHandler(name, silently) {\n            const group = helper_config.get_user_group_from_name(name);\n            if (group !== undefined) {\n                let display_text;\n                let classes;\n                if (silently) {\n                    display_text = group.name;\n                    classes = \"user-group-mention silent\";\n                } else {\n                    display_text = \"@\" + group.name;\n                    classes = \"user-group-mention\";\n                    if (\n                        helper_config.is_member_of_user_group(helper_config.my_user_id(), group.id)\n                    ) {\n                        // Mentioned the current user's group.\n                        mentioned_group = true;\n                    }\n                }\n\n                return `<span class=\"${classes}\" data-user-group-id=\"${_.escape(\n                    group.id,\n                )}\">${_.escape(display_text)}</span>`;\n            }\n            return undefined;\n        },\n        silencedMentionHandler(quote) {\n            // Silence quoted mentions.\n            quote = quote.replace(\n                /(<span class=\"user-mention)(\" data-user-id=\"(\\d+|\\*)\">)@/g,\n                \"$1 silent$2\",\n            );\n\n            // Silence quoted user group mentions.\n            quote = quote.replace(\n                /(<span class=\"user-group-mention)(\" data-user-group-id=\"\\d+\">)@/g,\n                \"$1 silent$2\",\n            );\n\n            // In most cases, if you are being mentioned in the message you're quoting, you wouldn't\n            // mention yourself outside of the blockquote (and, above it). If that you do that, the\n            // following mentioned status is false; the backend rendering is authoritative and the\n            // only side effect is the lack red flash on immediately sending the message.\n            //\n            // A better parser would be able to just ignore mentions\n            // inside; we just set all flags to False and let the\n            // server rendering correct the message flags, to avoid a\n            // flash of mention styling.\n            mentioned = false;\n            mentioned_group = false;\n            mentioned_wildcard = false;\n            return quote;\n        },\n    };\n\n    // Our Python-Markdown processor appends two \\n\\n to input\n    const content = marked(raw_content + \"\\n\\n\", marked_options).trim();\n\n    // Simulate message flags for our locally rendered\n    // message. Messages the user themselves sent via the browser are\n    // always marked as read.\n    const flags = [\"read\"];\n    if (mentioned || mentioned_group) {\n        flags.push(\"mentioned\");\n    }\n    if (mentioned_wildcard) {\n        flags.push(\"wildcard_mentioned\");\n    }\n\n    return {content, flags};\n}\n\nfunction is_x_between(x, start, length) {\n    return start <= x && x < start + length;\n}\n\nfunction is_overlapping(match_a, match_b) {\n    return (\n        is_x_between(match_a.index, match_b.index, match_b.text.length) ||\n        is_x_between(match_b.index, match_a.index, match_a.text.length)\n    );\n}\n\nexport function get_topic_links({topic, get_linkifier_map}) {\n    // We export this for testing purposes, and mobile may want to\n    // use this as well in the future.\n    const links = [];\n    // The lower the precedence is, the more prioritized the pattern is.\n    let precedence = 0;\n\n    for (const [pattern, url] of get_linkifier_map().entries()) {\n        let match;\n        while ((match = pattern.exec(topic)) !== null) {\n            let link_url = url;\n            const matched_groups = match.slice(1);\n            let i = 0;\n            while (i < matched_groups.length) {\n                const matched_group = matched_groups[i];\n                const current_group = i + 1;\n                const back_ref = \"\\\\\" + current_group;\n                link_url = link_url.replace(back_ref, matched_group);\n                i += 1;\n            }\n            // We store the starting index as well, to sort the order of occurrence of the links\n            // in the topic, similar to the logic implemented in zerver/lib/markdown/__init__.py\n            links.push({url: link_url, text: match[0], index: match.index, precedence});\n        }\n        precedence += 1;\n    }\n\n    // Sort the matches beforehand so we favor the match with a higher priority and tie-break with the starting index.\n    // Note that we sort it before processing the raw URLs so that linkifiers will be prioritized over them.\n    links.sort((a, b) => {\n        if (a.precedence !== null && b.precedence !== null) {\n            // When both of the links have precedence set, find the one that comes first.\n            const diff = a.precedence - b.precedence;\n            if (diff !== 0) {\n                return diff;\n            }\n        }\n        // Fallback to the index when there is either a tie in precedence or at least one of the links is a raw URL.\n        return a.index - b.index;\n    });\n\n    // Also make raw URLs navigable\n    const url_re = /\\b(https?:\\/\\/[^\\s<]+[^\\s\"'),.:;<\\]])/g; // Slightly modified from third/marked.js\n    let match;\n    while ((match = url_re.exec(topic)) !== null) {\n        links.push({url: match[0], text: match[0], index: match.index, precedence: null});\n    }\n    // The following removes overlapping intervals depending on the precedence of linkifier patterns.\n    // This uses the same algorithm implemented in zerver/lib/markdown/__init__.py.\n    // To avoid mutating links while processing links, the final output gets pushed to another list.\n    const applied_matches = [];\n\n    // To avoid mutating matches inside the loop, the final output gets appended to another list.\n    for (const new_match of links) {\n        // When the current match does not overlap with all existing matches,\n        // we are confident that the link should present in the final output because\n        //  1. Given that the links are sorted by precedence, the current match has the highest priority\n        //     among the matches to be checked.\n        //  2. None of the matches with higher priority overlaps with the current match.\n        // This might be optimized to search for overlapping matches in O(logn) time,\n        // but it is kept as-is since performance is not critical for this codepath and for simplicity.\n        if (applied_matches.every((applied_match) => !is_overlapping(applied_match, new_match))) {\n            applied_matches.push(new_match);\n        }\n    }\n    // We need to sort applied_matches again because the links were previously ordered by precedence,\n    // so that the links are displayed in the order their patterns are matched.\n    return applied_matches\n        .sort((a, b) => a.index - b.index)\n        .map((match) => ({url: match.url, text: match.text}));\n}\n\nexport function is_status_message(raw_content) {\n    return raw_content.startsWith(\"/me \");\n}\n\nfunction make_emoji_span(codepoint, title, alt_text) {\n    return `<span aria-label=\"${_.escape(title)}\" class=\"emoji emoji-${_.escape(\n        codepoint,\n    )}\" role=\"img\" title=\"${_.escape(title)}\">${_.escape(alt_text)}</span>`;\n}\n\nfunction handleUnicodeEmoji({unicode_emoji, get_emoji_name}) {\n    const codepoint = unicode_emoji.codePointAt(0).toString(16);\n    const emoji_name = get_emoji_name(codepoint);\n\n    if (emoji_name) {\n        const alt_text = \":\" + emoji_name + \":\";\n        const title = emoji_name.replace(/_/g, \" \");\n        return make_emoji_span(codepoint, title, alt_text);\n    }\n\n    return unicode_emoji;\n}\n\nfunction handleEmoji({emoji_name, get_realm_emoji_url, get_emoji_codepoint}) {\n    const alt_text = \":\" + emoji_name + \":\";\n    const title = emoji_name.replace(/_/g, \" \");\n\n    // Zulip supports both standard/Unicode emoji, served by a\n    // spritesheet and custom realm-specific emoji (served by URL).\n    // We first check if this is a realm emoji, and if so, render it.\n    //\n    // Otherwise we'll look at Unicode emoji to render with an emoji\n    // span using the spritesheet; and if it isn't one of those\n    // either, we pass through the plain text syntax unmodified.\n    const emoji_url = get_realm_emoji_url(emoji_name);\n\n    if (emoji_url) {\n        return `<img alt=\"${_.escape(alt_text)}\" class=\"emoji\" src=\"${_.escape(\n            emoji_url,\n        )}\" title=\"${_.escape(title)}\">`;\n    }\n\n    const codepoint = get_emoji_codepoint(emoji_name);\n    if (codepoint) {\n        return make_emoji_span(codepoint, title, alt_text);\n    }\n\n    return alt_text;\n}\n\nfunction handleLinkifier({pattern, matches, get_linkifier_map}) {\n    let url = get_linkifier_map().get(pattern);\n\n    let current_group = 1;\n\n    for (const match of matches) {\n        const back_ref = \"\\\\\" + current_group;\n        url = url.replace(back_ref, match);\n        current_group += 1;\n    }\n\n    return url;\n}\n\nfunction handleTimestamp(time) {\n    let timeobject;\n    if (Number.isNaN(Number(time))) {\n        timeobject = new Date(time); // not a Unix timestamp\n    } else {\n        // JavaScript dates are in milliseconds, Unix timestamps are in seconds\n        timeobject = new Date(time * 1000);\n    }\n\n    const escaped_time = _.escape(time);\n    if (!isValid(timeobject)) {\n        // Unsupported time format: rerender accordingly.\n\n        // We do not show an error on these formats in local echo because\n        // there is a chance that the server would interpret it successfully\n        // and if it does, the jumping from the error message to a rendered\n        // timestamp doesn't look good.\n        return `<span>${escaped_time}</span>`;\n    }\n\n    // Use html5 <time> tag for valid timestamps.\n    // render time without milliseconds.\n    const escaped_isotime = _.escape(timeobject.toISOString().split(\".\")[0] + \"Z\");\n    return `<time datetime=\"${escaped_isotime}\">${escaped_time}</time>`;\n}\n\nfunction handleStream({stream_name, get_stream_by_name, stream_hash}) {\n    const stream = get_stream_by_name(stream_name);\n    if (stream === undefined) {\n        return undefined;\n    }\n    const href = stream_hash(stream.stream_id);\n    return `<a class=\"stream\" data-stream-id=\"${_.escape(stream.stream_id)}\" href=\"/${_.escape(\n        href,\n    )}\">#${_.escape(stream.name)}</a>`;\n}\n\nfunction handleStreamTopic({stream_name, topic, get_stream_by_name, stream_topic_hash}) {\n    const stream = get_stream_by_name(stream_name);\n    if (stream === undefined || !topic) {\n        return undefined;\n    }\n    const href = stream_topic_hash(stream.stream_id, topic);\n    const text = `#${stream.name} > ${topic}`;\n    return `<a class=\"stream-topic\" data-stream-id=\"${_.escape(\n        stream.stream_id,\n    )}\" href=\"/${_.escape(href)}\">${_.escape(text)}</a>`;\n}\n\nfunction handleTex(tex, fullmatch) {\n    try {\n        return katex.renderToString(tex);\n    } catch (error) {\n        if (error.message.startsWith(\"KaTeX parse error\")) {\n            // TeX syntax error\n            return `<span class=\"tex-error\">${_.escape(fullmatch)}</span>`;\n        }\n        throw new Error(error.message);\n    }\n}\n\nexport function parse({raw_content, helper_config}) {\n    function get_linkifier_regexes() {\n        return Array.from(helper_config.get_linkifier_map().keys());\n    }\n\n    function disable_markdown_regex(rules, name) {\n        rules[name] = {\n            exec() {\n                return false;\n            },\n        };\n    }\n\n    // Configure the marked Markdown parser for our usage\n    const renderer = new marked.Renderer();\n\n    // No <code> around our code blocks instead a codehilite <div> and disable\n    // class-specific highlighting.\n    renderer.code = (code) => fenced_code.wrap_code(code) + \"\\n\\n\";\n\n    // Prohibit empty links for some reason.\n    const old_link = renderer.link;\n    renderer.link = (href, title, text) =>\n        old_link.call(renderer, href, title, text.trim() ? text : href);\n\n    // Put a newline after a <br> in the generated HTML to match Markdown\n    renderer.br = function () {\n        return \"<br>\\n\";\n    };\n\n    function preprocess_code_blocks(src) {\n        return fenced_code.process_fenced_code(src);\n    }\n\n    function preprocess_translate_emoticons(src) {\n        if (!helper_config.should_translate_emoticons()) {\n            return src;\n        }\n\n        // In this scenario, the message has to be from the user, so the only\n        // requirement should be that they have the setting on.\n        return translate_emoticons_to_names({\n            src,\n            get_emoticon_translations: helper_config.get_emoticon_translations,\n        });\n    }\n\n    // Disable headings\n    // We only keep the # Heading format.\n    disable_markdown_regex(marked.Lexer.rules.tables, \"lheading\");\n\n    // Disable __strong__ (keeping **strong**)\n    marked.InlineLexer.rules.zulip.strong = /^\\*\\*([\\S\\s]+?)\\*\\*(?!\\*)/;\n\n    // Make sure <del> syntax matches the backend processor\n    marked.InlineLexer.rules.zulip.del = /^(?!<~)~~([^~]+)~~(?!~)/;\n\n    // Disable _emphasis_ (keeping *emphasis*)\n    // Text inside ** must start and end with a word character\n    // to prevent mis-parsing things like \"char **x = (char **)y\"\n    marked.InlineLexer.rules.zulip.em = /^\\*(?!\\s+)((?:\\*\\*|[\\S\\s])+?)(\\S)\\*(?!\\*)/;\n\n    // Disable autolink as (a) it is not used in our backend and (b) it interferes with @mentions\n    disable_markdown_regex(marked.InlineLexer.rules.zulip, \"autolink\");\n\n    // Tell our fenced code preprocessor how to insert arbitrary\n    // HTML into the output. This generated HTML is safe to not escape\n    fenced_code.set_stash_func((html) => marked.stashHtml(html, true));\n\n    function streamHandler(stream_name) {\n        return handleStream({\n            stream_name,\n            get_stream_by_name: helper_config.get_stream_by_name,\n            stream_hash: helper_config.stream_hash,\n        });\n    }\n\n    function streamTopicHandler(stream_name, topic) {\n        return handleStreamTopic({\n            stream_name,\n            topic,\n            get_stream_by_name: helper_config.get_stream_by_name,\n            stream_topic_hash: helper_config.stream_topic_hash,\n        });\n    }\n\n    function emojiHandler(emoji_name) {\n        return handleEmoji({\n            emoji_name,\n            get_realm_emoji_url: helper_config.get_realm_emoji_url,\n            get_emoji_codepoint: helper_config.get_emoji_codepoint,\n        });\n    }\n\n    function unicodeEmojiHandler(unicode_emoji) {\n        return handleUnicodeEmoji({\n            unicode_emoji,\n            get_emoji_name: helper_config.get_emoji_name,\n        });\n    }\n\n    function linkifierHandler(pattern, matches) {\n        return handleLinkifier({\n            pattern,\n            matches,\n            get_linkifier_map: helper_config.get_linkifier_map,\n        });\n    }\n\n    const options = {\n        get_linkifier_regexes,\n        linkifierHandler,\n        emojiHandler,\n        unicodeEmojiHandler,\n        streamHandler,\n        streamTopicHandler,\n        texHandler: handleTex,\n        timestampHandler: handleTimestamp,\n        gfm: true,\n        tables: true,\n        breaks: true,\n        pedantic: false,\n        sanitize: true,\n        smartLists: true,\n        smartypants: false,\n        zulip: true,\n        renderer,\n        preprocessors: [preprocess_code_blocks, preprocess_translate_emoticons],\n    };\n\n    return parse_with_options({raw_content, helper_config, options});\n}\n\n// NOTE: Everything below this line is likely to be web-specific\n//       and won't be used by future platforms such as mobile.\n//       We may eventually move this code to a new file, but we want\n//       to wait till the dust settles a bit on some other changes first.\n\nlet web_app_helpers;\n\nexport function initialize(helper_config) {\n    // This is generally only intended to be called by the web app. Most\n    // other platforms should call setup().\n    web_app_helpers = helper_config;\n}\n\nexport function apply_markdown(message) {\n    // This is generally only intended to be called by the web app. Most\n    // other platforms should call parse().\n    const raw_content = message.raw_content;\n    const {content, flags} = parse({raw_content, helper_config: web_app_helpers});\n    message.content = content;\n    message.flags = flags;\n    message.is_me_message = is_status_message(raw_content);\n}\n\nexport function add_topic_links(message) {\n    if (message.type !== \"stream\") {\n        message.topic_links = [];\n        return;\n    }\n    message.topic_links = get_topic_links({\n        topic: message.topic,\n        get_linkifier_map: web_app_helpers.get_linkifier_map,\n    });\n}\n\nexport function contains_backend_only_syntax(content) {\n    return content_contains_backend_only_syntax({\n        content,\n        get_linkifier_map: web_app_helpers.get_linkifier_map,\n    });\n}\n\nexport function parse_non_message(raw_content) {\n    // Occasionally we get markdown from the server that is not technically\n    // a message, but we want to convert it to HTML. Note that we parse\n    // raw_content exactly as if it were a Zulip message, so we will\n    // handle things like mentions, stream links, and linkifiers.\n    return parse({raw_content, helper_config: web_app_helpers}).content;\n}\n\n// eslint-disable-next-line no-unused-vars\nfunction parse_with_options2({raw_content, options}) {\n\n    const marked_options = {\n        ...options,\n        // // redering 부문에서 사용되고 있어 추가함\n        // silencedMentionHandler(quote) {\n        //     return quote;\n        // },        \n    };\n\n    // Our Python-Markdown processor appends two \\n\\n to input\n    // const content = marked.parse(raw_content + \"\\n\\n\", marked_options).trim();\n    // const content = marked.parse(raw_content + \"\\n\\n\",marked_options);\n    // const content = marked.parse(raw_content + \"\\n\\n\",marked_options).trim();\n    const content = marked.parse(raw_content + \"\\n\\n\",marked_options).trim();\n\n    return content;\n}\n\nexport function parse2(raw_content) {\n    // Configure the marked Markdown parser for our usage\n    const renderer = new marked.Renderer();\n\n    // No <code> around our code blocks instead a codehilite <div> and disable\n    // class-specific highlighting.\n    renderer.code = (code) => fenced_code.wrap_code(code) + \"\\n\\n\";\n\n    // Prohibit empty links for some reason.\n    const old_link = renderer.link;\n    renderer.link = (href, title, text) =>\n        old_link.call(renderer, href, title, text.trim() ? text : href);\n\n    // Math Tex 처리\n    const originParagraph = renderer.paragraph.bind(renderer)\n    renderer.paragraph = (text) => {\n      const blockRegex = /\\$\\$[^$]*\\$\\$/g\n      const inlineRegex = /\\$[^$]*\\$/g\n      const blockExprArray = text.match(blockRegex)\n      const inlineExprArray = text.match(inlineRegex)\n      // eslint-disable-next-line guard-for-in\n      for ( let i in blockExprArray) {\n        const expr = blockExprArray[i]\n        const result = renderMathsExpression(expr)\n        text = text.replace(expr, result)\n      }\n      for (let i in inlineExprArray) {\n        const expr = inlineExprArray[i]\n        const result = renderMathsExpression(expr)\n        text = text.replace(expr, result)\n      }\n      return originParagraph(text)\n    }\n    function renderMathsExpression (expr) {\n      if (expr[0] === '$' && expr[expr.length - 1] === '$') {\n        let displayStyle = false\n        expr = expr.substr(1, expr.length - 2)\n        if (expr[0] === '$' && expr[expr.length - 1] === '$') {\n          displayStyle = true\n          expr = expr.substr(1, expr.length - 2)\n        }\n        let html = null\n        try {\n          html = katex.renderToString(expr)\n        } catch (e) {\n          console.err(e)\n        }\n        if (displayStyle && html) {\n          html = html.replace(/class=\"katex\"/g, 'class=\"katex katex-block\" style=\"display: block;\"')\n        }\n        return html\n      } else {\n        return null\n      }\n    }  \n   \n    const options = {\n        gfm: true,\n        breaks: true,\n        pedantic: false,\n        renderer,\n    };    \n    try {\n        // math 처리\n        let src = fenced_code.process_fenced_code(raw_content)\n        marked.setOptions(options)\n        const content = marked.parse(src + \"\\n\\n\").trim();\n        // console.log(content);\n        return content;         \n      } catch (e) {\n        e.message += \"\\nPlease report this to https://zulip.com/development-community/\";\n        if ((options || marked.defaults).silent) {\n          return '<p>An error occurred:</p><pre>'\n            + escape(String(e.message), true)\n            + '</pre>';\n        }\n        throw e;\n      }    \n   \n}","import ClipboardJS from \"clipboard\";\nimport $ from \"jquery\";\n\nimport * as resolved_topic from \"../shared/js/resolved_topic\";\nimport render_delete_message_modal from \"../templates/confirm_dialog/confirm_delete_message.hbs\";\nimport render_message_edit_form from \"../templates/message_edit_form.hbs\";\nimport render_topic_edit_form from \"../templates/topic_edit_form.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport * as compose from \"./compose\";\nimport * as compose_actions from \"./compose_actions\";\nimport * as compose_ui from \"./compose_ui\";\nimport * as composebox_typeahead from \"./composebox_typeahead\";\nimport * as condense from \"./condense\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport * as echo from \"./echo\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as loading from \"./loading\";\nimport * as markdown from \"./markdown\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_store from \"./message_store\";\nimport * as message_viewport from \"./message_viewport\";\nimport {page_params} from \"./page_params\";\nimport * as resize from \"./resize\";\nimport * as rows from \"./rows\";\nimport * as settings_data from \"./settings_data\";\nimport * as stream_data from \"./stream_data\";\nimport * as ui_report from \"./ui_report\";\nimport * as upload from \"./upload\";\nimport * as util from \"./util\";\n\nconst currently_editing_messages = new Map();\nlet currently_deleting_messages = [];\nlet currently_topic_editing_messages = [];\nconst currently_echoing_messages = new Map();\n\n// These variables are designed to preserve the user's most recent\n// choices when editing a group of messages, to make it convenient to\n// move several topics in a row with the same settings.\nexport let notify_old_thread_default = false;\n\nexport let notify_new_thread_default = true;\n\nexport function is_topic_editable(message, edit_limit_seconds_buffer = 0) {\n    if (!is_message_editable_ignoring_permissions(message)) {\n        return false;\n    }\n\n    if (message.type !== \"stream\") {\n        return false;\n    }\n\n    if (message.topic === compose.empty_topic_placeholder()) {\n        return true;\n    }\n\n    if (!settings_data.user_can_move_messages_to_another_topic()) {\n        return false;\n    }\n\n    // Organization admins and moderators can edit message topics indefinitely,\n    // irrespective of the topic editing deadline, if edit_topic_policy allows\n    // them to do so.\n    if (page_params.is_admin || page_params.is_moderator) {\n        return true;\n    }\n\n    // If you're using community topic editing, there's a deadline.\n    return (\n        page_params.realm_community_topic_editing_limit_seconds +\n            edit_limit_seconds_buffer +\n            (message.timestamp - Date.now() / 1000) >\n        0\n    );\n}\n\nfunction is_widget_message(message) {\n    if (message.submessages && message.submessages.length !== 0) {\n        return true;\n    }\n    return false;\n}\n\nexport function is_message_editable_ignoring_permissions(message) {\n    if (!message) {\n        return false;\n    }\n\n    if (message.failed_request) {\n        // TODO: For completely failed requests, we should be able\n        //       to \"edit\" the message, but it won't really be like\n        //       other message updates.  This commit changed the result\n        //       from FULL to NO, since the prior implementation was\n        //       buggy.\n        return false;\n    }\n\n    // Locally echoed messages are not editable, since the message hasn't\n    // finished being sent yet.\n    if (message.locally_echoed) {\n        return false;\n    }\n\n    // Messages where we're currently locally echoing an edit not yet acknowledged\n    // by the server.\n    if (currently_echoing_messages.has(message.id)) {\n        return false;\n    }\n    return true;\n}\n\nexport function is_content_editable(message, edit_limit_seconds_buffer = 0) {\n    if (!is_message_editable_ignoring_permissions(message)) {\n        return false;\n    }\n\n    if (!page_params.realm_allow_message_editing) {\n        return false;\n    }\n\n    if (!message.sent_by_me) {\n        return false;\n    }\n\n    if (is_widget_message(message)) {\n        return false;\n    }\n\n    if (page_params.realm_message_content_edit_limit_seconds === null) {\n        return true;\n    }\n\n    if (\n        page_params.realm_message_content_edit_limit_seconds +\n            edit_limit_seconds_buffer +\n            (message.timestamp - Date.now() / 1000) >\n        0\n    ) {\n        return true;\n    }\n    return false;\n}\n\nexport function get_deletability(message) {\n    if (page_params.is_admin) {\n        return true;\n    }\n\n    if (!message.sent_by_me) {\n        return false;\n    }\n    if (message.locally_echoed) {\n        return false;\n    }\n    if (!settings_data.user_can_delete_own_message()) {\n        return false;\n    }\n\n    if (page_params.realm_message_content_delete_limit_seconds === null) {\n        // This means no time limit for message deletion.\n        return true;\n    }\n\n    if (\n        page_params.realm_message_content_delete_limit_seconds +\n            (message.timestamp - Date.now() / 1000) >\n        0\n    ) {\n        return true;\n    }\n    return false;\n}\n\nexport function can_move_message(message) {\n    if (!message.is_stream) {\n        return false;\n    }\n\n    if (!is_message_editable_ignoring_permissions(message)) {\n        return false;\n    }\n\n    return is_topic_editable(message) || settings_data.user_can_move_messages_between_streams();\n}\n\nexport function stream_and_topic_exist_in_edit_history(message, stream_id, topic) {\n    /*  Checks to see if a stream_id and a topic match any historical\n        stream_id and topic state in the message's edit history.\n\n        Does not check the message's current stream_id and topic for\n        a match to the stream_id and topic parameters.\n     */\n    const narrow_dict = {stream_id, topic};\n    const message_dict = {stream_id: message.stream_id, topic: message.topic};\n\n    if (!message.edit_history) {\n        // If message edit history is disabled in the organization,\n        // the client does not have the information locally to answer\n        // this question correctly.\n        return false;\n    }\n\n    for (const edit_history_event of message.edit_history) {\n        if (!edit_history_event.prev_stream && !edit_history_event.prev_topic) {\n            // Message was not moved in this edit event.\n            continue;\n        }\n\n        if (edit_history_event.prev_stream) {\n            // This edit event changed the stream.  We expect the\n            // following to be true due to the invariants of the edit\n            // history data structure:\n            // edit_history_event.stream === message_dict.stream_id\n            message_dict.stream_id = edit_history_event.prev_stream;\n        }\n\n        if (edit_history_event.prev_topic) {\n            // This edit event changed the topic.  We expect the\n            // following to be true due to the invariants of the edit\n            // history data structure:\n            // util.lower_same(edit_history_event.topic, message_dict.topic)\n            message_dict.topic = edit_history_event.prev_topic;\n        }\n\n        if (util.same_stream_and_topic(narrow_dict, message_dict)) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport function hide_message_edit_spinner($row) {\n    $row.find(\".loader\").hide();\n    $row.find(\".message_edit_save span\").show();\n    $row.find(\".message_edit_save\").removeClass(\"disable-btn\");\n    $row.find(\".message_edit_cancel\").removeClass(\"disable-btn\");\n}\n\nexport function show_message_edit_spinner($row) {\n    const using_dark_theme = settings_data.using_dark_theme();\n    loading.show_button_spinner($row.find(\".loader\"), using_dark_theme);\n    $row.find(\".message_edit_save span\").hide();\n    $row.find(\".message_edit_save\").addClass(\"disable-btn\");\n    $row.find(\".message_edit_cancel\").addClass(\"disable-btn\");\n}\n\nexport function show_topic_edit_spinner($row) {\n    const $spinner = $row.find(\".topic_edit_spinner\");\n    loading.make_indicator($spinner);\n    $spinner.css({height: \"\"});\n    $(\".topic_edit_save\").hide();\n    $(\".topic_edit_cancel\").hide();\n    $(\".topic_edit_spinner\").show();\n}\n\nexport function end_if_focused_on_inline_topic_edit() {\n    const $focused_elem = $(\".topic_edit_form\").find(\":focus\");\n    if ($focused_elem.length === 1) {\n        $focused_elem.trigger(\"blur\");\n        const $recipient_row = $focused_elem.closest(\".recipient_row\");\n        end_inline_topic_edit($recipient_row);\n    }\n}\n\nexport function end_if_focused_on_message_row_edit() {\n    const $focused_elem = $(\".message_edit\").find(\":focus\");\n    if ($focused_elem.length === 1) {\n        $focused_elem.trigger(\"blur\");\n        const $row = $focused_elem.closest(\".message_row\");\n        end_message_row_edit($row);\n    }\n}\n\nfunction handle_message_row_edit_keydown(e) {\n    if (keydown_util.is_enter_event(e)) {\n        if ($(e.target).hasClass(\"message_edit_content\")) {\n            // Pressing Enter to save edits is coupled with Enter to send\n            if (composebox_typeahead.should_enter_send(e)) {\n                const $row = $(\".message_edit_content:focus\").closest(\".message_row\");\n                const $message_edit_save_button = $row.find(\".message_edit_save\");\n                if ($message_edit_save_button.prop(\"disabled\")) {\n                    // In cases when the save button is disabled\n                    // we need to disable save on pressing Enter\n                    // Prevent default to avoid new-line on pressing\n                    // Enter inside the textarea in this case\n                    e.preventDefault();\n                    return;\n                }\n                save_message_row_edit($row);\n                e.stopPropagation();\n                e.preventDefault();\n            } else {\n                composebox_typeahead.handle_enter($(e.target), e);\n                return;\n            }\n        } else if ($(\".typeahead:visible\").length > 0) {\n            // Accepting typeahead is handled by the typeahead library.\n            return;\n        } else if (\n            $(e.target).hasClass(\"message_edit_topic\") ||\n            $(e.target).hasClass(\"message_edit_topic_propagate\")\n        ) {\n            // Enter should save the topic edit, as long as it's\n            // not being used to accept typeahead.\n            const $row = $(e.target).closest(\".message_row\");\n            save_message_row_edit($row);\n            e.stopPropagation();\n        }\n    } else if (e.key === \"Escape\") {\n        end_if_focused_on_message_row_edit();\n        e.stopPropagation();\n        e.preventDefault();\n    }\n}\n\nfunction handle_inline_topic_edit_keydown(e) {\n    if (keydown_util.is_enter_event(e)) {\n        // Handle Enter key in the recipient bar/inline topic edit form\n        if ($(\".typeahead:visible\").length > 0) {\n            // Accepting typeahead should not trigger a save.\n            e.preventDefault();\n            return;\n        }\n        const $row = $(e.target).closest(\".recipient_row\");\n        save_inline_topic_edit($row);\n        e.stopPropagation();\n        e.preventDefault();\n    } else if (e.key === \"Escape\") {\n        // Handle Esc\n        end_if_focused_on_inline_topic_edit();\n        e.stopPropagation();\n        e.preventDefault();\n    }\n}\n\nfunction timer_text(seconds_left) {\n    const minutes = Math.floor(seconds_left / 60);\n    const seconds = seconds_left % 60;\n    if (minutes >= 1) {\n        return $t({defaultMessage: \"{minutes} min to edit\"}, {minutes: minutes.toString()});\n    } else if (seconds_left >= 10) {\n        return $t(\n            {defaultMessage: \"{seconds} sec to edit\"},\n            {seconds: (seconds - (seconds % 5)).toString()},\n        );\n    }\n    return $t({defaultMessage: \"{seconds} sec to edit\"}, {seconds: seconds.toString()});\n}\n\nfunction create_copy_to_clipboard_handler($row, source, message_id) {\n    const clipboard = new ClipboardJS(source, {\n        target: () =>\n            document.querySelector(`#edit_form_${CSS.escape(message_id)} .message_edit_content`),\n    });\n\n    clipboard.on(\"success\", () => {\n        end_message_row_edit($row);\n        $row.find(\".alert-msg\").text($t({defaultMessage: \"Copied!\"}));\n        $row.find(\".alert-msg\").css(\"display\", \"block\");\n        $row.find(\".alert-msg\").delay(1000).fadeOut(300);\n        if ($(\".tooltip\").is(\":visible\")) {\n            $(\".tooltip\").hide();\n        }\n    });\n}\n\nexport function get_available_streams_for_moving_messages(current_stream_id) {\n    return stream_data\n        .subscribed_subs()\n        .filter((stream) => {\n            if (stream.stream_id === current_stream_id) {\n                return true;\n            }\n            return stream_data.can_post_messages_in_stream(stream);\n        })\n        .map((stream) => ({\n            name: stream.name,\n            value: stream.stream_id.toString(),\n        }))\n        .sort((a, b) => {\n            if (a.name.toLowerCase() < b.name.toLowerCase()) {\n                return -1;\n            }\n            if (a.name.toLowerCase() > b.name.toLowerCase()) {\n                return 1;\n            }\n            return 0;\n        });\n}\n\nfunction edit_message($row, raw_content) {\n    $row.find(\".message_reactions\").hide();\n    condense.hide_message_expander($row);\n    condense.hide_message_condenser($row);\n    const content_top = $row.find(\".message_top_line\")[0].getBoundingClientRect().top;\n\n    const message = message_lists.current.get(rows.id($row));\n\n    // We potentially got to this function by clicking a button that implied the\n    // user would be able to edit their message.  Give a little bit of buffer in\n    // case the button has been around for a bit, e.g. we show the\n    // edit_content_button (hovering pencil icon) as long as the user would have\n    // been able to click it at the time the mouse entered the message_row. Also\n    // a buffer in case their computer is slow, or stalled for a second, etc\n    // If you change this number also change edit_limit_buffer in\n    // zerver.actions.message_edit.check_update_message\n    const seconds_left_buffer = 5;\n    const max_file_upload_size = page_params.max_file_upload_size_mib;\n    let file_upload_enabled = false;\n\n    if (max_file_upload_size > 0) {\n        file_upload_enabled = true;\n    }\n\n    const is_editable = is_content_editable(message, seconds_left_buffer);\n\n    const $form = $(\n        render_message_edit_form({\n            message_id: message.id,\n            is_editable,\n            content: raw_content,\n            file_upload_enabled,\n            minutes_to_edit: Math.floor(page_params.realm_message_content_edit_limit_seconds / 60),\n            max_message_length: page_params.max_message_length,\n        }),\n    );\n\n    const edit_obj = {$form, raw_content};\n    currently_editing_messages.set(message.id, edit_obj);\n    message_lists.current.show_edit_message($row, edit_obj);\n\n    $form.on(\"keydown\", handle_message_row_edit_keydown);\n\n    $form\n        .find(\".message-edit-feature-group .video_link\")\n        .toggle(compose.compute_show_video_chat_button());\n    upload.feature_check($(`#edit_form_${CSS.escape(rows.id($row))} .compose_upload_file`));\n\n    const $message_edit_content = $row.find(\"textarea.message_edit_content\");\n    const $message_edit_countdown_timer = $row.find(\".message_edit_countdown_timer\");\n    const $copy_message = $row.find(\".copy_message\");\n\n    if (!is_editable) {\n        $message_edit_content.attr(\"readonly\", \"readonly\");\n        create_copy_to_clipboard_handler($row, $copy_message[0], message.id);\n    } else {\n        $copy_message.remove();\n        const edit_id = `#edit_form_${CSS.escape(rows.id($row))} .message_edit_content`;\n        const listeners = resize.watch_manual_resize(edit_id);\n        if (listeners) {\n            currently_editing_messages.get(rows.id($row)).listeners = listeners;\n        }\n        composebox_typeahead.initialize_compose_typeahead(edit_id);\n        compose_ui.handle_keyup(null, $(edit_id).expectOne());\n        $(edit_id).on(\"keydown\", function (event) {\n            compose_ui.handle_keydown(event, $(this).expectOne());\n        });\n        $(edit_id).on(\"keyup\", function (event) {\n            compose_ui.handle_keyup(event, $(this).expectOne());\n        });\n    }\n\n    // Add tooltip and timer\n    if (is_editable && page_params.realm_message_content_edit_limit_seconds > 0) {\n        $row.find(\".message-edit-timer\").show();\n\n        // Give them at least 10 seconds.\n        // If you change this number also change edit_limit_buffer in\n        // zerver.actions.message_edit.check_update_message\n        const min_seconds_to_edit = 10;\n        let seconds_left =\n            page_params.realm_message_content_edit_limit_seconds +\n            (message.timestamp - Date.now() / 1000);\n        seconds_left = Math.floor(Math.max(seconds_left, min_seconds_to_edit));\n\n        // I believe this needs to be defined outside the countdown_timer, since\n        // row just refers to something like the currently selected message, and\n        // can change out from under us\n        const $message_edit_save = $row.find(\"button.message_edit_save\");\n        // Do this right away, rather than waiting for the timer to do its first update,\n        // since otherwise there is a noticeable lag\n        $message_edit_countdown_timer.text(timer_text(seconds_left));\n        const countdown_timer = setInterval(() => {\n            seconds_left -= 1;\n            if (seconds_left <= 0) {\n                clearInterval(countdown_timer);\n                $message_edit_content.prop(\"readonly\", \"readonly\");\n                // We don't go directly to a \"TOPIC_ONLY\" type state (with an active Save button),\n                // since it isn't clear what to do with the half-finished edit. It's nice to keep\n                // the half-finished edit around so that they can copy-paste it, but we don't want\n                // people to think \"Save\" will save the half-finished edit.\n                $message_edit_save.addClass(\"disabled\");\n                $message_edit_countdown_timer.text($t({defaultMessage: \"Time's up!\"}));\n            } else {\n                $message_edit_countdown_timer.text(timer_text(seconds_left));\n            }\n        }, 1000);\n    }\n\n    if (!is_editable) {\n        $row.find(\".message_edit_close\").trigger(\"focus\");\n    } else {\n        $message_edit_content.trigger(\"focus\");\n        // Put cursor at end of input.\n        const contents = $message_edit_content.val();\n        $message_edit_content.val(\"\");\n        $message_edit_content.val(contents);\n    }\n\n    // Scroll to keep the top of the message content text in the same\n    // place visually, adjusting for border and padding.\n    const edit_top = $message_edit_content[0].getBoundingClientRect().top;\n    const scroll_by = edit_top - content_top + 5 - 14;\n\n    edit_obj.scrolled_by = scroll_by;\n    message_viewport.scrollTop(message_viewport.scrollTop() + scroll_by);\n}\n\nfunction start_edit_maintaining_scroll($row, content) {\n    edit_message($row, content);\n    const row_bottom = $row.height() + $row.offset().top;\n    const composebox_top = $(\"#compose\").offset().top;\n    if (row_bottom > composebox_top) {\n        message_viewport.scrollTop(message_viewport.scrollTop() + row_bottom - composebox_top);\n    }\n}\n\nfunction start_edit_with_content($row, content, edit_box_open_callback) {\n    start_edit_maintaining_scroll($row, content);\n    if (edit_box_open_callback) {\n        edit_box_open_callback();\n    }\n\n    upload.setup_upload({\n        mode: \"edit\",\n        row: rows.id($row),\n    });\n}\n\nexport function start($row, edit_box_open_callback) {\n    const message = message_lists.current.get(rows.id($row));\n    if (message === undefined) {\n        blueslip.error(\"Couldn't find message ID for edit \" + rows.id($row));\n        return;\n    }\n\n    if (message.raw_content) {\n        start_edit_with_content($row, message.raw_content, edit_box_open_callback);\n        return;\n    }\n\n    const msg_list = message_lists.current;\n    channel.get({\n        url: \"/json/messages/\" + message.id,\n        success(data) {\n            if (message_lists.current === msg_list) {\n                message.raw_content = data.raw_content;\n                start_edit_with_content($row, message.raw_content, edit_box_open_callback);\n            }\n        },\n    });\n}\n\nexport function toggle_resolve_topic(message_id, old_topic_name) {\n    let new_topic_name;\n    if (resolved_topic.is_resolved(old_topic_name)) {\n        new_topic_name = resolved_topic.unresolve_name(old_topic_name);\n    } else {\n        new_topic_name = resolved_topic.resolve_name(old_topic_name);\n    }\n\n    const request = {\n        propagate_mode: \"change_all\",\n        topic: new_topic_name,\n        send_notification_to_old_thread: false,\n        send_notification_to_new_thread: true,\n    };\n\n    channel.patch({\n        url: \"/json/messages/\" + message_id,\n        data: request,\n    });\n}\n\nexport function start_inline_topic_edit($recipient_row) {\n    const $form = $(\n        render_topic_edit_form({\n            max_topic_length: page_params.max_topic_length,\n        }),\n    );\n    message_lists.current.show_edit_topic_on_recipient_row($recipient_row, $form);\n    $form.on(\"keydown\", handle_inline_topic_edit_keydown);\n    $(\".topic_edit_spinner\").hide();\n    const msg_id = rows.id_for_recipient_row($recipient_row);\n    const message = message_lists.current.get(msg_id);\n    let topic = message.topic;\n    if (topic === compose.empty_topic_placeholder()) {\n        topic = \"\";\n    }\n    const $inline_topic_edit_input = $form.find(\".inline_topic_edit\");\n    $inline_topic_edit_input.val(topic).trigger(\"select\").trigger(\"focus\");\n    composebox_typeahead.initialize_topic_edit_typeahead(\n        $inline_topic_edit_input,\n        message.stream,\n        false,\n    );\n}\n\nexport function is_editing(id) {\n    return currently_editing_messages.has(id);\n}\n\nexport function end_inline_topic_edit($row) {\n    message_lists.current.hide_edit_topic_on_recipient_row($row);\n}\n\nexport function end_message_row_edit($row) {\n    const message = message_lists.current.get(rows.id($row));\n    if (message !== undefined && currently_editing_messages.has(message.id)) {\n        const scroll_by = currently_editing_messages.get(message.id).scrolled_by;\n        const original_scrollTop = message_viewport.scrollTop();\n\n        // Clean up resize event listeners\n        const listeners = currently_editing_messages.get(message.id).listeners;\n        const edit_box = document.querySelector(\n            `#edit_form_${CSS.escape(message.id)} .message_edit_content`,\n        );\n        if (listeners !== undefined) {\n            // Event listeners to clean up are only set in some edit types\n            edit_box.removeEventListener(\"mousedown\", listeners[0]);\n            document.body.removeEventListener(\"mouseup\", listeners[1]);\n        }\n\n        currently_editing_messages.delete(message.id);\n        message_lists.current.hide_edit_message($row);\n        message_viewport.scrollTop(original_scrollTop - scroll_by);\n\n        compose.abort_video_callbacks(message.id);\n    }\n    if ($row.find(\".condensed\").length !== 0) {\n        condense.show_message_expander($row);\n    } else {\n        condense.show_message_condenser($row);\n    }\n    $row.find(\".message_reactions\").show();\n\n    // We have to blur out text fields, or else hotkeys.js\n    // thinks we are still editing.\n    $row.find(\".message_edit\").trigger(\"blur\");\n    // We should hide the editing typeahead if it is visible\n    $row.find(\"input.message_edit_topic\").trigger(\"blur\");\n}\n\nexport function end_message_edit(message_id) {\n    const $row = message_lists.current.get_row(message_id);\n    if ($row.length > 0) {\n        end_message_row_edit($row);\n    } else if (currently_editing_messages.has(message_id)) {\n        // We should delete the message_id from currently_editing_messages\n        // if it exists there but we cannot find the row.\n        currently_editing_messages.delete(message_id);\n    }\n}\n\nexport function save_inline_topic_edit($row) {\n    const msg_list = message_lists.current;\n    let message_id = rows.id_for_recipient_row($row);\n    const message = message_lists.current.get(message_id);\n\n    const old_topic = message.topic;\n    const new_topic = $row.find(\".inline_topic_edit\").val();\n    const topic_changed = new_topic !== old_topic && new_topic.trim() !== \"\";\n\n    if (!topic_changed) {\n        // this means the inline_topic_edit was opened and submitted without\n        // changing anything, therefore, we should just close the inline topic edit.\n        end_inline_topic_edit($row);\n        return;\n    }\n\n    show_topic_edit_spinner($row);\n\n    if (message.locally_echoed) {\n        if (topic_changed) {\n            echo.edit_locally(message, {new_topic});\n            $row = message_lists.current.get_row(message_id);\n        }\n        end_inline_topic_edit($row);\n        return;\n    }\n\n    const request = {\n        message_id: message.id,\n        topic: new_topic,\n        propagate_mode: \"change_later\",\n        send_notification_to_old_thread: false,\n        send_notification_to_new_thread: false,\n    };\n\n    channel.patch({\n        url: \"/json/messages/\" + message.id,\n        data: request,\n        success() {\n            const $spinner = $row.find(\".topic_edit_spinner\");\n            loading.destroy_indicator($spinner);\n        },\n        error(xhr) {\n            const $spinner = $row.find(\".topic_edit_spinner\");\n            loading.destroy_indicator($spinner);\n            if (msg_list === message_lists.current) {\n                message_id = rows.id_for_recipient_row($row);\n                const message = channel.xhr_error_message(\n                    $t({defaultMessage: \"Error saving edit\"}),\n                    xhr,\n                );\n                $row.find(\".edit_error\").text(message).css(\"display\", \"inline-block\");\n            }\n        },\n    });\n}\n\nexport function save_message_row_edit($row) {\n    const msg_list = message_lists.current;\n    let message_id = rows.id($row);\n    const message = message_lists.current.get(message_id);\n    let changed = false;\n    let edit_locally_echoed = false;\n\n    let new_content;\n    const old_content = message.raw_content;\n\n    show_message_edit_spinner($row);\n\n    const $edit_content_input = $row.find(\".message_edit_content\");\n    const can_edit_content = $edit_content_input.attr(\"readonly\") !== \"readonly\";\n    if (can_edit_content) {\n        new_content = $edit_content_input.val();\n        changed = old_content !== new_content;\n    }\n\n    // Editing a not-yet-acked message (because the original send attempt failed)\n    // just results in the in-memory message being changed\n    if (message.locally_echoed) {\n        if (new_content !== message.raw_content) {\n            // `edit_locally` handles the case where `new_topic/new_stream_id` is undefined\n            echo.edit_locally(message, {\n                raw_content: new_content,\n            });\n            $row = message_lists.current.get_row(message_id);\n        }\n        end_message_row_edit($row);\n        return;\n    }\n\n    if (!changed) {\n        // If they didn't change anything, just cancel it.\n        end_message_row_edit($row);\n        return;\n    }\n\n    const request = {message_id: message.id, content: new_content};\n\n    if (!markdown.contains_backend_only_syntax(new_content)) {\n        // If the new message content could have been locally echoed,\n        // than we can locally echo the edit.\n        currently_echoing_messages.set(message_id, {\n            raw_content: new_content,\n            orig_content: message.content,\n            orig_raw_content: message.raw_content,\n\n            // Store flags that are about user interaction with the\n            // message so that echo.edit_locally() can restore these\n            // flags.\n            starred: message.starred,\n            historical: message.historical,\n            collapsed: message.collapsed,\n\n            // These flags are rendering artifacts we'll want if the\n            // edit fails and we need to revert to the original\n            // rendering of the message.\n            alerted: message.alerted,\n            mentioned: message.mentioned,\n            mentioned_me_directly: message.mentioned,\n        });\n        edit_locally_echoed = true;\n\n        // Settings these attributes causes a \"SAVING\" notice to\n        // briefly appear where \"EDITED\" would normally appear until\n        // the message is acknowledged by the server.\n        message.local_edit_timestamp = Math.round(Date.now() / 1000);\n\n        echo.edit_locally(message, currently_echoing_messages.get(message_id));\n\n        $row = message_lists.current.get_row(message_id);\n        end_message_row_edit($row);\n    }\n\n    channel.patch({\n        url: \"/json/messages/\" + message.id,\n        data: request,\n        success() {\n            if (edit_locally_echoed) {\n                delete message.local_edit_timestamp;\n                currently_echoing_messages.delete(message_id);\n            }\n            hide_message_edit_spinner($row);\n        },\n        error(xhr) {\n            if (msg_list === message_lists.current) {\n                message_id = rows.id($row);\n\n                if (edit_locally_echoed) {\n                    const echoed_message = message_store.get(message_id);\n                    const echo_data = currently_echoing_messages.get(message_id);\n\n                    delete echoed_message.local_edit_timestamp;\n                    currently_echoing_messages.delete(message_id);\n\n                    // Restore the original content.\n                    echo.edit_locally(echoed_message, {\n                        content: echo_data.orig_content,\n                        raw_content: echo_data.orig_raw_content,\n                        mentioned: echo_data.mentioned,\n                        mentioned_me_directly: echo_data.mentioned_me_directly,\n                        alerted: echo_data.alerted,\n                    });\n\n                    $row = message_lists.current.get_row(message_id);\n                    if (!is_editing(message_id)) {\n                        // Return to the message editing open UI state with the edited content.\n                        start_edit_maintaining_scroll($row, echo_data.raw_content);\n                    }\n                }\n\n                hide_message_edit_spinner($row);\n                const message = channel.xhr_error_message(\n                    $t({defaultMessage: \"Error saving edit\"}),\n                    xhr,\n                );\n                $row.find(\".edit_error\").text(message).show();\n            }\n        },\n    });\n    // The message will automatically get replaced via message_list.update_message.\n}\n\nexport function maybe_show_edit($row, id) {\n    if (currently_editing_messages.has(id)) {\n        message_lists.current.show_edit_message($row, currently_editing_messages.get(id));\n    }\n}\n\nexport function edit_last_sent_message() {\n    const msg = message_lists.current.get_last_message_sent_by_me();\n\n    if (!msg) {\n        return;\n    }\n\n    if (!msg.id) {\n        blueslip.error(\"Message has invalid id in edit_last_sent_message.\");\n        return;\n    }\n\n    if (!is_content_editable(msg, 5)) {\n        return;\n    }\n\n    const $msg_row = message_lists.current.get_row(msg.id);\n    if (!$msg_row) {\n        // This should never happen, since we got the message above\n        // from message_lists.current.\n        blueslip.error(\"Could not find row for id \" + msg.id);\n        return;\n    }\n\n    message_lists.current.select_id(msg.id, {then_scroll: true, from_scroll: true});\n\n    // Finally do the real work!\n    compose_actions.cancel();\n    start($msg_row, () => {\n        $(\".message_edit_content\").trigger(\"focus\");\n    });\n}\n\nexport function delete_message(msg_id) {\n    const html_body = render_delete_message_modal();\n\n    function do_delete_message() {\n        currently_deleting_messages.push(msg_id);\n        channel.del({\n            url: \"/json/messages/\" + msg_id,\n            success() {\n                currently_deleting_messages = currently_deleting_messages.filter(\n                    (id) => id !== msg_id,\n                );\n                dialog_widget.hide_dialog_spinner();\n                dialog_widget.close_modal();\n            },\n            error(xhr) {\n                currently_deleting_messages = currently_deleting_messages.filter(\n                    (id) => id !== msg_id,\n                );\n\n                dialog_widget.hide_dialog_spinner();\n                ui_report.error(\n                    $t_html({defaultMessage: \"Error deleting message\"}),\n                    xhr,\n                    $(\"#dialog_error\"),\n                );\n            },\n        });\n    }\n\n    confirm_dialog.launch({\n        html_heading: $t_html({defaultMessage: \"Delete message?\"}),\n        html_body,\n        help_link: \"/help/edit-or-delete-a-message#delete-a-message\",\n        on_click: do_delete_message,\n        loading_spinner: true,\n    });\n}\n\nexport function delete_topic(stream_id, topic_name, failures = 0) {\n    channel.post({\n        url: \"/json/streams/\" + stream_id + \"/delete_topic\",\n        data: {\n            topic_name,\n        },\n        success(data) {\n            if (data.result === \"partially_completed\") {\n                if (failures >= 9) {\n                    // Don't keep retrying indefinitely to avoid DoSing the server.\n                    return;\n                }\n\n                failures += 1;\n                /* When trying to delete a very large topic, it's\n                   possible for the request to the server to\n                   time out after making some progress. Retry the\n                   request, so that the user can just do nothing and\n                   watch the topic slowly be deleted.\n\n                   TODO: Show a nice loading indicator experience.\n                */\n                delete_topic(stream_id, topic_name, failures);\n            }\n        },\n    });\n}\n\nexport function handle_narrow_deactivated() {\n    for (const [idx, elem] of currently_editing_messages) {\n        if (message_lists.current.get(idx) !== undefined) {\n            const $row = message_lists.current.get_row(idx);\n            message_lists.current.show_edit_message($row, elem);\n        }\n    }\n}\n\nexport function move_topic_containing_message_to_stream(\n    message_id,\n    new_stream_id,\n    new_topic_name,\n    send_notification_to_new_thread,\n    send_notification_to_old_thread,\n    propagate_mode,\n) {\n    function reset_modal_ui() {\n        currently_topic_editing_messages = currently_topic_editing_messages.filter(\n            (id) => id !== message_id,\n        );\n        dialog_widget.hide_dialog_spinner();\n    }\n    if (currently_topic_editing_messages.includes(message_id)) {\n        ui_report.client_error(\n            $t_html({defaultMessage: \"A Topic Move already in progress.\"}),\n            $(\"#move_topic_modal #dialog_error\"),\n        );\n        return;\n    }\n    currently_topic_editing_messages.push(message_id);\n\n    const request = {\n        stream_id: new_stream_id,\n        propagate_mode,\n        topic: new_topic_name,\n        send_notification_to_old_thread,\n        send_notification_to_new_thread,\n    };\n    notify_old_thread_default = send_notification_to_old_thread;\n    notify_new_thread_default = send_notification_to_new_thread;\n    channel.patch({\n        url: \"/json/messages/\" + message_id,\n        data: request,\n        success() {\n            // The main UI will update via receiving the event\n            // from server_events.js.\n            reset_modal_ui();\n            dialog_widget.close_modal();\n        },\n        error(xhr) {\n            reset_modal_ui();\n            ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, $(\"#dialog_error\"));\n        },\n    });\n}\n\nexport function with_first_message_id(stream_id, topic_name, success_cb, error_cb) {\n    // The API endpoint for editing messages to change their\n    // content, topic, or stream requires a message ID.\n    //\n    // Because we don't have full data in the browser client, it's\n    // possible that we might display a topic in the left sidebar\n    // (and thus expose the UI for moving its topic to another\n    // stream) without having a message ID that is definitely\n    // within the topic.  (The comments in stream_topic_history.js\n    // discuss the tricky issues around message deletion that are\n    // involved here).\n    //\n    // To ensure this option works reliably at a small latency\n    // cost for a rare operation, we just ask the server for the\n    // latest message ID in the topic.\n    const data = {\n        anchor: \"newest\",\n        num_before: 1,\n        num_after: 0,\n        narrow: JSON.stringify([\n            {operator: \"stream\", operand: stream_id},\n            {operator: \"topic\", operand: topic_name},\n        ]),\n    };\n\n    channel.get({\n        url: \"/json/messages\",\n        data,\n        success(data) {\n            const message_id = data.messages[0].id;\n            success_cb(message_id);\n        },\n        error: error_cb,\n    });\n}\n","import {format, isSameDay} from \"date-fns\";\nimport $ from \"jquery\";\n\nimport render_message_edit_history from \"../templates/message_edit_history.hbs\";\nimport render_message_history_modal from \"../templates/message_history_modal.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as message_lists from \"./message_lists\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as popovers from \"./popovers\";\nimport * as rendered_markdown from \"./rendered_markdown\";\nimport * as rows from \"./rows\";\nimport * as spectators from \"./spectators\";\nimport * as stream_data from \"./stream_data\";\nimport * as sub_store from \"./sub_store\";\nimport * as timerender from \"./timerender\";\nimport * as ui_report from \"./ui_report\";\n\nexport function fetch_and_render_message_history(message) {\n    channel.get({\n        url: \"/json/messages/\" + message.id + \"/history\",\n        data: {message_id: JSON.stringify(message.id)},\n        success(data) {\n            const content_edit_history = [];\n            let prev_time = null;\n            let prev_stream_item = null;\n\n            for (const [index, msg] of data.message_history.entries()) {\n                // Format times and dates nicely for display\n                const time = new Date(msg.timestamp * 1000);\n                const item = {\n                    timestamp: timerender.stringify_time(time),\n                    display_date: format(time, \"MMMM d, yyyy\"),\n                    show_date_row: prev_time === null || !isSameDay(time, prev_time),\n                };\n\n                if (!msg.user_id) {\n                    continue;\n                }\n\n                const person = people.get_by_user_id(msg.user_id);\n                const full_name = person.full_name;\n\n                if (index === 0) {\n                    item.edited_by_notice = $t(\n                        {defaultMessage: \"Posted by {full_name}\"},\n                        {full_name},\n                    );\n                    item.body_to_render = msg.rendered_content;\n                } else if (msg.prev_topic && msg.prev_content) {\n                    item.edited_by_notice = $t(\n                        {defaultMessage: \"Edited by {full_name}\"},\n                        {full_name},\n                    );\n                    item.body_to_render = msg.content_html_diff;\n                    item.topic_edited = true;\n                    item.prev_topic = msg.prev_topic;\n                    item.new_topic = msg.topic;\n                } else if (msg.prev_topic && msg.prev_stream) {\n                    const sub = sub_store.get(msg.prev_stream);\n                    item.edited_by_notice = $t(\n                        {defaultMessage: \"Moved by {full_name}\"},\n                        {full_name},\n                    );\n                    item.topic_edited = true;\n                    item.prev_topic = msg.prev_topic;\n                    item.new_topic = msg.topic;\n                    item.stream_changed = true;\n                    if (!sub) {\n                        item.prev_stream = $t({defaultMessage: \"Unknown stream\"});\n                    } else {\n                        item.prev_stream = stream_data.maybe_get_stream_name(msg.prev_stream);\n                    }\n                    if (prev_stream_item !== null) {\n                        prev_stream_item.new_stream = stream_data.maybe_get_stream_name(\n                            msg.prev_stream,\n                        );\n                    }\n                    prev_stream_item = item;\n                } else if (msg.prev_topic) {\n                    item.edited_by_notice = $t(\n                        {defaultMessage: \"Moved by {full_name}\"},\n                        {full_name},\n                    );\n                    item.topic_edited = true;\n                    item.prev_topic = msg.prev_topic;\n                    item.new_topic = msg.topic;\n                } else if (msg.prev_stream) {\n                    const sub = sub_store.get(msg.prev_stream);\n                    item.edited_by_notice = $t(\n                        {defaultMessage: \"Moved by {full_name}\"},\n                        {full_name},\n                    );\n                    item.stream_changed = true;\n                    if (!sub) {\n                        item.prev_stream = $t({defaultMessage: \"Unknown stream\"});\n                    } else {\n                        item.prev_stream = stream_data.maybe_get_stream_name(msg.prev_stream);\n                    }\n                    if (prev_stream_item !== null) {\n                        prev_stream_item.new_stream = stream_data.maybe_get_stream_name(\n                            msg.prev_stream,\n                        );\n                    }\n                    prev_stream_item = item;\n                } else {\n                    // just a content edit\n                    item.edited_by_notice = $t(\n                        {defaultMessage: \"Edited by {full_name}\"},\n                        {full_name},\n                    );\n                    item.body_to_render = msg.content_html_diff;\n                }\n\n                content_edit_history.push(item);\n                prev_time = time;\n            }\n            if (prev_stream_item !== null) {\n                prev_stream_item.new_stream = stream_data.maybe_get_stream_name(message.stream_id);\n            }\n            $(\"#message-history\").attr(\"data-message-id\", message.id);\n            $(\"#message-history\").html(\n                render_message_edit_history({\n                    edited_messages: content_edit_history,\n                }),\n            );\n            // Pass the history through rendered_markdown.js\n            // to update dynamic_elements in the content.\n            $(\"#message-history\")\n                .find(\".rendered_markdown\")\n                .each(function () {\n                    rendered_markdown.update_elements($(this));\n                });\n        },\n        error(xhr) {\n            ui_report.error(\n                $t_html({defaultMessage: \"Error fetching message edit history\"}),\n                xhr,\n                $(\"#dialog_error\"),\n            );\n        },\n    });\n}\n\nexport function show_history(message) {\n    const rendered_message_history = render_message_history_modal();\n\n    dialog_widget.launch({\n        html_heading: $t_html({defaultMessage: \"Message edit history\"}),\n        html_body: rendered_message_history,\n        html_submit_button: $t_html({defaultMessage: \"Close\"}),\n        id: \"message-edit-history\",\n        on_click() {},\n        close_on_submit: true,\n        focus_submit_on_open: true,\n        single_footer_button: true,\n        post_render() {\n            fetch_and_render_message_history(message);\n        },\n    });\n}\n\nexport function initialize() {\n    $(\"body\").on(\"mouseenter\", \".message_edit_notice\", (e) => {\n        if (page_params.realm_allow_edit_history) {\n            $(e.currentTarget).addClass(\"message_edit_notice_hover\");\n        }\n    });\n\n    $(\"body\").on(\"mouseleave\", \".message_edit_notice\", (e) => {\n        if (page_params.realm_allow_edit_history) {\n            $(e.currentTarget).removeClass(\"message_edit_notice_hover\");\n        }\n    });\n\n    $(\"body\").on(\"click\", \".message_edit_notice\", (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        popovers.hide_all();\n\n        const message_id = rows.id($(e.currentTarget).closest(\".message_row\"));\n        const $row = message_lists.current.get_row(message_id);\n        const message = message_lists.current.get(rows.id($row));\n\n        if (page_params.is_spectator) {\n            spectators.login_to_access();\n            return;\n        }\n\n        if (page_params.realm_allow_edit_history) {\n            show_history(message);\n            $(\"#message-history-cancel\").trigger(\"focus\");\n        }\n    });\n}\n","import $ from \"jquery\";\n\nimport * as alert_words from \"./alert_words\";\nimport {all_messages_data} from \"./all_messages_data\";\nimport * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport * as compose_fade from \"./compose_fade\";\nimport * as compose_state from \"./compose_state\";\nimport * as compose_validate from \"./compose_validate\";\nimport * as condense from \"./condense\";\nimport * as drafts from \"./drafts\";\nimport * as huddle_data from \"./huddle_data\";\nimport * as message_edit from \"./message_edit\";\nimport * as message_edit_history from \"./message_edit_history\";\nimport * as message_helper from \"./message_helper\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_store from \"./message_store\";\nimport * as message_util from \"./message_util\";\nimport * as narrow from \"./narrow\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as notifications from \"./notifications\";\nimport {page_params} from \"./page_params\";\nimport * as pm_list from \"./pm_list\";\nimport * as recent_senders from \"./recent_senders\";\nimport * as recent_topics_ui from \"./recent_topics_ui\";\nimport * as stream_list from \"./stream_list\";\nimport * as stream_topic_history from \"./stream_topic_history\";\nimport * as sub_store from \"./sub_store\";\nimport * as unread from \"./unread\";\nimport * as unread_ops from \"./unread_ops\";\nimport * as unread_ui from \"./unread_ui\";\nimport * as util from \"./util\";\n\nfunction maybe_add_narrowed_messages(messages, msg_list, callback, attempt = 1) {\n    const ids = [];\n\n    for (const elem of messages) {\n        ids.push(elem.id);\n    }\n\n    channel.get({\n        url: \"/json/messages/matches_narrow\",\n        data: {\n            msg_ids: JSON.stringify(ids),\n            narrow: JSON.stringify(narrow_state.public_operators()),\n        },\n        timeout: 5000,\n        success(data) {\n            if (msg_list !== message_lists.current) {\n                // We unnarrowed in the mean time\n                return;\n            }\n\n            let new_messages = [];\n            const elsewhere_messages = [];\n\n            for (const elem of messages) {\n                if (Object.hasOwn(data.messages, elem.id)) {\n                    util.set_match_data(elem, data.messages[elem.id]);\n                    new_messages.push(elem);\n                } else {\n                    elsewhere_messages.push(elem);\n                }\n            }\n\n            // This second call to process_new_message in the\n            // insert_new_messages code path is designed to replace\n            // our slightly stale message object with the latest copy\n            // from the message_store. This helps in very rare race\n            // conditions, where e.g. the current user's name was\n            // edited in between when they sent the message and when\n            // we hear back from the server and can echo the new\n            // message.\n            new_messages = new_messages.map((message) =>\n                message_helper.process_new_message(message),\n            );\n\n            callback(new_messages, msg_list);\n            unread_ops.process_visible();\n            notifications.notify_messages_outside_current_search(elsewhere_messages);\n        },\n        error(xhr) {\n            if (msg_list.narrowed && msg_list !== message_lists.current) {\n                return;\n            }\n            if (xhr.status === 400) {\n                // This narrow was invalid -- don't retry it, and don't display the message.\n                return;\n            }\n            if (attempt >= 5) {\n                // Too many retries -- bail out.  However, this means the `messages` are potentially\n                // missing from the search results view.  Since this is a very unlikely circumstance\n                // (Tornado is up, Django is down for 5 retries, user is in a search view that it\n                // cannot apply itself) and the failure mode is not bad (it will simply fail to\n                // include live updates of new matching messages), just log an error.\n                blueslip.error(\n                    \"Failed to determine if new message matches current narrow, after 5 tries\",\n                );\n                return;\n            }\n            // Backoff on retries, with full jitter: up to 2s, 4s, 8s, 16s, 32s\n            const delay = Math.random() * 2 ** attempt * 2000;\n            setTimeout(() => {\n                if (msg_list === message_lists.current) {\n                    // Don't actually try again if we un-narrowed\n                    // while waiting\n                    maybe_add_narrowed_messages(messages, msg_list, callback, attempt + 1);\n                }\n            }, delay);\n        },\n    });\n}\n\nexport function insert_new_messages(messages, sent_by_this_client) {\n    messages = messages.map((message) => message_helper.process_new_message(message));\n\n    const any_untracked_unread_messages = unread.process_loaded_messages(messages, false);\n    huddle_data.process_loaded_messages(messages);\n\n    // all_messages_data is the data that we use to populate\n    // other lists, so we always update this\n    message_util.add_new_messages_data(messages, all_messages_data);\n\n    let render_info;\n\n    if (narrow_state.active()) {\n        // We do this NOW even though the home view is not active,\n        // because we want the home view to load fast later.\n        message_util.add_new_messages(messages, message_lists.home);\n\n        if (narrow_state.filter().can_apply_locally()) {\n            render_info = message_util.add_new_messages(messages, message_lists.current);\n        } else {\n            // if we cannot apply locally, we have to wait for this callback to happen to notify\n            maybe_add_narrowed_messages(\n                messages,\n                message_lists.current,\n                message_util.add_new_messages,\n            );\n        }\n    } else {\n        // we're in the home view, so update its list\n        render_info = message_util.add_new_messages(messages, message_lists.home);\n    }\n\n    if (sent_by_this_client) {\n        const need_user_to_scroll = render_info && render_info.need_user_to_scroll;\n        // sent_by_this_client will be true if ANY of the messages\n        // were sent by this client; notifications.notify_local_mixes\n        // will filter out any not sent by us.\n        notifications.notify_local_mixes(messages, need_user_to_scroll);\n    }\n\n    if (any_untracked_unread_messages) {\n        unread_ui.update_unread_counts();\n    }\n\n    unread_ops.process_visible();\n    notifications.received_messages(messages);\n    stream_list.update_streams_sidebar();\n    pm_list.update_private_messages();\n    recent_topics_ui.process_messages(messages);\n}\n\nexport function update_messages(events) {\n    const msgs_to_rerender = [];\n    let any_topic_edited = false;\n    let changed_narrow = false;\n    let changed_compose = false;\n    let any_message_content_edited = false;\n    let any_stream_changed = false;\n\n    for (const event of events) {\n        const msg = message_store.get(event.message_id);\n        if (msg === undefined) {\n            continue;\n        }\n\n        delete msg.local_edit_timestamp;\n\n        msgs_to_rerender.push(msg);\n\n        message_store.update_booleans(msg, event.flags);\n\n        condense.un_cache_message_content_height(msg.id);\n\n        if (event.rendered_content !== undefined) {\n            msg.content = event.rendered_content;\n        }\n\n        if (event.is_me_message !== undefined) {\n            msg.is_me_message = event.is_me_message;\n        }\n\n        // mark the current message edit attempt as complete.\n        message_edit.end_message_edit(event.message_id);\n\n        // Save the content edit to the front end msg.edit_history\n        // before topic edits to ensure that combined topic / content\n        // edits have edit_history logged for both before any\n        // potential narrowing as part of the topic edit loop.\n        if (event.orig_content !== undefined) {\n            if (page_params.realm_allow_edit_history) {\n                // Note that we do this for topic edits separately, below.\n                // If an event changed both content and topic, we'll generate\n                // two client-side events, which is probably good for display.\n                const edit_history_entry = {\n                    user_id: event.user_id,\n                    prev_content: event.orig_content,\n                    prev_rendered_content: event.orig_rendered_content,\n                    prev_rendered_content_version: event.prev_rendered_content_version,\n                    timestamp: event.edit_timestamp,\n                };\n                // Add message's edit_history in message dict\n                // For messages that are edited, edit_history needs to\n                // be added to message in frontend.\n                if (msg.edit_history === undefined) {\n                    msg.edit_history = [];\n                }\n                msg.edit_history = [edit_history_entry].concat(msg.edit_history);\n            }\n            any_message_content_edited = true;\n\n            // Update raw_content, so that editing a few times in a row is fast.\n            msg.raw_content = event.content;\n        }\n\n        unread.update_message_for_mention(msg, any_message_content_edited);\n\n        // new_topic will be undefined if the topic is unchanged.\n        const new_topic = util.get_edit_event_topic(event);\n        // new_stream_id will be undefined if the stream is unchanged.\n        const new_stream_id = event.new_stream_id;\n        // old_stream_id will be present and valid for all stream messages.\n        const old_stream_id = event.stream_id;\n        // old_stream will be undefined if the message was moved from\n        // a stream that the current user doesn't have access to.\n        const old_stream = sub_store.get(event.stream_id);\n\n        // A topic or stream edit may affect multiple messages, listed in\n        // event.message_ids. event.message_id is still the first message\n        // where the user initiated the edit.\n        const topic_edited = new_topic !== undefined;\n        const stream_changed = new_stream_id !== undefined;\n        const stream_archived = old_stream === undefined;\n        if (stream_changed) {\n            any_stream_changed = true;\n        }\n        if (topic_edited) {\n            any_topic_edited = true;\n        }\n\n        if (topic_edited || stream_changed) {\n            const going_forward_change = [\"change_later\", \"change_all\"].includes(\n                event.propagate_mode,\n            );\n\n            const stream_name = stream_archived ? undefined : old_stream.name;\n            const compose_stream_name = compose_state.stream_name();\n            const orig_topic = util.get_edit_event_orig_topic(event);\n\n            const current_filter = narrow_state.filter();\n            const current_selected_id = message_lists.current.selected_id();\n            const selection_changed_topic = event.message_ids.includes(current_selected_id);\n            const event_messages = [];\n            for (const message_id of event.message_ids) {\n                // We don't need to concern ourselves updating data structures\n                // for messages we don't have stored locally.\n                const message = message_store.get(message_id);\n                if (message !== undefined) {\n                    event_messages.push(message);\n                }\n            }\n            // The event.message_ids received from the server are not in sorted order.\n            event_messages.sort((a, b) => a.id - b.id);\n\n            if (\n                going_forward_change &&\n                stream_name &&\n                compose_stream_name &&\n                stream_name.toLowerCase() === compose_stream_name.toLowerCase() &&\n                orig_topic === compose_state.topic()\n            ) {\n                changed_compose = true;\n                compose_state.topic(new_topic);\n                compose_validate.warn_if_topic_resolved(true);\n                compose_fade.set_focused_recipient(\"stream\");\n            }\n\n            if (going_forward_change) {\n                drafts.rename_stream_recipient(old_stream_id, orig_topic, new_stream_id, new_topic);\n            }\n\n            for (const msg of event_messages) {\n                if (page_params.realm_allow_edit_history) {\n                    /* Simulate the format of server-generated edit\n                     * history events. This logic ensures that all\n                     * messages that were moved are displayed as such\n                     * without a browser reload. */\n                    const edit_history_entry = {\n                        user_id: event.user_id,\n                        timestamp: event.edit_timestamp,\n                    };\n                    if (stream_changed) {\n                        edit_history_entry.stream = new_stream_id;\n                        edit_history_entry.prev_stream = old_stream_id;\n                    }\n                    if (topic_edited) {\n                        edit_history_entry.topic = new_topic;\n                        edit_history_entry.prev_topic = orig_topic;\n                    }\n                    if (msg.edit_history === undefined) {\n                        msg.edit_history = [];\n                    }\n                    msg.edit_history = [edit_history_entry].concat(msg.edit_history);\n                }\n                msg.last_edit_timestamp = event.edit_timestamp;\n\n                // Remove the recent topics entry for the old topics;\n                // must be called before we call set_message_topic.\n                //\n                // TODO: Use a single bulk request to do this removal.\n                // Note that we need to be careful to only remove IDs\n                // that were present in stream_topic_history data.\n                // This may not be possible to do correctly without extra\n                // complexity; the present loop assumes stream_topic_history has\n                // only messages in message_store, but that's been false\n                // since we added the server_history feature.\n                stream_topic_history.remove_messages({\n                    stream_id: msg.stream_id,\n                    topic_name: msg.topic,\n                    num_messages: 1,\n                    max_removed_msg_id: msg.id,\n                });\n\n                // Update the unread counts; again, this must be called\n                // before we modify the topic field on the message.\n                unread.update_unread_topics(msg, event);\n\n                // Now edit the attributes of our message object.\n                if (topic_edited) {\n                    msg.topic = new_topic;\n                    msg.topic_links = event.topic_links;\n                }\n                if (stream_changed) {\n                    const new_stream_name = sub_store.get(new_stream_id).name;\n                    msg.stream_id = new_stream_id;\n                    msg.stream = new_stream_name;\n                    msg.display_recipient = new_stream_name;\n                }\n\n                // Add the recent topics entry for the new stream/topics.\n                stream_topic_history.add_message({\n                    stream_id: msg.stream_id,\n                    topic_name: msg.topic,\n                    message_id: msg.id,\n                });\n            }\n\n            if (\n                going_forward_change &&\n                // This logic is a bit awkward.  What we're trying to\n                // accomplish is two things:\n                //\n                // * If we're currently narrowed to a topic that was just moved,\n                //   renarrow to the new location.\n                // * We determine whether enough of the topic was moved to justify\n                //   renarrowing by checking if the currently selected message is moved.\n                //\n                // Corner cases around only moving some messages in a topic\n                // need to be thought about carefully when making changes.\n                //\n                // Code further down takes care of the actual rerendering of\n                // messages within a narrow.\n                selection_changed_topic &&\n                current_filter &&\n                current_filter.has_topic(stream_name, orig_topic)\n            ) {\n                let new_filter = current_filter;\n                if (new_filter && stream_changed) {\n                    // TODO: This logic doesn't handle the\n                    // case where we're a guest user and the\n                    // message moves to a stream we cannot\n                    // access, which would cause the\n                    // stream_data lookup here to fail.\n                    //\n                    // The fix is likely somewhat involved, so punting for now.\n                    const new_stream_name = sub_store.get(new_stream_id).name;\n                    new_filter = new_filter.filter_with_new_params({\n                        operator: \"stream\",\n                        operand: new_stream_name,\n                    });\n                    changed_narrow = true;\n                }\n\n                if (new_filter && topic_edited) {\n                    new_filter = new_filter.filter_with_new_params({\n                        operator: \"topic\",\n                        operand: new_topic,\n                    });\n                    changed_narrow = true;\n                }\n                // NOTE: We should always be changing narrows after we finish\n                //       updating the local data and UI. This avoids conflict\n                //       with data fetched from the server (which is already updated)\n                //       when we move to new narrow and what data is locally available.\n                if (changed_narrow) {\n                    const operators = new_filter.operators();\n                    const opts = {\n                        trigger: \"stream/topic change\",\n                        then_select_id: current_selected_id,\n                    };\n                    narrow.activate(operators, opts);\n                }\n            }\n\n            // Ensure messages that are no longer part of this\n            // narrow are deleted and messages that are now part\n            // of this narrow are added to the message_list.\n            //\n            // Even if we end up renarrowing, the message_list_data\n            // part of this is important for non-rendering message\n            // lists, so we do this unconditionally.  Most correctly,\n            // this should be a loop over all valid message_list_data\n            // objects, without the rerender (which will naturally\n            // happen in the following code).\n            if (!changed_narrow && current_filter) {\n                let message_ids_to_remove = [];\n                if (current_filter.can_apply_locally()) {\n                    const predicate = current_filter.predicate();\n                    message_ids_to_remove = event_messages.filter((msg) => !predicate(msg));\n                    message_ids_to_remove = message_ids_to_remove.map((msg) => msg.id);\n                    // We filter out messages that do not belong to the message\n                    // list and then pass these to the remove messages codepath.\n                    // While we can pass all our messages to the add messages\n                    // codepath as the filtering is done within the method.\n                    message_lists.current.remove_and_rerender(message_ids_to_remove);\n                    message_lists.current.add_messages(event_messages);\n                } else {\n                    // Remove existing message that were updated, since\n                    // they may not be a part of the filter now. Also,\n                    // this will help us rerender them via\n                    // maybe_add_narrowed_messages, if they were\n                    // simply updated.\n                    const updated_messages = event_messages.filter(\n                        (msg) => message_lists.current.data.get(msg.id) !== undefined,\n                    );\n                    message_lists.current.remove_and_rerender(\n                        updated_messages.map((msg) => msg.id),\n                    );\n                    // For filters that cannot be processed locally, ask server.\n                    maybe_add_narrowed_messages(\n                        event_messages,\n                        message_lists.current,\n                        message_util.add_messages,\n                    );\n                }\n            }\n        }\n\n        // Mark the message as edited for the UI. The rendering_only\n        // flag is used to indicated update_message events that are\n        // triggered by server latency optimizations, not user\n        // interactions; these should not generate edit history updates.\n        if (!event.rendering_only) {\n            msg.last_edit_timestamp = event.edit_timestamp;\n        }\n\n        notifications.received_messages([msg]);\n        alert_words.process_message(msg);\n\n        if (topic_edited || stream_changed) {\n            // if topic is changed\n            let pre_edit_topic = util.get_edit_event_orig_topic(event);\n            let post_edit_topic = new_topic;\n\n            if (!topic_edited) {\n                pre_edit_topic = msg.topic;\n                post_edit_topic = pre_edit_topic;\n            }\n\n            // new_stream_id is undefined if this is only a topic edit.\n            const post_edit_stream_id = new_stream_id || old_stream_id;\n\n            const args = [old_stream_id, pre_edit_topic, post_edit_topic, post_edit_stream_id];\n            recent_senders.process_topic_edit({\n                message_ids: event.message_ids,\n                old_stream_id,\n                old_topic: pre_edit_topic,\n                new_stream_id: post_edit_stream_id,\n                new_topic: post_edit_topic,\n            });\n            unread.clear_and_populate_unread_mention_topics();\n            recent_topics_ui.process_topic_edit(...args);\n        }\n\n        // Rerender \"Message edit history\" if it was open to the edited message.\n        if (\n            $(\"#message-edit-history\").parents(\".micromodal\").hasClass(\"modal--open\") &&\n            msg.id === Number.parseInt($(\"#message-history\").attr(\"data-message-id\"), 10)\n        ) {\n            message_edit_history.fetch_and_render_message_history(msg);\n        }\n    }\n\n    // If a topic was edited, we re-render the whole view to get any\n    // propagated edits to be updated (since the topic edits can have\n    // changed the correct grouping of messages).\n    if (any_topic_edited || any_stream_changed) {\n        message_lists.home.update_muting_and_rerender();\n        // However, we don't need to rerender message_list if\n        // we just changed the narrow earlier in this function.\n        //\n        // TODO: We can potentially optimize this logic to avoid\n        // calling `update_muting_and_rerender` if the muted\n        // messages would not match the view before or after this\n        // edit.  Doing so could save significant work, since most\n        // topic edits will not match the current topic narrow in\n        // large organizations.\n        if (!changed_narrow && message_lists.current.narrowed) {\n            message_lists.current.update_muting_and_rerender();\n        }\n    } else {\n        // If the content of the message was edited, we do a special animation.\n        //\n        // BUG: This triggers the \"message edited\" animation for every\n        // message that was edited if any one of them had its content\n        // edited. We should replace any_message_content_edited with\n        // passing two sets to rerender_messages; the set of all that\n        // are changed, and the set with content changes.\n        for (const list of message_lists.all_rendered_message_lists()) {\n            list.view.rerender_messages(msgs_to_rerender, any_message_content_edited);\n        }\n    }\n\n    if (changed_compose) {\n        // We need to do this after we rerender the message list, to\n        // produce correct results.\n        compose_fade.update_message_list();\n    }\n\n    unread_ui.update_unread_counts();\n    stream_list.update_streams_sidebar();\n    pm_list.update_private_messages();\n}\n\nexport function remove_messages(message_ids) {\n    all_messages_data.remove(message_ids);\n    for (const list of message_lists.all_rendered_message_lists()) {\n        list.remove_and_rerender(message_ids);\n    }\n    recent_senders.update_topics_of_deleted_message_ids(message_ids);\n    recent_topics_ui.update_topics_of_deleted_message_ids(message_ids);\n}\n","import $ from \"jquery\";\n\nimport {all_messages_data} from \"./all_messages_data\";\nimport * as channel from \"./channel\";\nimport {Filter} from \"./filter\";\nimport * as huddle_data from \"./huddle_data\";\nimport * as message_helper from \"./message_helper\";\nimport * as message_list from \"./message_list\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_scroll from \"./message_scroll\";\nimport * as message_util from \"./message_util\";\nimport * as narrow_banner from \"./narrow_banner\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as recent_topics_ui from \"./recent_topics_ui\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_list from \"./stream_list\";\nimport * as ui_report from \"./ui_report\";\n\nconst consts = {\n    backfill_idle_time: 10 * 1000,\n    backfill_batch_size: 1000,\n    narrow_before: 50,\n    narrow_after: 50,\n    num_before_home_anchor: 200,\n    num_after_home_anchor: 200,\n    recent_topics_initial_fetch_size: 400,\n    backward_batch_size: 100,\n    forward_batch_size: 100,\n    catch_up_batch_size: 1000,\n};\n\nfunction process_result(data, opts) {\n    let messages = data.messages;\n\n    if (!$(\"#connection-error\").hasClass(\"get-events-error\")) {\n        ui_report.hide_error($(\"#connection-error\"));\n    }\n\n    messages = messages.map((message) => message_helper.process_new_message(message));\n\n    // In some rare situations, we expect to discover new unread\n    // messages not tracked in unread.js during this fetching process.\n    message_util.do_unread_count_updates(messages, true);\n\n    // If we're loading more messages into the home view, save them to\n    // the all_messages_data as well, as the message_lists.home is\n    // reconstructed from all_messages_data.\n    if (opts.msg_list === message_lists.home) {\n        all_messages_data.add_messages(messages);\n    }\n\n    if (messages.length !== 0) {\n        message_util.add_old_messages(messages, opts.msg_list);\n    }\n\n    if (\n        opts.msg_list === message_lists.current &&\n        opts.msg_list.narrowed &&\n        opts.msg_list.empty()\n    ) {\n        // Even after loading more messages, we have\n        // no messages to display in this narrow.\n        narrow_banner.show_empty_narrow_message();\n    }\n\n    huddle_data.process_loaded_messages(messages);\n    stream_list.update_streams_sidebar();\n    recent_topics_ui.process_messages(messages);\n\n    stream_list.maybe_scroll_narrow_into_view();\n\n    if (opts.cont !== undefined) {\n        opts.cont(data, opts);\n    }\n}\n\nfunction get_messages_success(data, opts) {\n    const update_loading_indicator = opts.msg_list === message_lists.current;\n    if (opts.num_before > 0) {\n        opts.msg_list.data.fetch_status.finish_older_batch({\n            update_loading_indicator,\n            found_oldest: data.found_oldest,\n            history_limited: data.history_limited,\n        });\n        if (opts.msg_list === message_lists.home) {\n            // When we update message_lists.home, we need to also update\n            // the fetch_status data structure for all_messages_data.\n            all_messages_data.fetch_status.finish_older_batch({\n                update_loading_indicator: false,\n                found_oldest: data.found_oldest,\n                history_limited: data.history_limited,\n            });\n        }\n        message_scroll.update_top_of_narrow_notices(opts.msg_list);\n    }\n\n    if (opts.num_after > 0) {\n        opts.fetch_again = opts.msg_list.data.fetch_status.finish_newer_batch(data.messages, {\n            update_loading_indicator,\n            found_newest: data.found_newest,\n        });\n        if (opts.msg_list === message_lists.home) {\n            // When we update message_lists.home, we need to also update\n            // the fetch_status data structure for all_messages_data.\n            opts.fetch_again = all_messages_data.fetch_status.finish_newer_batch(data.messages, {\n                update_loading_indicator: false,\n                found_newest: data.found_newest,\n            });\n        }\n    }\n\n    if (opts.msg_list.narrowed && opts.msg_list !== message_lists.current) {\n        // We unnarrowed before receiving new messages so\n        // don't bother processing the newly arrived messages.\n        return;\n    }\n    if (!data) {\n        // The server occasionally returns no data during a\n        // restart.  Ignore those responses and try again\n        setTimeout(() => {\n            load_messages(opts);\n        }, 0);\n        return;\n    }\n\n    process_result(data, opts);\n}\n\n// This function modifies the data.narrow filters to use user IDs\n// instead of emails string if it is supported. We currently don't set\n// or convert the emails string to user IDs directly into the Filter code\n// because doing so breaks the app in various modules that expect emails string.\nfunction handle_operators_supporting_id_based_api(data) {\n    const operators_supporting_ids = new Set([\"pm-with\"]);\n    const operators_supporting_id = new Set([\"sender\", \"group-pm-with\", \"stream\"]);\n\n    if (data.narrow === undefined) {\n        return data;\n    }\n\n    data.narrow = JSON.parse(data.narrow);\n    data.narrow = data.narrow.map((filter) => {\n        if (operators_supporting_ids.has(filter.operator)) {\n            filter.operand = people.emails_strings_to_user_ids_array(filter.operand);\n        }\n\n        if (operators_supporting_id.has(filter.operator)) {\n            if (filter.operator === \"stream\") {\n                const stream_id = stream_data.get_stream_id(filter.operand);\n                if (stream_id !== undefined) {\n                    filter.operand = stream_id;\n                }\n\n                return filter;\n            }\n\n            // The other operands supporting object IDs all work with user objects.\n            const person = people.get_by_email(filter.operand);\n            if (person !== undefined) {\n                filter.operand = person.user_id;\n            }\n        }\n\n        return filter;\n    });\n\n    data.narrow = JSON.stringify(data.narrow);\n    return data;\n}\n\nexport function load_messages(opts, attempt = 1) {\n    if (typeof opts.anchor === \"number\") {\n        // Messages that have been locally echoed messages have\n        // floating point temporary IDs, which is intended to be a.\n        // completely client-side detail.  We need to round these to\n        // the nearest integer before sending a request to the server.\n        opts.anchor = opts.anchor.toFixed(0);\n    }\n    let data = {anchor: opts.anchor, num_before: opts.num_before, num_after: opts.num_after};\n\n    // This block is a hack; structurally, we want to set\n    //   data.narrow = opts.msg_list.data.filter.public_operators()\n    //\n    // But support for the all_messages_data sharing of data with\n    // message_lists.home and the (hacky) page_params.narrow feature\n    // requires a somewhat ugly bundle of conditionals.\n    if (opts.msg_list === message_lists.home) {\n        if (page_params.narrow_stream !== undefined) {\n            data.narrow = JSON.stringify(page_params.narrow);\n        }\n        // Otherwise, we don't pass narrow for message_lists.home; this is\n        // required because it shares its data with all_msg_list, and\n        // so we need the server to send us message history from muted\n        // streams and topics even though message_lists.home's in:home\n        // operators will filter those.\n    } else {\n        let operators = opts.msg_list.data.filter.public_operators();\n        if (page_params.narrow !== undefined) {\n            operators = operators.concat(page_params.narrow);\n        }\n        data.narrow = JSON.stringify(operators);\n    }\n\n    let update_loading_indicator = opts.msg_list === message_lists.current;\n    if (opts.num_before > 0) {\n        opts.msg_list.data.fetch_status.start_older_batch({\n            update_loading_indicator,\n        });\n        if (opts.msg_list === message_lists.home) {\n            all_messages_data.fetch_status.start_older_batch({\n                update_loading_indicator,\n            });\n        }\n    }\n\n    if (opts.num_after > 0) {\n        // We hide the bottom loading indicator when we're fetching both top and bottom messages.\n        update_loading_indicator = update_loading_indicator && opts.num_before === 0;\n        opts.msg_list.data.fetch_status.start_newer_batch({\n            update_loading_indicator,\n        });\n        if (opts.msg_list === message_lists.home) {\n            all_messages_data.fetch_status.start_newer_batch({\n                update_loading_indicator,\n            });\n        }\n    }\n\n    data.client_gravatar = true;\n    data = handle_operators_supporting_id_based_api(data);\n\n    if (page_params.is_spectator) {\n        // This is a bit of a hack; ideally we'd unify this logic in\n        // some way with the above logic, and not need to do JSON\n        // parsing/stringifying here.\n        const web_public_narrow = {negated: false, operator: \"streams\", operand: \"web-public\"};\n\n        if (!data.narrow) {\n            /* For the \"All messages\" feed, this will be the only operator. */\n            data.narrow = JSON.stringify([web_public_narrow]);\n        } else {\n            // Otherwise, we append the operator.  This logic is not\n            // ideal in that in theory an existing `streams:` operator\n            // could be present, but not in a useful way.  We don't\n            // attempt to validate the narrow is compatible with\n            // spectators here; the server will return an error if\n            // appropriate.\n            data.narrow = JSON.parse(data.narrow);\n            data.narrow.push(web_public_narrow);\n            data.narrow = JSON.stringify(data.narrow);\n        }\n    }\n\n    channel.get({\n        url: \"/json/messages\",\n        data,\n        success(data) {\n            get_messages_success(data, opts);\n        },\n        error(xhr) {\n            if (opts.msg_list.narrowed && opts.msg_list !== message_lists.current) {\n                // We unnarrowed before getting an error so don't\n                // bother trying again or doing further processing.\n                return;\n            }\n            if (xhr.status === 400) {\n                // Bad request: We probably specified a narrow operator\n                // for a nonexistent stream or something.  We shouldn't\n                // retry or display a connection error.\n                //\n                // FIXME: Warn the user when this has happened?\n                message_scroll.hide_indicators();\n                const data = {\n                    messages: [],\n                };\n                process_result(data, opts);\n                return;\n            }\n\n            // Backoff on retries, with full jitter: up to 2s, 4s, 8s, 16s, 32s\n            let delay = Math.random() * 2 ** attempt * 2000;\n            if (attempt >= 5) {\n                delay = 30000;\n            }\n            ui_report.show_error($(\"#connection-error\"));\n            setTimeout(() => {\n                load_messages(opts, attempt + 1);\n            }, delay);\n        },\n    });\n}\n\nexport function load_messages_for_narrow(opts) {\n    load_messages({\n        anchor: opts.anchor,\n        num_before: consts.narrow_before,\n        num_after: consts.narrow_after,\n        msg_list: opts.msg_list,\n        cont: opts.cont,\n    });\n}\n\nexport function get_backfill_anchor(msg_list) {\n    const oldest_msg =\n        msg_list === message_lists.home ? all_messages_data.first() : msg_list.first();\n\n    if (oldest_msg) {\n        return oldest_msg.id;\n    }\n\n    // msg_list is empty, which is an impossible\n    // case, raise a fatal error.\n    throw new Error(\"There are no message available to backfill.\");\n}\n\nexport function get_frontfill_anchor(msg_list) {\n    const last_msg = msg_list === message_lists.home ? all_messages_data.last() : msg_list.last();\n\n    if (last_msg) {\n        return last_msg.id;\n    }\n\n    // Although it is impossible that we reach here since we\n    // are already checking `msg_list.fetch_status.can_load_newer_messages`\n    // and user cannot be scrolling down on an empty message_list to\n    // fetch more data, and if user is, then the available data is wrong\n    // and we raise a fatal error.\n    throw new Error(\"There are no message available to frontfill.\");\n}\n\nexport function maybe_load_older_messages(opts) {\n    // This function gets called when you scroll to the top\n    // of your window, and you want to get messages older\n    // than what the browsers originally fetched.\n    const msg_list = opts.msg_list;\n    if (!msg_list.data.fetch_status.can_load_older_messages()) {\n        // We may already be loading old messages or already\n        // got the oldest one.\n        return;\n    }\n\n    do_backfill({\n        msg_list,\n        num_before: consts.backward_batch_size,\n    });\n}\n\nexport function do_backfill(opts) {\n    const msg_list = opts.msg_list;\n    const anchor = get_backfill_anchor(msg_list);\n\n    load_messages({\n        anchor,\n        num_before: opts.num_before,\n        num_after: 0,\n        msg_list,\n        cont() {\n            if (opts.cont) {\n                opts.cont();\n            }\n        },\n    });\n}\n\nexport function maybe_load_newer_messages(opts) {\n    // This function gets called when you scroll to the bottom\n    // of your window, and you want to get messages newer\n    // than what the browsers originally fetched.\n    const msg_list = opts.msg_list;\n\n    if (!msg_list.data.fetch_status.can_load_newer_messages()) {\n        // We may already be loading new messages or already\n        // got the newest one.\n        return;\n    }\n\n    const anchor = get_frontfill_anchor(msg_list);\n\n    function load_more(data, args) {\n        if (args.fetch_again && args.msg_list === message_lists.current) {\n            maybe_load_newer_messages({msg_list: message_lists.current});\n        }\n    }\n\n    load_messages({\n        anchor,\n        num_before: 0,\n        num_after: consts.forward_batch_size,\n        msg_list,\n        cont: load_more,\n    });\n}\n\nexport function start_backfilling_messages() {\n    // backfill more messages after the user is idle\n    $(document).idle({\n        idle: consts.backfill_idle_time,\n        onIdle() {\n            do_backfill({\n                num_before: consts.backfill_batch_size,\n                msg_list: message_lists.home,\n            });\n        },\n    });\n}\n\nexport function initialize(home_view_loaded) {\n    // get the initial message list\n    function load_more(data) {\n        // If we haven't selected a message in the home view yet, and\n        // the home view isn't empty, we select the anchor message here.\n        if (message_lists.home.selected_id() === -1 && !message_lists.home.empty()) {\n            // We fall back to the closest selected id, as the user\n            // may have removed a stream from the home view while we\n            // were loading data.\n            message_lists.home.select_id(data.anchor, {\n                then_scroll: true,\n                use_closest: true,\n                target_scroll_offset: page_params.initial_offset,\n            });\n        }\n\n        if (data.found_newest) {\n            if (page_params.is_spectator) {\n                // Since for spectators, this is the main fetch, we\n                // hide the Recent Topics loading indicator here.\n                recent_topics_ui.hide_loading_indicator();\n            }\n\n            // See server_events.js for this callback.\n            home_view_loaded();\n            start_backfilling_messages();\n            return;\n        }\n\n        // If we fall through here, we need to keep fetching more data, and\n        // we'll call back to the function we're in.\n        const messages = data.messages;\n        const latest_id = messages.at(-1).id;\n\n        load_messages({\n            anchor: latest_id,\n            num_before: 0,\n            num_after: consts.catch_up_batch_size,\n            msg_list: message_lists.home,\n            cont: load_more,\n        });\n    }\n\n    let anchor;\n    if (page_params.initial_pointer) {\n        // If we're doing a server-initiated reload, similar to a\n        // near: narrow query, we want to select a specific message.\n        anchor = page_params.initial_pointer;\n    } else {\n        // Otherwise, we should just use the first unread message in\n        // the user's unmuted history as our anchor.\n        anchor = \"first_unread\";\n    }\n    load_messages({\n        anchor,\n        num_before: consts.num_before_home_anchor,\n        num_after: consts.num_after_home_anchor,\n        msg_list: message_lists.home,\n        cont: load_more,\n    });\n\n    if (page_params.is_spectator) {\n        // Since spectators never have old unreads, we can skip the\n        // hacky fetch below for them (which would just waste resources).\n\n        // This optimization requires a bit of duplicated loading\n        // indicator code, here and hiding logic in hide_more.\n        recent_topics_ui.show_loading_indicator();\n        return;\n    }\n\n    // In addition to the algorithm above, which is designed to ensure\n    // that we fetch all message history eventually starting with the\n    // first unread message, we also need to ensure that the Recent\n    // Topics page contains the very most recent threads on page load.\n    //\n    // Long term, we'll want to replace this with something that's\n    // more performant (i.e. avoids this unnecessary extra fetch the\n    // results of which are basically discarded) and better represents\n    // more than a few hundred messages' history, but this strategy\n    // allows \"Recent topics\" to always show current data (with gaps)\n    // on page load; the data will be complete once the algorithm\n    // above catches up to present.\n    //\n    // (Users will see a weird artifact where Recent topics has a gap\n    // between E.g. 6 days ago and 37 days ago while the catchup\n    // process runs, so this strategy still results in problematic\n    // visual artifacts shortly after page load; just more forgivable\n    // ones).\n    //\n    // This MessageList is defined similarly to home_message_list,\n    // without a `table_name` attached.\n    const recent_topics_message_list = new message_list.MessageList({\n        filter: new Filter([{operator: \"in\", operand: \"home\"}]),\n        excludes_muted_topics: true,\n    });\n    // TODO: Ideally we'd have loading indicators for recent topics at\n    // both top and bottom be managed by load_messages, but that\n    // likely depends on other reorganizations of the early loading\n    // sequence.\n    recent_topics_ui.show_loading_indicator();\n    load_messages({\n        anchor: \"newest\",\n        num_before: consts.recent_topics_initial_fetch_size,\n        num_after: 0,\n        msg_list: recent_topics_message_list,\n        cont: recent_topics_ui.hide_loading_indicator,\n    });\n}\n","import _ from \"lodash\";\n\nimport * as channel from \"./channel\";\nimport * as message_store from \"./message_store\";\nimport * as starred_messages from \"./starred_messages\";\nimport * as ui from \"./ui\";\nimport * as unread_ops from \"./unread_ops\";\n\nfunction send_flag_update_for_messages(msg_ids, flag, op) {\n    channel.post({\n        url: \"/json/messages/flags\",\n        data: {\n            messages: JSON.stringify(msg_ids),\n            flag,\n            op,\n        },\n    });\n}\nexport const _unread_batch_size = 1000;\n\nexport const send_read = (function () {\n    let queue = [];\n    let start;\n    function server_request() {\n        // Wait for server IDs before sending flags\n        const real_msgs = queue.filter((msg) => !msg.locally_echoed);\n        const real_msg_ids = real_msgs.map((msg) => msg.id);\n\n        if (real_msg_ids.length === 0) {\n            setTimeout(start, 100);\n            return;\n        }\n\n        const real_msg_ids_batch = real_msg_ids.slice(0, _unread_batch_size);\n\n        // We have some real IDs.  If there are any left in the queue when this\n        // call finishes, they will be handled in the success callback.\n\n        channel.post({\n            url: \"/json/messages/flags\",\n            data: {messages: JSON.stringify(real_msg_ids_batch), op: \"add\", flag: \"read\"},\n            success() {\n                const batch_set = new Set(real_msg_ids_batch);\n                queue = queue.filter((message) => !batch_set.has(message.id));\n\n                if (queue.length > 0) {\n                    start();\n                }\n            },\n        });\n    }\n\n    start = _.throttle(server_request, 1000);\n\n    function add(messages) {\n        queue = queue.concat(messages);\n        start();\n    }\n\n    return add;\n})();\n\nexport function mark_as_read(message_ids) {\n    send_flag_update_for_messages(message_ids, \"read\", \"add\");\n}\n\nexport function mark_as_unread(message_ids) {\n    send_flag_update_for_messages(message_ids, \"read\", \"remove\");\n}\n\nexport function save_collapsed(message) {\n    send_flag_update_for_messages([message.id], \"collapsed\", \"add\");\n}\n\nexport function save_uncollapsed(message) {\n    send_flag_update_for_messages([message.id], \"collapsed\", \"remove\");\n}\n\n// This updates the state of the starred flag in local data\n// structures, and triggers a UI rerender.\nexport function update_starred_flag(message_id, new_value) {\n    const message = message_store.get(message_id);\n    if (message === undefined) {\n        // If we don't have the message locally, do nothing; if later\n        // we fetch it, it'll come with the correct `starred` state.\n        return;\n    }\n    message.starred = new_value;\n    ui.update_starred_view(message_id, new_value);\n}\n\nexport function toggle_starred_and_update_server(message) {\n    if (message.locally_echoed) {\n        // This is defensive code for when you hit the \"*\" key\n        // before we get a server ack.  It's rare that somebody\n        // can star this quickly, and we don't have a good way\n        // to tell the server which message was starred.\n        return;\n    }\n\n    message.starred = !message.starred;\n\n    // Unlike most calls to mark messages as read, we don't check\n    // msg_list.can_mark_messages_read, because starring a message is an\n    // explicit interaction and we'd like to preserve the user\n    // expectation invariant that all starred messages are read.\n    unread_ops.notify_server_message_read(message);\n    ui.update_starred_view(message.id, message.starred);\n\n    if (message.starred) {\n        send_flag_update_for_messages([message.id], \"starred\", \"add\");\n        starred_messages.add([message.id]);\n    } else {\n        send_flag_update_for_messages([message.id], \"starred\", \"remove\");\n        starred_messages.remove([message.id]);\n    }\n}\n\nexport function unstar_all_messages() {\n    const starred_msg_ids = starred_messages.get_starred_msg_ids();\n    send_flag_update_for_messages(starred_msg_ids, \"starred\", \"remove\");\n}\n\nexport function unstar_all_messages_in_topic(stream_id, topic) {\n    const data = {\n        anchor: \"newest\",\n        // In the unlikely event the user has >1000 starred messages\n        // in a topic, this won't find them all. This is probably an\n        // acceptable bug; one can do it multiple times, and we avoid\n        // creating an API endpoint just for this very minor feature.\n        num_before: 1000,\n        num_after: 0,\n        narrow: JSON.stringify([\n            {operator: \"stream\", operand: stream_id},\n            {operator: \"topic\", operand: topic},\n            {operator: \"is\", operand: \"starred\"},\n        ]),\n    };\n\n    channel.get({\n        url: \"/json/messages\",\n        data,\n        success(data) {\n            const messages = data.messages;\n            const starred_message_ids = messages.map((message) => message.id);\n            send_flag_update_for_messages(starred_message_ids, \"starred\", \"remove\");\n        },\n    });\n}\n","import * as alert_words from \"./alert_words\";\nimport * as message_store from \"./message_store\";\nimport * as message_user_ids from \"./message_user_ids\";\nimport * as people from \"./people\";\nimport * as pm_conversations from \"./pm_conversations\";\nimport * as recent_senders from \"./recent_senders\";\nimport * as stream_topic_history from \"./stream_topic_history\";\nimport * as user_status from \"./user_status\";\nimport * as util from \"./util\";\n\nexport function process_new_message(message) {\n    // Call this function when processing a new message.  After\n    // a message is processed and inserted into the message store\n    // cache, most modules use message_store.get to look at\n    // messages.\n    const cached_msg = message_store.get_cached_message(message.id);\n    if (cached_msg !== undefined) {\n        // Copy the match topic and content over if they exist on\n        // the new message\n        if (util.get_match_topic(message) !== undefined) {\n            util.set_match_data(cached_msg, message);\n        }\n        return cached_msg;\n    }\n\n    message_store.set_message_booleans(message);\n    message.sent_by_me = people.is_current_user(message.sender_email);\n\n    people.extract_people_from_message(message);\n    people.maybe_incr_recipient_count(message);\n\n    const sender = people.get_by_user_id(message.sender_id);\n    if (sender) {\n        message.sender_full_name = sender.full_name;\n        message.sender_email = sender.email;\n        message.status_emoji_info = user_status.get_status_emoji(message.sender_id);\n    }\n\n    // Convert topic even for PMs, as legacy code\n    // wants the empty field.\n    util.convert_message_topic(message);\n\n    switch (message.type) {\n        case \"stream\":\n            message.is_stream = true;\n            message.stream = message.display_recipient;\n            message.reply_to = message.sender_email;\n\n            stream_topic_history.add_message({\n                stream_id: message.stream_id,\n                topic_name: message.topic,\n                message_id: message.id,\n            });\n\n            recent_senders.process_stream_message(message);\n            message_user_ids.add_user_id(message.sender_id);\n            break;\n\n        case \"private\":\n            message.is_private = true;\n            message.reply_to = util.normalize_recipients(message_store.get_pm_emails(message));\n            message.display_reply_to = message_store.get_pm_full_names(message);\n            message.pm_with_url = people.pm_with_url(message);\n            message.to_user_ids = people.pm_reply_user_string(message);\n\n            pm_conversations.process_message(message);\n\n            recent_senders.process_private_message(message);\n            if (people.is_my_user_id(message.sender_id)) {\n                for (const recip of message.display_recipient) {\n                    message_user_ids.add_user_id(recip.id);\n                }\n            }\n            break;\n    }\n\n    alert_words.process_message(message);\n    if (!message.reactions) {\n        message.reactions = [];\n    }\n    message_store.update_message_cache(message);\n    return message;\n}\n","import autosize from \"autosize\";\nimport $ from \"jquery\";\n\nimport * as blueslip from \"./blueslip\";\nimport {MessageListData} from \"./message_list_data\";\nimport {MessageListView} from \"./message_list_view\";\nimport * as narrow_banner from \"./narrow_banner\";\nimport * as narrow_state from \"./narrow_state\";\nimport {page_params} from \"./page_params\";\nimport * as stream_data from \"./stream_data\";\n\nexport class MessageList {\n    constructor(opts) {\n        if (opts.data) {\n            this.data = opts.data;\n        } else {\n            const filter = opts.filter;\n\n            this.data = new MessageListData({\n                excludes_muted_topics: opts.excludes_muted_topics,\n                filter,\n            });\n        }\n\n        const collapse_messages = this.data.filter.supports_collapsing_recipients();\n        const table_name = opts.table_name;\n        this.view = new MessageListView(this, table_name, collapse_messages);\n        this.table_name = table_name;\n        this.narrowed = this.table_name === \"zfilt\";\n        this.num_appends = 0;\n        this.reading_prevented = false;\n\n        return this;\n    }\n\n    prevent_reading() {\n        this.reading_prevented = true;\n    }\n\n    resume_reading() {\n        this.reading_prevented = false;\n    }\n\n    add_messages(messages, opts) {\n        // This adds all messages to our data, but only returns\n        // the currently viewable ones.\n        const info = this.data.add_messages(messages);\n\n        const top_messages = info.top_messages;\n        const bottom_messages = info.bottom_messages;\n        const interior_messages = info.interior_messages;\n\n        // Currently we only need data back from rendering to\n        // tell us whether users needs to scroll, which only\n        // applies for `append_to_view`, but this may change over\n        // time.\n        let render_info;\n\n        if (interior_messages.length > 0) {\n            this.view.rerender_preserving_scrolltop(true);\n            return true;\n        }\n        if (top_messages.length > 0) {\n            this.view.prepend(top_messages);\n        }\n\n        if (bottom_messages.length > 0) {\n            render_info = this.append_to_view(bottom_messages, opts);\n        }\n\n        if (this.narrowed && !this.empty()) {\n            // If adding some new messages to the message tables caused\n            // our current narrow to no longer be empty, hide the empty\n            // feed placeholder text.\n            narrow_banner.hide_empty_narrow_message();\n        }\n\n        if (this.narrowed && !this.empty() && this.selected_id() === -1) {\n            // And also select the newly arrived message.\n            this.select_id(this.selected_id(), {then_scroll: true, use_closest: true});\n        }\n\n        return render_info;\n    }\n\n    get(id) {\n        return this.data.get(id);\n    }\n\n    num_items() {\n        return this.data.num_items();\n    }\n\n    empty() {\n        return this.data.empty();\n    }\n\n    first() {\n        return this.data.first();\n    }\n\n    last() {\n        return this.data.last();\n    }\n\n    ids_greater_or_equal_than(id) {\n        return this.data.ids_greater_or_equal_than(id);\n    }\n\n    prev() {\n        return this.data.prev();\n    }\n\n    next() {\n        return this.data.next();\n    }\n\n    is_at_end() {\n        return this.data.is_at_end();\n    }\n\n    nth_most_recent_id(n) {\n        return this.data.nth_most_recent_id(n);\n    }\n\n    is_search() {\n        return this.data.is_search();\n    }\n\n    can_mark_messages_read() {\n        /* Automatically marking messages as read can be disabled for\n           two different reasons:\n           * The view is structurally a search view, encoded in the\n             properties of the message_list_data object.\n           * The user recently marked messages in the view as unread, and\n             we don't want to lose that state.\n        */\n        return this.data.can_mark_messages_read() && !this.reading_prevented;\n    }\n\n    clear({clear_selected_id = true} = {}) {\n        this.data.clear();\n        this.view.clear_rendering_state(true);\n\n        if (clear_selected_id) {\n            this.data.clear_selected_id();\n        }\n    }\n\n    selected_id() {\n        return this.data.selected_id();\n    }\n\n    select_id(id, opts) {\n        opts = {\n            then_scroll: false,\n            target_scroll_offset: undefined,\n            use_closest: false,\n            empty_ok: false,\n            mark_read: true,\n            force_rerender: false,\n            ...opts,\n            id,\n            msg_list: this,\n            previously_selected_id: this.data.selected_id(),\n        };\n\n        const convert_id = (str_id) => {\n            const id = Number.parseFloat(str_id);\n            if (Number.isNaN(id)) {\n                throw new TypeError(\"Bad message id \" + str_id);\n            }\n            return id;\n        };\n\n        id = convert_id(id);\n\n        const closest_id = this.closest_id(id);\n\n        let error_data;\n\n        // The name \"use_closest\" option is a bit legacy.  We\n        // are always gonna move to the closest visible id; the flag\n        // just says whether we call blueslip.error or not.  The caller\n        // sets use_closest to true when it expects us to move the\n        // pointer as needed, so only generate an error if the flag is\n        // false.\n        if (!opts.use_closest && closest_id !== id) {\n            error_data = {\n                table_name: this.table_name,\n                id,\n                closest_id,\n            };\n            blueslip.error(\"Selected message id not in MessageList\", error_data);\n        }\n\n        if (closest_id === -1 && !opts.empty_ok) {\n            error_data = {\n                table_name: this.table_name,\n                id,\n                items_length: this.data.num_items(),\n            };\n            blueslip.error(\"Cannot select id -1\", error_data);\n            throw new Error(\"Cannot select id -1\");\n        }\n\n        id = closest_id;\n        opts.id = id;\n        this.data.set_selected_id(id);\n\n        if (opts.force_rerender) {\n            this.rerender();\n        } else if (!opts.from_rendering) {\n            this.view.maybe_rerender();\n        }\n\n        $(document).trigger(new $.Event(\"message_selected.zulip\", opts));\n    }\n\n    selected_message() {\n        return this.get(this.data.selected_id());\n    }\n\n    selected_row() {\n        return this.get_row(this.data.selected_id());\n    }\n\n    closest_id(id) {\n        return this.data.closest_id(id);\n    }\n\n    advance_past_messages(msg_ids) {\n        return this.data.advance_past_messages(msg_ids);\n    }\n\n    selected_idx() {\n        return this.data.selected_idx();\n    }\n\n    // Maintains a trailing bookend element explaining any changes in\n    // your subscribed/unsubscribed status at the bottom of the\n    // message list.\n    update_trailing_bookend() {\n        this.view.clear_trailing_bookend();\n        if (!this.narrowed) {\n            return;\n        }\n        const stream_name = narrow_state.stream();\n        if (stream_name === undefined) {\n            return;\n        }\n\n        let deactivated = false;\n        let just_unsubscribed = false;\n        const subscribed = stream_data.is_subscribed_by_name(stream_name);\n        const sub = stream_data.get_sub(stream_name);\n        const can_toggle_subscription =\n            sub !== undefined && stream_data.can_toggle_subscription(sub);\n        if (sub === undefined) {\n            deactivated = true;\n        } else if (!subscribed && !this.last_message_historical) {\n            just_unsubscribed = true;\n        }\n        this.view.render_trailing_bookend(\n            stream_name,\n            subscribed,\n            deactivated,\n            just_unsubscribed,\n            can_toggle_subscription,\n            page_params.is_spectator,\n        );\n    }\n\n    unmuted_messages(messages) {\n        return this.data.unmuted_messages(messages);\n    }\n\n    append(messages, opts) {\n        const viewable_messages = this.data.append(messages);\n        this.append_to_view(viewable_messages, opts);\n    }\n\n    append_to_view(messages, {messages_are_new = false} = {}) {\n        this.num_appends += 1;\n        const render_info = this.view.append(messages, messages_are_new);\n        return render_info;\n    }\n\n    remove_and_rerender(message_ids) {\n        this.data.remove(message_ids);\n        this.rerender();\n    }\n\n    show_edit_message($row, edit_obj) {\n        if ($row.find(\".message_edit_form form\").length !== 0) {\n            return;\n        }\n        $row.find(\".message_edit_form\").append(edit_obj.$form);\n        $row.find(\".message_content, .status-message, .message_controls\").hide();\n        $row.find(\".sender-status\").toggleClass(\"sender-status-edit\");\n        $row.find(\".message_edit\").css(\"display\", \"block\");\n        autosize($row.find(\".message_edit_content\"));\n    }\n\n    hide_edit_message($row) {\n        $row.find(\".message_content, .status-message, .message_controls\").show();\n        $row.find(\".sender-status\").toggleClass(\"sender-status-edit\");\n        $row.find(\".message_edit_form\").empty();\n        $row.find(\".message_edit\").hide();\n        $row.trigger(\"mouseleave\");\n    }\n\n    show_edit_topic_on_recipient_row($recipient_row, $form) {\n        $recipient_row.find(\".topic_edit_form\").append($form);\n        $recipient_row.find(\".on_hover_topic_edit\").hide();\n        $recipient_row.find(\".edit_message_button\").hide();\n        $recipient_row.find(\".stream_topic\").hide();\n        $recipient_row.find(\".topic_edit\").show();\n        $recipient_row.find(\".always_visible_topic_edit\").hide();\n    }\n\n    hide_edit_topic_on_recipient_row($recipient_row) {\n        $recipient_row.find(\".stream_topic\").show();\n        $recipient_row.find(\".on_hover_topic_edit\").show();\n        $recipient_row.find(\".edit_message_button\").show();\n        $recipient_row.find(\".topic_edit_form\").empty();\n        $recipient_row.find(\".topic_edit\").hide();\n        $recipient_row.find(\".always_visible_topic_edit\").show();\n    }\n\n    show_message_as_read(message, options) {\n        const $row = this.get_row(message.id);\n        if (options.from === \"pointer\" || options.from === \"server\") {\n            $row.find(\".unread_marker\").addClass(\"fast_fade\");\n        } else {\n            $row.find(\".unread_marker\").addClass(\"slow_fade\");\n        }\n        $row.removeClass(\"unread\");\n    }\n\n    reselect_selected_id() {\n        const selected_id = this.data.selected_id();\n\n        if (selected_id !== -1) {\n            this.select_id(this.data.selected_id(), {from_rendering: true, mark_read: false});\n        }\n    }\n\n    rerender_view() {\n        this.view.rerender_preserving_scrolltop();\n        this.reselect_selected_id();\n    }\n\n    rerender() {\n        // We need to clear the rendering state, rather than just\n        // doing clear_table, since we want to potentially recollapse\n        // things.\n        this.data.reset_select_to_closest();\n        this.view.clear_rendering_state(false);\n        this.view.update_render_window(this.selected_idx(), false);\n\n        if (this.narrowed) {\n            if (this.empty()) {\n                narrow_banner.show_empty_narrow_message();\n            } else {\n                narrow_banner.hide_empty_narrow_message();\n            }\n        }\n        this.rerender_view();\n    }\n\n    update_muting_and_rerender() {\n        this.data.update_items_for_muting();\n        // We need to rerender whether or not the narrow hides muted\n        // topics, because we need to update recipient bars for topics\n        // we've muted when we are displaying those topics.\n        //\n        // We could avoid a rerender if we can provide that this\n        // narrow cannot have contained messages to muted topics\n        // either before or after the state change.  The right place\n        // to do this is in the message_events.js code path for\n        // processing topic edits, since that's the only place we'll\n        // call this frequently anyway.\n        //\n        // But in any case, we need to rerender the list for user muting,\n        // to make sure only the right messages are hidden.\n        this.rerender();\n    }\n\n    all_messages() {\n        return this.data.all_messages();\n    }\n\n    first_unread_message_id() {\n        return this.data.first_unread_message_id();\n    }\n\n    has_unread_messages() {\n        return this.data.has_unread_messages();\n    }\n\n    message_range(start, end) {\n        return this.data.message_range(start, end);\n    }\n\n    get_row(id) {\n        return this.view.get_row(id);\n    }\n\n    change_message_id(old_id, new_id) {\n        const require_rerender = this.data.change_message_id(old_id, new_id);\n        if (require_rerender) {\n            this.rerender_view();\n        }\n    }\n\n    get_last_message_sent_by_me() {\n        return this.data.get_last_message_sent_by_me();\n    }\n}\n","import * as blueslip from \"./blueslip\";\nimport {FetchStatus} from \"./fetch_status\";\nimport {Filter} from \"./filter\";\nimport * as muted_users from \"./muted_users\";\nimport {page_params} from \"./page_params\";\nimport * as unread from \"./unread\";\nimport * as user_topics from \"./user_topics\";\nimport * as util from \"./util\";\n\nexport class MessageListData {\n    constructor({excludes_muted_topics, filter = new Filter()}) {\n        this.excludes_muted_topics = excludes_muted_topics;\n        this._all_items = [];\n        this._items = [];\n        this._hash = new Map();\n        this._local_only = new Set();\n        this._selected_id = -1;\n\n        this.filter = filter;\n        this.fetch_status = new FetchStatus();\n    }\n\n    all_messages() {\n        return this._items;\n    }\n\n    num_items() {\n        return this._items.length;\n    }\n\n    empty() {\n        return this._items.length === 0;\n    }\n\n    first() {\n        return this._items[0];\n    }\n\n    last() {\n        return this._items.at(-1);\n    }\n\n    ids_greater_or_equal_than(my_id) {\n        const result = [];\n\n        for (let i = this._items.length - 1; i >= 0; i -= 1) {\n            const message_id = this._items[i].id;\n            if (message_id >= my_id) {\n                result.push(message_id);\n            } else {\n                continue;\n            }\n        }\n\n        return result;\n    }\n\n    select_idx() {\n        if (this._selected_id === -1) {\n            return undefined;\n        }\n        const ids = this._items.map((message) => message.id);\n\n        const i = ids.indexOf(this._selected_id);\n        if (i === -1) {\n            return undefined;\n        }\n        return i;\n    }\n\n    prev() {\n        const i = this.select_idx();\n\n        if (i === undefined) {\n            return undefined;\n        }\n\n        if (i === 0) {\n            return undefined;\n        }\n\n        return this._items[i - 1].id;\n    }\n\n    next() {\n        const i = this.select_idx();\n\n        if (i === undefined) {\n            return undefined;\n        }\n\n        if (i + 1 >= this._items.length) {\n            return undefined;\n        }\n\n        return this._items[i + 1].id;\n    }\n\n    is_at_end() {\n        if (this._selected_id === -1) {\n            return false;\n        }\n\n        const n = this._items.length;\n\n        if (n === 0) {\n            return false;\n        }\n\n        const last_msg = this._items[n - 1];\n\n        return last_msg.id === this._selected_id;\n    }\n\n    nth_most_recent_id(n) {\n        const i = this._items.length - n;\n        if (i < 0) {\n            return -1;\n        }\n        return this._items[i].id;\n    }\n\n    clear() {\n        this._all_items = [];\n        this._items = [];\n        this._hash.clear();\n    }\n\n    get(id) {\n        id = Number.parseFloat(id);\n        if (Number.isNaN(id)) {\n            return undefined;\n        }\n        return this._hash.get(id);\n    }\n\n    clear_selected_id() {\n        this._selected_id = -1;\n    }\n\n    selected_id() {\n        return this._selected_id;\n    }\n\n    set_selected_id(id) {\n        this._selected_id = id;\n    }\n\n    selected_idx() {\n        return this._lower_bound(this._selected_id);\n    }\n\n    reset_select_to_closest() {\n        this._selected_id = this.closest_id(this._selected_id);\n    }\n\n    is_search() {\n        return this.filter.is_search();\n    }\n    can_mark_messages_read() {\n        return this.filter.can_mark_messages_read();\n    }\n    _get_predicate() {\n        // We cache this.\n        if (!this.predicate) {\n            this.predicate = this.filter.predicate();\n        }\n        return this.predicate;\n    }\n\n    valid_non_duplicated_messages(messages) {\n        const predicate = this._get_predicate();\n        return messages.filter((msg) => this.get(msg.id) === undefined && predicate(msg));\n    }\n\n    filter_incoming(messages) {\n        const predicate = this._get_predicate();\n        return messages.filter((message) => predicate(message));\n    }\n\n    messages_filtered_for_topic_mutes(messages) {\n        if (!this.excludes_muted_topics) {\n            return [...messages];\n        }\n\n        return messages.filter((message) => {\n            if (message.type !== \"stream\") {\n                return true;\n            }\n            return (\n                !user_topics.is_topic_muted(message.stream_id, message.topic) || message.mentioned\n            );\n        });\n    }\n\n    messages_filtered_for_user_mutes(messages) {\n        if (this.filter.is_non_huddle_pm()) {\n            // We are in a 1:1 PM narrow, so do not do any filtering.\n            return [...messages];\n        }\n\n        return messages.filter((message) => {\n            if (message.type !== \"private\") {\n                return true;\n            }\n            const recipients = util.extract_pm_recipients(message.to_user_ids);\n            if (recipients.length > 1) {\n                // Huddle message\n                return true;\n            }\n\n            const recipient_id = Number.parseInt(recipients[0], 10);\n            return (\n                !muted_users.is_user_muted(recipient_id) &&\n                !muted_users.is_user_muted(message.sender_id)\n            );\n        });\n    }\n\n    unmuted_messages(messages) {\n        return this.messages_filtered_for_topic_mutes(\n            this.messages_filtered_for_user_mutes(messages),\n        );\n    }\n\n    update_items_for_muting() {\n        this._items = this.unmuted_messages(this._all_items);\n    }\n\n    first_unread_message_id() {\n        const first_unread = this._items.find((message) => unread.message_unread(message));\n\n        if (first_unread) {\n            return first_unread.id;\n        }\n\n        // if no unread, return the bottom message\n        return this.last().id;\n    }\n\n    has_unread_messages() {\n        return this._items.some((message) => unread.message_unread(message));\n    }\n\n    add_messages(messages) {\n        let top_messages = [];\n        let bottom_messages = [];\n        let interior_messages = [];\n\n        // If we're initially populating the list, save the messages in\n        // bottom_messages regardless\n        if (this.selected_id() === -1 && this.empty()) {\n            const narrow_messages = this.filter_incoming(messages);\n            bottom_messages = narrow_messages.filter((msg) => !this.get(msg.id));\n        } else {\n            // Filter out duplicates that are already in self, and all messages\n            // that fail our filter predicate\n            messages = this.valid_non_duplicated_messages(messages);\n\n            for (const msg of messages) {\n                // Put messages in correct order on either side of the\n                // message list.  This code path assumes that messages\n                // is a (1) sorted, and (2) consecutive block of\n                // messages that belong in this message list; those\n                // facts should be ensured by the caller.\n                if (this.empty() || msg.id > this.last().id) {\n                    bottom_messages.push(msg);\n                } else if (msg.id < this.first().id) {\n                    top_messages.push(msg);\n                } else {\n                    interior_messages.push(msg);\n                }\n            }\n        }\n\n        if (interior_messages.length > 0) {\n            interior_messages = this.add_anywhere(interior_messages);\n        }\n\n        if (top_messages.length > 0) {\n            top_messages = this.prepend(top_messages);\n        }\n\n        if (bottom_messages.length > 0) {\n            bottom_messages = this.append(bottom_messages);\n        }\n\n        const info = {\n            top_messages,\n            bottom_messages,\n            interior_messages,\n        };\n\n        return info;\n    }\n\n    add_anywhere(messages) {\n        // Caller should have already filtered messages.\n        // This should be used internally when we have\n        // \"interior\" messages to add and can't optimize\n        // things by only doing prepend or only doing append.\n\n        const viewable_messages = this.unmuted_messages(messages);\n\n        this._all_items = messages.concat(this._all_items);\n        this._all_items.sort((a, b) => a.id - b.id);\n\n        this._items = viewable_messages.concat(this._items);\n        this._items.sort((a, b) => a.id - b.id);\n\n        this._add_to_hash(messages);\n        return viewable_messages;\n    }\n\n    append(messages) {\n        // Caller should have already filtered\n        const viewable_messages = this.unmuted_messages(messages);\n\n        this._all_items = this._all_items.concat(messages);\n        this._items = this._items.concat(viewable_messages);\n\n        this._add_to_hash(messages);\n        return viewable_messages;\n    }\n\n    prepend(messages) {\n        // Caller should have already filtered\n        const viewable_messages = this.unmuted_messages(messages);\n\n        this._all_items = messages.concat(this._all_items);\n        this._items = viewable_messages.concat(this._items);\n\n        this._add_to_hash(messages);\n        return viewable_messages;\n    }\n\n    remove(message_ids) {\n        const msg_ids_to_remove = new Set(message_ids);\n        for (const id of msg_ids_to_remove) {\n            this._hash.delete(id);\n            this._local_only.delete(id);\n        }\n\n        this._items = this._items.filter((msg) => !msg_ids_to_remove.has(msg.id));\n        this._all_items = this._all_items.filter((msg) => !msg_ids_to_remove.has(msg.id));\n    }\n\n    // Returns messages from the given message list in the specified range, inclusive\n    message_range(start, end) {\n        if (start === -1) {\n            blueslip.error(\"message_range given a start of -1\");\n        }\n\n        const start_idx = this._lower_bound(start);\n        const end_idx = this._lower_bound(end);\n        return this._items.slice(start_idx, end_idx + 1);\n    }\n\n    // Returns the index where you could insert the desired ID\n    // into the message list, without disrupting the sort order\n    // This takes into account the potentially-unsorted\n    // nature of local message IDs in the message list\n    _lower_bound(id) {\n        const less_func = (msg, ref_id, a_idx) => {\n            if (this._is_localonly_id(msg.id)) {\n                // First non-local message before this one\n                const effective = this._next_nonlocal_message(this._items, a_idx, (idx) => idx - 1);\n                if (effective) {\n                    // Turn the 10.02 in [11, 10.02, 12] into 11.02\n                    const decimal = Number.parseFloat((msg.id % 1).toFixed(0.02));\n                    const effective_id = effective.id + decimal;\n                    return effective_id < ref_id;\n                }\n            }\n            return msg.id < ref_id;\n        };\n\n        return util.lower_bound(this._items, id, less_func);\n    }\n\n    closest_id(id) {\n        // We directly keep track of local-only messages,\n        // so if we're asked for one that we know we have,\n        // just return it directly\n        if (this._local_only.has(id)) {\n            return id;\n        }\n\n        const items = this._items;\n\n        if (items.length === 0) {\n            return -1;\n        }\n\n        let closest = this._lower_bound(id);\n\n        if (closest < items.length && id === items[closest].id) {\n            return items[closest].id;\n        }\n\n        const potential_closest_matches = [];\n        if (closest > 0 && this._is_localonly_id(items[closest - 1].id)) {\n            // Since we treated all blocks of local ids as their left-most-non-local message\n            // for lower_bound purposes, find the real leftmost index (first non-local id)\n            do {\n                potential_closest_matches.push(closest);\n                closest -= 1;\n            } while (closest > 0 && this._is_localonly_id(items[closest - 1].id));\n        }\n        potential_closest_matches.push(closest);\n\n        if (closest === items.length) {\n            closest = closest - 1;\n        } else {\n            // Any of the ids that we skipped over (due to them being local-only) might be the\n            // closest ID to the desired one, in case there is no exact match.\n            potential_closest_matches.unshift(closest - 1);\n            let best_match = items[closest].id;\n\n            for (const potential_idx of potential_closest_matches) {\n                if (potential_idx < 0) {\n                    continue;\n                }\n                const item = items[potential_idx];\n\n                if (item === undefined) {\n                    blueslip.warn(\"Invalid potential_idx: \" + potential_idx);\n                    continue;\n                }\n\n                const potential_match = item.id;\n                // If the potential id is the closest to the requested, save that one\n                if (Math.abs(id - potential_match) < Math.abs(best_match - id)) {\n                    best_match = potential_match;\n                    closest = potential_idx;\n                }\n            }\n        }\n        return items[closest].id;\n    }\n\n    advance_past_messages(msg_ids) {\n        // Start with the current pointer, but then keep advancing the\n        // pointer while the next message's id is in msg_ids.  See trac #1555\n        // for more context, but basically we are skipping over contiguous\n        // messages that we have recently visited.\n        let next_msg_id = 0;\n\n        const id_set = new Set(msg_ids);\n\n        let idx = this.selected_idx() + 1;\n        while (idx < this._items.length) {\n            const msg_id = this._items[idx].id;\n            if (!id_set.has(msg_id)) {\n                break;\n            }\n            next_msg_id = msg_id;\n            idx += 1;\n        }\n\n        if (next_msg_id > 0) {\n            this.set_selected_id(next_msg_id);\n        }\n    }\n\n    _add_to_hash(messages) {\n        for (const elem of messages) {\n            const id = Number.parseFloat(elem.id);\n            if (Number.isNaN(id)) {\n                throw new TypeError(\"Bad message id\");\n            }\n            if (this._is_localonly_id(id)) {\n                this._local_only.add(id);\n            }\n            if (this._hash.has(id)) {\n                blueslip.error(\"Duplicate message added to MessageListData\");\n                continue;\n            }\n            this._hash.set(id, elem);\n        }\n    }\n\n    _is_localonly_id(id) {\n        return id % 1 !== 0;\n    }\n\n    _next_nonlocal_message(item_list, start_index, op) {\n        let cur_idx = start_index;\n        do {\n            cur_idx = op(cur_idx);\n        } while (item_list[cur_idx] !== undefined && this._is_localonly_id(item_list[cur_idx].id));\n        return item_list[cur_idx];\n    }\n\n    change_message_id(old_id, new_id) {\n        // Update our local cache that uses the old id to the new id\n        if (this._hash.has(old_id)) {\n            const msg = this._hash.get(old_id);\n            this._hash.delete(old_id);\n            this._hash.set(new_id, msg);\n        } else {\n            return false;\n        }\n\n        if (this._local_only.has(old_id)) {\n            if (this._is_localonly_id(new_id)) {\n                this._local_only.add(new_id);\n            }\n            this._local_only.delete(old_id);\n        }\n\n        if (this._selected_id === old_id) {\n            this._selected_id = new_id;\n        }\n\n        return this.reorder_messages(new_id);\n    }\n\n    reorder_messages(new_id) {\n        const message_sort_func = (a, b) => a.id - b.id;\n        // If this message is now out of order, re-order and re-render\n        const current_message = this._hash.get(new_id);\n        const index = this._items.indexOf(current_message);\n\n        const next = this._next_nonlocal_message(this._items, index, (idx) => idx + 1);\n        const prev = this._next_nonlocal_message(this._items, index, (idx) => idx - 1);\n\n        if (\n            (next !== undefined && current_message.id > next.id) ||\n            (prev !== undefined && current_message.id < prev.id)\n        ) {\n            blueslip.debug(\"Changed message ID from server caused out-of-order list, reordering\");\n            this._items.sort(message_sort_func);\n            this._all_items.sort(message_sort_func);\n            return true;\n        }\n\n        return false;\n    }\n\n    get_messages_sent_by_user(user_id) {\n        const msgs = this._items.filter((msg) => msg.sender_id === user_id);\n        if (msgs.length === 0) {\n            return [];\n        }\n        return msgs;\n    }\n\n    get_last_message_sent_by_me() {\n        const msg_index = this._items.findLastIndex((msg) => msg.sender_id === page_params.user_id);\n        if (msg_index === -1) {\n            return undefined;\n        }\n        const msg = this._items[msg_index];\n        return msg;\n    }\n}\n","import {isSameDay} from \"date-fns\";\nimport $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport * as resolved_topic from \"../shared/js/resolved_topic\";\nimport render_bookend from \"../templates/bookend.hbs\";\nimport render_login_to_view_image_button from \"../templates/login_to_view_image_button.hbs\";\nimport render_message_group from \"../templates/message_group.hbs\";\nimport render_recipient_row from \"../templates/recipient_row.hbs\";\nimport render_single_message from \"../templates/single_message.hbs\";\n\nimport * as activity from \"./activity\";\nimport * as blueslip from \"./blueslip\";\nimport * as color_class from \"./color_class\";\nimport * as compose from \"./compose\";\nimport * as compose_fade from \"./compose_fade\";\nimport * as condense from \"./condense\";\nimport * as hash_util from \"./hash_util\";\nimport {$t} from \"./i18n\";\nimport * as message_edit from \"./message_edit\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_store from \"./message_store\";\nimport * as $message_viewport from \"./message_viewport\";\nimport * as muted_users from \"./muted_users\";\nimport * as narrow_state from \"./narrow_state\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as popovers from \"./popovers\";\nimport * as reactions from \"./reactions\";\nimport * as recent_topics_util from \"./recent_topics_util\";\nimport * as rendered_markdown from \"./rendered_markdown\";\nimport * as rows from \"./rows\";\nimport * as stream_data from \"./stream_data\";\nimport * as sub_store from \"./sub_store\";\nimport * as submessage from \"./submessage\";\nimport * as timerender from \"./timerender\";\nimport * as user_topics from \"./user_topics\";\nimport * as util from \"./util\";\n\nfunction same_day(earlier_msg, later_msg) {\n    if (earlier_msg === undefined || later_msg === undefined) {\n        return false;\n    }\n    return isSameDay(earlier_msg.msg.timestamp * 1000, later_msg.msg.timestamp * 1000);\n}\n\nfunction same_sender(a, b) {\n    if (a === undefined || b === undefined) {\n        return false;\n    }\n    return util.same_sender(a.msg, b.msg);\n}\n\nfunction same_recipient(a, b) {\n    if (a === undefined || b === undefined) {\n        return false;\n    }\n    return util.same_recipient(a.msg, b.msg);\n}\n\nfunction analyze_edit_history(message) {\n    // Returns a dict of booleans that describe the message's history:\n    //   * edited: if the message has had its content edited\n    //   * moved: if the message has had its stream/topic edited\n    //   * resolve_toggled: if the message has had a topic resolve/unresolve edit\n    let edited = false;\n    let moved = false;\n    let resolve_toggled = false;\n\n    if (message.edit_history !== undefined) {\n        for (const edit_history_event of message.edit_history) {\n            if (edit_history_event.prev_content) {\n                edited = true;\n            }\n\n            if (edit_history_event.prev_stream) {\n                moved = true;\n            }\n\n            if (edit_history_event.prev_topic) {\n                // We know it has a topic edit. Now we need to determine if\n                // it was a true move or a resolve/unresolve.\n                if (\n                    resolved_topic.is_resolved(edit_history_event.topic) &&\n                    edit_history_event.topic.slice(2) === edit_history_event.prev_topic\n                ) {\n                    // Resolved.\n                    resolve_toggled = true;\n                    continue;\n                }\n                if (\n                    resolved_topic.is_resolved(edit_history_event.prev_topic) &&\n                    edit_history_event.prev_topic.slice(2) === edit_history_event.topic\n                ) {\n                    // Unresolved.\n                    resolve_toggled = true;\n                    continue;\n                }\n                // Otherwise, it is a real topic rename/move.\n                moved = true;\n            }\n        }\n    }\n    return {edited, moved, resolve_toggled};\n}\n\nfunction render_group_display_date(group, message_container) {\n    const time = new Date(message_container.msg.timestamp * 1000);\n    const today = new Date();\n    const date_element = timerender.render_date(time, undefined, today)[0];\n\n    group.date = date_element.outerHTML;\n}\n\nfunction update_group_date_divider(group, message_container, prev) {\n    const time = new Date(message_container.msg.timestamp * 1000);\n    const today = new Date();\n\n    if (prev !== undefined) {\n        const prev_time = new Date(prev.msg.timestamp * 1000);\n        if (!isSameDay(time, prev_time)) {\n            // NB: group_date_divider_html is HTML, inserted into the document without escaping.\n            group.group_date_divider_html = timerender.render_date(\n                time,\n                prev_time,\n                today,\n            )[0].outerHTML;\n            group.show_group_date_divider = true;\n        }\n    } else {\n        // Show the date in the recipient bar, but not a date separator bar.\n        group.show_group_date_divider = false;\n        group.group_date_divider_html = timerender.render_date(time, undefined, today)[0].outerHTML;\n    }\n}\n\nfunction clear_group_date_divider(group) {\n    group.show_group_date_divider = false;\n    group.group_date_divider_html = undefined;\n}\n\nfunction clear_message_date_divider(msg) {\n    // see update_message_date_divider for how\n    // these get set\n    msg.want_date_divider = false;\n    msg.date_divider_html = undefined;\n}\n\nfunction update_message_date_divider(opts) {\n    const prev_msg_container = opts.prev_msg_container;\n    const curr_msg_container = opts.curr_msg_container;\n\n    if (!prev_msg_container || same_day(curr_msg_container, prev_msg_container)) {\n        clear_message_date_divider(curr_msg_container);\n        return;\n    }\n\n    const prev_time = new Date(prev_msg_container.msg.timestamp * 1000);\n    const curr_time = new Date(curr_msg_container.msg.timestamp * 1000);\n    const today = new Date();\n\n    curr_msg_container.want_date_divider = true;\n    curr_msg_container.date_divider_html = timerender.render_date(\n        curr_time,\n        prev_time,\n        today,\n    )[0].outerHTML;\n}\n\nfunction set_timestr(message_container) {\n    const time = new Date(message_container.msg.timestamp * 1000);\n    message_container.timestr = timerender.stringify_time(time);\n}\n\nfunction set_topic_edit_properties(group, message) {\n    group.always_visible_topic_edit = false;\n    group.on_hover_topic_edit = false;\n    // if a user who can edit a topic, can resolve it as well\n    group.user_can_resolve_topic = message_edit.is_topic_editable(message);\n\n    // Messages with no topics should always have an edit icon visible\n    // to encourage updating them. Admins can also edit any topic.\n    if (message.topic === compose.empty_topic_placeholder()) {\n        group.always_visible_topic_edit = true;\n    } else if (message_edit.is_topic_editable(message)) {\n        group.on_hover_topic_edit = true;\n    }\n}\n\nfunction populate_group_from_message_container(group, message_container) {\n    group.is_stream = message_container.msg.is_stream;\n    group.is_private = message_container.msg.is_private;\n\n    if (group.is_stream) {\n        group.background_color = stream_data.get_color(message_container.msg.stream);\n        group.color_class = color_class.get_css_class(group.background_color);\n        group.invite_only = stream_data.is_invite_only_by_stream_name(message_container.msg.stream);\n        group.is_web_public = stream_data.is_web_public(message_container.msg.stream_id);\n        group.topic = message_container.msg.topic;\n        group.match_topic = util.get_match_topic(message_container.msg);\n        group.stream_url = message_container.stream_url;\n        group.topic_url = message_container.topic_url;\n        const sub = sub_store.get(message_container.msg.stream_id);\n        if (sub === undefined) {\n            // Hack to handle unusual cases like the tutorial where\n            // the streams used don't actually exist in the subs\n            // module.  Ideally, we'd clean this up by making the\n            // tutorial populate stream_settings_ui.js \"properly\".\n            group.stream_id = -1;\n        } else {\n            group.stream_id = sub.stream_id;\n        }\n        group.topic_is_resolved = resolved_topic.is_resolved(group.topic);\n        group.topic_muted = user_topics.is_topic_muted(group.stream_id, group.topic);\n    } else if (group.is_private) {\n        group.pm_with_url = message_container.pm_with_url;\n        group.display_reply_to = message_store.get_pm_full_names(message_container.msg);\n    }\n    group.display_recipient = message_container.msg.display_recipient;\n    group.topic_links = message_container.msg.topic_links;\n\n    set_topic_edit_properties(group, message_container.msg);\n    render_group_display_date(group, message_container);\n}\n\nexport class MessageListView {\n    constructor(list, table_name, collapse_messages) {\n        this.list = list;\n        this.collapse_messages = collapse_messages;\n        this._rows = new Map();\n        this.message_containers = new Map();\n        this.table_name = table_name;\n        if (this.table_name) {\n            this.clear_table();\n        }\n        this._message_groups = [];\n\n        // Half-open interval of the indices that define the current render window\n        this._render_win_start = 0;\n        this._render_win_end = 0;\n    }\n\n    // Number of messages to render at a time\n    _RENDER_WINDOW_SIZE = 400;\n    // Number of messages away from edge of render window at which we\n    // trigger a re-render\n    _RENDER_THRESHOLD = 50;\n\n    _get_msg_timestring(message_container) {\n        let last_edit_timestamp;\n        if (message_container.msg.local_edit_timestamp !== undefined) {\n            last_edit_timestamp = message_container.msg.local_edit_timestamp;\n        } else {\n            last_edit_timestamp = message_container.msg.last_edit_timestamp;\n        }\n        if (last_edit_timestamp !== undefined) {\n            const last_edit_time = new Date(last_edit_timestamp * 1000);\n            const today = new Date();\n            return (\n                timerender.render_date(last_edit_time, undefined, today)[0].textContent +\n                \" at \" +\n                timerender.stringify_time(last_edit_time)\n            );\n        }\n        return undefined;\n    }\n\n    _add_msg_edited_vars(message_container) {\n        // This function computes data on whether the message was edited\n        // and in what ways, as well as where the \"EDITED\" or \"MOVED\"\n        // label should be located, and adds it to the message_container\n        // object.\n        //\n        // The bools can be defined only when the message is edited\n        // (or when the `last_edit_timestr` is defined). The bools are:\n        //   * `edited_in_left_col`      -- when label appears in left column.\n        //   * `edited_alongside_sender` -- when label appears alongside sender info.\n        //   * `edited_status_msg`       -- when label appears for a \"/me\" message.\n        const last_edit_timestr = this._get_msg_timestring(message_container);\n        const include_sender = message_container.include_sender;\n        const is_hidden = message_container.is_hidden;\n        const status_message = Boolean(message_container.status_message);\n        const edit_history_details = analyze_edit_history(message_container.msg);\n\n        if (\n            last_edit_timestr === undefined ||\n            !(edit_history_details.moved || edit_history_details.edited)\n        ) {\n            // For messages whose edit history at most includes\n            // resolving topics, we don't display an EDITED/MOVED\n            // notice at all. (The message actions popover will still\n            // display an edit history option, so you can see when it\n            // was marked as resolved if you need to).\n            delete message_container.last_edit_timestr;\n            message_container.edited_in_left_col = false;\n            message_container.edited_alongside_sender = false;\n            message_container.edited_status_msg = false;\n            return;\n        }\n\n        message_container.last_edit_timestr = last_edit_timestr;\n        message_container.edited_in_left_col = !include_sender && !is_hidden;\n        message_container.edited_alongside_sender = include_sender && !status_message;\n        message_container.edited_status_msg = include_sender && status_message;\n        message_container.moved = edit_history_details.moved && !edit_history_details.edited;\n    }\n\n    set_calculated_message_container_variables(message_container, is_revealed) {\n        set_timestr(message_container);\n\n        /*\n            If the message needs to be hidden because the sender was muted, we do\n            a few things:\n            1. Hide the sender avatar and name.\n            2. Hide reactions on that message.\n            3. Do not give a background color to that message even if it mentions the\n               current user.\n\n            Further, is a hidden message was just revealed, we make sure to show\n            the sender.\n        */\n\n        const is_hidden =\n            muted_users.is_user_muted(message_container.msg.sender_id) && !is_revealed;\n\n        message_container.is_hidden = is_hidden;\n        // Make sure the right thing happens if the message was edited to mention us.\n        if (!is_hidden && message_container.msg.mentioned) {\n            // Currently the API does not differentiate between a group mention and\n            // a user mention. For now, we parse the markdown to see if the message\n            // mentions the user.\n            let is_user_mention = false;\n            const $msg = $(message_container.msg.content);\n            $msg.find(\".user-mention:not(.silent)\").each(function () {\n                const user_id = rendered_markdown.get_user_id_for_mention_button(this);\n                if (user_id === \"*\") {\n                    return;\n                }\n                if (people.is_my_user_id(user_id)) {\n                    is_user_mention = true;\n                }\n            });\n\n            // If a message includes a user mention, then we don't care if there is a\n            // group/wildcard mention, and color the message as a user mention. If the\n            // message didn't include a user mention, then it was a usergroup/wildcard\n            // mention (which is the only other option for `mentioned` being true).\n            if (message_container.msg.mentioned_me_directly && is_user_mention) {\n                message_container.mention_classname = \"direct_mention\";\n            } else {\n                message_container.mention_classname = \"group_mention\";\n            }\n        } else {\n            // If there are no mentions, the classname might need to be updated (i.e.\n            // removed) to reflect this.\n            message_container.mention_classname = null;\n        }\n        message_container.include_sender = message_container.include_sender && !is_hidden;\n        if (is_revealed) {\n            // If the message is to be revealed, we show the sender anyways, because the\n            // the first message in the group (which would hold the sender) can still be\n            // hidden.\n            message_container.include_sender = true;\n        }\n\n        message_container.sender_is_bot = people.sender_is_bot(message_container.msg);\n        message_container.sender_is_guest = people.sender_is_guest(message_container.msg);\n\n        message_container.small_avatar_url = people.small_avatar_url(message_container.msg);\n        if (message_container.msg.stream) {\n            message_container.background_color = stream_data.get_color(\n                message_container.msg.stream,\n            );\n        }\n\n        this._maybe_format_me_message(message_container);\n        // Once all other variables are updated\n        this._add_msg_edited_vars(message_container);\n    }\n\n    maybe_add_subscription_marker(group, last_msg_container, first_msg_container) {\n        // The `historical` flag is present on messages which were\n        // sent a time when the current user was not subscribed to the\n        // stream receiving the message.\n        //\n        // When a narrow contains only messages within a given stream,\n        // we can infer that whenever the historical flag flips\n        // between adjacent messages, the current user must have\n        // (un)subscribed in between those messages.\n        if (!this.list.data.filter.has_operator(\"stream\")) {\n            return;\n        }\n        if (last_msg_container === undefined) {\n            return;\n        }\n\n        const last_subscribed = !last_msg_container.msg.historical;\n        const first_subscribed = !first_msg_container.msg.historical;\n        const stream = first_msg_container.msg.stream;\n\n        if (!last_subscribed && first_subscribed) {\n            group.bookend_top = true;\n            group.subscribed = true;\n            group.stream_name = stream;\n            return;\n        }\n\n        if (last_subscribed && !first_subscribed) {\n            group.bookend_top = true;\n            group.just_unsubscribed = true;\n            group.stream_name = stream;\n            return;\n        }\n    }\n\n    build_message_groups(message_containers) {\n        const start_group = () => ({\n            message_containers: [],\n            message_group_id: _.uniqueId(\"message_group_\"),\n        });\n\n        let current_group = start_group();\n        const new_message_groups = [];\n        let prev;\n\n        const add_message_container_to_group = (message_container) => {\n            if (same_sender(prev, message_container)) {\n                prev.next_is_same_sender = true;\n            }\n            current_group.message_containers.push(message_container);\n        };\n\n        const finish_group = () => {\n            if (current_group.message_containers.length > 0) {\n                populate_group_from_message_container(\n                    current_group,\n                    current_group.message_containers[0],\n                );\n                current_group.message_containers.at(-1).include_footer = true;\n                new_message_groups.push(current_group);\n            }\n        };\n\n        for (const message_container of message_containers) {\n            const message_reactions = reactions.get_message_reactions(message_container.msg);\n            message_container.msg.message_reactions = message_reactions;\n            message_container.include_recipient = false;\n            message_container.include_footer = false;\n\n            if (\n                same_recipient(prev, message_container) &&\n                this.collapse_messages &&\n                prev.msg.historical === message_container.msg.historical\n            ) {\n                add_message_container_to_group(message_container);\n                update_message_date_divider({\n                    prev_msg_container: prev,\n                    curr_msg_container: message_container,\n                });\n            } else {\n                finish_group();\n                current_group = start_group();\n                add_message_container_to_group(message_container);\n\n                update_group_date_divider(current_group, message_container, prev);\n                clear_message_date_divider(message_container);\n\n                message_container.include_recipient = true;\n                message_container.subscribed = false;\n                message_container.unsubscribed = false;\n\n                this.maybe_add_subscription_marker(current_group, prev, message_container);\n\n                if (message_container.msg.stream) {\n                    message_container.stream_url = hash_util.by_stream_url(\n                        message_container.msg.stream_id,\n                    );\n                    message_container.topic_url = hash_util.by_stream_topic_url(\n                        message_container.msg.stream_id,\n                        message_container.msg.topic,\n                    );\n                } else {\n                    message_container.pm_with_url = message_container.msg.pm_with_url;\n                }\n            }\n\n            message_container.include_sender = true;\n            if (\n                !message_container.include_recipient &&\n                !prev.status_message &&\n                same_day(prev, message_container) &&\n                same_sender(prev, message_container)\n            ) {\n                message_container.include_sender = false;\n            }\n\n            this.set_calculated_message_container_variables(message_container);\n\n            prev = message_container;\n        }\n\n        finish_group();\n\n        return new_message_groups;\n    }\n\n    join_message_groups(first_group, second_group) {\n        // join_message_groups will combine groups if they have the\n        // same_recipient and the view supports collapsing, otherwise\n        // it may add a subscription_marker if required.  It returns\n        // true if the two groups were joined in to one and the\n        // second_group should be ignored.\n        if (first_group === undefined || second_group === undefined) {\n            return false;\n        }\n        const last_msg_container = first_group.message_containers.at(-1);\n        const first_msg_container = second_group.message_containers[0];\n\n        // Join two groups into one.\n        if (\n            this.collapse_messages &&\n            same_recipient(last_msg_container, first_msg_container) &&\n            last_msg_container.msg.historical === first_msg_container.msg.historical\n        ) {\n            if (\n                !last_msg_container.status_message &&\n                !first_msg_container.msg.is_me_message &&\n                same_day(last_msg_container, first_msg_container) &&\n                same_sender(last_msg_container, first_msg_container)\n            ) {\n                first_msg_container.include_sender = false;\n            }\n            if (same_sender(last_msg_container, first_msg_container)) {\n                last_msg_container.next_is_same_sender = true;\n            }\n            first_group.message_containers = first_group.message_containers.concat(\n                second_group.message_containers,\n            );\n            return true;\n        }\n\n        // We may need to add a subscripton marker after merging the groups.\n        this.maybe_add_subscription_marker(second_group, last_msg_container, first_msg_container);\n\n        return false;\n    }\n\n    merge_message_groups(new_message_groups, where) {\n        // merge_message_groups takes a list of new messages groups to add to\n        // this._message_groups and a location where to merge them currently\n        // top or bottom. It returns an object of changes which needed to be\n        // rendered in to the page. The types of actions are append_group,\n        // prepend_group, rerender_group, append_message.\n        //\n        // append_groups are groups to add to the top of the rendered DOM\n        // prepend_groups are group to add to the bottom of the rendered DOM\n        // rerender_groups are group that should be updated in place in the DOM\n        // append_messages are messages which should be added to the last group in the DOM\n        // rerender_messages are messages which should be updated in place in the DOM\n\n        const message_actions = {\n            append_groups: [],\n            prepend_groups: [],\n            rerender_groups: [],\n            append_messages: [],\n            rerender_messages_next_same_sender: [],\n        };\n        let first_group;\n        let second_group;\n        let curr_msg_container;\n        let prev_msg_container;\n\n        if (where === \"top\") {\n            first_group = new_message_groups.at(-1);\n            second_group = this._message_groups[0];\n        } else {\n            first_group = this._message_groups.at(-1);\n            second_group = new_message_groups[0];\n        }\n\n        if (first_group) {\n            prev_msg_container = first_group.message_containers.at(-1);\n        }\n\n        if (second_group) {\n            curr_msg_container = second_group.message_containers[0];\n        }\n\n        const was_joined = this.join_message_groups(first_group, second_group);\n        if (was_joined) {\n            update_message_date_divider({\n                prev_msg_container,\n                curr_msg_container,\n            });\n        } else {\n            clear_message_date_divider(curr_msg_container);\n        }\n\n        if (where === \"top\") {\n            if (was_joined) {\n                // join_message_groups moved the old message to the end of the\n                // new group. We need to replace the old rendered message\n                // group. So we will reuse its ID.\n\n                first_group.message_group_id = second_group.message_group_id;\n                message_actions.rerender_groups.push(first_group);\n\n                // Swap the new group in\n                this._message_groups.shift();\n                this._message_groups.unshift(first_group);\n\n                new_message_groups = new_message_groups.slice(0, -1);\n            } else if (\n                !same_day(second_group.message_containers[0], first_group.message_containers[0])\n            ) {\n                // The groups did not merge, so we need up update the date row for the old group\n                update_group_date_divider(second_group, curr_msg_container, prev_msg_container);\n                // We could add an action to update the date row, but for now rerender the group.\n                message_actions.rerender_groups.push(second_group);\n            }\n            message_actions.prepend_groups = new_message_groups;\n            this._message_groups = new_message_groups.concat(this._message_groups);\n        } else {\n            if (was_joined) {\n                // rerender the last message\n                message_actions.rerender_messages_next_same_sender.push(prev_msg_container);\n                message_actions.append_messages = new_message_groups[0].message_containers;\n                new_message_groups = new_message_groups.slice(1);\n            } else if (first_group !== undefined && second_group !== undefined) {\n                if (same_day(prev_msg_container, curr_msg_container)) {\n                    clear_group_date_divider(second_group);\n                } else {\n                    // If we just sent the first message on a new day\n                    // in a narrow, make sure we render a date separator.\n                    update_group_date_divider(second_group, curr_msg_container, prev_msg_container);\n                }\n            }\n            message_actions.append_groups = new_message_groups;\n            this._message_groups = this._message_groups.concat(new_message_groups);\n        }\n\n        return message_actions;\n    }\n\n    _put_row($row) {\n        // $row is a jQuery object wrapping one message row\n        if ($row.hasClass(\"message_row\")) {\n            this._rows.set(rows.id($row), $row);\n        }\n    }\n\n    _post_process($message_rows) {\n        // $message_rows wraps one or more message rows\n\n        if (!($message_rows instanceof $)) {\n            // An assertion check that we're calling this properly\n            blueslip.error(\"programming error--pass in jQuery objects\");\n        }\n\n        for (const dom_row of $message_rows) {\n            const $row = $(dom_row);\n            this._put_row($row);\n            this._post_process_single_row($row);\n        }\n\n        if (page_params.is_spectator) {\n            // For images that fail to load due to being rate limited or being denied access\n            // by server in general, we tell user to login to be able to view the image.\n            $message_rows.find(\".message_inline_image img\").on(\"error\", (e) => {\n                $(e.target)\n                    .closest(\".message_inline_image\")\n                    .replaceWith(render_login_to_view_image_button());\n            });\n        }\n    }\n\n    _post_process_single_row($row) {\n        // For message formatting that requires some post-processing\n        // (and is not possible to handle solely via CSS), this is\n        // where we modify the content.  It is a goal to minimize how\n        // much logic is present in this function; wherever possible,\n        // we should implement features with the Markdown processor,\n        // HTML and CSS.\n\n        if ($row.length !== 1) {\n            blueslip.error(\"programming error--expected single element\");\n        }\n\n        const $content = $row.find(\".message_content\");\n\n        rendered_markdown.update_elements($content);\n\n        const id = rows.id($row);\n        message_edit.maybe_show_edit($row, id);\n\n        submessage.process_submessages({\n            $row,\n            message_id: id,\n        });\n    }\n\n    _get_message_template(message_container) {\n        const msg_reactions = reactions.get_message_reactions(message_container.msg);\n        message_container.msg.message_reactions = msg_reactions;\n        const msg_to_render = {\n            ...message_container,\n            table_name: this.table_name,\n        };\n        return render_single_message(msg_to_render);\n    }\n\n    _render_group(opts) {\n        const message_groups = opts.message_groups;\n        const use_match_properties = opts.use_match_properties;\n        const table_name = opts.table_name;\n\n        return $(\n            render_message_group({\n                message_groups,\n                use_match_properties,\n                table_name,\n            }),\n        );\n    }\n\n    render(messages, where, messages_are_new) {\n        // This function processes messages into chunks with separators between them,\n        // and templates them to be inserted as table rows into the DOM.\n\n        if (messages.length === 0) {\n            return undefined;\n        }\n\n        const list = this.list; // for convenience\n        const table_name = this.table_name;\n        const $table = rows.get_table(table_name);\n        let orig_scrolltop_offset;\n\n        // If we start with the message feed scrolled up (i.e.\n        // the bottom message is not visible), then we will respect\n        // the user's current position after rendering, rather\n        // than auto-scrolling.\n        const started_scrolled_up = $message_viewport.is_scrolled_up();\n\n        // The messages we are being asked to render are shared with between\n        // all messages lists. To prevent having both list views overwriting\n        // each others' data we will make a new message object to add data to\n        // for rendering.\n        const message_containers = messages.map((message) => {\n            if (message.starred) {\n                message.starred_status = $t({defaultMessage: \"Unstar\"});\n            } else {\n                message.starred_status = $t({defaultMessage: \"Star\"});\n            }\n\n            message.url = hash_util.by_conversation_and_time_url(message);\n\n            return {msg: message};\n        });\n\n        const save_scroll_position = () => {\n            if (orig_scrolltop_offset === undefined && this.selected_row().length > 0) {\n                orig_scrolltop_offset = this.selected_row().offset().top;\n            }\n        };\n\n        const restore_scroll_position = () => {\n            if (\n                !recent_topics_util.is_visible() &&\n                list === message_lists.current &&\n                orig_scrolltop_offset !== undefined\n            ) {\n                list.view.set_message_offset(orig_scrolltop_offset);\n                list.reselect_selected_id();\n            }\n        };\n\n        if (message_containers.length === 0) {\n            return undefined;\n        }\n\n        const new_message_groups = this.build_message_groups(message_containers, this.table_name);\n        const message_actions = this.merge_message_groups(new_message_groups, where);\n        let new_dom_elements = [];\n        let $rendered_groups;\n        let $dom_messages;\n        let $last_message_row;\n        let $last_group_row;\n\n        for (const message_container of message_containers) {\n            this.message_containers.set(message_container.msg.id, message_container);\n        }\n\n        // Render new message groups on the top\n        if (message_actions.prepend_groups.length > 0) {\n            save_scroll_position();\n\n            $rendered_groups = this._render_group({\n                message_groups: message_actions.prepend_groups,\n                use_match_properties: this.list.is_search(),\n                table_name: this.table_name,\n            });\n\n            $dom_messages = $rendered_groups.find(\".message_row\");\n            new_dom_elements = new_dom_elements.concat($rendered_groups);\n\n            this._post_process($dom_messages);\n\n            // The date row will be included in the message groups or will be\n            // added in a rerendered in the group below\n            $table.find(\".recipient_row\").first().prev(\".date_row\").remove();\n            $table.prepend($rendered_groups);\n            condense.condense_and_collapse($dom_messages);\n        }\n\n        // Rerender message groups\n        if (message_actions.rerender_groups.length > 0) {\n            save_scroll_position();\n\n            for (const message_group of message_actions.rerender_groups) {\n                const $old_message_group = $(`#${CSS.escape(message_group.message_group_id)}`);\n                // Remove the top date_row, we'll re-add it after rendering\n                $old_message_group.prev(\".date_row\").remove();\n\n                $rendered_groups = this._render_group({\n                    message_groups: [message_group],\n                    use_match_properties: this.list.is_search(),\n                    table_name: this.table_name,\n                });\n\n                $dom_messages = $rendered_groups.find(\".message_row\");\n                // Not adding to new_dom_elements it is only used for autoscroll\n\n                this._post_process($dom_messages);\n                $old_message_group.replaceWith($rendered_groups);\n                condense.condense_and_collapse($dom_messages);\n            }\n        }\n\n        // Update the rendering for message rows which used to be last\n        // and now know whether the following message has the same\n        // sender.\n        //\n        // It is likely the case that we can just remove the block\n        // entirely, since it appears the next_is_same_sender CSS\n        // class doesn't do anything.\n        if (message_actions.rerender_messages_next_same_sender.length > 0) {\n            const targets = message_actions.rerender_messages_next_same_sender;\n\n            for (const message_container of targets) {\n                const $row = this.get_row(message_container.msg.id);\n                $row.find(\"div.messagebox\").toggleClass(\n                    \"next_is_same_sender\",\n                    message_container.next_is_same_sender,\n                );\n            }\n        }\n\n        // Insert new messages in to the last message group\n        if (message_actions.append_messages.length > 0) {\n            $last_message_row = $table.find(\".message_row\").last().expectOne();\n            $last_group_row = rows.get_message_recipient_row($last_message_row);\n            $dom_messages = $(\n                message_actions.append_messages\n                    .map((message_container) => this._get_message_template(message_container))\n                    .join(\"\"),\n            ).filter(\".message_row\");\n\n            this._post_process($dom_messages);\n            $last_group_row.append($dom_messages);\n\n            condense.condense_and_collapse($dom_messages);\n            new_dom_elements = new_dom_elements.concat($dom_messages);\n        }\n\n        // Add new message groups to the end\n        if (message_actions.append_groups.length > 0) {\n            // Remove the trailing bookend; it'll be re-added after we do our rendering\n            this.clear_trailing_bookend();\n\n            $rendered_groups = this._render_group({\n                message_groups: message_actions.append_groups,\n                use_match_properties: this.list.is_search(),\n                table_name: this.table_name,\n            });\n\n            $dom_messages = $rendered_groups.find(\".message_row\");\n            new_dom_elements = new_dom_elements.concat($rendered_groups);\n\n            this._post_process($dom_messages);\n\n            // This next line is a workaround for a weird scrolling\n            // bug on Chrome.  Basically, in Chrome 64, we had a\n            // highly reproducible bug where if you hit the \"End\" key\n            // 5 times in a row in a `near:1` narrow (or any other\n            // narrow with enough content below to try this), the 5th\n            // time (because RENDER_WINDOW_SIZE / batch_size = 4,\n            // i.e. the first time we need to rerender to show the\n            // message \"End\" jumps to) would trigger an unexpected\n            // scroll, resulting in some chaotic scrolling and\n            // additional fetches (from bottom_whitespace ending up in\n            // the view).  During debugging, we found that this adding\n            // this next line seems to prevent the Chrome bug from firing.\n            $message_viewport.scrollTop();\n\n            $table.append($rendered_groups);\n            condense.condense_and_collapse($dom_messages);\n        }\n\n        restore_scroll_position();\n\n        const last_message_group = this._message_groups.at(-1);\n        if (last_message_group !== undefined) {\n            list.last_message_historical =\n                last_message_group.message_containers.at(-1).msg.historical;\n        }\n\n        const stream_name = narrow_state.stream();\n        if (stream_name !== undefined) {\n            // If user narrows to a stream, doesn't update\n            // trailing bookend if user is subscribed.\n            const sub = stream_data.get_sub(stream_name);\n            if (sub === undefined || !sub.subscribed || page_params.is_spectator) {\n                list.update_trailing_bookend();\n            }\n        }\n\n        if (list === message_lists.current) {\n            // Update the fade.\n\n            const get_element = (message_group) => {\n                // We don't have a MessageGroup class, but we can at least hide the messy details\n                // of rows.js from compose_fade.  We provide a callback function to be lazy--\n                // compose_fade may not actually need the elements depending on its internal\n                // state.\n                const $message_row = this.get_row(message_group.message_containers[0].msg.id);\n                return rows.get_message_recipient_row($message_row);\n            };\n\n            compose_fade.update_rendered_message_groups(new_message_groups, get_element);\n        }\n\n        if (list === message_lists.current && messages_are_new) {\n            if (started_scrolled_up) {\n                return {\n                    need_user_to_scroll: true,\n                };\n            }\n            const new_messages_height = this._new_messages_height(new_dom_elements);\n            const need_user_to_scroll = this._maybe_autoscroll(new_messages_height);\n\n            if (need_user_to_scroll) {\n                return {\n                    need_user_to_scroll: true,\n                };\n            }\n        }\n\n        return undefined;\n    }\n\n    _new_messages_height(rendered_elems) {\n        let new_messages_height = 0;\n\n        for (const $elem of rendered_elems.reverse()) {\n            // Sometimes there are non-DOM elements in rendered_elems; only\n            // try to get the heights of actual trs.\n            if ($elem.is(\"div\")) {\n                new_messages_height += $elem.height();\n            }\n        }\n\n        return new_messages_height;\n    }\n\n    _scroll_limit($selected_row, viewport_info) {\n        // This scroll limit is driven by the TOP of the feed, and\n        // it's the max amount that we can scroll down (or \"skooch\n        // up\" the messages) before knocking the selected message\n        // out of the feed.\n        const selected_row_top = $selected_row.offset().top;\n        let scroll_limit = selected_row_top - viewport_info.visible_top;\n\n        if (scroll_limit < 0) {\n            // This shouldn't happen, but if we're off by a pixel or\n            // something, we can deal with it, and just warn.\n            blueslip.warn(\"Selected row appears too high on screen.\");\n            scroll_limit = 0;\n        }\n\n        return scroll_limit;\n    }\n\n    _maybe_autoscroll(new_messages_height) {\n        // If we are near the bottom of our feed (the bottom is visible) and can\n        // scroll up without moving the pointer out of the viewport, do so, by\n        // up to the amount taken up by the new message.\n        //\n        // returns `true` if we need the user to scroll\n\n        const $selected_row = this.selected_row();\n        const $last_visible = rows.last_visible();\n\n        // Make sure we have a selected row and last visible row. (defensive)\n        if (!($selected_row && $selected_row.length > 0 && $last_visible)) {\n            return false;\n        }\n\n        if (new_messages_height <= 0) {\n            return false;\n        }\n\n        if (!activity.client_is_active) {\n            // Don't autoscroll if the window hasn't had focus\n            // recently.  This in intended to help protect us from\n            // auto-scrolling downwards when the window is in the\n            // background and might be having some functionality\n            // throttled by modern Chrome's aggressive power-saving\n            // features.\n            blueslip.log(\"Suppressing scroll down due to inactivity\");\n            return false;\n        }\n\n        // do not scroll if there are any active popovers.\n        if (popovers.any_active()) {\n            // If a popover is active, then we are pretty sure the\n            // incoming message is not from the user themselves, so\n            // we don't need to tell users to scroll down.\n            return false;\n        }\n\n        const info = $message_viewport.message_viewport_info();\n        const scroll_limit = this._scroll_limit($selected_row, info);\n\n        // This next decision is fairly debatable.  For a big message that\n        // would push the pointer off the screen, we do a partial autoscroll,\n        // which has the following implications:\n        //    a) user sees scrolling (good)\n        //    b) user's pointer stays on screen (good)\n        //    c) scroll amount isn't really tied to size of new messages (bad)\n        //    d) all the bad things about scrolling for users who want messages\n        //       to stay on the screen\n        let scroll_amount;\n        let need_user_to_scroll;\n\n        if (new_messages_height <= scroll_limit) {\n            // This is the happy path where we can just scroll\n            // automatically, and the user will see the new message.\n            scroll_amount = new_messages_height;\n            need_user_to_scroll = false;\n        } else {\n            // Sometimes we don't want to scroll the entire height of\n            // the message, but our callers can give appropriate\n            // warnings if the message is gonna be offscreen.\n            // (Even if we are somewhat constrained here, the message may\n            // still end up being visible, so we do some arithmetic.)\n            scroll_amount = scroll_limit;\n            const offset = $message_viewport.offset_from_bottom($last_visible);\n\n            // For determining whether we need to show the user a \"you\n            // need to scroll down\" notification, the obvious check\n            // would be `offset > scroll_amount`, and that is indeed\n            // correct with a 1-line message in the compose box.\n            // However, the compose box is open with the content of\n            // the message just sent when this code runs, and\n            // `offset_from_bottom` if an offset from the top of the\n            // compose box, which is about to be reset to empty.  So\n            // to compute the offset at the time the user might see\n            // this notification, we need to adjust by the amount that\n            // the current compose is bigger than the empty, open\n            // compose box.\n            const compose_textarea_default_height = 42;\n            const compose_textarea_current_height = $(\"#compose-textarea\").height();\n            const expected_change =\n                compose_textarea_current_height - compose_textarea_default_height;\n            const expected_offset = offset - expected_change;\n            need_user_to_scroll = expected_offset > scroll_amount;\n        }\n\n        // Ok, we are finally ready to actually scroll.\n        if (scroll_amount > 0) {\n            $message_viewport.system_initiated_animate_scroll(scroll_amount);\n        }\n\n        return need_user_to_scroll;\n    }\n\n    clear_rendering_state(clear_table) {\n        if (clear_table) {\n            this.clear_table();\n        }\n        this.list.last_message_historical = false;\n\n        this._render_win_start = 0;\n        this._render_win_end = 0;\n    }\n\n    update_render_window(selected_idx, check_for_changed) {\n        const new_start = Math.max(selected_idx - this._RENDER_WINDOW_SIZE / 2, 0);\n        if (check_for_changed && new_start === this._render_win_start) {\n            return false;\n        }\n\n        this._render_win_start = new_start;\n        this._render_win_end = Math.min(\n            this._render_win_start + this._RENDER_WINDOW_SIZE,\n            this.list.num_items(),\n        );\n        return true;\n    }\n\n    maybe_rerender() {\n        const selected_idx = this.list.selected_idx();\n\n        // We rerender under the following conditions:\n        // * The selected message is within this._RENDER_THRESHOLD messages\n        //   of the top of the currently rendered window and the top\n        //   of the window does not abut the beginning of the message\n        //   list\n        // * The selected message is within this._RENDER_THRESHOLD messages\n        //   of the bottom of the currently rendered window and the\n        //   bottom of the window does not abut the end of the\n        //   message list\n        if (\n            !(\n                (selected_idx - this._render_win_start < this._RENDER_THRESHOLD &&\n                    this._render_win_start !== 0) ||\n                (this._render_win_end - selected_idx <= this._RENDER_THRESHOLD &&\n                    this._render_win_end !== this.list.num_items())\n            )\n        ) {\n            return false;\n        }\n\n        if (!this.update_render_window(selected_idx, true)) {\n            return false;\n        }\n\n        this.rerender_preserving_scrolltop();\n        return true;\n    }\n\n    rerender_preserving_scrolltop(discard_rendering_state) {\n        // old_offset is the number of pixels between the top of the\n        // viewable window and the selected message\n        let old_offset;\n        const $selected_row = this.selected_row();\n        const selected_in_view = $selected_row.length > 0;\n        if (selected_in_view) {\n            old_offset = $selected_row.offset().top;\n        }\n        if (discard_rendering_state) {\n            // If we know that the existing render is invalid way\n            // (typically because messages appear out-of-order), then\n            // we discard the message_list rendering state entirely.\n            this.clear_rendering_state(true);\n            this.update_render_window(this.list.selected_idx(), false);\n        }\n        return this.rerender_with_target_scrolltop($selected_row, old_offset);\n    }\n\n    set_message_offset(offset) {\n        const $msg = this.selected_row();\n        $message_viewport.scrollTop($message_viewport.scrollTop() + $msg.offset().top - offset);\n    }\n\n    rerender_with_target_scrolltop(selected_row, target_offset) {\n        // target_offset is the target number of pixels between the top of the\n        // viewable window and the selected message\n        this.clear_table();\n        this.render(\n            this.list.all_messages().slice(this._render_win_start, this._render_win_end),\n            \"bottom\",\n        );\n\n        // If we could see the newly selected message, scroll the\n        // window such that the newly selected message is at the\n        // same location as it would have been before we\n        // re-rendered.\n        if (target_offset !== undefined) {\n            if (this.selected_row().length === 0 && this.list.selected_id() > -1) {\n                this.list.select_id(this.list.selected_id(), {use_closest: true});\n            }\n\n            this.set_message_offset(target_offset);\n        }\n    }\n\n    _find_message_group(message_group_id) {\n        // Ideally, we'd maintain this data structure with a hash\n        // table or at least a pointer from the message containers (in\n        // either case, updating the data structure when message\n        // groups are merged etc.) , but we only call this from flows\n        // like message editing, so it's not a big performance\n        // problem.\n        return this._message_groups.find(\n            // Since we don't have a way to get a message group from\n            // the containing message container, we just do a search\n            // to find it.\n            (message_group) => message_group.message_group_id === message_group_id,\n        );\n    }\n\n    _rerender_header(message_containers) {\n        // Given a list of messages that are in the **same** message group,\n        // rerender the header / recipient bar of the messages\n        if (message_containers.length === 0) {\n            return;\n        }\n\n        const $first_row = this.get_row(message_containers[0].msg.id);\n\n        // We may not have the row if the stream or topic was muted\n        if ($first_row.length === 0) {\n            return;\n        }\n\n        const $recipient_row = rows.get_message_recipient_row($first_row);\n        const $header = $recipient_row.find(\".message_header\");\n        const message_group_id = $recipient_row.attr(\"id\");\n\n        // Since there might be multiple dates within the message\n        // group, it's important to look up the original/full message\n        // group rather than doing an artificial rerendering of the\n        // message header from the set of message containers passed in\n        // here.\n        const group = this._find_message_group(message_group_id);\n        if (group === undefined) {\n            blueslip.error(\"Could not find message group for rerendering headers\");\n            return;\n        }\n\n        // TODO: It's possible that we no longer need this populate\n        // call; it was introduced in an earlier version of this code\n        // where we constructed an artificial message group for this\n        // rerendering rather than looking up the original version.\n        populate_group_from_message_container(group, group.message_containers[0]);\n\n        const $rendered_recipient_row = $(render_recipient_row(group));\n\n        $header.replaceWith($rendered_recipient_row);\n    }\n\n    _rerender_message(message_container, {message_content_edited, is_revealed}) {\n        const $row = this.get_row(message_container.msg.id);\n        const was_selected = this.list.selected_message() === message_container.msg;\n\n        this.set_calculated_message_container_variables(message_container, is_revealed);\n\n        const $rendered_msg = $(this._get_message_template(message_container));\n        if (message_content_edited) {\n            $rendered_msg.addClass(\"fade-in-message\");\n        }\n        this._post_process($rendered_msg);\n        $row.replaceWith($rendered_msg);\n\n        if (was_selected) {\n            this.list.select_id(message_container.msg.id);\n        }\n    }\n\n    reveal_hidden_message(message_id) {\n        const message_container = this.message_containers.get(message_id);\n        this._rerender_message(message_container, {\n            message_content_edited: false,\n            is_revealed: true,\n        });\n    }\n\n    hide_revealed_message(message_id) {\n        const message_container = this.message_containers.get(message_id);\n        this._rerender_message(message_container, {\n            message_content_edited: false,\n            is_revealed: false,\n        });\n    }\n\n    rerender_messages(messages, message_content_edited) {\n        // Convert messages to list messages\n        let message_containers = messages.map((message) => this.message_containers.get(message.id));\n        // We may not have the message_container if the stream or topic was muted\n        message_containers = message_containers.filter(\n            (message_container) => message_container !== undefined,\n        );\n\n        const message_groups = [];\n        let current_group = [];\n\n        for (const message_container of message_containers) {\n            if (\n                current_group.length === 0 ||\n                same_recipient(current_group.at(-1), message_container)\n            ) {\n                current_group.push(message_container);\n            } else {\n                message_groups.push(current_group);\n                current_group = [];\n            }\n            this._rerender_message(message_container, {message_content_edited, is_revealed: false});\n        }\n\n        if (current_group.length !== 0) {\n            message_groups.push(current_group);\n        }\n\n        for (const messages_in_group of message_groups) {\n            this._rerender_header(messages_in_group, message_content_edited);\n        }\n    }\n\n    append(messages, messages_are_new) {\n        const cur_window_size = this._render_win_end - this._render_win_start;\n        let render_info;\n\n        if (cur_window_size < this._RENDER_WINDOW_SIZE) {\n            const slice_to_render = messages.slice(0, this._RENDER_WINDOW_SIZE - cur_window_size);\n            render_info = this.render(slice_to_render, \"bottom\", messages_are_new);\n            this._render_win_end += slice_to_render.length;\n        }\n\n        // If the pointer is high on the page such that there is a\n        // lot of empty space below and the render window is full, a\n        // newly received message should trigger a rerender so that\n        // the new message, which will appear in the viewable area,\n        // is rendered.\n        const needed_rerender = this.maybe_rerender();\n\n        if (needed_rerender) {\n            render_info = {need_user_to_scroll: true};\n        }\n\n        return render_info;\n    }\n\n    prepend(messages) {\n        this._render_win_start += messages.length;\n        this._render_win_end += messages.length;\n\n        const cur_window_size = this._render_win_end - this._render_win_start;\n        if (cur_window_size < this._RENDER_WINDOW_SIZE) {\n            const msgs_to_render_count = this._RENDER_WINDOW_SIZE - cur_window_size;\n            const slice_to_render = messages.slice(messages.length - msgs_to_render_count);\n            this.render(slice_to_render, \"top\", false);\n            this._render_win_start -= slice_to_render.length;\n        }\n\n        // See comment for maybe_rerender call in the append code path\n        this.maybe_rerender();\n    }\n\n    clear_table() {\n        // We do not want to call .empty() because that also clears\n        // jQuery data.  This does mean, however, that we need to be\n        // mindful of memory leaks.\n        rows.get_table(this.table_name).children().detach();\n        this._rows.clear();\n        this._message_groups = [];\n        this.message_containers.clear();\n    }\n\n    get_row(id) {\n        const $row = this._rows.get(id);\n\n        if ($row === undefined) {\n            // For legacy reasons we need to return an empty\n            // jQuery object here.\n            return $(undefined);\n        }\n\n        return $row;\n    }\n\n    clear_trailing_bookend() {\n        const $trailing_bookend = rows.get_table(this.table_name).find(\".trailing_bookend\");\n        $trailing_bookend.remove();\n    }\n\n    render_trailing_bookend(\n        stream_name,\n        subscribed,\n        deactivated,\n        just_unsubscribed,\n        can_toggle_subscription,\n        is_spectator,\n    ) {\n        // This is not the only place we render bookends; see also the\n        // partial in message_group.hbs, which do not set is_trailing_bookend.\n        const $rendered_trailing_bookend = $(\n            render_bookend({\n                stream_name,\n                can_toggle_subscription,\n                subscribed,\n                deactivated,\n                just_unsubscribed,\n                is_spectator,\n                is_trailing_bookend: true,\n            }),\n        );\n        rows.get_table(this.table_name).append($rendered_trailing_bookend);\n    }\n\n    selected_row() {\n        return this.get_row(this.list.selected_id());\n    }\n\n    get_message(id) {\n        return this.list.get(id);\n    }\n\n    change_message_id(old_id, new_id) {\n        if (this._rows.has(old_id)) {\n            const $row = this._rows.get(old_id);\n            this._rows.delete(old_id);\n\n            $row.attr(\"zid\", new_id);\n            $row.attr(\"id\", this.table_name + new_id);\n            $row.removeClass(\"local\");\n            this._rows.set(new_id, $row);\n        }\n\n        if (this.message_containers.has(old_id)) {\n            const message_container = this.message_containers.get(old_id);\n            this.message_containers.delete(old_id);\n            this.message_containers.set(new_id, message_container);\n        }\n    }\n\n    _maybe_format_me_message(message_container) {\n        if (message_container.is_hidden) {\n            // If the message is to be hidden anyway, no need to render\n            // it differently.\n            return;\n        }\n        if (message_container.msg.is_me_message) {\n            // Slice the '<p>/me ' off the front, and '</p>' off the first line\n            // 'p' tag is sliced off to get sender in the same line as the\n            // first line of the message\n            const msg_content = message_container.msg.content;\n            const p_index = msg_content.indexOf(\"</p>\");\n            message_container.status_message =\n                msg_content.slice(\"<p>/me \".length, p_index) +\n                msg_content.slice(p_index + \"</p>\".length);\n            message_container.include_sender = true;\n        } else {\n            message_container.status_message = false;\n        }\n    }\n}\n","import {Filter} from \"./filter\";\nimport * as message_list from \"./message_list\";\nimport * as recent_topics_util from \"./recent_topics_util\";\n\nexport let home;\nexport let current;\n\nexport function set_current(msg_list) {\n    current = msg_list;\n}\n\nexport function all_rendered_message_lists() {\n    const rendered_message_lists = [home];\n    if (current !== home && !recent_topics_util.is_visible()) {\n        rendered_message_lists.push(current);\n    }\n    return rendered_message_lists;\n}\n\nexport function initialize() {\n    home = new message_list.MessageList({\n        table_name: \"zhome\",\n        filter: new Filter([{operator: \"in\", operand: \"home\"}]),\n        excludes_muted_topics: true,\n    });\n    current = home;\n}\n","import * as message_lists from \"./message_lists\";\nimport * as message_store from \"./message_store\";\nimport * as people from \"./people\";\n\nexport function rerender_messages_view() {\n    for (const list of message_lists.all_rendered_message_lists()) {\n        list.rerender_view();\n    }\n}\n\nfunction rerender_messages_view_for_user(user_id) {\n    for (const list of message_lists.all_rendered_message_lists()) {\n        const messages = list.data.get_messages_sent_by_user(user_id);\n        if (messages.length === 0) {\n            continue;\n        }\n        list.view.rerender_messages(messages);\n    }\n}\n\nexport function update_stream_name(stream_id, new_name) {\n    message_store.update_property(\"stream_name\", new_name, {stream_id});\n    rerender_messages_view();\n}\n\nexport function update_user_full_name(user_id, full_name) {\n    message_store.update_property(\"sender_full_name\", full_name, {user_id});\n    rerender_messages_view_for_user(user_id);\n}\n\nexport function update_avatar(user_id, avatar_url) {\n    let url = avatar_url;\n    url = people.format_small_avatar_url(url);\n    message_store.update_property(\"small_avatar_url\", url, {user_id});\n    rerender_messages_view_for_user(user_id);\n}\n\nexport function update_user_status_emoji(user_id, status_emoji_info) {\n    message_store.update_property(\"status_emoji_info\", status_emoji_info, {user_id});\n    rerender_messages_view_for_user(user_id);\n}\n","import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport * as floating_recipient_bar from \"./floating_recipient_bar\";\nimport * as hash_util from \"./hash_util\";\nimport * as loading from \"./loading\";\nimport * as message_fetch from \"./message_fetch\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_viewport from \"./message_viewport\";\nimport * as narrow_banner from \"./narrow_banner\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as recent_topics_util from \"./recent_topics_util\";\nimport * as unread from \"./unread\";\nimport * as unread_ops from \"./unread_ops\";\nimport * as unread_ui from \"./unread_ui\";\n\nlet actively_scrolling = false;\n\n// Tracks whether the next scroll that will complete is initiated by\n// code, not the user, and thus should avoid moving the selected\n// message.\nlet update_selection_on_next_scroll = true;\n\nexport function suppress_selection_update_on_next_scroll() {\n    update_selection_on_next_scroll = false;\n}\n\n// Whether a keyboard shortcut is triggering a message feed scroll event.\nlet keyboard_triggered_current_scroll = false;\n\nexport function mark_keyboard_triggered_current_scroll() {\n    keyboard_triggered_current_scroll = true;\n}\n\nlet loading_older_messages_indicator_showing = false;\nlet loading_newer_messages_indicator_showing = false;\n\nexport function show_loading_older() {\n    if (!loading_older_messages_indicator_showing) {\n        loading.make_indicator($(\"#loading_older_messages_indicator\"), {abs_positioned: true});\n        loading_older_messages_indicator_showing = true;\n        floating_recipient_bar.hide();\n    }\n}\n\nexport function hide_loading_older() {\n    if (loading_older_messages_indicator_showing) {\n        loading.destroy_indicator($(\"#loading_older_messages_indicator\"));\n        loading_older_messages_indicator_showing = false;\n    }\n}\n\nexport function show_loading_newer() {\n    if (!loading_newer_messages_indicator_showing) {\n        $(\".bottom-messages-logo\").show();\n        loading.make_indicator($(\"#loading_newer_messages_indicator\"), {abs_positioned: true});\n        loading_newer_messages_indicator_showing = true;\n        floating_recipient_bar.hide();\n    }\n}\n\nexport function hide_loading_newer() {\n    if (loading_newer_messages_indicator_showing) {\n        $(\".bottom-messages-logo\").hide();\n        loading.destroy_indicator($(\"#loading_newer_messages_indicator\"));\n        loading_newer_messages_indicator_showing = false;\n    }\n}\n\nexport function hide_indicators() {\n    hide_loading_older();\n    hide_loading_newer();\n}\n\nexport function show_history_limit_notice() {\n    $(\".top-messages-logo\").hide();\n    $(\".history-limited-box\").show();\n    narrow_banner.hide_empty_narrow_message();\n}\n\nexport function hide_history_limit_notice() {\n    $(\".top-messages-logo\").show();\n    $(\".history-limited-box\").hide();\n}\n\nexport function hide_end_of_results_notice() {\n    $(\".all-messages-search-caution\").hide();\n}\n\nexport function show_end_of_results_notice() {\n    $(\".all-messages-search-caution\").show();\n\n    // Set the link to point to this search with streams:public added.\n    // Note that element we adjust is not visible to spectators.\n    const operators = narrow_state.filter().operators();\n    const update_hash = hash_util.search_public_streams_notice_url(operators);\n    $(\".all-messages-search-caution a.search-shared-history\").attr(\"href\", update_hash);\n}\n\nexport function update_top_of_narrow_notices(msg_list) {\n    // Assumes that the current state is all notices hidden (i.e. this\n    // will not hide a notice that should not be there)\n    if (msg_list !== message_lists.current) {\n        return;\n    }\n\n    if (\n        msg_list.data.fetch_status.has_found_oldest() &&\n        message_lists.current !== message_lists.home\n    ) {\n        const filter = narrow_state.filter();\n        if (filter === undefined && recent_topics_util.is_visible()) {\n            // user moved away from the narrow / filter to recent topics.\n            return;\n        }\n        // Potentially display the notice that lets users know\n        // that not all messages were searched.  One could\n        // imagine including `filter.is_search()` in these\n        // conditions, but there's a very legitimate use case\n        // for moderation of searching for all messages sent\n        // by a potential spammer user.\n        if (\n            !filter.contains_only_private_messages() &&\n            !filter.includes_full_stream_history() &&\n            !filter.is_personal_filter()\n        ) {\n            show_end_of_results_notice();\n        }\n    }\n\n    if (msg_list.data.fetch_status.history_limited()) {\n        show_history_limit_notice();\n    }\n}\n\nexport function hide_top_of_narrow_notices() {\n    hide_end_of_results_notice();\n    hide_history_limit_notice();\n}\n\nlet hide_scroll_to_bottom_timer;\nexport function hide_scroll_to_bottom() {\n    const $show_scroll_to_bottom_button = $(\"#scroll-to-bottom-button-container\");\n    if (message_viewport.bottom_message_visible() || message_lists.current.empty()) {\n        // If last message is visible, just hide the\n        // scroll to bottom button.\n        $show_scroll_to_bottom_button.removeClass(\"show\");\n        return;\n    }\n\n    // Wait before hiding to allow user time to click on the button.\n    hide_scroll_to_bottom_timer = setTimeout(() => {\n        // Don't hide if user is hovered on it.\n        if (\n            !narrow_state.narrowed_by_topic_reply() &&\n            !$show_scroll_to_bottom_button.get(0).matches(\":hover\")\n        ) {\n            $show_scroll_to_bottom_button.removeClass(\"show\");\n        }\n    }, 3000);\n}\n\nexport function show_scroll_to_bottom_button() {\n    if (message_viewport.bottom_message_visible()) {\n        // Only show scroll to bottom button when\n        // last message is not visible in the\n        // current scroll position.\n        return;\n    }\n\n    clearTimeout(hide_scroll_to_bottom_timer);\n    $(\"#scroll-to-bottom-button-container\").addClass(\"show\");\n}\n\n$(document).on(\"keydown\", (e) => {\n    if (e.shiftKey || e.ctrlKey || e.metaKey) {\n        return;\n    }\n\n    // Hide scroll to bottom button on any keypress.\n    // Keyboard users are very less likely to use this button.\n    $(\"#scroll-to-bottom-button-container\").removeClass(\"show\");\n});\n\nexport function is_actively_scrolling() {\n    return actively_scrolling;\n}\n\nexport function scroll_finished() {\n    actively_scrolling = false;\n    hide_scroll_to_bottom();\n\n    if (recent_topics_util.is_visible()) {\n        return;\n    }\n\n    if (update_selection_on_next_scroll) {\n        message_viewport.keep_pointer_in_view();\n    } else {\n        update_selection_on_next_scroll = true;\n    }\n\n    floating_recipient_bar.update();\n\n    if (message_viewport.at_top()) {\n        message_fetch.maybe_load_older_messages({\n            msg_list: message_lists.current,\n        });\n    }\n\n    if (message_viewport.at_bottom()) {\n        message_fetch.maybe_load_newer_messages({\n            msg_list: message_lists.current,\n        });\n    }\n\n    // When the window scrolls, it may cause some messages to\n    // enter the screen and become read.  Calling\n    // unread_ops.process_visible will update necessary\n    // data structures and DOM elements.\n    setTimeout(unread_ops.process_visible, 0);\n}\n\nlet scroll_timer;\nfunction scroll_finish() {\n    actively_scrolling = true;\n\n    // Don't present the \"scroll to bottom\" widget if the current\n    // scroll was triggered by the keyboard.\n    if (!keyboard_triggered_current_scroll) {\n        show_scroll_to_bottom_button();\n    }\n    keyboard_triggered_current_scroll = false;\n\n    clearTimeout(scroll_timer);\n    scroll_timer = setTimeout(scroll_finished, 100);\n}\n\nexport function initialize() {\n    message_viewport.$message_pane.on(\n        \"scroll\",\n        _.throttle(() => {\n            unread_ops.process_visible();\n            scroll_finish();\n        }, 50),\n    );\n\n    // Scroll handler that marks messages as read when you scroll past them.\n    $(document).on(\"message_selected.zulip\", (event) => {\n        if (event.id === -1) {\n            return;\n        }\n\n        if (event.mark_read && event.previously_selected_id !== -1) {\n            // Mark messages between old pointer and new pointer as read\n            let messages;\n            if (event.id < event.previously_selected_id) {\n                messages = event.msg_list.message_range(event.id, event.previously_selected_id);\n            } else {\n                messages = event.msg_list.message_range(event.previously_selected_id, event.id);\n            }\n            if (event.msg_list.can_mark_messages_read()) {\n                unread_ops.notify_server_messages_read(messages, {from: \"pointer\"});\n            } else if (\n                unread.get_unread_messages(messages).length !== 0 &&\n                // The below checks might seem redundant, but it's\n                // possible this logic, which runs after a delay, lost\n                // a race with switching to another view, like Recent\n                // Topics, and we don't want to displ[ay this banner\n                // in such a view.\n                //\n                // This can likely be fixed more cleanly with another approach.\n                narrow_state.filter() !== undefined &&\n                message_lists.current === event.msg_list\n            ) {\n                unread_ui.notify_messages_remain_unread();\n            }\n        }\n    });\n}\n","import * as blueslip from \"./blueslip\";\nimport * as people from \"./people\";\n\nconst stored_messages = new Map();\n\nexport function update_message_cache(message) {\n    // You should only call this from message_helper (or in tests).\n    stored_messages.set(message.id, message);\n}\n\nexport function get_cached_message(message_id) {\n    // You should only call this from message_helper.\n    // Use the get() wrapper below for most other use cases.\n    return stored_messages.get(message_id);\n}\n\nexport function clear_for_testing() {\n    stored_messages.clear();\n}\n\nexport function get(message_id) {\n    if (message_id === undefined || message_id === null) {\n        blueslip.error(\"message_store.get got bad value: \" + message_id);\n        return undefined;\n    }\n\n    if (typeof message_id !== \"number\") {\n        blueslip.error(\"message_store got non-number: \" + message_id);\n\n        // Try to soldier on, assuming the caller treats message\n        // ids as strings.\n        message_id = Number.parseFloat(message_id);\n    }\n\n    return stored_messages.get(message_id);\n}\n\nexport function get_pm_emails(message) {\n    const user_ids = people.pm_with_user_ids(message);\n    const emails = user_ids\n        .map((user_id) => {\n            const person = people.get_by_user_id(user_id);\n            if (!person) {\n                blueslip.error(\"Unknown user id \" + user_id);\n                return \"?\";\n            }\n            return person.email;\n        })\n        .sort();\n\n    return emails.join(\", \");\n}\n\nexport function get_pm_full_names(message) {\n    const user_ids = people.pm_with_user_ids(message);\n    const names = people.get_display_full_names(user_ids).sort();\n\n    return names.join(\", \");\n}\n\nexport function set_message_booleans(message) {\n    const flags = message.flags || [];\n\n    function convert_flag(flag_name) {\n        return flags.includes(flag_name);\n    }\n\n    message.unread = !convert_flag(\"read\");\n    message.historical = convert_flag(\"historical\");\n    message.starred = convert_flag(\"starred\");\n    message.mentioned = convert_flag(\"mentioned\") || convert_flag(\"wildcard_mentioned\");\n    message.mentioned_me_directly = convert_flag(\"mentioned\");\n    message.collapsed = convert_flag(\"collapsed\");\n    message.alerted = convert_flag(\"has_alert_word\");\n\n    // Once we have set boolean flags here, the `flags` attribute is\n    // just a distraction, so we delete it.  (All the downstream code\n    // uses booleans.)\n    delete message.flags;\n}\n\nexport function update_booleans(message, flags) {\n    // When we get server flags for local echo or message edits,\n    // we are vulnerable to race conditions, so only update flags\n    // that are driven by message content.\n    function convert_flag(flag_name) {\n        return flags.includes(flag_name);\n    }\n\n    message.mentioned = convert_flag(\"mentioned\") || convert_flag(\"wildcard_mentioned\");\n    message.mentioned_me_directly = convert_flag(\"mentioned\");\n    message.alerted = convert_flag(\"has_alert_word\");\n}\n\nexport function update_property(property, value, info) {\n    switch (property) {\n        case \"sender_full_name\":\n        case \"small_avatar_url\":\n            for (const msg of stored_messages.values()) {\n                if (msg.sender_id && msg.sender_id === info.user_id) {\n                    msg[property] = value;\n                }\n            }\n            break;\n        case \"stream_name\":\n            for (const msg of stored_messages.values()) {\n                if (msg.stream_id && msg.stream_id === info.stream_id) {\n                    msg.display_recipient = value;\n                    msg.stream = value;\n                }\n            }\n            break;\n        case \"status_emoji_info\":\n            for (const msg of stored_messages.values()) {\n                if (msg.sender_id && msg.sender_id === info.user_id) {\n                    msg[property] = value;\n                }\n            }\n            break;\n    }\n}\n\nexport function reify_message_id({old_id, new_id}) {\n    if (stored_messages.has(old_id)) {\n        stored_messages.set(new_id, stored_messages.get(old_id));\n        stored_messages.delete(old_id);\n    }\n}\n","import $ from \"jquery\";\n\nimport {all_messages_data} from \"./all_messages_data\";\nimport * as loading from \"./loading\";\nimport * as message_store from \"./message_store\";\nimport * as unread from \"./unread\";\nimport * as unread_ui from \"./unread_ui\";\n\nexport function do_unread_count_updates(messages, expect_no_new_unreads = false) {\n    const any_new_unreads = unread.process_loaded_messages(messages, expect_no_new_unreads);\n\n    if (any_new_unreads) {\n        // The following operations are expensive, and thus should\n        // only happen if we found any unread messages justifying it.\n        unread_ui.update_unread_counts();\n    }\n}\n\nexport function add_messages(messages, msg_list, opts) {\n    if (!messages) {\n        return undefined;\n    }\n\n    loading.destroy_indicator($(\"#page_loading_indicator\"));\n\n    const render_info = msg_list.add_messages(messages, opts);\n\n    return render_info;\n}\n\nexport function add_old_messages(messages, msg_list) {\n    return add_messages(messages, msg_list, {messages_are_new: false});\n}\n\nexport function add_new_messages(messages, msg_list) {\n    if (!msg_list.data.fetch_status.has_found_newest()) {\n        // We don't render newly received messages for the message list,\n        // if we haven't found the latest messages to be displayed in the\n        // narrow. Otherwise the new message would be rendered just after\n        // the previously fetched messages when that's inaccurate.\n        msg_list.data.fetch_status.update_expected_max_message_id(messages);\n        return undefined;\n    }\n    return add_messages(messages, msg_list, {messages_are_new: true});\n}\n\nexport function add_new_messages_data(messages, msg_list_data) {\n    if (!msg_list_data.fetch_status.has_found_newest()) {\n        // The reasoning in add_new_messages applies here as well;\n        // we're trying to maintain a data structure that's a\n        // contiguous range of message history, so we can't append a\n        // new message that might not be adjacent to that range.\n        msg_list_data.fetch_status.update_expected_max_message_id(messages);\n        return undefined;\n    }\n    return msg_list_data.add_messages(messages);\n}\n\nexport function get_messages_in_topic(stream_id, topic) {\n    return all_messages_data\n        .all_messages()\n        .filter(\n            (x) =>\n                x.type === \"stream\" &&\n                x.stream_id === stream_id &&\n                x.topic.toLowerCase() === topic.toLowerCase(),\n        );\n}\n\nexport function get_max_message_id_in_stream(stream_id) {\n    let max_message_id = 0;\n    for (const msg of all_messages_data.all_messages()) {\n        if (msg.type === \"stream\" && msg.stream_id === stream_id && msg.id > max_message_id) {\n            max_message_id = msg.id;\n        }\n    }\n    return max_message_id;\n}\n\nexport function get_topics_for_message_ids(message_ids) {\n    const topics = new Map(); // key = stream_id:topic\n    for (const msg_id of message_ids) {\n        // message_store still has data on deleted messages when this runs.\n        const message = message_store.get(msg_id);\n        if (message === undefined) {\n            // We may not have the deleted message cached locally in\n            // message_store; if so, we can just skip processing it.\n            continue;\n        }\n        if (message.type === \"stream\") {\n            // Create unique keys for stream_id and topic.\n            const topic_key = message.stream_id + \":\" + message.topic;\n            topics.set(topic_key, [message.stream_id, message.topic]);\n        }\n    }\n    return topics;\n}\n","import $ from \"jquery\";\n\nimport render_message_view_header from \"../templates/message_view_header.hbs\";\n\nimport {$t} from \"./i18n\";\nimport * as narrow_state from \"./narrow_state\";\nimport {page_params} from \"./page_params\";\nimport * as peer_data from \"./peer_data\";\nimport * as recent_topics_util from \"./recent_topics_util\";\nimport * as rendered_markdown from \"./rendered_markdown\";\nimport * as search from \"./search\";\n\nfunction get_formatted_sub_count(sub_count) {\n    if (sub_count >= 1000) {\n        // parseInt() is used to floor the value of division to an integer\n        sub_count = Number.parseInt(sub_count / 1000, 10) + \"k\";\n    }\n    return sub_count;\n}\n\nfunction make_message_view_header(filter) {\n    const message_view_header = {};\n    if (recent_topics_util.is_visible()) {\n        return {\n            title: $t({defaultMessage: \"Recent conversations\"}),\n            icon: \"clock-o\",\n        };\n    }\n    if (filter === undefined) {\n        return {\n            title: $t({defaultMessage: \"All messages\"}),\n            icon: \"align-left\",\n        };\n    }\n    message_view_header.title = filter.get_title();\n    message_view_header.icon = filter.get_icon();\n    if (message_view_header.icon === \"globe\") {\n        // This is a bit hacky, but it works as a way to communicate\n        // to the HTML template that we need to use the different HTML\n        // required for the globe icon.\n        message_view_header.web_public_stream = true;\n    }\n    if (filter.has_operator(\"stream\") && !filter._sub) {\n        message_view_header.sub_count = \"0\";\n        message_view_header.formatted_sub_count = \"0\";\n        message_view_header.rendered_narrow_description = $t({\n            defaultMessage: \"This stream does not exist or is private.\",\n        });\n        return message_view_header;\n    }\n    if (filter._sub) {\n        // We can now be certain that the narrow\n        // involves a stream which exists and\n        // the current user can access.\n        const current_stream = filter._sub;\n        message_view_header.rendered_narrow_description = current_stream.rendered_description;\n        const sub_count = peer_data.get_subscriber_count(current_stream.stream_id);\n        message_view_header.sub_count = sub_count;\n        message_view_header.formatted_sub_count = get_formatted_sub_count(sub_count);\n        // the \"title\" is passed as a variable and doesn't get translated (nor should it)\n        message_view_header.sub_count_tooltip_text = $t(\n            {defaultMessage: \"This stream has {count} subscribers.\"},\n            {count: message_view_header.sub_count, title: message_view_header.title},\n        );\n        message_view_header.stream_settings_link =\n            \"#streams/\" + current_stream.stream_id + \"/\" + current_stream.name;\n    }\n    return message_view_header;\n}\n\nexport function colorize_message_view_header() {\n    const filter = narrow_state.filter();\n    if (filter === undefined || !filter._sub) {\n        return;\n    }\n    // selecting i instead of .fa because web public streams have custom icon.\n    $(\"#message_view_header a.stream i\").css(\"color\", filter._sub.color);\n}\n\nfunction append_and_display_title_area(message_view_header_data) {\n    const $message_view_header_elem = $(\"#message_view_header\");\n    $message_view_header_elem.empty();\n    const rendered = render_message_view_header(message_view_header_data);\n    $message_view_header_elem.append(rendered);\n    if (message_view_header_data.stream_settings_link) {\n        colorize_message_view_header();\n    }\n    $message_view_header_elem.removeClass(\"notdisplayed\");\n    const $content = $message_view_header_elem.find(\"span.rendered_markdown\");\n    if ($content) {\n        // Update syntax like stream names, emojis, mentions, timestamps.\n        rendered_markdown.update_elements($content);\n    }\n}\n\nfunction bind_title_area_handlers() {\n    $(\".search_closed\").on(\"click\", (e) => {\n        search.initiate_search();\n        e.preventDefault();\n        e.stopPropagation();\n    });\n\n    $(\"#message_view_header .navbar-click-opens-search\").on(\"click\", (e) => {\n        if (document.getSelection().type === \"Range\") {\n            // Allow copy/paste to work normally without interference.\n            return;\n        }\n\n        // Let links behave normally, ie, do nothing if <a>\n        if ($(e.target).closest(\"a\").length === 0) {\n            search.initiate_search();\n            e.preventDefault();\n            e.stopPropagation();\n        }\n    });\n\n    // handler that makes sure that hover plays nicely\n    // with whether search is being opened or not.\n    $(\"#message_view_header .narrow_description > a\")\n        .on(\"mouseenter\", () => {\n            $(\"#message_view_header .search_closed\").css(\"opacity\", 0.5);\n        })\n        .on(\"mouseleave\", () => {\n            $(\"#message_view_header .search_closed\").css(\"opacity\", \"\");\n        });\n}\n\nfunction build_message_view_header(filter) {\n    // This makes sure we don't waste time appending\n    // message_view_header on a template where it's never used\n    if (filter && !filter.is_common_narrow()) {\n        open_search_bar_and_close_narrow_description();\n    } else {\n        const message_view_header_data = make_message_view_header(filter);\n        append_and_display_title_area(message_view_header_data);\n        bind_title_area_handlers();\n        if (page_params.search_pills_enabled && $(\"#search_query\").is(\":focus\")) {\n            open_search_bar_and_close_narrow_description();\n        } else {\n            close_search_bar_and_open_narrow_description();\n        }\n    }\n}\n\n// we rely entirely on this function to ensure\n// the searchbar has the right text.\nexport function reset_searchbox_text() {\n    let search_string = narrow_state.search_string();\n    if (search_string !== \"\") {\n        if (!page_params.search_pills_enabled && !narrow_state.filter().is_search()) {\n            // saves the user a keystroke for quick searches\n            search_string = search_string + \" \";\n        }\n        $(\"#search_query\").val(search_string);\n    }\n}\n\nexport function exit_search() {\n    const filter = narrow_state.filter();\n    if (!filter || filter.is_common_narrow()) {\n        // for common narrows, we change the UI (and don't redirect)\n        close_search_bar_and_open_narrow_description();\n    } else {\n        // for \"searching narrows\", we redirect\n        window.location.href = filter.generate_redirect_url();\n    }\n    $(\".app\").trigger(\"focus\");\n}\n\nexport function initialize() {\n    render_title_area();\n\n    // register searchbar click handler\n    $(\"#search_exit\").on(\"click\", (e) => {\n        exit_search();\n        e.preventDefault();\n        e.stopPropagation();\n    });\n}\n\nexport function render_title_area() {\n    const filter = narrow_state.filter();\n    build_message_view_header(filter);\n}\n\n// This function checks if \"modified_sub\" which is the stream whose values\n// have been updated is the same as the stream which is currently\n// narrowed (filter._sub) and rerenders if necessary\nexport function maybe_rerender_title_area_for_stream(modified_sub) {\n    const filter = narrow_state.filter();\n    if (filter && filter._sub && filter._sub.stream_id === modified_sub.stream_id) {\n        render_title_area();\n    }\n}\n\nexport function open_search_bar_and_close_narrow_description() {\n    reset_searchbox_text();\n    $(\".navbar-search\").addClass(\"expanded\");\n    $(\"#message_view_header\").addClass(\"hidden\");\n}\n\nexport function close_search_bar_and_open_narrow_description() {\n    const filter = narrow_state.filter();\n    if (!(filter && !filter.is_common_narrow())) {\n        $(\".navbar-search\").removeClass(\"expanded\");\n        $(\"#message_view_header\").removeClass(\"hidden\");\n    }\n}\n","import $ from \"jquery\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_scroll from \"./message_scroll\";\nimport * as notifications from \"./notifications\";\nimport * as overlays from \"./overlays\";\nimport * as rows from \"./rows\";\nimport * as util from \"./util\";\n\nexport let $message_pane;\n\nlet $jwindow;\nconst dimensions = {};\nlet in_stoppable_autoscroll = false;\n\nfunction make_dimen_wrapper(dimen_name, dimen_func) {\n    dimensions[dimen_name] = new util.CachedValue({\n        compute_value() {\n            return dimen_func.call($message_pane);\n        },\n    });\n    return function viewport_dimension_wrapper(...args) {\n        if (args.length !== 0) {\n            dimensions[dimen_name].reset();\n            return dimen_func.apply($message_pane, args);\n        }\n        return dimensions[dimen_name].get();\n    };\n}\n\nexport const height = make_dimen_wrapper(\"height\", $.fn.height);\nexport const width = make_dimen_wrapper(\"width\", $.fn.width);\n\n// Includes both scroll and arrow events. Negative means scroll up,\n// positive means scroll down.\nexport let last_movement_direction = 1;\n\nexport function set_last_movement_direction(value) {\n    last_movement_direction = value;\n}\n\nexport function at_top() {\n    return scrollTop() <= 0;\n}\n\nexport function message_viewport_info() {\n    // Return a structure that tells us details of the viewport\n    // accounting for fixed elements like the top navbar.\n    //\n    // The message_header is NOT considered to be part of the visible\n    // message pane, which should make sense for callers, who will\n    // generally be concerned about whether actual message content is\n    // visible.\n\n    const res = {};\n\n    const $element_just_above_us = $(\".floating_recipient\");\n    const $element_just_below_us = $(\"#compose\");\n\n    res.visible_top =\n        $element_just_above_us.offset().top + $element_just_above_us.safeOuterHeight();\n\n    res.visible_bottom = $element_just_below_us.position().top;\n\n    res.visible_height = res.visible_bottom - res.visible_top;\n\n    return res;\n}\n\nexport function at_bottom() {\n    const bottom = scrollTop() + height();\n    const full_height = $message_pane.prop(\"scrollHeight\");\n\n    // We only know within a pixel or two if we're\n    // exactly at the bottom, due to browser quirkiness,\n    // and we err on the side of saying that we are at\n    // the bottom.\n    return bottom + 2 >= full_height;\n}\n\n// This differs from at_bottom in that it only requires the bottom message to\n// be visible, but you may be able to scroll down further.\nexport function bottom_message_visible() {\n    const $last_row = rows.last_visible();\n    if ($last_row.length) {\n        const message_bottom = $last_row[0].getBoundingClientRect().bottom;\n        const bottom_of_feed = $(\"#compose\")[0].getBoundingClientRect().top;\n        return bottom_of_feed > message_bottom;\n    }\n    return false;\n}\n\nexport function is_below_visible_bottom(offset) {\n    return offset > scrollTop() + height() - $(\"#compose\").height();\n}\n\nexport function is_scrolled_up() {\n    // Let's determine whether the user was already dealing\n    // with messages off the screen, which can guide auto\n    // scrolling decisions.\n    const $last_row = rows.last_visible();\n    if ($last_row.length === 0) {\n        return false;\n    }\n\n    const offset = offset_from_bottom($last_row);\n\n    return offset > 0;\n}\n\nexport function offset_from_bottom($last_row) {\n    // A positive return value here means the last row is\n    // below the bottom of the feed (i.e. obscured by the compose\n    // box or even further below the bottom).\n    const message_bottom = $last_row.offset().top + $last_row.height();\n    const info = message_viewport_info();\n\n    return message_bottom - info.visible_bottom;\n}\n\nexport function set_message_position(message_top, message_height, viewport_info, ratio) {\n    // message_top = offset of the top of a message that you are positioning\n    // message_height = height of the message that you are positioning\n    // viewport_info = result of calling message_viewport.message_viewport_info\n    // ratio = fraction indicating how far down the screen the msg should be\n\n    let how_far_down_in_visible_page = viewport_info.visible_height * ratio;\n\n    // special case: keep large messages fully on the screen\n    if (how_far_down_in_visible_page + message_height > viewport_info.visible_height) {\n        how_far_down_in_visible_page = viewport_info.visible_height - message_height;\n\n        // Next handle truly gigantic messages.  We just say that the top of the\n        // message goes to the top of the viewing area.  Realistically, gigantic\n        // messages should either be condensed, socially frowned upon, or scrolled\n        // with the mouse.\n        if (how_far_down_in_visible_page < 0) {\n            how_far_down_in_visible_page = 0;\n        }\n    }\n\n    const hidden_top = viewport_info.visible_top - scrollTop();\n\n    const message_offset = how_far_down_in_visible_page + hidden_top;\n\n    const new_scroll_top = message_top - message_offset;\n\n    message_scroll.suppress_selection_update_on_next_scroll();\n    scrollTop(new_scroll_top);\n}\n\nfunction in_viewport_or_tall(rect, top_of_feed, bottom_of_feed, require_fully_visible) {\n    if (require_fully_visible) {\n        return (\n            rect.top > top_of_feed && // Message top is in view and\n            (rect.bottom < bottom_of_feed || // message is fully in view or\n                (rect.height > bottom_of_feed - top_of_feed && rect.top < bottom_of_feed))\n        ); // message is tall.\n    }\n    return rect.bottom > top_of_feed && rect.top < bottom_of_feed;\n}\n\nfunction add_to_visible(\n    $candidates,\n    visible,\n    top_of_feed,\n    bottom_of_feed,\n    require_fully_visible,\n    row_to_id,\n) {\n    for (const row of $candidates) {\n        const row_rect = row.getBoundingClientRect();\n        // Mark very tall messages as read once we've gotten past them\n        if (in_viewport_or_tall(row_rect, top_of_feed, bottom_of_feed, require_fully_visible)) {\n            visible.push(row_to_id(row));\n        } else {\n            break;\n        }\n    }\n}\n\nconst top_of_feed = new util.CachedValue({\n    compute_value() {\n        return $(\".floating_recipient\").offset().top + $(\".floating_recipient\").safeOuterHeight();\n    },\n});\n\nconst bottom_of_feed = new util.CachedValue({\n    compute_value() {\n        return $(\"#compose\")[0].getBoundingClientRect().top;\n    },\n});\n\nfunction _visible_divs(\n    $selected_row,\n    row_min_height,\n    row_to_output,\n    div_class,\n    require_fully_visible,\n) {\n    // Note that when using getBoundingClientRect() we are getting offsets\n    // relative to the visible window, but when using jQuery's offset() we are\n    // getting offsets relative to the full scrollable window. You can't try to\n    // compare heights from these two methods.\n    const height = bottom_of_feed.get() - top_of_feed.get();\n    const num_neighbors = Math.floor(height / row_min_height);\n\n    // We do this explicitly without merges and without recalculating\n    // the feed bounds to keep this computation as cheap as possible.\n    const visible = [];\n    const $above_pointer = $selected_row.prevAll(\"div.\" + div_class).slice(0, num_neighbors);\n    const $below_pointer = $selected_row.nextAll(\"div.\" + div_class).slice(0, num_neighbors);\n    add_to_visible(\n        $selected_row,\n        visible,\n        top_of_feed.get(),\n        bottom_of_feed.get(),\n        require_fully_visible,\n        row_to_output,\n    );\n    add_to_visible(\n        $above_pointer,\n        visible,\n        top_of_feed.get(),\n        bottom_of_feed.get(),\n        require_fully_visible,\n        row_to_output,\n    );\n    add_to_visible(\n        $below_pointer,\n        visible,\n        top_of_feed.get(),\n        bottom_of_feed.get(),\n        require_fully_visible,\n        row_to_output,\n    );\n\n    return visible;\n}\n\nexport function visible_groups(require_fully_visible) {\n    const $selected_row = message_lists.current.selected_row();\n    if ($selected_row === undefined || $selected_row.length === 0) {\n        return [];\n    }\n\n    const $selected_group = rows.get_message_recipient_row($selected_row);\n\n    function get_row(row) {\n        return row;\n    }\n\n    // Being simplistic about this, the smallest group is about 75 px high.\n    return _visible_divs($selected_group, 75, get_row, \"recipient_row\", require_fully_visible);\n}\n\nexport function visible_messages(require_fully_visible) {\n    const $selected_row = message_lists.current.selected_row();\n\n    function row_to_id(row) {\n        return message_lists.current.get(rows.id($(row)));\n    }\n\n    // Being simplistic about this, the smallest message is 25 px high.\n    return _visible_divs($selected_row, 25, row_to_id, \"message_row\", require_fully_visible);\n}\n\nexport function scrollTop(target_scrollTop) {\n    const orig_scrollTop = $message_pane.scrollTop();\n    if (target_scrollTop === undefined) {\n        return orig_scrollTop;\n    }\n    let $ret = $message_pane.scrollTop(target_scrollTop);\n    const new_scrollTop = $message_pane.scrollTop();\n    const space_to_scroll = $(\"#bottom_whitespace\").offset().top - height();\n\n    // Check whether our scrollTop didn't move even though one could have scrolled down\n    if (\n        space_to_scroll > 0 &&\n        target_scrollTop > 0 &&\n        orig_scrollTop === 0 &&\n        new_scrollTop === 0\n    ) {\n        // Chrome has a bug where sometimes calling\n        // window.scrollTop(x) has no effect, resulting in the browser\n        // staying at 0 -- and afterwards if you call\n        // window.scrollTop(x) again, it will still do nothing.  To\n        // fix this, we need to first scroll to some other place.\n        blueslip.info(\n            \"ScrollTop did nothing when scrolling to \" + target_scrollTop + \", fixing...\",\n        );\n        // First scroll to 1 in order to clear the stuck state\n        $message_pane.scrollTop(1);\n        // And then scroll where we intended to scroll to\n        $ret = $message_pane.scrollTop(target_scrollTop);\n        if ($message_pane.scrollTop() === 0) {\n            blueslip.info(\n                \"ScrollTop fix did not work when scrolling to \" +\n                    target_scrollTop +\n                    \"!  space_to_scroll was \" +\n                    space_to_scroll,\n            );\n        }\n    }\n    return $ret;\n}\n\nexport function stop_auto_scrolling() {\n    if (in_stoppable_autoscroll) {\n        $message_pane.stop();\n    }\n}\n\nexport function system_initiated_animate_scroll(scroll_amount) {\n    message_scroll.suppress_selection_update_on_next_scroll();\n    const viewport_offset = scrollTop();\n    in_stoppable_autoscroll = true;\n    $message_pane.animate({\n        scrollTop: viewport_offset + scroll_amount,\n        always() {\n            in_stoppable_autoscroll = false;\n        },\n    });\n}\n\nexport function user_initiated_animate_scroll(scroll_amount) {\n    message_scroll.suppress_selection_update_on_next_scroll();\n    in_stoppable_autoscroll = false; // defensive\n\n    const viewport_offset = scrollTop();\n\n    $message_pane.animate({\n        scrollTop: viewport_offset + scroll_amount,\n    });\n}\n\nexport function recenter_view($message, {from_scroll = false, force_center = false} = {}) {\n    // BarnOwl-style recentering: if the pointer is too high, move it to\n    // the 1/2 marks. If the pointer is too low, move it to the 1/7 mark.\n    // See keep_pointer_in_view() for related logic to keep the pointer onscreen.\n\n    const viewport_info = message_viewport_info();\n    const top_threshold = viewport_info.visible_top;\n\n    const bottom_threshold = viewport_info.visible_bottom;\n\n    const message_top = $message.offset().top;\n    const message_height = $message.safeOuterHeight(true);\n    const message_bottom = message_top + message_height;\n\n    const is_above = message_top < top_threshold;\n    const is_below = message_bottom > bottom_threshold;\n\n    if (from_scroll) {\n        // If the message you're trying to center on is already in view AND\n        // you're already trying to move in the direction of that message,\n        // don't try to recenter. This avoids disorienting jumps when the\n        // pointer has gotten itself outside the threshold (e.g. by\n        // autoscrolling).\n        if (is_above && last_movement_direction >= 0) {\n            return;\n        }\n        if (is_below && last_movement_direction <= 0) {\n            return;\n        }\n    }\n\n    if (is_above || force_center) {\n        set_message_position(message_top, message_height, viewport_info, 1 / 2);\n    } else if (is_below) {\n        set_message_position(message_top, message_height, viewport_info, 1 / 7);\n    }\n}\n\nexport function keep_pointer_in_view() {\n    // See message_viewport.recenter_view() for related logic to keep the pointer onscreen.\n    // This function mostly comes into place for mouse scrollers, and it\n    // keeps the pointer in view.  For people who purely scroll with the\n    // mouse, the pointer is kind of meaningless to them, but keyboard\n    // users will occasionally do big mouse scrolls, so this gives them\n    // a pointer reasonably close to the middle of the screen.\n    let $candidate;\n    let $next_row = message_lists.current.selected_row();\n\n    if ($next_row.length === 0) {\n        return;\n    }\n\n    const info = message_viewport_info();\n    const top_threshold = info.visible_top + (1 / 10) * info.visible_height;\n    const bottom_threshold = info.visible_top + (9 / 10) * info.visible_height;\n\n    function message_is_far_enough_down() {\n        if (at_top()) {\n            return true;\n        }\n\n        const message_top = $next_row.offset().top;\n\n        // If the message starts after the very top of the screen, we just\n        // leave it alone.  This avoids bugs like #1608, where overzealousness\n        // about repositioning the pointer can cause users to miss messages.\n        if (message_top >= info.visible_top) {\n            return true;\n        }\n\n        // If at least part of the message is below top_threshold (10% from\n        // the top), then we also leave it alone.\n        const bottom_offset = message_top + $next_row.safeOuterHeight(true);\n        if (bottom_offset >= top_threshold) {\n            return true;\n        }\n\n        // If we got this far, the message is not \"in view.\"\n        return false;\n    }\n\n    function message_is_far_enough_up() {\n        return at_bottom() || $next_row.offset().top <= bottom_threshold;\n    }\n\n    function adjust(in_view, get_next_row) {\n        // return true only if we make an actual adjustment, so\n        // that we know to short circuit the other direction\n        if (in_view($next_row)) {\n            return false; // try other side\n        }\n        while (!in_view($next_row)) {\n            $candidate = get_next_row($next_row);\n            if ($candidate.length === 0) {\n                break;\n            }\n            $next_row = $candidate;\n        }\n        return true;\n    }\n\n    if (!adjust(message_is_far_enough_down, rows.next_visible)) {\n        adjust(message_is_far_enough_up, rows.prev_visible);\n    }\n\n    message_lists.current.select_id(rows.id($next_row), {from_scroll: true});\n}\n\nexport function initialize() {\n    $jwindow = $(window);\n    $message_pane = $(\".app\");\n    // This handler must be placed before all resize handlers in our application\n    $jwindow.on(\"resize\", () => {\n        dimensions.height.reset();\n        dimensions.width.reset();\n        top_of_feed.reset();\n        bottom_of_feed.reset();\n    });\n\n    $(document).on(\"compose_started compose_canceled compose_finished\", () => {\n        bottom_of_feed.reset();\n    });\n\n    // We stop autoscrolling when the user is clearly in the middle of\n    // doing something.  Be careful, though, if you try to capture\n    // mousemove, then you will have to contend with the autoscroll\n    // itself generating mousemove events.\n    $(document).on(\"message_selected.zulip wheel\", () => {\n        stop_auto_scrolling();\n    });\n}\n\nexport function is_visible_and_focused() {\n    if (\n        overlays.is_overlay_or_modal_open() ||\n        !notifications.is_window_focused() ||\n        !$(\"#message_feed_container\").is(\":visible\")\n    ) {\n        return false;\n    }\n    return true;\n}\n","import _ from \"lodash\";\n\nimport render_topic_muted from \"../templates/topic_muted.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as feedback_widget from \"./feedback_widget\";\nimport {$t} from \"./i18n\";\nimport * as message_lists from \"./message_lists\";\nimport * as overlays from \"./overlays\";\nimport * as recent_topics_ui from \"./recent_topics_ui\";\nimport * as settings_muted_topics from \"./settings_muted_topics\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_list from \"./stream_list\";\nimport * as stream_popover from \"./stream_popover\";\nimport * as unread_ui from \"./unread_ui\";\nimport * as user_topics from \"./user_topics\";\n\nexport function rerender_for_muted_topic(old_muted_topics) {\n    stream_list.update_streams_sidebar();\n    message_lists.current.update_muting_and_rerender();\n    if (message_lists.current !== message_lists.home) {\n        message_lists.home.update_muting_and_rerender();\n    }\n    if (overlays.settings_open() && settings_muted_topics.loaded) {\n        settings_muted_topics.populate_list();\n    }\n\n    // We only update those topics which could have been affected, because\n    // we want to avoid doing a complete rerender of the recent topics view,\n    // because that can be expensive.\n    const current_muted_topics = user_topics.get_muted_topics();\n    const maybe_affected_topics = _.unionWith(old_muted_topics, current_muted_topics, _.isEqual);\n\n    for (const topic_data of maybe_affected_topics) {\n        recent_topics_ui.update_topic_is_muted(topic_data.stream_id, topic_data.topic);\n    }\n}\n\nexport function handle_topic_updates(user_topic) {\n    const old_muted_topics = user_topics.get_muted_topics();\n    user_topics.set_user_topic(user_topic);\n    stream_popover.hide_topic_popover();\n    unread_ui.update_unread_counts();\n    rerender_for_muted_topic(old_muted_topics);\n}\n\nexport function mute_topic(stream_id, topic, from_hotkey) {\n    const stream_name = stream_data.maybe_get_stream_name(stream_id);\n    const data = {\n        stream_id,\n        topic,\n        op: \"add\",\n    };\n\n    channel.patch({\n        url: \"/json/users/me/subscriptions/muted_topics\",\n        data,\n        success() {\n            if (!from_hotkey) {\n                return;\n            }\n\n            // The following feedback_widget notice helps avoid\n            // confusion when a user who is not familiar with Zulip's\n            // keyboard UI hits \"M\" in the wrong context and has a\n            // bunch of messages suddenly disappear.  This notice is\n            // only useful when muting from the keyboard, since you\n            // know what you did if you triggered muting with the\n            // mouse.\n            feedback_widget.show({\n                populate($container) {\n                    const rendered_html = render_topic_muted();\n                    $container.html(rendered_html);\n                    $container.find(\".stream\").text(stream_name);\n                    $container.find(\".topic\").text(topic);\n                },\n                on_undo() {\n                    unmute_topic(stream_id, topic);\n                },\n                title_text: $t({defaultMessage: \"Topic muted\"}),\n                undo_button_text: $t({defaultMessage: \"Unmute\"}),\n            });\n        },\n    });\n}\n\nexport function unmute_topic(stream_id, topic) {\n    // Accidentally unmuting a topic isn't as much an issue as accidentally muting\n    // a topic, so we don't show a popup after unmuting.\n    const data = {\n        stream_id,\n        topic,\n        op: \"remove\",\n    };\n\n    channel.patch({\n        url: \"/json/users/me/subscriptions/muted_topics\",\n        data,\n        success() {\n            feedback_widget.dismiss();\n        },\n    });\n}\n\nexport function toggle_topic_mute(message) {\n    const stream_id = message.stream_id;\n    const topic = message.topic;\n\n    if (user_topics.is_topic_muted(stream_id, topic)) {\n        unmute_topic(stream_id, topic);\n    } else if (message.type === \"stream\") {\n        mute_topic(stream_id, topic, true);\n    }\n}\n","import {page_params} from \"./page_params\";\nimport * as timerender from \"./timerender\";\nimport {get_time_from_date_muted} from \"./util\";\n\nconst muted_users = new Map();\n\nexport function add_muted_user(user_id, date_muted) {\n    const time = get_time_from_date_muted(date_muted);\n    if (user_id) {\n        muted_users.set(user_id, time);\n    }\n}\n\nexport function remove_muted_user(user_id) {\n    if (user_id) {\n        muted_users.delete(user_id);\n    }\n}\n\nexport function is_user_muted(user_id) {\n    if (user_id === undefined) {\n        return false;\n    }\n\n    return muted_users.has(user_id);\n}\n\nexport function filter_muted_user_ids(user_ids) {\n    // Returns a copy of the user ID list, after removing muted user IDs.\n    const base_user_ids = [...user_ids];\n    return base_user_ids.filter((user_id) => !is_user_muted(user_id));\n}\n\nexport function filter_muted_users(persons) {\n    // Returns a copy of the people list, after removing muted users.\n    const base_users = [...persons];\n    return base_users.filter((person) => !is_user_muted(person.user_id));\n}\n\nexport function get_muted_users() {\n    const users = [];\n    for (const [id, date_muted] of muted_users) {\n        const date_muted_str = timerender.render_now(new Date(date_muted)).time_str;\n        users.push({\n            id,\n            date_muted,\n            date_muted_str,\n        });\n    }\n    return users;\n}\n\nexport function set_muted_users(list) {\n    muted_users.clear();\n\n    for (const user of list) {\n        if (user !== undefined && user.id !== undefined) {\n            add_muted_user(user.id, user.timestamp);\n        }\n    }\n}\n\nexport function initialize() {\n    set_muted_users(page_params.muted_users);\n}\n","import render_confirm_mute_user from \"../templates/confirm_dialog/confirm_mute_user.hbs\";\n\nimport * as activity from \"./activity\";\nimport * as channel from \"./channel\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport {$t_html} from \"./i18n\";\nimport * as message_lists from \"./message_lists\";\nimport * as muted_users from \"./muted_users\";\nimport * as overlays from \"./overlays\";\nimport * as people from \"./people\";\nimport * as pm_list from \"./pm_list\";\nimport * as popovers from \"./popovers\";\nimport * as recent_topics_ui from \"./recent_topics_ui\";\nimport * as settings_muted_users from \"./settings_muted_users\";\n\nexport function mute_user(user_id) {\n    channel.post({\n        url: \"/json/users/me/muted_users/\" + user_id,\n    });\n}\n\nexport function confirm_mute_user(user_id) {\n    function on_click() {\n        mute_user(user_id);\n    }\n\n    const html_body = render_confirm_mute_user({\n        user_name: people.get_full_name(user_id),\n    });\n\n    confirm_dialog.launch({\n        html_heading: $t_html({defaultMessage: \"Mute user\"}),\n        help_link: \"/help/mute-a-user\",\n        html_body,\n        on_click,\n    });\n}\n\nexport function unmute_user(user_id) {\n    channel.del({\n        url: \"/json/users/me/muted_users/\" + user_id,\n    });\n}\n\nexport function rerender_for_muted_user() {\n    message_lists.current.update_muting_and_rerender();\n    if (message_lists.current !== message_lists.home) {\n        message_lists.home.update_muting_and_rerender();\n    }\n\n    if (overlays.settings_open() && settings_muted_users.loaded) {\n        settings_muted_users.populate_list();\n    }\n\n    activity.redraw();\n    pm_list.update_private_messages();\n\n    // If a user is (un)muted, we want to update their avatars on the recent topics\n    // participants column.\n    recent_topics_ui.complete_rerender();\n}\n\nexport function handle_user_updates(muted_user_ids) {\n    popovers.hide_all();\n    muted_users.set_muted_users(muted_user_ids);\n    rerender_for_muted_user();\n}\n","import $ from \"jquery\";\n\nimport {all_messages_data} from \"./all_messages_data\";\nimport * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport * as compose_actions from \"./compose_actions\";\nimport * as compose_closed_ui from \"./compose_closed_ui\";\nimport * as compose_fade from \"./compose_fade\";\nimport * as compose_state from \"./compose_state\";\nimport * as condense from \"./condense\";\nimport {Filter} from \"./filter\";\nimport * as hash_util from \"./hash_util\";\nimport * as hashchange from \"./hashchange\";\nimport {$t} from \"./i18n\";\nimport * as message_edit from \"./message_edit\";\nimport * as message_fetch from \"./message_fetch\";\nimport * as message_helper from \"./message_helper\";\nimport * as message_list from \"./message_list\";\nimport {MessageListData} from \"./message_list_data\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_scroll from \"./message_scroll\";\nimport * as message_store from \"./message_store\";\nimport * as message_view_header from \"./message_view_header\";\nimport * as narrow_banner from \"./narrow_banner\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as notifications from \"./notifications\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as pm_list from \"./pm_list\";\nimport * as recent_topics_ui from \"./recent_topics_ui\";\nimport * as recent_topics_util from \"./recent_topics_util\";\nimport * as resize from \"./resize\";\nimport * as search from \"./search\";\nimport * as search_pill from \"./search_pill\";\nimport * as search_pill_widget from \"./search_pill_widget\";\nimport * as spectators from \"./spectators\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_list from \"./stream_list\";\nimport * as top_left_corner from \"./top_left_corner\";\nimport * as topic_generator from \"./topic_generator\";\nimport * as typing_events from \"./typing_events\";\nimport * as unread from \"./unread\";\nimport * as unread_ops from \"./unread_ops\";\nimport * as unread_ui from \"./unread_ui\";\nimport * as util from \"./util\";\nimport * as widgetize from \"./widgetize\";\n\nlet unnarrow_times;\n\nconst LARGER_THAN_MAX_MESSAGE_ID = 10000000000000000;\n\nfunction report_narrow_time(initial_core_time, initial_free_time, network_time) {\n    channel.post({\n        url: \"/json/report/narrow_times\",\n        data: {\n            initial_core: initial_core_time.toString(),\n            initial_free: initial_free_time.toString(),\n            network: network_time.toString(),\n        },\n    });\n}\n\nfunction maybe_report_narrow_time(msg_list) {\n    if (\n        msg_list.network_time === undefined ||\n        msg_list.initial_core_time === undefined ||\n        msg_list.initial_free_time === undefined\n    ) {\n        return;\n    }\n    report_narrow_time(\n        msg_list.initial_core_time - msg_list.start_time,\n        msg_list.initial_free_time - msg_list.start_time,\n        msg_list.network_time - msg_list.start_time,\n    );\n}\n\nfunction report_unnarrow_time() {\n    if (\n        unnarrow_times === undefined ||\n        unnarrow_times.start_time === undefined ||\n        unnarrow_times.initial_core_time === undefined ||\n        unnarrow_times.initial_free_time === undefined\n    ) {\n        return;\n    }\n\n    const initial_core_time = unnarrow_times.initial_core_time - unnarrow_times.start_time;\n    const initial_free_time = unnarrow_times.initial_free_time - unnarrow_times.start_time;\n\n    channel.post({\n        url: \"/json/report/unnarrow_times\",\n        data: {\n            initial_core: initial_core_time.toString(),\n            initial_free: initial_free_time.toString(),\n        },\n    });\n\n    unnarrow_times = {};\n}\n\nexport function save_pre_narrow_offset_for_reload() {\n    if (message_lists.current.selected_id() !== -1) {\n        if (message_lists.current.selected_row().length === 0) {\n            blueslip.debug(\"narrow.activate missing selected row\", {\n                selected_id: message_lists.current.selected_id(),\n                selected_idx: message_lists.current.selected_idx(),\n                selected_idx_exact: message_lists.current\n                    .all_messages()\n                    .indexOf(message_lists.current.get(message_lists.current.selected_id())),\n                render_start: message_lists.current.view._render_win_start,\n                render_end: message_lists.current.view._render_win_end,\n            });\n        }\n        message_lists.current.pre_narrow_offset = message_lists.current.selected_row().offset().top;\n    }\n}\n\nexport let has_shown_message_list_view = false;\n\nexport function compute_narrow_title(filter) {\n    if (filter === undefined) {\n        // \"All messages\" and \"Recent conversations\" views have\n        // an `undefined` filter.\n        if (recent_topics_util.is_visible()) {\n            return $t({defaultMessage: \"Recent conversations\"});\n        }\n        return $t({defaultMessage: \"All messages\"});\n    }\n\n    const filter_title = filter.get_title();\n\n    if (filter_title === undefined) {\n        // Default result for uncommon narrow/search views.\n        return $t({defaultMessage: \"Search results\"});\n    }\n\n    if (filter.has_operator(\"stream\")) {\n        if (!filter._sub) {\n            // The stream is not set because it does not currently\n            // exist (possibly due to a stream name change), or it\n            // is a private stream and the user is not subscribed.\n            return filter_title;\n        }\n        if (filter.has_operator(\"topic\")) {\n            const topic_name = filter.operands(\"topic\")[0];\n            return \"#\" + filter_title + \" > \" + topic_name;\n        }\n        return \"#\" + filter_title;\n    }\n\n    if (filter.has_operator(\"pm-with\")) {\n        const emails = filter.operands(\"pm-with\")[0];\n        const user_ids = people.emails_strings_to_user_ids_string(emails);\n\n        if (user_ids !== undefined) {\n            return people.get_recipients(user_ids);\n        }\n        if (emails.includes(\",\")) {\n            return $t({defaultMessage: \"Invalid users\"});\n        }\n        return $t({defaultMessage: \"Invalid user\"});\n    }\n\n    return filter_title;\n}\n\nexport let narrow_title = \"home\";\nexport function update_narrow_title(filter) {\n    narrow_title = compute_narrow_title(filter);\n    notifications.redraw_title();\n}\n\nexport function reset_ui_state() {\n    // Resets the state of various visual UI elements that are\n    // a function of the current narrow.\n    narrow_banner.hide_empty_narrow_message();\n    message_scroll.hide_top_of_narrow_notices();\n    message_scroll.hide_indicators();\n    unread_ui.reset_mark_as_read_turned_off_banner();\n}\n\nexport function handle_middle_pane_transition() {\n    if (compose_state.composing) {\n        compose_actions.update_narrow_to_recipient_visibility();\n    }\n}\n\nexport function activate(raw_operators, opts) {\n    /* Main entry point for switching to a new view / message list.\n       Note that for historical reasons related to the current\n       client-side caching structure, the \"All messages\"/message_lists.home\n       view is reached via `narrow.deactivate()`.\n\n       The name is based on \"narrowing to a subset of the user's\n       messages.\".  Supported parameters:\n\n       raw_operators: Narrowing/search operators; used to construct\n       a Filter object that decides which messages belong in the\n       view.  Required (See the above note on how `message_lists.home` works)\n\n       All other options are encoded via the `opts` dictionary:\n\n       * trigger: Optional parameter used mainly for logging and some\n         custom UI behavior for certain buttons.  Generally aim to\n         have this be unique for each UI widget that can trigger narrowing.\n\n       * change_hash: Whether this narrow should change the URL\n         fragment (\"hash\") in the URL bar.  Should be true unless the\n         URL is already correct (E.g. because the hashchange logic\n         itself is triggering the change of view).\n\n       * then_select_id: If the caller wants us to do the narrow\n         centered on a specific message ID (\"anchor\" in the API\n         parlance), specify that here.  Useful e.g. when the user\n         clicks on a specific message; implied by a `near:` operator.\n\n       * then_select_offset: Offset from the top of the page in pixels\n         at which to place the then_select_id message following\n         rendering.  Important to avoid what would otherwise feel like\n         visual glitches after clicking on a specific message's heading\n         or rerendering due to server-side changes.\n    */\n\n    const start_time = new Date();\n    const was_narrowed_already = narrow_state.active();\n\n    // Since narrow.activate is called directly from various\n    // places in our code without passing through hashchange,\n    // we need to check if the narrow is allowed for spectator here too.\n    if (\n        page_params.is_spectator &&\n        raw_operators.length &&\n        raw_operators.some(\n            (raw_operator) => !hash_util.allowed_web_public_narrows.includes(raw_operator.operator),\n        )\n    ) {\n        spectators.login_to_access();\n        return;\n    }\n\n    // The empty narrow is the home view; so deactivate any narrow if\n    // no operators were specified.\n    if (raw_operators.length === 0) {\n        deactivate();\n        return;\n    }\n\n    opts = {\n        then_select_id: -1,\n        then_select_offset: undefined,\n        change_hash: true,\n        trigger: \"unknown\",\n        ...opts,\n    };\n\n    const id_info = {\n        target_id: undefined,\n        local_select_id: undefined,\n        final_select_id: undefined,\n    };\n\n    const filter = new Filter(raw_operators);\n    const operators = filter.operators();\n\n    // These two narrowing operators specify what message should be\n    // selected and should be the center of the narrow.\n    if (filter.has_operator(\"near\")) {\n        id_info.target_id = Number.parseInt(filter.operands(\"near\")[0], 10);\n    }\n    if (filter.has_operator(\"id\")) {\n        id_info.target_id = Number.parseInt(filter.operands(\"id\")[0], 10);\n    }\n\n    // Narrow with near / id operator. There are two possibilities:\n    // * The user is clicking a permanent link to a conversation, in which\n    //   case we want to look up the anchor message and see if it has moved.\n    // * The user did a search for something like stream:foo topic:bar near:1\n    //   (or some other ID that is not an actual message in the topic).\n    //\n    // We attempt the match the stream and topic with that of the\n    // message in case the message was moved after the link was\n    // created. This ensures near / id links work and will redirect\n    // correctly if the topic was moved (including being resolved).\n    if (id_info.target_id && filter.has_operator(\"stream\") && filter.has_operator(\"topic\")) {\n        const target_message = message_store.get(id_info.target_id);\n\n        function adjusted_operators_if_moved(operators, message) {\n            const adjusted_operators = [];\n            let operators_changed = false;\n\n            for (const operator of operators) {\n                const adjusted_operator = {...operator};\n                if (\n                    operator.operator === \"stream\" &&\n                    !util.lower_same(operator.operand, message.display_recipient)\n                ) {\n                    adjusted_operator.operand = message.display_recipient;\n                    operators_changed = true;\n                }\n\n                if (\n                    operator.operator === \"topic\" &&\n                    !util.lower_same(operator.operand, message.topic)\n                ) {\n                    adjusted_operator.operand = message.topic;\n                    operators_changed = true;\n                }\n\n                adjusted_operators.push(adjusted_operator);\n            }\n\n            if (!operators_changed) {\n                return null;\n            }\n\n            return adjusted_operators;\n        }\n\n        if (target_message) {\n            // If we have the target message ID for the narrow in our\n            // local cache, and the target message has been moved from\n            // the stream/topic pair that was requested to some other\n            // location, then we should retarget this narrow operation\n            // to where the message is located now.\n            const narrow_topic = filter.operands(\"topic\")[0];\n            const narrow_stream_name = filter.operands(\"stream\")[0];\n            const narrow_stream_id = stream_data.get_sub(narrow_stream_name).stream_id;\n            const narrow_dict = {stream_id: narrow_stream_id, topic: narrow_topic};\n\n            const narrow_exists_in_edit_history =\n                message_edit.stream_and_topic_exist_in_edit_history(\n                    target_message,\n                    narrow_stream_id,\n                    narrow_topic,\n                );\n\n            // It's possible for a message to have moved to another\n            // topic and then moved back to the current topic. In this\n            // situation, narrow_exists_in_edit_history will be true,\n            // but we don't need to redirect the narrow.\n            const narrow_matches_target_message = util.same_stream_and_topic(\n                target_message,\n                narrow_dict,\n            );\n\n            if (\n                !narrow_matches_target_message &&\n                (narrow_exists_in_edit_history || !page_params.realm_allow_edit_history)\n            ) {\n                const adjusted_operators = adjusted_operators_if_moved(\n                    raw_operators,\n                    target_message,\n                );\n                if (adjusted_operators !== null) {\n                    activate(adjusted_operators, {\n                        ...opts,\n                        // Update the URL fragment to reflect the redirect.\n                        change_hash: true,\n                    });\n                    return;\n                }\n            }\n        } else if (!opts.fetched_target_message) {\n            // If we don't have the target message ID locally and\n            // haven't attempted to fetch it, then we ask the server\n            // for it.\n            channel.get({\n                url: `/json/messages/${id_info.target_id}`,\n                success(data) {\n                    // After the message is fetched, we make the\n                    // message locally available and then call\n                    // narrow.activate recursively, setting a flag to\n                    // indicate we've already done this.\n                    message_helper.process_new_message(data.message);\n                    activate(raw_operators, {\n                        ...opts,\n                        fetched_target_message: true,\n                    });\n                },\n                error() {\n                    // Message doesn't exist or user doesn't have\n                    // access to the target message ID. This will\n                    // happen, for example, if a user types\n                    // `stream:foo topic:bar near:1` into the search\n                    // box. No special rewriting is required, so call\n                    // narrow.activate recursively.\n                    activate(raw_operators, {\n                        fetched_target_message: true,\n                        ...opts,\n                    });\n                },\n            });\n\n            // The channel.get will call narrow.activate recursively\n            // from a continuation unconditionally; the correct thing\n            // to do here is return.\n            return;\n        }\n    }\n\n    // IMPORTANT: No code that modifies UI state should appear above\n    // this point. This is important to prevent calling such functions\n    // more than once in the event that we call narrow.activate\n    // recursively.\n    reset_ui_state();\n\n    if (recent_topics_util.is_visible()) {\n        recent_topics_ui.hide();\n    } else {\n        // If recent topics was not visible, then we are switching\n        // from another message list view. Save the scroll position in\n        // that message list, so that we can restore it if/when we\n        // later navigate back to that view.\n        save_pre_narrow_offset_for_reload();\n    }\n\n    // most users aren't going to send a bunch of a out-of-narrow messages\n    // and expect to visit a list of narrows, so let's get these out of the way.\n    notifications.clear_compose_notifications();\n\n    // Open tooltips are only interesting for current narrow,\n    // so hide them when activating a new one.\n    $(\".tooltip\").hide();\n\n    update_narrow_title(filter);\n\n    blueslip.debug(\"Narrowed\", {\n        operators: operators.map((e) => e.operator),\n        trigger: opts ? opts.trigger : undefined,\n        previous_id: message_lists.current.selected_id(),\n    });\n\n    if (opts.then_select_id > 0) {\n        // We override target_id in this case, since the user could be\n        // having a near: narrow auto-reloaded.\n        id_info.target_id = opts.then_select_id;\n        if (opts.then_select_offset === undefined) {\n            const $row = message_lists.current.get_row(opts.then_select_id);\n            if ($row.length > 0) {\n                opts.then_select_offset = $row.offset().top;\n            }\n        }\n    }\n\n    if (!was_narrowed_already) {\n        unread.set_messages_read_in_narrow(false);\n    }\n\n    // IMPORTANT!  At this point we are heavily committed to\n    // populating the new narrow, so we update our narrow_state.\n    // From here on down, any calls to the narrow_state API will\n    // reflect the upcoming narrow.\n    has_shown_message_list_view = true;\n    narrow_state.set_current_filter(filter);\n\n    const excludes_muted_topics = narrow_state.excludes_muted_topics();\n\n    let msg_data = new MessageListData({\n        filter: narrow_state.filter(),\n        excludes_muted_topics,\n    });\n\n    // Populate the message list if we can apply our filter locally (i.e.\n    // with no backend help) and we have the message we want to select.\n    // Also update id_info accordingly.\n    // original back.\n    maybe_add_local_messages({\n        id_info,\n        msg_data,\n    });\n\n    if (!id_info.local_select_id) {\n        // If we're not actually read to select an ID, we need to\n        // trash the `MessageListData` object that we just constructed\n        // and pass an empty one to MessageList, because the block of\n        // messages in the MessageListData built inside\n        // maybe_add_local_messages is likely not be contiguous with\n        // the block we're about to request from the server instead.\n        msg_data = new MessageListData({\n            filter: narrow_state.filter(),\n            excludes_muted_topics,\n        });\n    }\n\n    const msg_list = new message_list.MessageList({\n        data: msg_data,\n        table_name: \"zfilt\",\n    });\n\n    msg_list.start_time = start_time;\n\n    // Show the new set of messages.  It is important to set message_lists.current to\n    // the view right as it's being shown, because we rely on message_lists.current\n    // being shown for deciding when to condense messages.\n    $(\"body\").addClass(\"narrowed_view\");\n    $(\"#zfilt\").addClass(\"focused_table\");\n    $(\"#zhome\").removeClass(\"focused_table\");\n\n    message_lists.set_current(msg_list);\n\n    let then_select_offset;\n    if (id_info.target_id === id_info.final_select_id) {\n        then_select_offset = opts.then_select_offset;\n    }\n\n    const select_immediately = id_info.local_select_id !== undefined;\n\n    {\n        let anchor;\n\n        // Either we're trying to center the narrow around a\n        // particular message ID (which could be max_int), or we're\n        // asking the server to figure out for us what the first\n        // unread message is, and center the narrow around that.\n        switch (id_info.final_select_id) {\n            case undefined:\n                anchor = \"first_unread\";\n                break;\n            case -1:\n                // This case should never happen in this code path; it's\n                // here in case we choose to extract this as an\n                // independent reusable function.\n                anchor = \"oldest\";\n                break;\n            case LARGER_THAN_MAX_MESSAGE_ID:\n                anchor = \"newest\";\n                break;\n            default:\n                anchor = id_info.final_select_id;\n        }\n\n        message_fetch.load_messages_for_narrow({\n            anchor,\n            cont() {\n                if (!select_immediately) {\n                    update_selection({\n                        id_info,\n                        select_offset: then_select_offset,\n                        msg_list: message_lists.current,\n                    });\n                }\n                msg_list.network_time = new Date();\n                maybe_report_narrow_time(msg_list);\n            },\n            msg_list,\n        });\n    }\n\n    if (select_immediately) {\n        update_selection({\n            id_info,\n            select_offset: then_select_offset,\n            msg_list: message_lists.current,\n        });\n    }\n\n    // Put the narrow operators in the URL fragment.\n    // Disabled when the URL fragment was the source\n    // of this narrow.\n    if (opts.change_hash) {\n        hashchange.save_narrow(operators);\n    }\n\n    if (page_params.search_pills_enabled && opts.trigger !== \"search\") {\n        search_pill_widget.widget.clear(true);\n\n        for (const operator of operators) {\n            const search_string = Filter.unparse([operator]);\n            search_pill.append_search_string(search_string, search_pill_widget.widget);\n        }\n    }\n\n    if (filter.contains_only_private_messages()) {\n        compose_closed_ui.update_buttons_for_private();\n    } else {\n        compose_closed_ui.update_buttons_for_stream();\n    }\n    compose_closed_ui.update_reply_recipient_label();\n\n    search.update_button_visibility();\n\n    compose_actions.on_narrow(opts);\n\n    const current_filter = narrow_state.filter();\n\n    top_left_corner.handle_narrow_activated(current_filter);\n    pm_list.handle_narrow_activated(current_filter);\n    stream_list.handle_narrow_activated(current_filter);\n    typing_events.render_notifications_for_narrow();\n    message_view_header.initialize();\n\n    // It is important to call this after other important updates\n    // like narrow filter and compose recipients happen.\n    handle_middle_pane_transition();\n\n    msg_list.initial_core_time = new Date();\n    setTimeout(() => {\n        resize.resize_stream_filters_container();\n        msg_list.initial_free_time = new Date();\n        maybe_report_narrow_time(msg_list);\n    }, 0);\n}\n\nfunction min_defined(a, b) {\n    if (a === undefined) {\n        return b;\n    }\n    if (b === undefined) {\n        return a;\n    }\n    return a < b ? a : b;\n}\n\nfunction load_local_messages(msg_data) {\n    // This little helper loads messages into our narrow message\n    // data and returns true unless it's empty.  We use this for\n    // cases when our local cache (all_messages_data) has at least\n    // one message the user will expect to see in the new narrow.\n\n    const in_msgs = all_messages_data.all_messages();\n    msg_data.add_messages(in_msgs);\n\n    return !msg_data.empty();\n}\n\nexport function maybe_add_local_messages(opts) {\n    // This function determines whether we need to go to the server to\n    // fetch messages for the requested narrow, or whether we have the\n    // data cached locally to render the narrow correctly without\n    // waiting for the server.  There are two high-level outcomes:\n    //\n    // 1. We're centering this narrow on the first unread message: In\n    // this case final_select_id is left undefined or first unread\n    // message id locally.\n    //\n    // 2. We're centering this narrow on the most recent matching\n    // message. In this case we select final_select_id to the latest\n    // message in the local cache (if the local cache has the latest\n    // messages for this narrow) or max_int (if it doesn't).\n    //\n    // In either case, this function does two very closely related\n    // things, both of which are somewhat optional:\n    //\n    //  - update id_info with more complete values\n    //  - add messages into our message list from our local cache\n    const id_info = opts.id_info;\n    const msg_data = opts.msg_data;\n    const unread_info = narrow_state.get_first_unread_info();\n\n    // If we don't have a specific message we're hoping to select\n    // (i.e. no `target_id`) and the narrow's filter doesn't\n    // allow_use_first_unread_when_narrowing, we want to just render\n    // the latest messages matching the filter.  To ensure this, we\n    // set an initial value final_select_id to `max_int`.\n    //\n    // While that's a confusing naming choice (`final_select_id` is\n    // meant to be final in the context of the caller), this sets the\n    // default behavior to be fetching and then selecting the very\n    // latest message in this narrow.\n    //\n    // If we're able to render the narrow locally, we'll end up\n    // overwriting this value with the ID of the latest message in the\n    // narrow later in this function.\n    if (!id_info.target_id && !narrow_state.filter().allow_use_first_unread_when_narrowing()) {\n        // Note that this may be overwritten; see above comment.\n        id_info.final_select_id = LARGER_THAN_MAX_MESSAGE_ID;\n    }\n\n    if (unread_info.flavor === \"cannot_compute\") {\n        // Full-text search and potentially other future cases where\n        // we can't check which messages match on the frontend, so it\n        // doesn't matter what's in our cache, we must go to the server.\n        if (id_info.target_id) {\n            // TODO: Ideally, in this case we should be asking the\n            // server to give us the first unread or the target_id,\n            // whichever is first (i.e. basically the `found` logic\n            // below), but the server doesn't support that query.\n            id_info.final_select_id = id_info.target_id;\n        }\n        // if we can't compute a next unread id, just return without\n        // setting local_select_id, so that we go to the server.\n        return;\n    }\n\n    // We can now assume narrow_state.filter().can_apply_locally(),\n    // because !can_apply_locally => cannot_compute\n\n    if (\n        unread_info.flavor === \"found\" &&\n        narrow_state.filter().allow_use_first_unread_when_narrowing()\n    ) {\n        // We have at least one unread message in this narrow, and the\n        // narrow is one where we use the first unread message in\n        // narrowing positioning decisions.  So either we aim for the\n        // first unread message, or the target_id (if any), whichever\n        // is earlier.  See #2091 for a detailed explanation of why we\n        // need to look at unread here.\n        id_info.final_select_id = min_defined(id_info.target_id, unread_info.msg_id);\n\n        if (!load_local_messages(msg_data)) {\n            return;\n        }\n\n        // Now that we know what message ID we're going to land on, we\n        // can see if we can take the user there locally.\n        if (msg_data.get(id_info.final_select_id)) {\n            id_info.local_select_id = id_info.final_select_id;\n        }\n\n        // If we don't have the first unread message locally, we must\n        // go to the server to get it before we can render the narrow.\n        return;\n    }\n\n    // In all cases below here, the first unread message is irrelevant\n    // to our positioning decisions, either because there are no\n    // unread messages (unread_info.flavor === 'not_found') or because\n    // this is a mixed narrow where we prefer the bottom of the feed\n    // to the first unread message for positioning (and the narrow\n    // will be configured to not mark messages as read).\n\n    if (!id_info.target_id) {\n        // Without unread messages or a target ID, we're narrowing to\n        // the very latest message or first unread if matching the narrow allows.\n\n        if (!all_messages_data.fetch_status.has_found_newest()) {\n            // If all_messages_data is not caught up, then we cannot\n            // populate the latest messages for the target narrow\n            // correctly from there, so we must go to the server.\n            return;\n        }\n        if (!load_local_messages(msg_data)) {\n            return;\n        }\n        // Otherwise, we have matching messages, and all_messages_data\n        // is caught up, so the last message in our now-populated\n        // msg_data object must be the last message matching the\n        // narrow the server could give us, so we can render locally.\n        // and use local latest message id instead of max_int if set earlier.\n        const last_msg = msg_data.last();\n        id_info.final_select_id = last_msg.id;\n        id_info.local_select_id = id_info.final_select_id;\n        return;\n    }\n\n    // We have a target_id and no unread messages complicating things,\n    // so we definitely want to land on the target_id message.\n    id_info.final_select_id = id_info.target_id;\n\n    // TODO: We could improve on this next condition by considering\n    // cases where\n    // `all_messages_data.fetch_status.has_found_oldest()`; which\n    // would come up with e.g. `near: 0` in a small organization.\n    //\n    // And similarly for `near: max_int` with has_found_newest.\n    if (\n        all_messages_data.empty() ||\n        id_info.target_id < all_messages_data.first().id ||\n        id_info.target_id > all_messages_data.last().id\n    ) {\n        // If the target message is outside the range that we had\n        // available for local population, we must go to the server.\n        return;\n    }\n    if (!load_local_messages(msg_data)) {\n        return;\n    }\n    if (msg_data.get(id_info.target_id)) {\n        // We have a range of locally renderable messages, including\n        // our target, so we can render the narrow locally.\n        id_info.local_select_id = id_info.final_select_id;\n        return;\n    }\n\n    // Note: Arguably, we could have a use_closest sort of condition\n    // here to handle cases where `target_id` doesn't match the narrow\n    // but is within the locally renderable range.  But\n    // !can_apply_locally + target_id is a rare combination in the\n    // first place, so we don't bother.\n    return;\n}\n\nexport function update_selection(opts) {\n    if (message_lists.current !== opts.msg_list) {\n        // If we navigated away from a view while we were fetching\n        // messages for it, don't attempt to move the currently\n        // selected message.\n        return;\n    }\n\n    if (message_lists.current.empty()) {\n        // There's nothing to select if there are no messages.\n        return;\n    }\n\n    const id_info = opts.id_info;\n    const select_offset = opts.select_offset;\n\n    let msg_id = id_info.final_select_id;\n    if (msg_id === undefined) {\n        msg_id = message_lists.current.first_unread_message_id();\n    }\n\n    const preserve_pre_narrowing_screen_position =\n        message_lists.current.get(msg_id) !== undefined && select_offset !== undefined;\n\n    const then_scroll = !preserve_pre_narrowing_screen_position;\n\n    message_lists.current.select_id(msg_id, {\n        then_scroll,\n        use_closest: true,\n        force_rerender: true,\n    });\n\n    if (preserve_pre_narrowing_screen_position) {\n        // Scroll so that the selected message is in the same\n        // position in the viewport as it was prior to\n        // narrowing\n        message_lists.current.view.set_message_offset(select_offset);\n    }\n    unread_ops.process_visible();\n}\n\nexport function activate_stream_for_cycle_hotkey(stream_name) {\n    // This is the common code for A/D hotkeys.\n    const filter_expr = [{operator: \"stream\", operand: stream_name}];\n    activate(filter_expr, {});\n}\n\nexport function stream_cycle_backward() {\n    const curr_stream = narrow_state.stream();\n\n    if (!curr_stream) {\n        return;\n    }\n\n    const stream_name = topic_generator.get_prev_stream(curr_stream);\n\n    if (!stream_name) {\n        return;\n    }\n\n    activate_stream_for_cycle_hotkey(stream_name);\n}\n\nexport function stream_cycle_forward() {\n    const curr_stream = narrow_state.stream();\n\n    if (!curr_stream) {\n        return;\n    }\n\n    const stream_name = topic_generator.get_next_stream(curr_stream);\n\n    if (!stream_name) {\n        return;\n    }\n\n    activate_stream_for_cycle_hotkey(stream_name);\n}\n\nexport function narrow_to_next_topic() {\n    const curr_info = {\n        stream: narrow_state.stream(),\n        topic: narrow_state.topic(),\n    };\n\n    const next_narrow = topic_generator.get_next_topic(curr_info.stream, curr_info.topic);\n\n    if (!next_narrow) {\n        return;\n    }\n\n    const filter_expr = [\n        {operator: \"stream\", operand: next_narrow.stream},\n        {operator: \"topic\", operand: next_narrow.topic},\n    ];\n\n    activate(filter_expr, {});\n}\n\nexport function narrow_to_next_pm_string() {\n    const curr_pm = narrow_state.pm_ids_string();\n\n    const next_pm = topic_generator.get_next_unread_pm_string(curr_pm);\n\n    if (!next_pm) {\n        return;\n    }\n\n    // Hopefully someday we can narrow by user_ids_string instead of\n    // mapping back to emails.\n    const pm_with = people.user_ids_string_to_emails_string(next_pm);\n\n    const filter_expr = [{operator: \"pm-with\", operand: pm_with}];\n\n    // force_close parameter is true to not auto open compose_box\n    const opts = {\n        force_close: true,\n    };\n\n    activate(filter_expr, opts);\n}\n\n// Activate narrowing with a single operator.\n// This is just for syntactic convenience.\nexport function by(operator, operand, opts) {\n    activate([{operator, operand}], opts);\n}\n\nexport function by_topic(target_id, opts) {\n    // don't use message_lists.current as it won't work for muted messages or for out-of-narrow links\n    const original = message_store.get(target_id);\n    if (original.type !== \"stream\") {\n        // Only stream messages have topics, but the\n        // user wants us to narrow in some way.\n        by_recipient(target_id, opts);\n        return;\n    }\n\n    // We don't check msg_list.can_mark_messages_read here only because\n    // the target msg_list isn't initialized yet; in any case, the\n    // message is about to be marked read in the new view.\n    unread_ops.notify_server_message_read(original);\n\n    const search_terms = [\n        {operator: \"stream\", operand: original.stream},\n        {operator: \"topic\", operand: original.topic},\n    ];\n    opts = {then_select_id: target_id, ...opts};\n    activate(search_terms, opts);\n}\n\n// Called for the 'narrow by stream' hotkey.\nexport function by_recipient(target_id, opts) {\n    opts = {then_select_id: target_id, ...opts};\n    // don't use message_lists.current as it won't work for muted messages or for out-of-narrow links\n    const message = message_store.get(target_id);\n\n    // We don't check msg_list.can_mark_messages_read here only because\n    // the target msg_list isn't initialized yet; in any case, the\n    // message is about to be marked read in the new view.\n    unread_ops.notify_server_message_read(message);\n\n    switch (message.type) {\n        case \"private\":\n            by(\"pm-with\", message.reply_to, opts);\n            break;\n\n        case \"stream\":\n            by(\"stream\", message.stream, opts);\n            break;\n    }\n}\n\n// Called by the narrow_to_compose_target hotkey.\nexport function to_compose_target() {\n    if (!compose_state.composing()) {\n        return;\n    }\n\n    const opts = {\n        trigger: \"narrow_to_compose_target\",\n    };\n\n    if (compose_state.get_message_type() === \"stream\") {\n        const stream_name = compose_state.stream_name();\n        const stream_id = stream_data.get_stream_id(stream_name);\n        if (!stream_id) {\n            return;\n        }\n        // If we are composing to a new topic, we narrow to the stream but\n        // grey-out the message view instead of narrowing to an empty view.\n        const operators = [{operator: \"stream\", operand: stream_name}];\n        const topic = compose_state.topic();\n        if (topic !== \"\") {\n            operators.push({operator: \"topic\", operand: topic});\n        }\n        activate(operators, opts);\n        return;\n    }\n\n    if (compose_state.get_message_type() === \"private\") {\n        const recipient_string = compose_state.private_message_recipient();\n        const emails = util.extract_pm_recipients(recipient_string);\n        const invalid = emails.filter((email) => !people.is_valid_email_for_compose(email));\n        // If there are no recipients or any recipient is\n        // invalid, narrow to all PMs.\n        if (emails.length === 0 || invalid.length > 0) {\n            by(\"is\", \"private\", opts);\n            return;\n        }\n        by(\"pm-with\", util.normalize_recipients(recipient_string), opts);\n    }\n}\n\nfunction handle_post_narrow_deactivate_processes() {\n    compose_fade.update_message_list();\n\n    // clear existing search pills\n    if (page_params.search_pills_enabled) {\n        search_pill_widget.widget.clear(true);\n    }\n\n    top_left_corner.handle_narrow_deactivated();\n    pm_list.handle_narrow_deactivated();\n    stream_list.handle_narrow_deactivated();\n    compose_closed_ui.update_buttons_for_stream();\n    message_edit.handle_narrow_deactivated();\n    widgetize.set_widgets_for_list();\n    typing_events.render_notifications_for_narrow();\n    message_view_header.initialize();\n    update_narrow_title(narrow_state.filter());\n    message_scroll.update_top_of_narrow_notices(message_lists.home);\n}\n\nexport function deactivate(coming_from_recent_topics = false) {\n    // NOTE: Never call this function independently,\n    // always use browser_history.go_to_location(\"#all_messages\") to\n    // activate All message narrow.\n    /*\n      Switches message_lists.current from narrowed_msg_list to\n      message_lists.home (\"All messages\"), ending the current narrow.  This\n      is a very fast operation, because we keep message_lists.home's data\n      cached and updated in the DOM at all times, making it suitable\n      for rapid access via keyboard shortcuts.\n\n      Long-term, we will likely want to make `message_lists.home` not\n      special in any way, and instead just have a generic\n      message_list_data structure caching system that happens to have\n      message_lists.home in it.\n     */\n    search.clear_search_form();\n    // Both All messages and Recent topics have `undefined` filter.\n    // Return if already in the All message narrow.\n    if (narrow_state.filter() === undefined && !coming_from_recent_topics) {\n        return;\n    }\n    unnarrow_times = {start_time: new Date()};\n    blueslip.debug(\"Unnarrowed\");\n\n    if (message_scroll.is_actively_scrolling()) {\n        // There is no way to intercept in-flight scroll events, and they will\n        // cause you to end up in the wrong place if you are actively scrolling\n        // on an unnarrow. Wait a bit and try again once the scrolling is over.\n        setTimeout(deactivate, 50);\n        return;\n    }\n\n    if (!compose_state.has_message_content()) {\n        compose_actions.cancel();\n    }\n\n    narrow_state.reset_current_filter();\n    has_shown_message_list_view = true;\n\n    $(\"body\").removeClass(\"narrowed_view\");\n    $(\"#zfilt\").removeClass(\"focused_table\");\n    $(\"#zhome\").addClass(\"focused_table\");\n    message_lists.set_current(message_lists.home);\n    condense.condense_and_collapse($(\"#zhome div.message_row\"));\n\n    reset_ui_state();\n    handle_middle_pane_transition();\n    hashchange.save_narrow();\n\n    if (message_lists.current.selected_id() !== -1) {\n        const preserve_pre_narrowing_screen_position =\n            message_lists.current.selected_row().length > 0 &&\n            message_lists.current.pre_narrow_offset !== undefined;\n        let message_id_to_select;\n        const select_opts = {\n            then_scroll: true,\n            use_closest: true,\n            empty_ok: true,\n        };\n\n        // We fall back to the closest selected id, if the user has removed a\n        // stream from the home view since leaving it the old selected id might\n        // no longer be there\n        // Additionally, we pass empty_ok as the user may have removed **all** streams\n        // from their home view\n        if (unread.messages_read_in_narrow) {\n            // We read some unread messages in a narrow. Instead of going back to\n            // where we were before the narrow, go to our first unread message (or\n            // the bottom of the feed, if there are no unread messages).\n            message_id_to_select = message_lists.current.first_unread_message_id();\n        } else {\n            // We narrowed, but only backwards in time (ie no unread were read). Try\n            // to go back to exactly where we were before narrowing.\n            if (preserve_pre_narrowing_screen_position) {\n                // We scroll the user back to exactly the offset from the selected\n                // message that they were at the time that they narrowed.\n                // TODO: Make this correctly handle the case of resizing while narrowed.\n                select_opts.target_scroll_offset = message_lists.current.pre_narrow_offset;\n            }\n            message_id_to_select = message_lists.current.selected_id();\n        }\n        message_lists.current.select_id(message_id_to_select, select_opts);\n    }\n\n    handle_post_narrow_deactivate_processes();\n\n    unnarrow_times.initial_core_time = new Date();\n    setTimeout(() => {\n        resize.resize_stream_filters_container();\n        unnarrow_times.initial_free_time = new Date();\n        report_unnarrow_time();\n    });\n}\n","import $ from \"jquery\";\n\nimport {$t, $t_html} from \"./i18n\";\nimport {narrow_error} from \"./narrow_error\";\nimport * as narrow_state from \"./narrow_state\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as settings_config from \"./settings_config\";\nimport * as spectators from \"./spectators\";\nimport * as stream_data from \"./stream_data\";\n\nconst SPECTATOR_STREAM_NARROW_BANNER = {\n    title: \"\",\n    html: $t_html(\n        {\n            defaultMessage: \"This is not a <z-link>publicly accessible</z-link> conversation.\",\n        },\n        {\n            \"z-link\": (content_html) =>\n                `<a href=\"/help/public-access-option\">${content_html.join(\"\")}</a>`,\n        },\n    ),\n};\n\nfunction retrieve_search_query_data() {\n    // when search bar contains multiple filters, only retrieve search queries\n    const current_filter = narrow_state.filter();\n    const search_query = current_filter.operands(\"search\")[0];\n    const query_words = search_query.split(\" \");\n\n    const search_string_result = {\n        query_words: [],\n        has_stop_word: false,\n    };\n\n    // Add in stream:foo and topic:bar if present\n    if (current_filter.has_operator(\"stream\") || current_filter.has_operator(\"topic\")) {\n        const stream = current_filter.operands(\"stream\")[0];\n        const topic = current_filter.operands(\"topic\")[0];\n        if (stream) {\n            search_string_result.stream_query = stream;\n        }\n        if (topic) {\n            search_string_result.topic_query = topic;\n        }\n    }\n\n    // Gather information about each query word\n    for (const query_word of query_words) {\n        if (page_params.stop_words.includes(query_word)) {\n            search_string_result.has_stop_word = true;\n            search_string_result.query_words.push({\n                query_word,\n                is_stop_word: true,\n            });\n        } else {\n            search_string_result.query_words.push({\n                query_word,\n                is_stop_word: false,\n            });\n        }\n    }\n\n    return search_string_result;\n}\n\nfunction pick_empty_narrow_banner() {\n    const default_banner = {\n        title: $t({defaultMessage: \"There are no messages here.\"}),\n        // Spectators cannot start a conversation.\n        html: page_params.is_spectator\n            ? \"\"\n            : $t_html(\n                  {\n                      defaultMessage: \"Why not <z-link>start the conversation</z-link>?\",\n                  },\n                  {\n                      \"z-link\": (content_html) =>\n                          `<a href=\"#\" class=\"empty_feed_compose_stream\">${content_html.join(\n                              \"\",\n                          )}</a>`,\n                  },\n              ),\n    };\n    const empty_search_narrow_title = $t({defaultMessage: \"No search results\"});\n\n    const current_filter = narrow_state.filter();\n\n    if (current_filter === undefined) {\n        return default_banner;\n    }\n\n    const first_term = current_filter.operators()[0];\n    const first_operator = first_term.operator;\n    const first_operand = first_term.operand;\n    const num_operators = current_filter.operators().length;\n\n    if (num_operators !== 1) {\n        // For invalid-multi-operator narrows, we display an invalid narrow message\n        const streams = current_filter.operands(\"stream\");\n\n        // No message can have multiple streams\n        if (streams.length > 1) {\n            return {\n                title: empty_search_narrow_title,\n                html: $t_html({\n                    defaultMessage:\n                        \"<p>You are searching for messages that belong to more than one stream, which is not possible.</p>\",\n                }),\n            };\n        }\n        // No message can have multiple topics\n        if (current_filter.operands(\"topic\").length > 1) {\n            return {\n                title: empty_search_narrow_title,\n                html: $t_html({\n                    defaultMessage:\n                        \"<p>You are searching for messages that belong to more than one topic, which is not possible.</p>\",\n                }),\n            };\n        }\n        // No message can have multiple senders\n        if (current_filter.operands(\"sender\").length > 1) {\n            return {\n                title: empty_search_narrow_title,\n                html: $t_html({\n                    defaultMessage:\n                        \"<p>You are searching for messages that are sent by more than one person, which is not possible.</p>\",\n                }),\n            };\n        }\n\n        // For empty stream searches within other narrows, we display the stop words\n        if (current_filter.operands(\"search\").length > 0) {\n            return {\n                title: empty_search_narrow_title,\n                search_data: retrieve_search_query_data(),\n            };\n        }\n\n        if (\n            page_params.is_spectator &&\n            first_operator === \"stream\" &&\n            !stream_data.is_web_public_by_stream_name(first_operand)\n        ) {\n            // For non web-public streams, show `login_to_access` modal.\n            spectators.login_to_access(true);\n            return SPECTATOR_STREAM_NARROW_BANNER;\n        }\n\n        // For other multi-operator narrows, we just use the default banner\n        return default_banner;\n    }\n\n    switch (first_operator) {\n        case \"is\":\n            switch (first_operand) {\n                case \"starred\":\n                    // You have no starred messages.\n                    return {\n                        title: $t({defaultMessage: \"You haven't starred anything yet!\"}),\n                        html: $t_html(\n                            {\n                                defaultMessage:\n                                    \"Learn more about starring messages <z-link>here</z-link>.\",\n                            },\n                            {\n                                \"z-link\": (content_html) =>\n                                    `<a href=\"/help/star-a-message\">${content_html.join(\"\")}</a>`,\n                            },\n                        ),\n                    };\n                case \"mentioned\":\n                    return {\n                        title: $t({defaultMessage: \"You haven't been mentioned yet!\"}),\n                        html: $t_html(\n                            {\n                                defaultMessage: \"Learn more about mentions <z-link>here</z-link>.\",\n                            },\n                            {\n                                \"z-link\": (content_html) =>\n                                    `<a href=\"/help/mention-a-user-or-group\">${content_html.join(\n                                        \"\",\n                                    )}</a>`,\n                            },\n                        ),\n                    };\n                case \"private\":\n                    // You have no private messages.\n                    if (\n                        page_params.realm_private_message_policy ===\n                        settings_config.private_message_policy_values.disabled.code\n                    ) {\n                        return {\n                            title: $t({\n                                defaultMessage:\n                                    \"You are not allowed to send private messages in this organization.\",\n                            }),\n                        };\n                    }\n                    return {\n                        title: $t({defaultMessage: \"You have no private messages yet!\"}),\n                        html: $t_html(\n                            {\n                                defaultMessage: \"Why not <z-link>start the conversation</z-link>?\",\n                            },\n                            {\n                                // TODO: The href here is a bit weird; we probably want to migrate\n                                // this to a button element down the line.\n                                \"z-link\": (content_html) =>\n                                    `<a href=\"#\" class=\"empty_feed_compose_private\">${content_html.join(\n                                        \"\",\n                                    )}</a>`,\n                            },\n                        ),\n                    };\n                case \"unread\":\n                    // You have no unread messages.\n                    return {\n                        title: $t({defaultMessage: \"You have no unread messages!\"}),\n                    };\n                case \"resolved\":\n                    return {\n                        title: $t({defaultMessage: \"No topics are marked as resolved.\"}),\n                    };\n            }\n            // fallthrough to default case if no match is found\n            break;\n        case \"stream\":\n            if (!stream_data.is_subscribed_by_name(first_operand)) {\n                // You are narrowed to a stream which does not exist or is a private stream\n                // in which you were never subscribed.\n\n                if (page_params.is_spectator) {\n                    spectators.login_to_access(true);\n                    return SPECTATOR_STREAM_NARROW_BANNER;\n                }\n\n                function can_toggle_narrowed_stream() {\n                    const stream_name = narrow_state.stream();\n\n                    if (!stream_name) {\n                        return false;\n                    }\n\n                    const stream_sub = stream_data.get_sub(first_operand);\n                    return stream_sub && stream_data.can_toggle_subscription(stream_sub);\n                }\n\n                if (can_toggle_narrowed_stream()) {\n                    return {\n                        title: $t({\n                            defaultMessage:\n                                \"You aren't subscribed to this stream and nobody has talked about that yet!\",\n                        }),\n                        // TODO: Consider moving the button to be its own option in the template.\n                        html: $t_html(\n                            {\n                                defaultMessage: \"<z-button>Subscribe</z-button>\",\n                            },\n                            {\n                                \"z-button\": (content_html) =>\n                                    `<button class=\"button white rounded stream_sub_unsub_button sea-green\" type=\"button\" name=\"subscription\">${content_html.join(\n                                        \"\",\n                                    )}</button>`,\n                            },\n                        ),\n                    };\n                }\n\n                return {\n                    title: $t({defaultMessage: \"This stream does not exist or is private.\"}),\n                };\n            }\n            // else fallthrough to default case\n            break;\n        case \"search\": {\n            // You are narrowed to empty search results.\n            return {\n                title: empty_search_narrow_title,\n                search_data: retrieve_search_query_data(),\n            };\n        }\n        case \"pm-with\": {\n            if (!people.is_valid_bulk_emails_for_compose(first_operand.split(\",\"))) {\n                if (!first_operand.includes(\",\")) {\n                    return {\n                        title: $t({defaultMessage: \"This user does not exist!\"}),\n                    };\n                }\n                return {\n                    title: $t({defaultMessage: \"One or more of these users do not exist!\"}),\n                };\n            }\n            const user_ids = people.emails_strings_to_user_ids_array(first_operand);\n            if (\n                page_params.realm_private_message_policy ===\n                    settings_config.private_message_policy_values.disabled.code &&\n                (user_ids.length !== 1 || !people.get_by_user_id(user_ids[0]).is_bot)\n            ) {\n                return {\n                    title: $t({\n                        defaultMessage:\n                            \"You are not allowed to send private messages in this organization.\",\n                    }),\n                };\n            }\n            if (!first_operand.includes(\",\")) {\n                // You have no private messages with this person\n                if (people.is_current_user(first_operand)) {\n                    return {\n                        title: $t({\n                            defaultMessage:\n                                \"You have not sent any private messages to yourself yet!\",\n                        }),\n                        html: $t_html(\n                            {\n                                defaultMessage:\n                                    \"Why not <z-link>start a conversation with yourself</z-link>?\",\n                            },\n                            {\n                                \"z-link\": (content_html) =>\n                                    `<a href=\"#\" class=\"empty_feed_compose_private\">${content_html.join(\n                                        \"\",\n                                    )}</a>`,\n                            },\n                        ),\n                    };\n                }\n                return {\n                    title: $t(\n                        {\n                            defaultMessage: \"You have no private messages with {person} yet.\",\n                        },\n                        {person: people.get_by_user_id(user_ids[0]).full_name},\n                    ),\n                    html: $t_html(\n                        {\n                            defaultMessage: \"Why not <z-link>start the conversation</z-link>?\",\n                        },\n                        {\n                            \"z-link\": (content_html) =>\n                                `<a href=\"#\" class=\"empty_feed_compose_private\">${content_html.join(\n                                    \"\",\n                                )}</a>`,\n                        },\n                    ),\n                };\n            }\n            return {\n                title: $t({defaultMessage: \"You have no private messages with these users yet.\"}),\n                html: $t_html(\n                    {\n                        defaultMessage: \"Why not <z-link>start the conversation</z-link>?\",\n                    },\n                    {\n                        \"z-link\": (content_html) =>\n                            `<a href=\"#\" class=\"empty_feed_compose_private\">${content_html.join(\n                                \"\",\n                            )}</a>`,\n                    },\n                ),\n            };\n        }\n        case \"sender\": {\n            const sender = people.get_by_email(first_operand);\n            if (sender) {\n                return {\n                    title: $t(\n                        {\n                            defaultMessage:\n                                \"You haven't received any messages sent by {person} yet.\",\n                        },\n                        {person: sender.full_name},\n                    ),\n                };\n            }\n            return {\n                title: $t({defaultMessage: \"This user does not exist!\"}),\n            };\n        }\n        case \"group-pm-with\": {\n            const person_in_group_pm = people.get_by_email(first_operand);\n            if (!person_in_group_pm) {\n                return {\n                    title: $t({defaultMessage: \"This user does not exist!\"}),\n                };\n            }\n            if (\n                page_params.realm_private_message_policy ===\n                settings_config.private_message_policy_values.disabled.code\n            ) {\n                return {\n                    title: $t({\n                        defaultMessage:\n                            \"You are not allowed to send group private messages in this organization.\",\n                    }),\n                };\n            }\n            return {\n                title: $t(\n                    {\n                        defaultMessage: \"You have no group private messages with {person} yet.\",\n                    },\n                    {person: person_in_group_pm.full_name},\n                ),\n                html: $t_html(\n                    {\n                        defaultMessage: \"Why not <z-link>start the conversation</z-link>?\",\n                    },\n                    {\n                        \"z-link\": (content_html) =>\n                            `<a href=\"#\" class=\"empty_feed_compose_private\">${content_html}</a>`,\n                    },\n                ),\n            };\n        }\n    }\n    return default_banner;\n}\n\nexport function show_empty_narrow_message() {\n    $(\".empty_feed_notice_main\").empty();\n    const rendered_narrow_banner = narrow_error(pick_empty_narrow_banner());\n    $(\".empty_feed_notice_main\").html(rendered_narrow_banner);\n}\n\nexport function hide_empty_narrow_message() {\n    $(\".empty_feed_notice_main\").empty();\n}\n","import render_empty_feed_notice from \"../templates/empty_feed_notice.hbs\";\n\nexport function narrow_error(narrow_banner_data) {\n    const title = narrow_banner_data.title;\n    const html = narrow_banner_data.html;\n    const search_data = narrow_banner_data.search_data;\n\n    const $empty_feed_notice = render_empty_feed_notice({title, html, search_data});\n    return $empty_feed_notice;\n}\n","import * as blueslip from \"./blueslip\";\nimport {Filter} from \"./filter\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as stream_data from \"./stream_data\";\nimport * as unread from \"./unread\";\n\nlet current_filter;\n\nexport function reset_current_filter() {\n    current_filter = undefined;\n}\n\nexport function set_current_filter(filter) {\n    current_filter = filter;\n}\n\nexport function active() {\n    return current_filter !== undefined;\n}\n\nexport function filter() {\n    // Both, `All messages` and\n    // `Recent topics` have `current_filter=undefined`\n    return current_filter;\n}\n\nexport function operators() {\n    if (current_filter === undefined) {\n        return new Filter(page_params.narrow).operators();\n    }\n    return current_filter.operators();\n}\n\nexport function update_email(user_id, new_email) {\n    if (current_filter !== undefined) {\n        current_filter.update_email(user_id, new_email);\n    }\n}\n\n/* Operators we should send to the server. */\nexport function public_operators() {\n    if (current_filter === undefined) {\n        return undefined;\n    }\n    return current_filter.public_operators();\n}\n\nexport function search_string() {\n    return Filter.unparse(operators());\n}\n\n// Collect operators which appear only once into an object,\n// and discard those which appear more than once.\nfunction collect_single(operators) {\n    const seen = new Map();\n    const result = new Map();\n\n    for (const elem of operators) {\n        const key = elem.operator;\n        if (seen.has(key)) {\n            result.delete(key);\n        } else {\n            result.set(key, elem.operand);\n            seen.set(key, true);\n        }\n    }\n\n    return result;\n}\n\n// Modify default compose parameters (stream etc.) based on\n// the current narrowed view.\n//\n// This logic is here and not in the 'compose' module because\n// it will get more complicated as we add things to the narrow\n// operator language.\nexport function set_compose_defaults() {\n    const opts = {};\n    const single = collect_single(operators());\n\n    // Set the stream, topic, and/or PM recipient if they are\n    // uniquely specified in the narrow view.\n\n    if (single.has(\"stream\")) {\n        opts.stream = stream_data.get_name(single.get(\"stream\"));\n    }\n\n    if (single.has(\"topic\")) {\n        opts.topic = single.get(\"topic\");\n    }\n\n    if (single.has(\"pm-with\")) {\n        const private_message_recipient = single.get(\"pm-with\");\n        if (people.is_valid_bulk_emails_for_compose(private_message_recipient.split(\",\"))) {\n            opts.private_message_recipient = private_message_recipient;\n        }\n    }\n    return opts;\n}\n\nexport function stream() {\n    if (current_filter === undefined) {\n        return undefined;\n    }\n    const stream_operands = current_filter.operands(\"stream\");\n    if (stream_operands.length === 1) {\n        const name = stream_operands[0];\n\n        // Use get_name() to get the most current stream\n        // name (considering renames and capitalization).\n        return stream_data.get_name(name);\n    }\n    return undefined;\n}\n\nexport function stream_sub() {\n    if (current_filter === undefined) {\n        return undefined;\n    }\n    const stream_operands = current_filter.operands(\"stream\");\n    if (stream_operands.length !== 1) {\n        return undefined;\n    }\n\n    const name = stream_operands[0];\n    const sub = stream_data.get_sub_by_name(name);\n\n    return sub;\n}\n\nexport function topic() {\n    if (current_filter === undefined) {\n        return undefined;\n    }\n    const operands = current_filter.operands(\"topic\");\n    if (operands.length === 1) {\n        return operands[0];\n    }\n    return undefined;\n}\n\nexport function pm_ids_string() {\n    // If you are narrowed to a PM conversation\n    // with users 4, 5, and 99, this will return \"4,5,99\"\n    const emails_string = pm_emails_string();\n\n    if (!emails_string) {\n        return undefined;\n    }\n\n    const user_ids_string = people.reply_to_to_user_ids_string(emails_string);\n\n    return user_ids_string;\n}\n\nexport function pm_emails_string() {\n    if (current_filter === undefined) {\n        return undefined;\n    }\n\n    const operands = current_filter.operands(\"pm-with\");\n    if (operands.length !== 1) {\n        return undefined;\n    }\n\n    return operands[0];\n}\n\nexport function get_first_unread_info() {\n    if (current_filter === undefined) {\n        // we don't yet support the all-messages view\n        blueslip.error(\"unexpected call to get_first_unread_info\");\n        return {\n            flavor: \"cannot_compute\",\n        };\n    }\n\n    if (!current_filter.can_apply_locally()) {\n        // For things like search queries, where the server has info\n        // that the client isn't privy to, we need to wait for the\n        // server to give us a definitive list of messages before\n        // deciding where we'll move the selection.\n        return {\n            flavor: \"cannot_compute\",\n        };\n    }\n\n    const unread_ids = _possible_unread_message_ids();\n\n    if (unread_ids === undefined) {\n        // _possible_unread_message_ids() only works for certain narrows\n        return {\n            flavor: \"cannot_compute\",\n        };\n    }\n\n    const msg_id = current_filter.first_valid_id_from(unread_ids);\n\n    if (msg_id === undefined) {\n        return {\n            flavor: \"not_found\",\n        };\n    }\n\n    return {\n        flavor: \"found\",\n        msg_id: unread_ids[0],\n    };\n}\n\nexport function _possible_unread_message_ids() {\n    // This function currently only returns valid results for\n    // certain types of narrows, mostly left sidebar narrows.\n    // For more complicated narrows we may return undefined.\n    //\n    // If we do return a result, it will be a subset of unread\n    // message ids but possibly a superset of unread message ids\n    // that match our filter.\n    if (current_filter === undefined) {\n        return undefined;\n    }\n\n    let sub;\n    let topic_name;\n    let current_filter_pm_string;\n\n    if (current_filter.can_bucket_by(\"stream\", \"topic\")) {\n        sub = stream_sub();\n        if (sub === undefined) {\n            return [];\n        }\n        topic_name = topic();\n        return unread.get_msg_ids_for_topic(sub.stream_id, topic_name);\n    }\n\n    if (current_filter.can_bucket_by(\"stream\")) {\n        sub = stream_sub();\n        if (sub === undefined) {\n            return [];\n        }\n        return unread.get_msg_ids_for_stream(sub.stream_id);\n    }\n\n    if (current_filter.can_bucket_by(\"pm-with\")) {\n        current_filter_pm_string = pm_ids_string();\n        if (current_filter_pm_string === undefined) {\n            return [];\n        }\n        return unread.get_msg_ids_for_user_ids_string(current_filter_pm_string);\n    }\n\n    if (current_filter.can_bucket_by(\"is-private\")) {\n        return unread.get_msg_ids_for_private();\n    }\n\n    if (current_filter.can_bucket_by(\"is-mentioned\")) {\n        return unread.get_msg_ids_for_mentions();\n    }\n\n    if (current_filter.can_bucket_by(\"is-starred\")) {\n        return unread.get_msg_ids_for_starred();\n    }\n\n    if (current_filter.can_bucket_by(\"sender\")) {\n        // TODO: see #9352 to make this more efficient\n        return unread.get_all_msg_ids();\n    }\n\n    if (current_filter.can_apply_locally()) {\n        return unread.get_all_msg_ids();\n    }\n\n    return undefined;\n}\n\n// Are we narrowed to PMs: all PMs or PMs with particular people.\nexport function narrowed_to_pms() {\n    if (current_filter === undefined) {\n        return false;\n    }\n    return current_filter.has_operator(\"pm-with\") || current_filter.has_operand(\"is\", \"private\");\n}\n\nexport function narrowed_by_pm_reply() {\n    if (current_filter === undefined) {\n        return false;\n    }\n    const operators = current_filter.operators();\n    return operators.length === 1 && current_filter.has_operator(\"pm-with\");\n}\n\nexport function narrowed_by_topic_reply() {\n    if (current_filter === undefined) {\n        return false;\n    }\n    const operators = current_filter.operators();\n    return (\n        operators.length === 2 &&\n        current_filter.operands(\"stream\").length === 1 &&\n        current_filter.operands(\"topic\").length === 1\n    );\n}\n\n// We auto-reply under certain conditions, namely when you're narrowed\n// to a PM (or huddle), and when you're narrowed to some stream/topic pair\nexport function narrowed_by_reply() {\n    return narrowed_by_pm_reply() || narrowed_by_topic_reply();\n}\n\nexport function narrowed_by_stream_reply() {\n    if (current_filter === undefined) {\n        return false;\n    }\n    const operators = current_filter.operators();\n    return operators.length === 1 && current_filter.operands(\"stream\").length === 1;\n}\n\nexport function narrowed_to_topic() {\n    if (current_filter === undefined) {\n        return false;\n    }\n    return current_filter.has_operator(\"stream\") && current_filter.has_operator(\"topic\");\n}\n\nexport function narrowed_to_search() {\n    return current_filter !== undefined && current_filter.is_search();\n}\n\nexport function narrowed_to_starred() {\n    if (current_filter === undefined) {\n        return false;\n    }\n    return current_filter.has_operand(\"is\", \"starred\");\n}\n\nexport function excludes_muted_topics() {\n    return (\n        !narrowed_to_topic() &&\n        !narrowed_to_search() &&\n        !narrowed_to_pms() &&\n        !narrowed_to_starred()\n    );\n}\n\nexport function is_for_stream_id(stream_id) {\n    // This is not perfect, since we still track narrows by\n    // name, not id, but at least the interface is good going\n    // forward.\n    const narrow_sub = stream_sub();\n\n    if (narrow_sub === undefined) {\n        return false;\n    }\n\n    return stream_id === narrow_sub.stream_id;\n}\n","import {addDays} from \"date-fns\";\nimport $ from \"jquery\";\n\nimport render_bankruptcy_alert_content from \"../templates/navbar_alerts/bankruptcy.hbs\";\nimport render_configure_email_alert_content from \"../templates/navbar_alerts/configure_outgoing_email.hbs\";\nimport render_demo_organization_deadline_content from \"../templates/navbar_alerts/demo_organization_deadline.hbs\";\nimport render_desktop_notifications_alert_content from \"../templates/navbar_alerts/desktop_notifications.hbs\";\nimport render_insecure_desktop_app_alert_content from \"../templates/navbar_alerts/insecure_desktop_app.hbs\";\nimport render_navbar_alert_wrapper from \"../templates/navbar_alerts/navbar_alert_wrapper.hbs\";\nimport render_profile_incomplete_alert_content from \"../templates/navbar_alerts/profile_incomplete.hbs\";\nimport render_server_needs_upgrade_alert_content from \"../templates/navbar_alerts/server_needs_upgrade.hbs\";\n\nimport * as compose_ui from \"./compose_ui\";\nimport * as keydown_util from \"./keydown_util\";\nimport {localstorage} from \"./localstorage\";\nimport * as notifications from \"./notifications\";\nimport {page_params} from \"./page_params\";\nimport * as unread from \"./unread\";\nimport * as unread_ops from \"./unread_ops\";\nimport * as unread_ui from \"./unread_ui\";\nimport * as util from \"./util\";\n\n/* This is called by resize.js, and thus indirectly when we trigger\n * resize events in the logic below. */\nexport function resize_app() {\n    const navbar_alerts_wrapper_height = $(\"#navbar_alerts_wrapper\").height();\n    $(\"body > .app\").height(\"calc(100% - \" + navbar_alerts_wrapper_height + \"px)\");\n    $(\".recent_topics_container\").height(\"calc(100vh - \" + navbar_alerts_wrapper_height + \"px)\");\n\n    // the floating recipient bar is usually positioned right below\n    // the `.header` element (including padding).\n    const frb_top =\n        navbar_alerts_wrapper_height +\n        $(\".header\").height() +\n        Number.parseInt($(\".header\").css(\"paddingBottom\"), 10);\n    $(\"#floating_recipient_bar\").css(\"top\", frb_top + \"px\");\n\n    // If the compose-box is in expanded state,\n    // reset its height as well.\n    if (compose_ui.is_full_size()) {\n        compose_ui.set_compose_box_top(true);\n    }\n}\n\nconst show_step = function ($process, step) {\n    $process\n        .find(\"[data-step]\")\n        .hide()\n        .filter(\"[data-step=\" + step + \"]\")\n        .show();\n};\n\nconst get_step = function ($process) {\n    return $process.find(\"[data-step]:visible\").data(\"step\");\n};\n\nexport function should_show_notifications(ls) {\n    // if the user said to never show banner on this computer again, it will\n    // be stored as `true` so we want to negate that.\n    if (localstorage.supported() && ls.get(\"dontAskForNotifications\") === true) {\n        return false;\n    }\n\n    return (\n        // Spectators cannot receive desktop notifications, so never\n        // request permissions to send them.\n        !page_params.is_spectator &&\n        // notifications *basically* don't work on any mobile platforms, so don't\n        // event show the banners. This prevents trying to access things that\n        // don't exist like `Notification.permission`.\n        !util.is_mobile() &&\n        // if permission has not been granted yet.\n        !notifications.granted_desktop_notifications_permission() &&\n        // if permission is allowed to be requested (e.g. not in \"denied\" state).\n        notifications.permission_state() !== \"denied\"\n    );\n}\n\nexport function should_show_server_upgrade_notification(ls) {\n    // We do not show the server upgrade nag for a week after the user\n    // clicked \"dismiss\".\n    if (!localstorage.supported() || ls.get(\"lastUpgradeNagDismissalTime\") === undefined) {\n        return true;\n    }\n\n    const last_notification_dismissal_time = ls.get(\"lastUpgradeNagDismissalTime\");\n\n    const upgrade_nag_dismissal_duration = addDays(new Date(last_notification_dismissal_time), 7);\n\n    // show the notification only if the time duration is completed.\n    return Date.now() > upgrade_nag_dismissal_duration;\n}\n\nexport function dismiss_upgrade_nag(ls) {\n    $(\".alert[data-process='server-needs-upgrade'\").hide();\n    if (localstorage.supported()) {\n        ls.set(\"lastUpgradeNagDismissalTime\", Date.now());\n    }\n}\n\nexport function check_profile_incomplete() {\n    if (!page_params.is_admin) {\n        return false;\n    }\n\n    // Eventually, we might also check page_params.realm_icon_source,\n    // but it feels too aggressive to ask users to do change that\n    // since their organization might not have a logo yet.\n    if (\n        page_params.realm_description === \"\" ||\n        /^Organization imported from [A-Za-z]+[!.]$/.test(page_params.realm_description)\n    ) {\n        return true;\n    }\n    return false;\n}\n\nexport function show_profile_incomplete(is_profile_incomplete) {\n    if (is_profile_incomplete) {\n        // Note that this will be a noop unless we'd already displayed\n        // the notice in this session.  This seems OK, given that\n        // this is meant to be a one-time task for administrators.\n        $(\"[data-process='profile-incomplete']\").show();\n    } else {\n        $(\"[data-process='profile-incomplete']\").hide();\n    }\n}\n\nexport function get_demo_organization_deadline_days_remaining() {\n    const now = new Date(Date.now());\n    const deadline = new Date(page_params.demo_organization_scheduled_deletion_date * 1000);\n    const day = 24 * 60 * 60 * 1000; // hours * minutes * seconds * milliseconds\n    const days_remaining = Math.round(Math.abs(deadline - now) / day);\n    return days_remaining;\n}\n\nexport function initialize() {\n    const ls = localstorage();\n\n    if (page_params.demo_organization_scheduled_deletion_date) {\n        const days_remaining = get_demo_organization_deadline_days_remaining();\n        open({\n            data_process: \"demo-organization-deadline\",\n            custom_class: days_remaining <= 7 ? \"red\" : \"\",\n            rendered_alert_content_html: render_demo_organization_deadline_content({\n                days_remaining,\n            }),\n        });\n    } else if (page_params.insecure_desktop_app) {\n        open({\n            data_process: \"insecure-desktop-app\",\n            custom_class: \"red\",\n            rendered_alert_content_html: render_insecure_desktop_app_alert_content(),\n        });\n    } else if (page_params.server_needs_upgrade) {\n        if (should_show_server_upgrade_notification(ls)) {\n            open({\n                data_process: \"server-needs-upgrade\",\n                custom_class: \"red\",\n                rendered_alert_content_html: render_server_needs_upgrade_alert_content(),\n            });\n        }\n    } else if (page_params.warn_no_email === true && page_params.is_admin) {\n        // if email has not been set up and the user is the admin,\n        // display a warning to tell them to set up an email server.\n        open({\n            data_process: \"email-server\",\n            custom_class: \"red\",\n            rendered_alert_content_html: render_configure_email_alert_content(),\n        });\n    } else if (should_show_notifications(ls)) {\n        open({\n            data_process: \"notifications\",\n            rendered_alert_content_html: render_desktop_notifications_alert_content(),\n        });\n    } else if (unread_ui.should_display_bankruptcy_banner()) {\n        const unread_msgs_count = unread.get_unread_message_count();\n        open({\n            data_process: \"bankruptcy\",\n            custom_class: \"bankruptcy\",\n            rendered_alert_content_html: render_bankruptcy_alert_content({unread_msgs_count}),\n        });\n    } else if (check_profile_incomplete()) {\n        open({\n            data_process: \"profile-incomplete\",\n            rendered_alert_content_html: render_profile_incomplete_alert_content(),\n        });\n    }\n\n    // Configure click handlers.\n    $(\".request-desktop-notifications\").on(\"click\", function (e) {\n        e.preventDefault();\n        $(this).closest(\".alert\").hide();\n        notifications.request_desktop_notifications_permission();\n        $(window).trigger(\"resize\");\n    });\n\n    $(\".reject-notifications\").on(\"click\", function () {\n        $(this).closest(\".alert\").hide();\n        ls.set(\"dontAskForNotifications\", true);\n        $(window).trigger(\"resize\");\n    });\n\n    $(\".hide-demo-org-notice\").on(\"click\", function () {\n        $(this).closest(\".alert\").hide();\n        $(window).trigger(\"resize\");\n    });\n\n    $(\".accept-bankruptcy\").on(\"click\", function (e) {\n        e.preventDefault();\n        const $process = $(this).closest(\"[data-process]\");\n        show_step($process, 2);\n        setTimeout(unread_ops.mark_all_as_read, 1000);\n        $(window).trigger(\"resize\");\n    });\n\n    $(\".dismiss-upgrade-nag\").on(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        dismiss_upgrade_nag(ls);\n    });\n\n    $(\"#navbar_alerts_wrapper\").on(\"click\", \".alert .close, .alert .exit\", function (e) {\n        e.stopPropagation();\n        const $process = $(e.target).closest(\"[data-process]\");\n        if (get_step($process) === 1 && $process.data(\"process\") === \"notifications\") {\n            show_step($process, 2);\n        } else {\n            $(this).closest(\".alert\").hide();\n        }\n        $(window).trigger(\"resize\");\n    });\n\n    // Treat Enter with links in the navbar alerts UI focused like a click.,\n    $(\"#navbar_alerts_wrapper\").on(\"keyup\", \".alert-link[role=button]\", function (e) {\n        e.stopPropagation();\n        if (keydown_util.is_enter_event(e)) {\n            $(this).trigger(\"click\");\n        }\n    });\n}\n\nexport function open(args) {\n    const rendered_alert_wrapper_html = render_navbar_alert_wrapper(args);\n\n    // Note: We only support one alert being rendered at a time; as a\n    // result, we just replace the alert area in the DOM with the\n    // indicated alert. We do this to avoid bad UX, as it'd look weird\n    // to have more than one alert visible at a time.\n    $(\"#navbar_alerts_wrapper\").html(rendered_alert_wrapper_html);\n    $(window).trigger(\"resize\");\n}\n","import * as message_lists from \"./message_lists\";\nimport * as message_viewport from \"./message_viewport\";\nimport * as rows from \"./rows\";\nimport * as unread_ops from \"./unread_ops\";\n\nfunction go_to_row(msg_id) {\n    message_lists.current.select_id(msg_id, {then_scroll: true, from_scroll: true});\n}\n\nexport function up() {\n    message_viewport.set_last_movement_direction(-1);\n    const msg_id = message_lists.current.prev();\n    if (msg_id === undefined) {\n        return;\n    }\n    go_to_row(msg_id);\n}\n\nexport function down(with_centering) {\n    message_viewport.set_last_movement_direction(1);\n\n    if (message_lists.current.is_at_end()) {\n        if (with_centering) {\n            // At the last message, scroll to the bottom so we have\n            // lots of nice whitespace for new messages coming in.\n            const $current_msg_table = rows.get_table(message_lists.current.table_name);\n            message_viewport.scrollTop(\n                $current_msg_table.safeOuterHeight(true) - message_viewport.height() * 0.1,\n            );\n            unread_ops.process_scrolled_to_bottom();\n        }\n\n        return;\n    }\n\n    // Normal path starts here.\n    const msg_id = message_lists.current.next();\n    if (msg_id === undefined) {\n        return;\n    }\n    go_to_row(msg_id);\n}\n\nexport function to_home() {\n    message_viewport.set_last_movement_direction(-1);\n    const first_id = message_lists.current.first().id;\n    message_lists.current.select_id(first_id, {then_scroll: true, from_scroll: true});\n}\n\nexport function to_end() {\n    const next_id = message_lists.current.last().id;\n    message_viewport.set_last_movement_direction(1);\n    message_lists.current.select_id(next_id, {then_scroll: true, from_scroll: true});\n    unread_ops.process_scrolled_to_bottom();\n}\n\nfunction amount_to_paginate() {\n    // Some day we might have separate versions of this function\n    // for Page Up vs. Page Down, but for now it's the same\n    // strategy in either direction.\n    const info = message_viewport.message_viewport_info();\n    const page_size = info.visible_height;\n\n    // We don't want to page up a full page, because Zulip users\n    // are especially worried about missing messages, so we want\n    // a little bit of the old page to stay on the screen.  The\n    // value chosen here is roughly 2 or 3 lines of text, but there\n    // is nothing sacred about it, and somebody more anal than me\n    // might wish to tie this to the size of some particular DOM\n    // element.\n    const overlap_amount = 55;\n\n    let delta = page_size - overlap_amount;\n\n    // If the user has shrunk their browser a whole lot, pagination\n    // is not going to be very pleasant, but we can at least\n    // ensure they go in the right direction.\n    if (delta < 1) {\n        delta = 1;\n    }\n\n    return delta;\n}\n\nexport function page_up_the_right_amount() {\n    // This function's job is to scroll up the right amount,\n    // after the user hits Page Up.  We do this ourselves\n    // because we can't rely on the browser to account for certain\n    // page elements, like the compose box, that sit in fixed\n    // positions above the message pane.  For other scrolling\n    // related adjustments, try to make those happen in the\n    // scroll handlers, not here.\n    const delta = amount_to_paginate();\n    message_viewport.scrollTop(message_viewport.scrollTop() - delta);\n}\n\nexport function page_down_the_right_amount() {\n    // see also: page_up_the_right_amount\n    const delta = amount_to_paginate();\n    message_viewport.scrollTop(message_viewport.scrollTop() + delta);\n}\n\nexport function page_up() {\n    if (message_viewport.at_top() && !message_lists.current.empty()) {\n        message_lists.current.select_id(message_lists.current.first().id, {then_scroll: false});\n    } else {\n        page_up_the_right_amount();\n    }\n}\n\nexport function page_down() {\n    if (message_viewport.at_bottom() && !message_lists.current.empty()) {\n        message_lists.current.select_id(message_lists.current.last().id, {then_scroll: false});\n        unread_ops.process_scrolled_to_bottom();\n    } else {\n        page_down_the_right_amount();\n    }\n}\n\nexport function scroll_to_selected() {\n    const $selected_row = message_lists.current.selected_row();\n    if ($selected_row && $selected_row.length !== 0) {\n        message_viewport.recenter_view($selected_row);\n    }\n}\n\nlet scroll_to_selected_planned = false;\n\nexport function plan_scroll_to_selected() {\n    scroll_to_selected_planned = true;\n}\n\nexport function maybe_scroll_to_selected() {\n    // If we have made a plan to scroll to the selected message but\n    // deferred doing so, do so here.\n    if (scroll_to_selected_planned) {\n        scroll_to_selected();\n        scroll_to_selected_planned = false;\n    }\n}\n","import $ from \"jquery\";\n\nimport render_message_sent_banner from \"../templates/compose_banner/message_sent_banner.hbs\";\n\nimport * as alert_words from \"./alert_words\";\nimport * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport * as favicon from \"./favicon\";\nimport * as hash_util from \"./hash_util\";\nimport {$t} from \"./i18n\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_store from \"./message_store\";\nimport * as narrow from \"./narrow\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as navigate from \"./navigate\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport {realm_user_settings_defaults} from \"./realm_user_settings_defaults\";\nimport * as settings_config from \"./settings_config\";\nimport * as spoilers from \"./spoilers\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_ui_updates from \"./stream_ui_updates\";\nimport * as ui from \"./ui\";\nimport * as unread from \"./unread\";\nimport * as unread_ops from \"./unread_ops\";\nimport {user_settings} from \"./user_settings\";\nimport * as user_topics from \"./user_topics\";\n\nconst notice_memory = new Map();\n\n// When you start Zulip, window_focused should be true, but it might not be the\n// case after a server-initiated reload.\nlet window_focused = document.hasFocus && document.hasFocus();\n\nlet NotificationAPI;\n\nexport function set_notification_api(n) {\n    NotificationAPI = n;\n}\n\nif (window.electron_bridge && window.electron_bridge.new_notification) {\n    class ElectronBridgeNotification extends EventTarget {\n        constructor(title, options) {\n            super();\n            Object.assign(\n                this,\n                window.electron_bridge.new_notification(title, options, (type, eventInit) =>\n                    this.dispatchEvent(new Event(type, eventInit)),\n                ),\n            );\n        }\n\n        static get permission() {\n            return Notification.permission;\n        }\n\n        static async requestPermission(callback) {\n            if (callback) {\n                callback(await Promise.resolve(Notification.permission));\n            }\n            return Notification.permission;\n        }\n    }\n\n    NotificationAPI = ElectronBridgeNotification;\n} else if (window.Notification) {\n    NotificationAPI = window.Notification;\n}\n\nexport function get_notifications() {\n    return notice_memory;\n}\n\nexport function initialize() {\n    $(window)\n        .on(\"focus\", () => {\n            window_focused = true;\n\n            for (const notice_mem_entry of notice_memory.values()) {\n                notice_mem_entry.obj.close();\n            }\n            notice_memory.clear();\n\n            // Update many places on the DOM to reflect unread\n            // counts.\n            unread_ops.process_visible();\n        })\n        .on(\"blur\", () => {\n            window_focused = false;\n        });\n\n    update_notification_sound_source($(\"#user-notification-sound-audio\"), user_settings);\n    update_notification_sound_source(\n        $(\"#realm-default-notification-sound-audio\"),\n        realm_user_settings_defaults,\n    );\n}\n\nexport function update_notification_sound_source(container_elem, settings_object) {\n    const notification_sound = settings_object.notification_sound;\n    const audio_file_without_extension = \"/static/audio/notification_sounds/\" + notification_sound;\n    container_elem\n        .find(\".notification-sound-source-ogg\")\n        .attr(\"src\", `${audio_file_without_extension}.ogg`);\n    container_elem\n        .find(\".notification-sound-source-mp3\")\n        .attr(\"src\", `${audio_file_without_extension}.mp3`);\n\n    if (notification_sound !== \"none\") {\n        // Load it so that it is ready to be played; without this the old sound\n        // is played.\n        container_elem[0].load();\n    }\n}\n\nexport function permission_state() {\n    if (NotificationAPI === undefined) {\n        // act like notifications are blocked if they do not have access to\n        // the notification API.\n        return \"denied\";\n    }\n    return NotificationAPI.permission;\n}\n\nlet unread_count = 0;\nlet pm_count = 0;\n\nexport function redraw_title() {\n    // Update window title to reflect unread messages in current view\n    const new_title =\n        (unread_count ? \"(\" + unread_count + \") \" : \"\") +\n        narrow.narrow_title +\n        \" - \" +\n        page_params.realm_name +\n        \" - \" +\n        \"Zulip\";\n\n    document.title = new_title;\n}\n\nexport function update_unread_counts(new_unread_count, new_pm_count) {\n    if (new_unread_count === unread_count && new_pm_count === pm_count) {\n        return;\n    }\n\n    unread_count = new_unread_count;\n    pm_count = new_pm_count;\n\n    // Indicate the message count in the favicon\n    favicon.update_favicon(unread_count, pm_count);\n\n    // Notify the current desktop app's UI about the new unread count.\n    if (window.electron_bridge !== undefined) {\n        window.electron_bridge.send_event(\"total_unread_count\", unread_count);\n    }\n\n    // TODO: Add a `window.electron_bridge.updatePMCount(new_pm_count);` call?\n\n    redraw_title();\n}\n\nexport function is_window_focused() {\n    return window_focused;\n}\n\nexport function notify_above_composebox(\n    note,\n    link_class,\n    above_composebox_narrow_url,\n    link_msg_id,\n    link_text,\n) {\n    const $notification = $(\n        render_message_sent_banner({\n            note,\n            link_class,\n            above_composebox_narrow_url,\n            link_msg_id,\n            link_text,\n        }),\n    );\n    clear_compose_notifications();\n    $(\"#out-of-view-notification\").append($notification);\n    $(\"#out-of-view-notification\").show();\n}\n\nif (window.electron_bridge !== undefined) {\n    // The code below is for sending a message received from notification reply which\n    // is often referred to as inline reply feature. This is done so desktop app doesn't\n    // have to depend on channel.post for setting crsf_token and narrow.by_topic\n    // to narrow to the message being sent.\n    if (window.electron_bridge.set_send_notification_reply_message_supported !== undefined) {\n        window.electron_bridge.set_send_notification_reply_message_supported(true);\n    }\n    window.electron_bridge.on_event(\"send_notification_reply_message\", (message_id, reply) => {\n        const message = message_store.get(message_id);\n        const data = {\n            type: message.type,\n            content: reply,\n            to: message.type === \"private\" ? message.reply_to : message.stream,\n            topic: message.topic,\n        };\n\n        function success() {\n            if (message.type === \"stream\") {\n                narrow.by_topic(message_id, {trigger: \"desktop_notification_reply\"});\n            } else {\n                narrow.by_recipient(message_id, {trigger: \"desktop_notification_reply\"});\n            }\n        }\n\n        function error(error) {\n            window.electron_bridge.send_event(\"send_notification_reply_message_failed\", {\n                data,\n                message_id,\n                error,\n            });\n        }\n\n        channel.post({\n            url: \"/json/messages\",\n            data,\n            success,\n            error,\n        });\n    });\n}\n\nexport function process_notification(notification) {\n    let i;\n    let notification_object;\n    let key;\n    let content;\n    let other_recipients;\n    const message = notification.message;\n    let title = message.sender_full_name;\n    let msg_count = 1;\n    let notification_source;\n    // Convert the content to plain text, replacing emoji with their alt text\n    const $content = $(\"<div>\").html(message.content);\n    ui.replace_emoji_with_text($content);\n    spoilers.hide_spoilers_in_notification($content);\n    content = $content.text();\n\n    const topic = message.topic;\n\n    if (message.is_me_message) {\n        content = message.sender_full_name + content.slice(3);\n    }\n\n    if (message.type === \"private\" || message.type === \"test-notification\") {\n        if (\n            user_settings.pm_content_in_desktop_notifications !== undefined &&\n            !user_settings.pm_content_in_desktop_notifications\n        ) {\n            content = \"New private message from \" + message.sender_full_name;\n        }\n        key = message.display_reply_to;\n        // Remove the sender from the list of other recipients\n        other_recipients = `, ${message.display_reply_to}, `\n            .replace(`, ${message.sender_full_name}, `, \", \")\n            .slice(\", \".length, -\", \".length);\n        notification_source = \"pm\";\n    } else {\n        key = message.sender_full_name + \" to \" + message.stream + \" > \" + topic;\n        if (message.mentioned) {\n            notification_source = \"mention\";\n        } else if (message.alerted) {\n            notification_source = \"alert\";\n        } else {\n            notification_source = \"stream\";\n        }\n    }\n    blueslip.debug(\"Desktop notification from source \" + notification_source);\n\n    if (content.length > 150) {\n        // Truncate content at a word boundary\n        for (i = 150; i > 0; i -= 1) {\n            if (content[i] === \" \") {\n                break;\n            }\n        }\n        content = content.slice(0, i);\n        content += \" [...]\";\n    }\n\n    if (notice_memory.has(key)) {\n        msg_count = notice_memory.get(key).msg_count + 1;\n        title = msg_count + \" messages from \" + title;\n        notification_object = notice_memory.get(key).obj;\n        notification_object.close();\n    }\n\n    if (message.type === \"private\") {\n        if (message.display_recipient.length > 2) {\n            // If the message has too many recipients to list them all...\n            if (content.length + title.length + other_recipients.length > 230) {\n                // Then count how many people are in the conversation and summarize\n                // by saying the conversation is with \"you and [number] other people\"\n                other_recipients = other_recipients.replace(/[^,]/g, \"\").length + \" other people\";\n            }\n\n            title += \" (to you and \" + other_recipients + \")\";\n        } else {\n            title += \" (to you)\";\n        }\n    }\n\n    if (message.type === \"stream\") {\n        title += \" (to \" + message.stream + \" > \" + topic + \")\";\n    }\n\n    if (notification.desktop_notify) {\n        const icon_url = people.small_avatar_url(message);\n        notification_object = new NotificationAPI(title, {\n            icon: icon_url,\n            body: content,\n            tag: message.id,\n        });\n        notice_memory.set(key, {\n            obj: notification_object,\n            msg_count,\n            message_id: message.id,\n        });\n\n        if (typeof notification_object.addEventListener === \"function\") {\n            // Sadly, some third-party Electron apps like Franz/Ferdi\n            // misimplement the Notification API not inheriting from\n            // EventTarget.  This results in addEventListener being\n            // unavailable for them.\n            notification_object.addEventListener(\"click\", () => {\n                notification_object.close();\n                if (message.type !== \"test-notification\") {\n                    narrow.by_topic(message.id, {trigger: \"notification\"});\n                }\n                window.focus();\n            });\n            notification_object.addEventListener(\"close\", () => {\n                notice_memory.delete(key);\n            });\n        }\n    }\n}\n\nexport function close_notification(message) {\n    for (const [key, notice_mem_entry] of notice_memory) {\n        if (notice_mem_entry.message_id === message.id) {\n            notice_mem_entry.obj.close();\n            notice_memory.delete(key);\n        }\n    }\n}\n\nexport function message_is_notifiable(message) {\n    // Independent of the user's notification settings, are there\n    // properties of the message that unconditionally mean we\n    // shouldn't notify about it.\n\n    if (message.sent_by_me) {\n        return false;\n    }\n\n    // If a message is edited multiple times, we want to err on the side of\n    // not spamming notifications.\n    if (message.notification_sent) {\n        return false;\n    }\n\n    // @-<username> mentions take precedence over muted-ness. Note\n    // that @all mentions are still suppressed by muting.\n    if (message.mentioned_me_directly) {\n        return true;\n    }\n\n    // Messages to muted streams that don't mention us specifically\n    // are not notifiable.\n    if (message.type === \"stream\" && stream_data.is_muted(message.stream_id)) {\n        return false;\n    }\n\n    if (message.type === \"stream\" && user_topics.is_topic_muted(message.stream_id, message.topic)) {\n        return false;\n    }\n\n    // Everything else is on the table; next filter based on notification\n    // settings.\n    return true;\n}\n\nexport function should_send_desktop_notification(message) {\n    // Always notify for testing notifications.\n    if (message.type === \"test-notification\") {\n        return true;\n    }\n\n    // For streams, send if desktop notifications are enabled for all\n    // message on this stream.\n    if (\n        message.type === \"stream\" &&\n        stream_data.receives_notifications(message.stream_id, \"desktop_notifications\")\n    ) {\n        return true;\n    }\n\n    // enable_desktop_notifications determines whether we pop up a\n    // notification for PMs/mentions/alerts\n    if (!user_settings.enable_desktop_notifications) {\n        return false;\n    }\n\n    // And then we need to check if the message is a PM, mention,\n    // wildcard mention with wildcard_mentions_notify, or alert.\n    if (message.type === \"private\") {\n        return true;\n    }\n\n    if (alert_words.notifies(message)) {\n        return true;\n    }\n\n    if (message.mentioned_me_directly) {\n        return true;\n    }\n\n    // wildcard mentions\n    if (\n        message.mentioned &&\n        stream_data.receives_notifications(message.stream_id, \"wildcard_mentions_notify\")\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function should_send_audible_notification(message) {\n    // If `None` is selected as the notification sound, never send\n    // audible notifications regardless of other configuration.\n    if (user_settings.notification_sound === \"none\") {\n        return false;\n    }\n\n    // For streams, ding if sounds are enabled for all messages on\n    // this stream.\n    if (\n        message.type === \"stream\" &&\n        stream_data.receives_notifications(message.stream_id, \"audible_notifications\")\n    ) {\n        return true;\n    }\n\n    // enable_sounds determines whether we ding for PMs/mentions/alerts\n    if (!user_settings.enable_sounds) {\n        return false;\n    }\n\n    // And then we need to check if the message is a PM, mention,\n    // wildcard mention with wildcard_mentions_notify, or alert.\n    if (message.type === \"private\" || message.type === \"test-notification\") {\n        return true;\n    }\n\n    if (alert_words.notifies(message)) {\n        return true;\n    }\n\n    if (message.mentioned_me_directly) {\n        return true;\n    }\n\n    // wildcard mentions\n    if (\n        message.mentioned &&\n        stream_data.receives_notifications(message.stream_id, \"wildcard_mentions_notify\")\n    ) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function granted_desktop_notifications_permission() {\n    return NotificationAPI && NotificationAPI.permission === \"granted\";\n}\n\nexport function request_desktop_notifications_permission() {\n    if (NotificationAPI) {\n        NotificationAPI.requestPermission();\n    }\n}\n\nexport function received_messages(messages) {\n    for (const message of messages) {\n        if (!message_is_notifiable(message)) {\n            continue;\n        }\n        if (!unread.message_unread(message)) {\n            // The message is already read; Zulip is currently in focus.\n            continue;\n        }\n\n        message.notification_sent = true;\n\n        if (should_send_desktop_notification(message)) {\n            process_notification({\n                message,\n                desktop_notify: granted_desktop_notifications_permission(),\n            });\n        }\n        if (should_send_audible_notification(message)) {\n            $(\"#user-notification-sound-audio\")[0].play();\n        }\n    }\n}\n\nexport function send_test_notification(content) {\n    received_messages([\n        {\n            id: Math.random(),\n            type: \"test-notification\",\n            sender_email: \"notification-bot@zulip.com\",\n            sender_full_name: \"Notification Bot\",\n            display_reply_to: \"Notification Bot\",\n            content,\n            unread: true,\n        },\n    ]);\n}\n\n// Note that this returns values that are not HTML-escaped, for use in\n// Handlebars templates that will do further escaping.\nfunction get_message_header(message) {\n    if (message.type === \"stream\") {\n        return `#${message.stream} > ${message.topic}`;\n    }\n    if (message.display_recipient.length > 2) {\n        return $t(\n            {defaultMessage: \"group private messages with {recipient}\"},\n            {recipient: message.display_reply_to},\n        );\n    }\n    if (people.is_current_user(message.reply_to)) {\n        return $t({defaultMessage: \"private messages with yourself\"});\n    }\n    return $t(\n        {defaultMessage: \"private messages with {recipient}\"},\n        {recipient: message.display_reply_to},\n    );\n}\n\nexport function get_local_notify_mix_reason(message) {\n    const $row = message_lists.current.get_row(message.id);\n    if ($row.length > 0) {\n        // If our message is in the current message list, we do\n        // not have a mix, so we are happy.\n        return undefined;\n    }\n\n    if (message.type === \"stream\" && user_topics.is_topic_muted(message.stream_id, message.topic)) {\n        return $t({defaultMessage: \"Sent! Your message was sent to a topic you have muted.\"});\n    }\n\n    if (message.type === \"stream\" && stream_data.is_muted(message.stream_id)) {\n        return $t({defaultMessage: \"Sent! Your message was sent to a stream you have muted.\"});\n    }\n\n    // offscreen because it is outside narrow\n    // we can only look for these on non-search (can_apply_locally) messages\n    // see also: exports.notify_messages_outside_current_search\n    const current_filter = narrow_state.filter();\n    if (\n        current_filter &&\n        current_filter.can_apply_locally() &&\n        !current_filter.predicate()(message)\n    ) {\n        return $t({defaultMessage: \"Sent! Your message is outside your current narrow.\"});\n    }\n\n    return undefined;\n}\n\nexport function notify_local_mixes(messages, need_user_to_scroll) {\n    /*\n        This code should only be called when we are displaying\n        messages sent by current client. It notifies users that\n        their messages aren't actually in the view that they\n        composed to.\n\n        This code is called after we insert messages into our\n        message list widgets. All of the conditions here are\n        checkable locally, so we may want to execute this code\n        earlier in the codepath at some point and possibly punt\n        on local rendering.\n\n        Possible cleanup: Arguably, we should call this function\n        unconditionally and just check if message.local_id is in\n        sent_messages.messages here.\n    */\n\n    for (const message of messages) {\n        if (!people.is_my_user_id(message.sender_id)) {\n            // This can happen if the client is offline for a while\n            // around the time this client sends a message; see the\n            // caller of message_events.insert_new_messages.\n            blueslip.info(\n                \"Slightly unexpected: A message not sent by us batches with those that were.\",\n            );\n            continue;\n        }\n\n        let reason = get_local_notify_mix_reason(message);\n\n        const above_composebox_narrow_url = get_above_composebox_narrow_url(message);\n\n        if (!reason) {\n            if (need_user_to_scroll) {\n                reason = $t({defaultMessage: \"Sent! Scroll down to view your message.\"});\n                notify_above_composebox(reason, \"\", above_composebox_narrow_url, null, \"\");\n                setTimeout(() => {\n                    $(\"#out-of-view-notification\").hide();\n                }, 3000);\n            }\n\n            // This is the HAPPY PATH--for most messages we do nothing\n            // other than maybe sending the above message.\n            continue;\n        }\n\n        const link_msg_id = message.id;\n        const link_class = \"compose_notification_narrow_by_topic\";\n        const link_text = $t(\n            {defaultMessage: \"Narrow to {message_recipient}\"},\n            {message_recipient: get_message_header(message)},\n        );\n\n        notify_above_composebox(\n            reason,\n            link_class,\n            above_composebox_narrow_url,\n            link_msg_id,\n            link_text,\n        );\n    }\n}\n\nfunction get_above_composebox_narrow_url(message) {\n    let above_composebox_narrow_url;\n    if (message.type === \"stream\") {\n        above_composebox_narrow_url = hash_util.by_stream_topic_url(\n            message.stream_id,\n            message.topic,\n        );\n    } else {\n        above_composebox_narrow_url = message.pm_with_url;\n    }\n    return above_composebox_narrow_url;\n}\n\n// for callback when we have to check with the server if a message should be in\n// the message_lists.current (!can_apply_locally; a.k.a. \"a search\").\nexport function notify_messages_outside_current_search(messages) {\n    for (const message of messages) {\n        if (!people.is_current_user(message.sender_email)) {\n            continue;\n        }\n        const above_composebox_narrow_url = get_above_composebox_narrow_url(message);\n        const link_text = $t(\n            {defaultMessage: \"Narrow to {message_recipient}\"},\n            {message_recipient: get_message_header(message)},\n        );\n        notify_above_composebox(\n            $t({defaultMessage: \"Sent! Your recent message is outside the current search.\"}),\n            \"compose_notification_narrow_by_topic\",\n            above_composebox_narrow_url,\n            message.id,\n            link_text,\n        );\n    }\n}\n\nexport function clear_compose_notifications() {\n    $(\"#out-of-view-notification\").empty();\n    $(\"#out-of-view-notification\").stop(true, true);\n    $(\"#out-of-view-notification\").hide();\n}\n\nexport function reify_message_id(opts) {\n    const old_id = opts.old_id;\n    const new_id = opts.new_id;\n\n    // If a message ID that we're currently storing (as a link) has changed,\n    // update that link as well\n    for (const e of $(\"#out-of-view-notification a\")) {\n        const $elem = $(e);\n        const message_id = $elem.data(\"message-id\");\n\n        if (message_id === old_id) {\n            $elem.data(\"message-id\", new_id);\n        }\n    }\n}\n\nexport function register_click_handlers() {\n    $(\"#out-of-view-notification\").on(\"click\", \".compose_notification_narrow_by_topic\", (e) => {\n        const message_id = $(e.currentTarget).data(\"message-id\");\n        narrow.by_topic(message_id, {trigger: \"compose_notification\"});\n        e.stopPropagation();\n        e.preventDefault();\n    });\n    $(\"#out-of-view-notification\").on(\"click\", \".compose_notification_scroll_to_message\", (e) => {\n        const message_id = $(e.currentTarget).data(\"message-id\");\n        message_lists.current.select_id(message_id);\n        navigate.scroll_to_selected();\n        e.stopPropagation();\n        e.preventDefault();\n    });\n    $(\"#out-of-view-notification\").on(\"click\", \".out-of-view-notification-close\", (e) => {\n        clear_compose_notifications();\n        e.stopPropagation();\n        e.preventDefault();\n    });\n}\n\nexport function handle_global_notification_updates(notification_name, setting) {\n    // Update the global settings checked when determining if we should notify\n    // for a given message. These settings do not affect whether or not a\n    // particular stream should receive notifications.\n    if (settings_config.all_notification_settings.includes(notification_name)) {\n        user_settings[notification_name] = setting;\n    }\n\n    if (settings_config.stream_notification_settings.includes(notification_name)) {\n        stream_ui_updates.update_notification_setting_checkbox(\n            settings_config.specialize_stream_notification_setting[notification_name],\n        );\n    }\n\n    if (notification_name === \"notification_sound\") {\n        // Change the sound source with the new page `notification_sound`.\n        update_notification_sound_source($(\"#user-notification-sound-audio\"), user_settings);\n    }\n}\n","import $ from \"jquery\";\nimport Micromodal from \"micromodal\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as browser_history from \"./browser_history\";\nimport * as popovers from \"./popovers\";\n\nlet $active_overlay;\nlet close_handler;\nlet open_overlay_name;\n\nfunction reset_state() {\n    $active_overlay = undefined;\n    close_handler = undefined;\n    open_overlay_name = undefined;\n}\n\nexport function is_active() {\n    return Boolean(open_overlay_name);\n}\n\nexport function is_modal_open() {\n    return $(\".micromodal\").hasClass(\"modal--open\");\n}\n\nexport function is_overlay_or_modal_open() {\n    return is_active() || is_modal_open();\n}\n\nexport function info_overlay_open() {\n    return open_overlay_name === \"informationalOverlays\";\n}\n\nexport function settings_open() {\n    return open_overlay_name === \"settings\";\n}\n\nexport function streams_open() {\n    return open_overlay_name === \"subscriptions\";\n}\n\nexport function lightbox_open() {\n    return open_overlay_name === \"lightbox\";\n}\n\nexport function drafts_open() {\n    return open_overlay_name === \"drafts\";\n}\n\nexport function active_modal() {\n    if (!is_modal_open()) {\n        blueslip.error(\"Programming error — Called active_modal when there is no modal open\");\n        return undefined;\n    }\n\n    const $micromodal = $(\".micromodal.modal--open\");\n    return `#${CSS.escape($micromodal.attr(\"id\"))}`;\n}\n\nexport function open_overlay(opts) {\n    popovers.hide_all();\n\n    if (!opts.name || !opts.$overlay || !opts.on_close) {\n        blueslip.error(\"Programming error in open_overlay\");\n        return;\n    }\n\n    if ($active_overlay || open_overlay_name || close_handler) {\n        blueslip.error(\n            \"Programming error — trying to open \" +\n                opts.name +\n                \" before closing \" +\n                open_overlay_name,\n        );\n        return;\n    }\n\n    blueslip.debug(\"open overlay: \" + opts.name);\n\n    // Our overlays are kind of crufty...we have an HTML id\n    // attribute for them and then a data-overlay attribute for\n    // them.  Make sure they match.\n    if (opts.$overlay.attr(\"data-overlay\") !== opts.name) {\n        blueslip.error(\"Bad overlay setup for \" + opts.name);\n        return;\n    }\n\n    open_overlay_name = opts.name;\n    $active_overlay = opts.$overlay;\n    opts.$overlay.addClass(\"show\");\n\n    opts.$overlay.attr(\"aria-hidden\", \"false\");\n    $(\".app\").attr(\"aria-hidden\", \"true\");\n    $(\".fixed-app\").attr(\"aria-hidden\", \"true\");\n    $(\".header\").attr(\"aria-hidden\", \"true\");\n\n    close_handler = function () {\n        opts.on_close();\n        reset_state();\n    };\n}\n\n// If conf.autoremove is true, the modal element will be removed from the DOM\n// once the modal is hidden.\n// conf also accepts the following optional properties:\n// on_show: Callback to run when the modal is triggered to show.\n// on_shown: Callback to run when the modal is shown.\n// on_hide: Callback to run when the modal is triggered to hide.\n// on_hidden: Callback to run when the modal is hidden.\nexport function open_modal(selector, conf = {}) {\n    if (selector === undefined) {\n        blueslip.error(\"Undefined selector was passed into open_modal\");\n        return;\n    }\n\n    // Don't accept hash-based selector to enforce modals to have unique ids and\n    // since micromodal doesn't accept hash based selectors.\n    if (selector[0] === \"#\") {\n        blueslip.error(\"hash-based selector passed in to open_modal: \" + selector);\n        return;\n    }\n\n    if (is_modal_open()) {\n        /*\n          Our modal system doesn't directly support opening a modal\n          when one is already open, because the `is_modal_open` CSS\n          class doesn't update until Micromodal has finished its\n          animations, which can take 100ms or more.\n\n          We can likely fix that, but in the meantime, we should\n          handle this situation correctly, by closing the current\n          modal, waiting for it to finish closing, and then attempting\n          to open the current modal again.\n        */\n        if (!conf.recursive_call_count) {\n            conf.recursive_call_count = 1;\n        } else {\n            conf.recursive_call_count += 1;\n        }\n        if (conf.recursive_call_count > 50) {\n            blueslip.error(\"Modal incorrectly is still open: \" + selector);\n            return;\n        }\n\n        close_active_modal();\n        setTimeout(() => {\n            open_modal(selector, conf);\n        }, 10);\n        return;\n    }\n\n    blueslip.debug(\"open modal: \" + selector);\n\n    // Micromodal gets elements using the getElementById DOM function\n    // which doesn't require the hash. We add it manually here.\n    const id_selector = `#${selector}`;\n    const $micromodal = $(id_selector);\n\n    $micromodal.find(\".modal__container\").on(\"animationend\", (event) => {\n        const animation_name = event.originalEvent.animationName;\n        if (animation_name === \"mmfadeIn\") {\n            // Micromodal adds the is-open class before the modal animation\n            // is complete, which isn't really helpful since a modal is open after the\n            // animation is complete. So, we manually add a class after the\n            // animation is complete.\n            $micromodal.addClass(\"modal--open\");\n            $micromodal.removeClass(\"modal--opening\");\n\n            if (conf.on_shown) {\n                conf.on_shown();\n            }\n        } else if (animation_name === \"mmfadeOut\") {\n            // Call the on_hidden callback after the modal finishes hiding.\n\n            $micromodal.removeClass(\"modal--open\");\n            if (conf.autoremove) {\n                $micromodal.remove();\n            }\n            if (conf.on_hidden) {\n                conf.on_hidden();\n            }\n        }\n    });\n\n    $micromodal.find(\".modal__overlay\").on(\"click\", (e) => {\n        /* Micromodal's data-micromodal-close feature doesn't check for\n           range selections; this means dragging a selection of text in an\n           input inside the modal too far will weirdly close the modal.\n           See https://github.com/ghosh/Micromodal/issues/505.\n           Work around this with our own implementation. */\n        if (!$(e.target).is(\".modal__overlay\")) {\n            return;\n        }\n\n        if (document.getSelection().type === \"Range\") {\n            return;\n        }\n        close_modal(selector);\n    });\n\n    Micromodal.show(selector, {\n        disableFocus: true,\n        openClass: \"modal--opening\",\n        onShow: conf?.on_show,\n        onClose: conf?.on_hide,\n    });\n}\n\nexport function close_overlay(name) {\n    popovers.hide_all();\n\n    if (name !== open_overlay_name) {\n        blueslip.error(\"Trying to close \" + name + \" when \" + open_overlay_name + \" is open.\");\n        return;\n    }\n\n    if (name === undefined) {\n        blueslip.error(\"Undefined name was passed into close_overlay\");\n        return;\n    }\n\n    blueslip.debug(\"close overlay: \" + name);\n\n    $active_overlay.removeClass(\"show\");\n\n    $active_overlay.attr(\"aria-hidden\", \"true\");\n    $(\".app\").attr(\"aria-hidden\", \"false\");\n    $(\".fixed-app\").attr(\"aria-hidden\", \"false\");\n    $(\".header\").attr(\"aria-hidden\", \"false\");\n\n    if (!close_handler) {\n        blueslip.error(\"Overlay close handler for \" + name + \" not properly set up.\");\n        return;\n    }\n\n    close_handler();\n}\n\nexport function close_active() {\n    if (!open_overlay_name) {\n        blueslip.warn(\"close_active() called without checking is_active()\");\n        return;\n    }\n\n    close_overlay(open_overlay_name);\n}\n\n// `conf` is an object with the following optional properties:\n// * on_hidden: Callback to run when the modal finishes hiding.\nexport function close_modal(selector, conf = {}) {\n    if (selector === undefined) {\n        blueslip.error(\"Undefined selector was passed into close_modal\");\n        return;\n    }\n\n    if (!is_modal_open()) {\n        blueslip.warn(\"close_active_modal() called without checking is_modal_open()\");\n        return;\n    }\n\n    if (active_modal() !== `#${selector}`) {\n        blueslip.error(\n            \"Trying to close \" + selector + \" modal when \" + active_modal() + \" is open.\",\n        );\n        return;\n    }\n\n    blueslip.debug(\"close modal: \" + selector);\n\n    const id_selector = `#${selector}`;\n    const $micromodal = $(id_selector);\n\n    // On-hidden hooks should typically be registered in\n    // overlays.open_modal.  However, we offer this alternative\n    // mechanism as a convenience for hooks only known when\n    // closing the modal.\n    $micromodal.find(\".modal__container\").on(\"animationend\", (event) => {\n        const animation_name = event.originalEvent.animationName;\n        if (animation_name === \"mmfadeOut\" && conf.on_hidden) {\n            conf.on_hidden();\n        }\n    });\n\n    Micromodal.close(selector);\n}\n\nexport function close_active_modal() {\n    if (!is_modal_open()) {\n        blueslip.warn(\"close_active_modal() called without checking is_modal_open()\");\n        return;\n    }\n\n    const $micromodal = $(\".micromodal.modal--open\");\n    Micromodal.close(`${CSS.escape($micromodal.attr(\"id\"))}`);\n}\n\nexport function close_for_hash_change() {\n    $(\"div.overlay.show\").removeClass(\"show\");\n    if ($active_overlay) {\n        close_handler();\n    }\n}\n\nexport function open_settings() {\n    open_overlay({\n        name: \"settings\",\n        $overlay: $(\"#settings_overlay_container\"),\n        on_close() {\n            browser_history.exit_overlay();\n        },\n    });\n}\n\nexport function initialize() {\n    $(\"body\").on(\"click\", \"div.overlay, div.overlay .exit\", (e) => {\n        let $target = $(e.target);\n\n        if (document.getSelection().type === \"Range\") {\n            return;\n        }\n\n        // if the target is not the div.overlay element, search up the node tree\n        // until it is found.\n        if ($target.is(\".exit, .exit-sign, .overlay-content, .exit span\")) {\n            $target = $target.closest(\"[data-overlay]\");\n        } else if (!$target.is(\"div.overlay\")) {\n            // not a valid click target then.\n            return;\n        }\n\n        if ($target.data(\"noclose\")) {\n            // This overlay has been marked explicitly to not be closed.\n            return;\n        }\n\n        const target_name = $target.attr(\"data-overlay\");\n\n        close_overlay(target_name);\n\n        e.preventDefault();\n        e.stopPropagation();\n    });\n}\n","import * as blueslip from \"./blueslip\";\nimport {LazySet} from \"./lazy_set\";\nimport * as people from \"./people\";\nimport * as sub_store from \"./sub_store\";\n\n// This maps a stream_id to a LazySet of user_ids who are subscribed.\nconst stream_subscribers = new Map();\n\nexport function clear_for_testing() {\n    stream_subscribers.clear();\n}\n\nfunction assert_number(id) {\n    if (typeof id !== \"number\") {\n        blueslip.error(`You must pass ids as numbers to peer_data. id = ${id}`);\n    }\n}\n\nfunction get_user_set(stream_id) {\n    // This is an internal function to get the LazySet of users.\n    // We create one on the fly as necessary, but we warn in that case.\n    assert_number(stream_id);\n\n    if (!sub_store.get(stream_id)) {\n        blueslip.warn(\"We called get_user_set for an untracked stream: \" + stream_id);\n    }\n\n    let subscribers = stream_subscribers.get(stream_id);\n\n    if (subscribers === undefined) {\n        subscribers = new LazySet([]);\n        stream_subscribers.set(stream_id, subscribers);\n    }\n\n    return subscribers;\n}\n\nexport function is_subscriber_subset(stream_id1, stream_id2) {\n    const sub1_set = get_user_set(stream_id1);\n    const sub2_set = get_user_set(stream_id2);\n\n    return Array.from(sub1_set.keys()).every((key) => sub2_set.has(key));\n}\n\nexport function potential_subscribers(stream_id) {\n    /*\n        This is a list of unsubscribed users\n        for the current stream, who the current\n        user could potentially subscribe to the\n        stream.  This may include some bots.\n\n        We currently use it for typeahead in\n        stream_edit.js.\n\n        This may be a superset of the actual\n        subscribers that you can change in some cases\n        (like if you're a guest?); we should refine this\n        going forward, especially if we use it for something\n        other than typeahead.  (The guest use case\n        may be moot now for other reasons.)\n    */\n\n    const subscribers = get_user_set(stream_id);\n\n    function is_potential_subscriber(person) {\n        // Use verbose style to force better test\n        // coverage, plus we may add more conditions over\n        // time.\n        if (subscribers.has(person.user_id)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    return people.filter_all_users(is_potential_subscriber);\n}\n\nexport function get_subscriber_count(stream_id) {\n    const subscribers = get_user_set(stream_id);\n    return subscribers.size;\n}\n\nexport function get_subscribers(stream_id) {\n    // This is our external interface for callers who just\n    // want an array of user_ids who are subscribed to a stream.\n    const subscribers = get_user_set(stream_id);\n\n    return Array.from(subscribers.keys());\n}\n\nexport function set_subscribers(stream_id, user_ids) {\n    const subscribers = new LazySet(user_ids || []);\n    stream_subscribers.set(stream_id, subscribers);\n}\n\nexport function add_subscriber(stream_id, user_id) {\n    // If stream_id/user_id are unknown to us, we will\n    // still track it, but we will warn.\n    const subscribers = get_user_set(stream_id);\n    const person = people.get_by_user_id(user_id);\n    if (person === undefined) {\n        blueslip.warn(\"We tried to add invalid subscriber: \" + user_id);\n    }\n    subscribers.add(user_id);\n}\n\nexport function remove_subscriber(stream_id, user_id) {\n    const subscribers = get_user_set(stream_id);\n    if (!subscribers.has(user_id)) {\n        blueslip.warn(\"We tried to remove invalid subscriber: \" + user_id);\n        return false;\n    }\n\n    subscribers.delete(user_id);\n\n    return true;\n}\n\nexport function bulk_add_subscribers({stream_ids, user_ids}) {\n    // We rely on our callers to validate stream_ids and user_ids.\n    for (const stream_id of stream_ids) {\n        const subscribers = get_user_set(stream_id);\n        for (const user_id of user_ids) {\n            subscribers.add(user_id);\n        }\n    }\n}\n\nexport function bulk_remove_subscribers({stream_ids, user_ids}) {\n    // We rely on our callers to validate stream_ids and user_ids.\n    for (const stream_id of stream_ids) {\n        const subscribers = get_user_set(stream_id);\n        for (const user_id of user_ids) {\n            subscribers.delete(user_id);\n        }\n    }\n}\n\nexport function is_user_subscribed(stream_id, user_id) {\n    // Most callers should call stream_data.is_user_subscribed,\n    // which does additional checks.\n\n    const subscribers = get_user_set(stream_id);\n    return subscribers.has(user_id);\n}\n","import md5 from \"blueimp-md5\";\nimport {format, utcToZonedTime} from \"date-fns-tz\";\n\nimport * as typeahead from \"../shared/js/typeahead\";\n\nimport * as blueslip from \"./blueslip\";\nimport {FoldDict} from \"./fold_dict\";\nimport {$t} from \"./i18n\";\nimport * as message_user_ids from \"./message_user_ids\";\nimport * as muted_users from \"./muted_users\";\nimport {page_params} from \"./page_params\";\nimport * as reload_state from \"./reload_state\";\nimport * as settings_config from \"./settings_config\";\nimport * as settings_data from \"./settings_data\";\nimport * as util from \"./util\";\n\nlet people_dict;\nlet people_by_name_dict;\nlet people_by_user_id_dict;\nlet active_user_dict;\nlet non_active_user_dict;\nlet cross_realm_dict;\nlet pm_recipient_count_dict;\nlet duplicate_full_name_data;\nlet my_user_id;\n\n// We have an init() function so that our automated tests\n// can easily clear data.\nexport function init() {\n    // The following three dicts point to the same objects\n    // (all people we've seen), but people_dict can have duplicate\n    // keys related to email changes.  We want to deprecate\n    // people_dict over time and always do lookups by user_id.\n    people_dict = new FoldDict();\n    people_by_name_dict = new FoldDict();\n    people_by_user_id_dict = new Map();\n\n    // The next dictionary includes all active users (human/user)\n    // in our realm, but it excludes non-active users and\n    // cross-realm bots.\n    active_user_dict = new Map();\n    non_active_user_dict = new Map();\n    cross_realm_dict = new Map(); // keyed by user_id\n    pm_recipient_count_dict = new Map();\n\n    // This maintains a set of ids of people with same full names.\n    duplicate_full_name_data = new FoldDict();\n}\n\n// WE INITIALIZE DATA STRUCTURES HERE!\ninit();\n\nfunction split_to_ints(lst) {\n    return lst.split(\",\").map((s) => Number.parseInt(s, 10));\n}\n\nexport function get_users_from_ids(user_ids) {\n    return user_ids.map((user_id) => get_by_user_id(user_id));\n}\n\nexport function get_by_user_id(user_id, ignore_missing) {\n    if (!people_by_user_id_dict.has(user_id) && !ignore_missing) {\n        blueslip.error(\"Unknown user_id in get_by_user_id: \" + user_id);\n        return undefined;\n    }\n    return people_by_user_id_dict.get(user_id);\n}\n\nexport function validate_user_ids(user_ids) {\n    const good_ids = [];\n    const bad_ids = [];\n\n    for (const user_id of user_ids) {\n        if (people_by_user_id_dict.has(user_id)) {\n            good_ids.push(user_id);\n        } else {\n            bad_ids.push(user_id);\n        }\n    }\n\n    if (bad_ids.length > 0) {\n        blueslip.warn(`We have untracked user_ids: ${bad_ids}`);\n    }\n\n    return good_ids;\n}\n\nexport function get_by_email(email) {\n    const person = people_dict.get(email);\n\n    if (!person) {\n        return undefined;\n    }\n\n    if (person.email.toLowerCase() !== email.toLowerCase()) {\n        blueslip.warn(\n            \"Obsolete email passed to get_by_email: \" + email + \" new email = \" + person.email,\n        );\n    }\n\n    return person;\n}\n\nexport function get_bot_owner_user(user) {\n    const owner_id = user.bot_owner_id;\n\n    if (owner_id === undefined || owner_id === null) {\n        // This is probably a cross-realm bot.\n        return undefined;\n    }\n\n    return get_by_user_id(owner_id);\n}\n\nexport function can_admin_user(user) {\n    return (\n        (user.is_bot && user.bot_owner_id && user.bot_owner_id === page_params.user_id) ||\n        is_my_user_id(user.user_id)\n    );\n}\n\nexport function id_matches_email_operand(user_id, email) {\n    const person = get_by_email(email);\n\n    if (!person) {\n        // The user may type bad data into the search bar, so\n        // we don't complain too loud here.\n        blueslip.debug(\"User email operand unknown: \" + email);\n        return false;\n    }\n\n    return person.user_id === user_id;\n}\n\nexport function update_email(user_id, new_email) {\n    const person = people_by_user_id_dict.get(user_id);\n    person.email = new_email;\n    people_dict.set(new_email, person);\n\n    // For legacy reasons we don't delete the old email\n    // keys in our dictionaries, so that reverse lookups\n    // still work correctly.\n}\n\nexport function get_visible_email(user) {\n    if (user.delivery_email) {\n        return user.delivery_email;\n    }\n    return user.email;\n}\n\nexport function get_user_id(email) {\n    const person = get_by_email(email);\n    if (person === undefined) {\n        const error_msg = \"Unknown email for get_user_id: \" + email;\n        blueslip.error(error_msg);\n        return undefined;\n    }\n    const user_id = person.user_id;\n    if (!user_id) {\n        blueslip.error(\"No user_id found for \" + email);\n        return undefined;\n    }\n\n    return user_id;\n}\n\nexport function is_known_user_id(user_id) {\n    /*\n    For certain low-stakes operations, such as emoji reactions,\n    we may get a user_id that we don't know about, because the\n    user may have been deactivated.  (We eventually want to track\n    deactivated users on the client, but until then, this is an\n    expedient thing we can check.)\n    */\n    return people_by_user_id_dict.has(user_id);\n}\n\nexport function is_known_user(user) {\n    return user && is_known_user_id(user.user_id);\n}\n\nfunction sort_numerically(user_ids) {\n    user_ids.sort((a, b) => a - b);\n\n    return user_ids;\n}\n\nexport function huddle_string(message) {\n    if (message.type !== \"private\") {\n        return undefined;\n    }\n\n    let user_ids = message.display_recipient.map((recip) => recip.id);\n\n    user_ids = user_ids.filter(\n        (user_id) => user_id && people_by_user_id_dict.has(user_id) && !is_my_user_id(user_id),\n    );\n\n    if (user_ids.length <= 1) {\n        return undefined;\n    }\n\n    user_ids = sort_numerically(user_ids);\n\n    return user_ids.join(\",\");\n}\n\nexport function user_ids_string_to_emails_string(user_ids_string) {\n    const user_ids = split_to_ints(user_ids_string);\n\n    let emails = user_ids.map((user_id) => {\n        const person = people_by_user_id_dict.get(user_id);\n        return person && person.email;\n    });\n\n    if (!emails.every(Boolean)) {\n        blueslip.warn(\"Unknown user ids: \" + user_ids_string);\n        return undefined;\n    }\n\n    emails = emails.map((email) => email.toLowerCase());\n\n    emails.sort();\n\n    return emails.join(\",\");\n}\n\nexport function user_ids_string_to_ids_array(user_ids_string) {\n    const user_ids = user_ids_string.split(\",\");\n    const ids = user_ids.map(Number);\n    return ids;\n}\n\nexport function emails_strings_to_user_ids_array(emails_string) {\n    const user_ids_string = emails_strings_to_user_ids_string(emails_string);\n    if (user_ids_string === undefined) {\n        return undefined;\n    }\n\n    const user_ids_array = user_ids_string_to_ids_array(user_ids_string);\n    return user_ids_array;\n}\n\nexport function reply_to_to_user_ids_string(emails_string) {\n    // This is basically emails_strings_to_user_ids_string\n    // without blueslip warnings, since it can be called with\n    // invalid data.\n    const emails = emails_string.split(\",\");\n\n    let user_ids = emails.map((email) => {\n        const person = get_by_email(email);\n        return person && person.user_id;\n    });\n\n    if (!user_ids.every(Boolean)) {\n        return undefined;\n    }\n\n    user_ids = sort_numerically(user_ids);\n\n    return user_ids.join(\",\");\n}\n\nexport function emails_to_full_names_string(emails) {\n    return emails\n        .map((email) => {\n            email = email.trim();\n            const person = get_by_email(email);\n            if (person !== undefined) {\n                return person.full_name;\n            }\n            return email;\n        })\n        .join(\", \");\n}\n\nexport function get_user_time_preferences(user_id) {\n    const user_timezone = get_by_user_id(user_id).timezone;\n    if (user_timezone) {\n        return settings_data.get_time_preferences(user_timezone);\n    }\n    return undefined;\n}\n\nexport function get_user_time(user_id) {\n    const user_pref = get_user_time_preferences(user_id);\n    if (user_pref) {\n        const current_date = utcToZonedTime(new Date(), user_pref.timezone);\n        // This could happen if the timezone is invalid.\n        if (Number.isNaN(current_date.getTime())) {\n            blueslip.error(`Got invalid date for timezone: ${user_pref.timezone}`);\n            return undefined;\n        }\n        return format(current_date, user_pref.format, {timeZone: user_pref.timezone});\n    }\n    return undefined;\n}\n\nexport function get_user_type(user_id) {\n    const user_profile = get_by_user_id(user_id);\n\n    return settings_config.user_role_map.get(user_profile.role);\n}\n\nexport function emails_strings_to_user_ids_string(emails_string) {\n    const emails = emails_string.split(\",\");\n    return email_list_to_user_ids_string(emails);\n}\n\nexport function email_list_to_user_ids_string(emails) {\n    let user_ids = emails.map((email) => {\n        const person = get_by_email(email);\n        return person && person.user_id;\n    });\n\n    if (!user_ids.every(Boolean)) {\n        blueslip.warn(\"Unknown emails: \" + emails);\n        return undefined;\n    }\n\n    user_ids = sort_numerically(user_ids);\n\n    return user_ids.join(\",\");\n}\n\nexport function get_full_names_for_poll_option(user_ids) {\n    return get_display_full_names(user_ids).join(\", \");\n}\n\nfunction get_display_full_name(user_id) {\n    const person = get_by_user_id(user_id);\n    if (!person) {\n        blueslip.error(\"Unknown user id \" + user_id);\n        return \"?\";\n    }\n\n    if (muted_users.is_user_muted(user_id)) {\n        return $t({defaultMessage: \"Muted user\"});\n    }\n\n    return person.full_name;\n}\n\nexport function get_display_full_names(user_ids) {\n    return user_ids.map((user_id) => get_display_full_name(user_id));\n}\n\nexport function get_full_name(user_id) {\n    return people_by_user_id_dict.get(user_id).full_name;\n}\n\nfunction _calc_user_and_other_ids(user_ids_string) {\n    const user_ids = split_to_ints(user_ids_string);\n    const other_ids = user_ids.filter((user_id) => !is_my_user_id(user_id));\n    return {user_ids, other_ids};\n}\n\nexport function get_recipients(user_ids_string) {\n    // See message_store.get_pm_full_names() for a similar function.\n\n    const {other_ids} = _calc_user_and_other_ids(user_ids_string);\n\n    if (other_ids.length === 0) {\n        // private message with oneself\n        return my_full_name();\n    }\n\n    const names = get_display_full_names(other_ids).sort();\n    return names.join(\", \");\n}\n\nexport function pm_reply_user_string(message) {\n    const user_ids = pm_with_user_ids(message);\n\n    if (!user_ids) {\n        return undefined;\n    }\n\n    return user_ids.join(\",\");\n}\n\nexport function pm_reply_to(message) {\n    const user_ids = pm_with_user_ids(message);\n\n    if (!user_ids) {\n        return undefined;\n    }\n\n    const emails = user_ids.map((user_id) => {\n        const person = people_by_user_id_dict.get(user_id);\n        if (!person) {\n            blueslip.error(\"Unknown user id in message: \" + user_id);\n            return \"?\";\n        }\n        return person.email;\n    });\n\n    emails.sort();\n\n    const reply_to = emails.join(\",\");\n\n    return reply_to;\n}\n\nfunction sorted_other_user_ids(user_ids) {\n    // This excludes your own user id unless you're the only user\n    // (i.e. you sent a message to yourself).\n\n    const other_user_ids = user_ids.filter((user_id) => !is_my_user_id(user_id));\n\n    if (other_user_ids.length >= 1) {\n        user_ids = other_user_ids;\n    } else {\n        user_ids = [my_user_id];\n    }\n\n    user_ids = sort_numerically(user_ids);\n\n    return user_ids;\n}\n\nexport function concat_huddle(user_ids, user_id) {\n    /*\n        We assume user_ids and user_id have already\n        been validated by the caller.\n\n        The only logic we're encapsulating here is\n        how to encode huddles.\n    */\n    const sorted_ids = sort_numerically([...user_ids, user_id]);\n    return sorted_ids.join(\",\");\n}\n\nexport function pm_lookup_key_from_user_ids(user_ids) {\n    /*\n        The server will sometimes include our own user id\n        in keys for PMs, but we only want our user id if\n        we sent a message to ourself.\n    */\n    user_ids = sorted_other_user_ids(user_ids);\n    return user_ids.join(\",\");\n}\n\nexport function pm_lookup_key(user_ids_string) {\n    const user_ids = split_to_ints(user_ids_string);\n    return pm_lookup_key_from_user_ids(user_ids);\n}\n\nexport function all_user_ids_in_pm(message) {\n    if (message.type !== \"private\") {\n        return undefined;\n    }\n\n    if (message.display_recipient.length === 0) {\n        blueslip.error(\"Empty recipient list in message\");\n        return undefined;\n    }\n\n    let user_ids = message.display_recipient.map((recip) => recip.id);\n\n    user_ids = sort_numerically(user_ids);\n    return user_ids;\n}\n\nexport function pm_with_user_ids(message) {\n    if (message.type !== \"private\") {\n        return undefined;\n    }\n\n    if (message.display_recipient.length === 0) {\n        blueslip.error(\"Empty recipient list in message\");\n        return undefined;\n    }\n\n    const user_ids = message.display_recipient.map((recip) => recip.id);\n\n    return sorted_other_user_ids(user_ids);\n}\n\nexport function group_pm_with_user_ids(message) {\n    if (message.type !== \"private\") {\n        return undefined;\n    }\n\n    if (message.display_recipient.length === 0) {\n        blueslip.error(\"Empty recipient list in message\");\n        return undefined;\n    }\n\n    const user_ids = message.display_recipient.map((recip) => recip.id);\n    const is_user_present = user_ids.some((user_id) => is_my_user_id(user_id));\n    if (is_user_present) {\n        user_ids.sort();\n        if (user_ids.length > 2) {\n            return user_ids;\n        }\n    }\n    return false;\n}\n\nexport function pm_perma_link(message) {\n    const user_ids = all_user_ids_in_pm(message);\n\n    if (!user_ids) {\n        return undefined;\n    }\n\n    let suffix;\n\n    if (user_ids.length >= 3) {\n        suffix = \"group\";\n    } else {\n        suffix = \"pm\";\n    }\n\n    const slug = user_ids.join(\",\") + \"-\" + suffix;\n    const uri = \"#narrow/pm-with/\" + slug;\n    return uri;\n}\n\nexport function pm_with_url(message) {\n    const user_ids = pm_with_user_ids(message);\n\n    if (!user_ids) {\n        return undefined;\n    }\n\n    let suffix;\n\n    if (user_ids.length > 1) {\n        suffix = \"group\";\n    } else {\n        const person = get_by_user_id(user_ids[0]);\n        if (person && person.full_name) {\n            suffix = person.full_name.replace(/[ \"%/<>`\\p{C}]+/gu, \"-\");\n        } else {\n            blueslip.error(\"Unknown people in message\");\n            suffix = \"unk\";\n        }\n    }\n\n    const slug = user_ids.join(\",\") + \"-\" + suffix;\n    const uri = \"#narrow/pm-with/\" + slug;\n    return uri;\n}\n\nexport function update_email_in_reply_to(reply_to, user_id, new_email) {\n    // We try to replace an old email with a new email in a reply_to,\n    // but we try to avoid changing the reply_to if we don't have to,\n    // and we don't warn on any errors.\n    let emails = reply_to.split(\",\");\n\n    const persons = emails.map((email) => people_dict.get(email.trim()));\n\n    if (!persons.every(Boolean)) {\n        return reply_to;\n    }\n\n    const needs_patch = persons.some((person) => person.user_id === user_id);\n\n    if (!needs_patch) {\n        return reply_to;\n    }\n\n    emails = persons.map((person) => {\n        if (person.user_id === user_id) {\n            return new_email;\n        }\n        return person.email;\n    });\n\n    return emails.join(\",\");\n}\n\nexport function pm_with_operand_ids(operand) {\n    let emails = operand.split(\",\");\n    emails = emails.map((email) => email.trim());\n    let persons = emails.map((email) => people_dict.get(email));\n\n    // If your email is included in a PM group with other people, just ignore it\n    if (persons.length > 1) {\n        const my_user = people_by_user_id_dict.get(my_user_id);\n        persons = persons.filter((person) => person !== my_user);\n    }\n\n    if (!persons.every(Boolean)) {\n        return undefined;\n    }\n\n    let user_ids = persons.map((person) => person.user_id);\n\n    user_ids = sort_numerically(user_ids);\n\n    return user_ids;\n}\n\nexport function emails_to_slug(emails_string) {\n    let slug = reply_to_to_user_ids_string(emails_string);\n\n    if (!slug) {\n        return undefined;\n    }\n\n    slug += \"-\";\n\n    const emails = emails_string.split(\",\");\n\n    if (emails.length === 1) {\n        const name = get_by_email(emails[0]).full_name;\n        slug += name.replace(/[ \"%/<>`\\p{C}]+/gu, \"-\");\n    } else {\n        slug += \"group\";\n    }\n\n    return slug;\n}\n\nexport function slug_to_emails(slug) {\n    /*\n        It's not super important to be flexible about\n        PM-related slugs, since you would rarely post\n        them to the web, but we we do want to support\n        reasonable variations:\n\n            99-alice@example.com\n            99\n\n        Our canonical version is 99-alice@example.com,\n        and we only care about the \"99\" prefix.\n    */\n    const m = /^([\\d,]+)(-.*)?/.exec(slug);\n    if (m) {\n        let user_ids_string = m[1];\n        user_ids_string = exclude_me_from_string(user_ids_string);\n        return user_ids_string_to_emails_string(user_ids_string);\n    }\n    /* istanbul ignore next */\n    return undefined;\n}\n\nexport function exclude_me_from_string(user_ids_string) {\n    // Exclude me from a user_ids_string UNLESS I'm the\n    // only one in it.\n    let user_ids = split_to_ints(user_ids_string);\n\n    if (user_ids.length <= 1) {\n        // We either have a message to ourself, an empty\n        // slug, or a message to somebody else where we weren't\n        // part of the slug.\n        return user_ids.join(\",\");\n    }\n\n    user_ids = user_ids.filter((user_id) => !is_my_user_id(user_id));\n\n    return user_ids.join(\",\");\n}\n\nexport function format_small_avatar_url(raw_url) {\n    const url = new URL(raw_url, location);\n    url.search += (url.search ? \"&\" : \"\") + \"s=50\";\n    return url.href;\n}\n\nexport function sender_is_bot(message) {\n    if (message.sender_id) {\n        const person = get_by_user_id(message.sender_id);\n        return person.is_bot;\n    }\n    return false;\n}\n\nexport function sender_is_guest(message) {\n    if (message.sender_id) {\n        const person = get_by_user_id(message.sender_id);\n        return person.is_guest;\n    }\n    return false;\n}\n\nfunction gravatar_url_for_email(email) {\n    const hash = md5(email.toLowerCase());\n    const avatar_url = \"https://secure.gravatar.com/avatar/\" + hash + \"?d=identicon\";\n    const small_avatar_url = format_small_avatar_url(avatar_url);\n    return small_avatar_url;\n}\n\nexport function small_avatar_url_for_person(person) {\n    if (person.avatar_url) {\n        return format_small_avatar_url(person.avatar_url);\n    }\n\n    if (person.avatar_url === null) {\n        return gravatar_url_for_email(person.email);\n    }\n\n    return format_small_avatar_url(\"/avatar/\" + person.user_id);\n}\n\nfunction medium_gravatar_url_for_email(email) {\n    const hash = md5(email.toLowerCase());\n    const avatar_url = \"https://secure.gravatar.com/avatar/\" + hash + \"?d=identicon\";\n    const url = new URL(avatar_url, location);\n    url.search += (url.search ? \"&\" : \"\") + \"s=500\";\n    return url.href;\n}\n\nexport function medium_avatar_url_for_person(person) {\n    /* Unlike the small avatar URL case, we don't generally have a\n     * medium avatar URL included in person objects. So only have the\n     * gravatar and server endpoints here. */\n\n    if (person.avatar_url === null) {\n        return medium_gravatar_url_for_email(person.email);\n    }\n\n    return \"/avatar/\" + person.user_id + \"/medium\";\n}\n\nexport function sender_info_for_recent_topics_row(sender_ids) {\n    const senders_info = [];\n    for (const id of sender_ids) {\n        const sender = {...get_by_user_id(id)};\n        sender.avatar_url_small = small_avatar_url_for_person(sender);\n        sender.is_muted = muted_users.is_user_muted(id);\n        senders_info.push(sender);\n    }\n    return senders_info;\n}\n\nexport function small_avatar_url(message) {\n    // Try to call this function in all places where we need 25px\n    // avatar images, so that the browser can help\n    // us avoid unnecessary network trips.  (For user-uploaded avatars,\n    // the s=25 parameter is essentially ignored, but it's harmless.)\n    //\n    // We actually request these at s=50, so that we look better\n    // on retina displays.\n\n    let person;\n    if (message.sender_id) {\n        // We should always have message.sender_id, except for in the\n        // tutorial, where it's ok to fall back to the URL in the fake\n        // messages.\n        person = get_by_user_id(message.sender_id);\n    }\n\n    // The first time we encounter a sender in a message, we may\n    // not have person.avatar_url set, but if we do, then use that.\n    if (person && person.avatar_url) {\n        return small_avatar_url_for_person(person);\n    }\n\n    // Try to get info from the message if we didn't have a `person` object\n    // or if the avatar was missing. We do this verbosely to avoid false\n    // positives on line coverage (we don't do branch checking).\n    if (message.avatar_url) {\n        return format_small_avatar_url(message.avatar_url);\n    }\n\n    if (person && person.avatar_url === undefined) {\n        // If we don't have an avatar_url at all, we use `GET\n        // /avatar/{user_id}` endpoint to obtain avatar url.  This is\n        // required to take advantage of the user_avatar_url_field_optional\n        // optimization, which saves a huge amount of network traffic on\n        // servers with 10,000s of user accounts.\n        return format_small_avatar_url(\"/avatar/\" + person.user_id);\n    }\n\n    // For computing the user's email, we first trust the person\n    // object since that is updated via our real-time sync system, but\n    // if unavailable, we use the sender email.\n    let email;\n    if (person) {\n        email = person.email;\n    } else {\n        email = message.sender_email;\n    }\n\n    return gravatar_url_for_email(email);\n}\n\nexport function is_valid_email_for_compose(email) {\n    if (is_cross_realm_email(email)) {\n        return true;\n    }\n\n    const person = get_by_email(email);\n    if (!person) {\n        return false;\n    }\n\n    // we allow deactivated users in compose so that\n    // one can attempt to reply to threads that contained them.\n    return true;\n}\n\nexport function is_valid_bulk_emails_for_compose(emails) {\n    // Returns false if at least one of the emails is invalid.\n    return emails.every((email) => {\n        if (!is_valid_email_for_compose(email)) {\n            return false;\n        }\n        return true;\n    });\n}\n\nexport function is_active_user_for_popover(user_id) {\n    // For popover menus, we include cross-realm bots as active\n    // users.\n\n    if (cross_realm_dict.get(user_id)) {\n        return true;\n    }\n    if (active_user_dict.has(user_id)) {\n        return true;\n    }\n\n    // TODO: We can report errors here once we start loading\n    //       deactivated users at page-load time. For now just warn.\n    if (!people_by_user_id_dict.has(user_id)) {\n        blueslip.warn(\"Unexpectedly invalid user_id in user popover query: \" + user_id);\n    }\n\n    return false;\n}\n\nexport function filter_all_persons(pred) {\n    const ret = [];\n    for (const person of people_by_user_id_dict.values()) {\n        if (pred(person)) {\n            ret.push(person);\n        }\n    }\n    return ret;\n}\n\nexport function filter_all_users(pred) {\n    const ret = [];\n    for (const person of active_user_dict.values()) {\n        if (pred(person)) {\n            ret.push(person);\n        }\n    }\n    return ret;\n}\n\nexport function get_realm_users() {\n    // includes humans and bots from your realm\n    return Array.from(active_user_dict.values());\n}\n\nexport function get_active_human_ids() {\n    const human_ids = [];\n\n    for (const user of active_user_dict.values()) {\n        if (!user.is_bot) {\n            human_ids.push(user.user_id);\n        }\n    }\n\n    return human_ids;\n}\n\nexport function get_non_active_human_ids() {\n    const human_ids = [];\n\n    for (const user of non_active_user_dict.values()) {\n        if (!user.is_bot) {\n            human_ids.push(user.user_id);\n        }\n    }\n\n    return human_ids;\n}\n\nexport function get_active_human_count() {\n    let count = 0;\n    for (const person of active_user_dict.values()) {\n        if (!person.is_bot) {\n            count += 1;\n        }\n    }\n    return count;\n}\n\nexport function get_active_user_ids() {\n    // This includes active users and active bots.\n    return Array.from(active_user_dict.keys());\n}\n\nexport function get_non_active_realm_users() {\n    return Array.from(non_active_user_dict.values());\n}\n\nexport function is_cross_realm_email(email) {\n    const person = get_by_email(email);\n    if (!person) {\n        return undefined;\n    }\n    return cross_realm_dict.has(person.user_id);\n}\n\nexport function get_recipient_count(person) {\n    // We can have fake person objects like the \"all\"\n    // pseudo-person in at-mentions.  They will have\n    // the pm_recipient_count on the object itself.\n    if (person.pm_recipient_count) {\n        return person.pm_recipient_count;\n    }\n\n    /*\n        For searching in the search bar, we will\n        have true `person` objects with `user_id`.\n\n        Likewise, we'll have user_id if we\n        are tab-completing a user to send a PM\n        to (but we only get called if we're not\n        currently in a stream view).\n\n        Finally, we'll have user_id if we are adding\n        people to a stream (w/typeahead).\n\n    */\n    const count = pm_recipient_count_dict.get(person.user_id);\n\n    return count || 0;\n}\n\nexport function incr_recipient_count(user_id) {\n    const old_count = pm_recipient_count_dict.get(user_id) || 0;\n    pm_recipient_count_dict.set(user_id, old_count + 1);\n}\n\nexport function clear_recipient_counts_for_testing() {\n    pm_recipient_count_dict.clear();\n}\n\nexport function set_recipient_count_for_testing(user_id, count) {\n    pm_recipient_count_dict.set(user_id, count);\n}\n\nexport function get_message_people() {\n    /*\n        message_people are roughly the people who have\n        actually sent messages that are currently\n        showing up on your feed.  These people\n        are important--we give them preference\n        over other users in certain search\n        suggestions, since non-message-people are\n        presumably either not very active or\n        possibly subscribed to streams you don't\n        care about.  message_people also includes\n        people whom you have sent PMs, but look\n        at the message_store code to see the precise\n        semantics\n    */\n    const message_people = message_user_ids\n        .user_ids()\n        .map((user_id) => people_by_user_id_dict.get(user_id))\n        .filter(Boolean);\n\n    return message_people;\n}\n\nexport function get_active_message_people() {\n    const message_people = get_message_people();\n    const active_message_people = message_people.filter((item) =>\n        active_user_dict.has(item.user_id),\n    );\n    return active_message_people;\n}\n\nexport function get_people_for_search_bar(query) {\n    const pred = build_person_matcher(query);\n\n    const message_people = get_message_people();\n\n    const small_results = message_people.filter((item) => pred(item));\n\n    if (small_results.length >= 5) {\n        return small_results;\n    }\n\n    return filter_all_persons(pred);\n}\n\nexport function build_termlet_matcher(termlet) {\n    termlet = termlet.trim();\n\n    const is_ascii = /^[a-z]+$/.test(termlet);\n\n    return function (user) {\n        let full_name = user.full_name;\n        if (is_ascii) {\n            // Only ignore diacritics if the query is plain ascii\n            full_name = typeahead.remove_diacritics(full_name);\n        }\n        const names = full_name.toLowerCase().split(\" \");\n\n        return names.some((name) => name.startsWith(termlet));\n    };\n}\n\nexport function build_person_matcher(query) {\n    query = query.trim();\n\n    const termlets = query.toLowerCase().split(/\\s+/);\n    const termlet_matchers = termlets.map((termlet) => build_termlet_matcher(termlet));\n\n    return function (user) {\n        const email = user.email.toLowerCase();\n\n        if (email.startsWith(query)) {\n            return true;\n        }\n\n        return termlet_matchers.every((matcher) => matcher(user));\n    };\n}\n\nexport function filter_people_by_search_terms(users, search_terms) {\n    const filtered_users = new Map();\n\n    // Build our matchers outside the loop to avoid some\n    // search overhead that is not user-specific.\n    const matchers = search_terms.map((search_term) => build_person_matcher(search_term));\n\n    // Loop through users and populate filtered_users only\n    // if they include search_terms\n    for (const user of users) {\n        const person = get_by_email(user.email);\n        // Get person object (and ignore errors)\n        if (!person || !person.full_name) {\n            continue;\n        }\n\n        // Return user emails that include search terms\n        const match = matchers.some((matcher) => matcher(user));\n\n        if (match) {\n            filtered_users.set(person.user_id, true);\n        }\n    }\n\n    return filtered_users;\n}\n\nexport const is_valid_full_name_and_user_id = (full_name, user_id) => {\n    const person = people_by_user_id_dict.get(user_id);\n\n    if (!person) {\n        return false;\n    }\n\n    return person.full_name === full_name;\n};\n\nexport const get_actual_name_from_user_id = (user_id) => {\n    /*\n        If you are dealing with user-entered data, you\n        should validate the user_id BEFORE calling\n        this function.\n    */\n    const person = people_by_user_id_dict.get(user_id);\n\n    if (!person) {\n        blueslip.error(\"Unknown user_id: \" + user_id);\n        return undefined;\n    }\n\n    return person.full_name;\n};\n\nexport function get_user_id_from_name(full_name) {\n    // get_user_id_from_name('Alice Smith') === 42\n\n    /*\n        This function is intended to be called\n        with a full name that is user-entered, such\n        a full name from a user mention.\n\n        We will only return a **unique** user_id\n        here.  For duplicate names, our UI should\n        force users to disambiguate names with a\n        user_id and then call is_valid_full_name_and_user_id\n        to make sure the combo is valid.  This is\n        exactly what we do with mentions.\n    */\n\n    const person = people_by_name_dict.get(full_name);\n\n    if (!person) {\n        return undefined;\n    }\n\n    if (is_duplicate_full_name(full_name)) {\n        return undefined;\n    }\n\n    return person.user_id;\n}\n\nexport function track_duplicate_full_name(full_name, user_id, to_remove) {\n    let ids;\n    if (duplicate_full_name_data.has(full_name)) {\n        ids = duplicate_full_name_data.get(full_name);\n    } else {\n        ids = new Set();\n    }\n    if (!to_remove && user_id) {\n        ids.add(user_id);\n    }\n    if (to_remove && user_id) {\n        ids.delete(user_id);\n    }\n    duplicate_full_name_data.set(full_name, ids);\n}\n\nexport function is_duplicate_full_name(full_name) {\n    const ids = duplicate_full_name_data.get(full_name);\n\n    return ids && ids.size > 1;\n}\n\nexport function get_mention_syntax(full_name, user_id, silent) {\n    let mention = \"\";\n    if (silent) {\n        mention += \"@_**\";\n    } else {\n        mention += \"@**\";\n    }\n    mention += full_name;\n    if (!user_id) {\n        blueslip.warn(\"get_mention_syntax called without user_id.\");\n    }\n    if (\n        (is_duplicate_full_name(full_name) || full_name_matches_wildcard_mention(full_name)) &&\n        user_id\n    ) {\n        mention += \"|\" + user_id;\n    }\n    mention += \"**\";\n    return mention;\n}\n\nfunction full_name_matches_wildcard_mention(full_name) {\n    return [\"all\", \"everyone\", \"stream\"].includes(full_name);\n}\n\nexport function _add_user(person) {\n    /*\n        This is common code to add any user, even\n        users who may be deactivated or outside\n        our realm (like cross-realm bots).\n    */\n    person.is_moderator = false;\n    if (person.role === settings_config.user_role_values.moderator.code) {\n        person.is_moderator = true;\n    }\n    if (person.user_id) {\n        people_by_user_id_dict.set(person.user_id, person);\n    } else {\n        // We eventually want to lock this down completely\n        // and report an error and not update other the data\n        // structures here, but we have a lot of edge cases\n        // with cross-realm bots, zephyr users, etc., deactivated\n        // users, where we are probably fine for now not to\n        // find them via user_id lookups.\n        blueslip.warn(\"No user_id provided for \" + person.email);\n    }\n\n    track_duplicate_full_name(person.full_name, person.user_id);\n    people_dict.set(person.email, person);\n    people_by_name_dict.set(person.full_name, person);\n}\n\nexport function add_active_user(person) {\n    active_user_dict.set(person.user_id, person);\n    _add_user(person);\n    non_active_user_dict.delete(person.user_id);\n}\n\nexport const is_person_active = (user_id) => {\n    if (!people_by_user_id_dict.has(user_id)) {\n        blueslip.error(\"No user found.\", user_id);\n    }\n\n    if (cross_realm_dict.has(user_id)) {\n        return true;\n    }\n\n    return active_user_dict.has(user_id);\n};\n\nexport function add_cross_realm_user(person) {\n    if (!people_dict.has(person.email)) {\n        _add_user(person);\n    }\n    cross_realm_dict.set(person.user_id, person);\n}\n\nexport function deactivate(person) {\n    // We don't fully remove a person from all of our data\n    // structures, because deactivated users can be part\n    // of somebody's PM list.\n    active_user_dict.delete(person.user_id);\n    non_active_user_dict.set(person.user_id, person);\n}\n\nexport function report_late_add(user_id, email) {\n    // This function is extracted to make unit testing easier,\n    // plus we may fine-tune our reporting here for different\n    // types of realms.\n    const msg = \"Added user late: user_id=\" + user_id + \" email=\" + email;\n\n    if (reload_state.is_in_progress()) {\n        blueslip.log(msg);\n    } else {\n        blueslip.error(msg);\n    }\n}\n\nexport function extract_people_from_message(message) {\n    let involved_people;\n\n    switch (message.type) {\n        case \"stream\":\n            involved_people = [\n                {\n                    full_name: message.sender_full_name,\n                    user_id: message.sender_id,\n                    email: message.sender_email,\n                },\n            ];\n            break;\n\n        case \"private\":\n            involved_people = message.display_recipient;\n            break;\n\n        default:\n            involved_people = [];\n    }\n\n    // Add new people involved in this message to the people list\n    for (const person of involved_people) {\n        if (person.unknown_local_echo_user) {\n            continue;\n        }\n\n        const user_id = person.user_id || person.id;\n\n        if (people_by_user_id_dict.has(user_id)) {\n            continue;\n        }\n\n        report_late_add(user_id, person.email);\n\n        _add_user({\n            email: person.email,\n            user_id,\n            full_name: person.full_name,\n            is_admin: person.is_realm_admin || false,\n            is_bot: person.is_bot || false,\n        });\n    }\n}\n\nfunction safe_lower(s) {\n    return (s || \"\").toLowerCase();\n}\n\nexport function matches_user_settings_search(person, value) {\n    const email = settings_data.email_for_user_settings(person);\n\n    return safe_lower(person.full_name).includes(value) || safe_lower(email).includes(value);\n}\n\nexport function filter_for_user_settings_search(persons, query) {\n    /*\n        TODO: For large realms, we can optimize this a couple\n              different ways.  For realms that don't show\n              emails, we can make a simpler filter predicate\n              that works solely with full names.  And we can\n              also consider two-pass filters that try more\n              stingy criteria first, such as exact prefix\n              matches, before widening the search.\n\n              See #13554 for more context.\n    */\n    return persons.filter((person) => matches_user_settings_search(person, query));\n}\n\nexport function maybe_incr_recipient_count(message) {\n    if (message.type !== \"private\") {\n        return;\n    }\n\n    if (!message.sent_by_me) {\n        return;\n    }\n\n    // Track the number of PMs we've sent to this person to improve autocomplete\n    for (const recip of message.display_recipient) {\n        if (recip.unknown_local_echo_user) {\n            continue;\n        }\n\n        const user_id = recip.id;\n        incr_recipient_count(user_id);\n    }\n}\n\nexport function set_full_name(person_obj, new_full_name) {\n    if (people_by_name_dict.has(person_obj.full_name)) {\n        people_by_name_dict.delete(person_obj.full_name);\n    }\n    // Remove previous and add new full name to the duplicate full name tracker.\n    track_duplicate_full_name(person_obj.full_name, person_obj.user_id, true);\n    track_duplicate_full_name(new_full_name, person_obj.user_id);\n    people_by_name_dict.set(new_full_name, person_obj);\n    person_obj.full_name = new_full_name;\n}\n\nexport function set_custom_profile_field_data(user_id, field) {\n    if (field.id === undefined) {\n        blueslip.error(\"Trying to set undefined field id\");\n        return;\n    }\n    people_by_user_id_dict.get(user_id).profile_data[field.id] = {\n        value: field.value,\n        rendered_value: field.rendered_value,\n    };\n}\n\nexport function is_current_user(email) {\n    if (email === null || email === undefined || page_params.is_spectator) {\n        return false;\n    }\n\n    return email.toLowerCase() === my_current_email().toLowerCase();\n}\n\nexport function initialize_current_user(user_id) {\n    my_user_id = user_id;\n}\n\nexport function my_full_name() {\n    return people_by_user_id_dict.get(my_user_id).full_name;\n}\n\nexport function my_current_email() {\n    return people_by_user_id_dict.get(my_user_id).email;\n}\n\nexport function my_current_user_id() {\n    return my_user_id;\n}\n\nexport function my_custom_profile_data(field_id) {\n    if (field_id === undefined) {\n        blueslip.error(\"Undefined field id\");\n        return undefined;\n    }\n    return get_custom_profile_data(my_user_id, field_id);\n}\n\nexport function get_custom_profile_data(user_id, field_id) {\n    const profile_data = people_by_user_id_dict.get(user_id).profile_data;\n    if (profile_data === undefined) {\n        return null;\n    }\n    return profile_data[field_id];\n}\n\nexport function is_my_user_id(user_id) {\n    if (!user_id) {\n        return false;\n    }\n\n    if (typeof user_id !== \"number\") {\n        blueslip.error(\"user_id is a string in my_user_id: \" + user_id);\n        user_id = Number.parseInt(user_id, 10);\n    }\n\n    return user_id === my_user_id;\n}\n\nexport function compare_by_name(a, b) {\n    return util.strcmp(a.full_name, b.full_name);\n}\n\nexport function sort_but_pin_current_user_on_top(users) {\n    const my_user = people_by_user_id_dict.get(my_user_id);\n    if (users.includes(my_user)) {\n        users.splice(users.indexOf(my_user), 1);\n        users.sort(compare_by_name);\n        users.unshift(my_user);\n    } else {\n        users.sort(compare_by_name);\n    }\n}\n\nexport function initialize(my_user_id, params) {\n    for (const person of params.realm_users) {\n        add_active_user(person);\n    }\n\n    for (const person of params.realm_non_active_users) {\n        non_active_user_dict.set(person.user_id, person);\n        _add_user(person);\n    }\n\n    for (const person of params.cross_realm_bots) {\n        add_cross_realm_user(person);\n    }\n\n    initialize_current_user(my_user_id);\n}\n","import * as blueslip from \"./blueslip\";\nimport * as composebox_typeahead from \"./composebox_typeahead\";\nimport * as people from \"./people\";\nimport * as stream_pill from \"./stream_pill\";\nimport * as typeahead_helper from \"./typeahead_helper\";\nimport * as user_group_pill from \"./user_group_pill\";\nimport * as user_groups from \"./user_groups\";\nimport * as user_pill from \"./user_pill\";\n\nfunction person_matcher(query, item) {\n    if (people.is_known_user(item)) {\n        return composebox_typeahead.query_matches_person(query, item);\n    }\n    return false;\n}\n\nfunction group_matcher(query, item) {\n    if (user_groups.is_user_group(item)) {\n        return composebox_typeahead.query_matches_name(query, item);\n    }\n    return false;\n}\n\nexport function set_up($input, pills, opts) {\n    if (!opts.user && !opts.user_group && !opts.stream) {\n        blueslip.error(\"Unspecified possible item types\");\n        return;\n    }\n    const include_streams = (query) => opts.stream && query.trim().startsWith(\"#\");\n    const include_user_groups = opts.user_group;\n    const include_users = opts.user;\n\n    $input.typeahead({\n        items: 5,\n        fixed: true,\n        dropup: true,\n        source() {\n            let source = [];\n            if (include_streams(this.query)) {\n                // If query starts with # we expect,\n                // only stream suggestions so we simply\n                // return stream source.\n                return stream_pill.typeahead_source(pills);\n            }\n\n            if (include_user_groups) {\n                source = source.concat(user_group_pill.typeahead_source(pills));\n            }\n\n            if (include_users) {\n                if (opts.user_source !== undefined) {\n                    // If user_source is specified in opts, it\n                    // is given priority. Otherwise we use\n                    // default user_pill.typeahead_source.\n                    source = source.concat(opts.user_source());\n                } else {\n                    source = source.concat(user_pill.typeahead_source(pills));\n                }\n            }\n            return source;\n        },\n        highlighter(item) {\n            if (include_streams(this.query)) {\n                return typeahead_helper.render_stream(item);\n            }\n\n            if (include_user_groups && user_groups.is_user_group(item)) {\n                return typeahead_helper.render_user_group(item);\n            }\n\n            // After reaching this point, it is sure\n            // that given item is a person. So this\n            // handles `include_users` cases along with\n            // default cases.\n            return typeahead_helper.render_person(item);\n        },\n        matcher(item) {\n            let query = this.query.toLowerCase();\n            query = query.replace(/\\u00A0/g, \" \");\n\n            if (include_streams(query)) {\n                query = query.trim().slice(1);\n                return item.name.toLowerCase().includes(query);\n            }\n\n            let matches = false;\n            if (include_user_groups) {\n                matches = matches || group_matcher(query, item);\n            }\n\n            if (include_users) {\n                matches = matches || person_matcher(query, item);\n            }\n            return matches;\n        },\n        sorter(matches) {\n            const query = this.query;\n            if (include_streams(query)) {\n                return typeahead_helper.sort_streams(matches, query.trim().slice(1));\n            }\n\n            let users = [];\n            if (include_users) {\n                users = matches.filter((ele) => people.is_known_user(ele));\n            }\n\n            let groups;\n            if (include_user_groups) {\n                groups = matches.filter((ele) => user_groups.is_user_group(ele));\n            }\n            return typeahead_helper.sort_recipients({\n                users,\n                query,\n                current_stream: \"\",\n                current_topic: undefined,\n                groups,\n                max_num_items: undefined,\n            });\n        },\n        updater(item) {\n            if (include_streams(this.query)) {\n                stream_pill.append_stream(item, pills);\n            } else if (include_user_groups && user_groups.is_user_group(item)) {\n                user_group_pill.append_user_group(item, pills);\n            } else if (include_users && people.is_known_user(item)) {\n                user_pill.append_user(item, pills);\n            }\n\n            $input.trigger(\"focus\");\n            if (opts.update_func) {\n                opts.update_func();\n            }\n        },\n        stopAdvance: true,\n    });\n}\n","import {FoldDict} from \"./fold_dict\";\nimport * as muted_users from \"./muted_users\";\nimport * as people from \"./people\";\n\nconst partners = new Set();\n\nexport function set_partner(user_id) {\n    partners.add(user_id);\n}\n\nexport function is_partner(user_id) {\n    return partners.has(user_id);\n}\n\nfunction filter_muted_pms(conversation) {\n    // We hide muted users from the top left corner, as well as those huddles\n    // in which all participants are muted.\n    const recipients = conversation.user_ids_string.split(\",\").map((id) => Number.parseInt(id, 10));\n\n    if (recipients.every((id) => muted_users.is_user_muted(id))) {\n        return false;\n    }\n\n    return true;\n}\n\nclass RecentPrivateMessages {\n    // This data structure keeps track of the sets of users you've had\n    // recent conversations with, sorted by time (implemented via\n    // `message_id` sorting, since that's how we time-sort messages).\n    recent_message_ids = new FoldDict(); // key is user_ids_string\n    recent_private_messages = [];\n\n    insert(user_ids, message_id) {\n        if (user_ids.length === 0) {\n            // The server sends [] for self-PMs.\n            user_ids = [people.my_current_user_id()];\n        }\n        user_ids.sort((a, b) => a - b);\n\n        const user_ids_string = user_ids.join(\",\");\n        let conversation = this.recent_message_ids.get(user_ids_string);\n\n        if (conversation === undefined) {\n            // This is a new user, so create a new object.\n            conversation = {\n                user_ids_string,\n                max_message_id: message_id,\n            };\n            this.recent_message_ids.set(user_ids_string, conversation);\n\n            // Optimistically insert the new message at the front, since that\n            // is usually where it belongs, but we'll re-sort.\n            this.recent_private_messages.unshift(conversation);\n        } else {\n            if (conversation.max_message_id >= message_id) {\n                // don't backdate our conversation.  This is the\n                // common code path after initialization when\n                // processing old messages, since we'll already have\n                // the latest message_id for the conversation from\n                // initialization.\n                return;\n            }\n\n            // update our latest message_id\n            conversation.max_message_id = message_id;\n        }\n\n        this.recent_private_messages.sort((a, b) => b.max_message_id - a.max_message_id);\n    }\n\n    get() {\n        // returns array of structs with user_ids_string and\n        // message_id\n        return this.recent_private_messages.filter((pm) => filter_muted_pms(pm));\n    }\n\n    get_strings() {\n        // returns array of structs with user_ids_string and\n        // message_id\n        return this.recent_private_messages\n            .filter((pm) => filter_muted_pms(pm))\n            .map((conversation) => conversation.user_ids_string);\n    }\n\n    initialize(params) {\n        for (const conversation of params.recent_private_conversations) {\n            this.insert(conversation.user_ids, conversation.max_message_id);\n        }\n    }\n}\n\nexport let recent = new RecentPrivateMessages();\n\nexport function process_message(message) {\n    const user_ids = people.pm_with_user_ids(message);\n    if (!user_ids) {\n        return;\n    }\n\n    for (const user_id of user_ids) {\n        set_partner(user_id);\n    }\n\n    recent.insert(user_ids, message.id);\n}\n\nexport function clear_for_testing() {\n    recent = new RecentPrivateMessages();\n    partners.clear();\n}\n","import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport * as pm_list_data from \"./pm_list_data\";\nimport * as pm_list_dom from \"./pm_list_dom\";\nimport * as resize from \"./resize\";\nimport * as topic_zoom from \"./topic_zoom\";\nimport * as ui from \"./ui\";\nimport * as ui_util from \"./ui_util\";\nimport * as vdom from \"./vdom\";\n\nlet prior_dom;\n\n// This module manages the \"Private messages\" section in the upper\n// left corner of the app.  This was split out from stream_list.js.\n\nlet private_messages_collapsed = false;\n\n// The private messages section can be zoomed in to view more messages.\n// This keeps track of if we're zoomed in or not.\nlet zoomed = false;\n\nfunction get_private_messages_section_header() {\n    return $(\n        \".private_messages_container #private_messages_section #private_messages_section_header\",\n    );\n}\n\nexport function set_count(count) {\n    ui_util.update_unread_count_in_dom(get_private_messages_section_header(), count);\n}\n\nfunction close() {\n    private_messages_collapsed = true;\n    $(\"#toggle_private_messages_section_icon\").removeClass(\"fa-caret-down\");\n    $(\"#toggle_private_messages_section_icon\").addClass(\"fa-caret-right\");\n\n    update_private_messages();\n}\n\nexport function _build_private_messages_list() {\n    const conversations = pm_list_data.get_conversations();\n    const pm_list_info = pm_list_data.get_list_info(zoomed);\n    const conversations_to_be_shown = pm_list_info.conversations_to_be_shown;\n    const more_conversations_unread_count = pm_list_info.more_conversations_unread_count;\n\n    const pm_list_nodes = conversations_to_be_shown.map((conversation) =>\n        pm_list_dom.keyed_pm_li(conversation),\n    );\n\n    const all_conversations_shown = conversations_to_be_shown.length === conversations.length;\n    if (!all_conversations_shown) {\n        pm_list_nodes.push(\n            pm_list_dom.more_private_conversations_li(more_conversations_unread_count),\n        );\n    }\n    const dom_ast = pm_list_dom.pm_ul(pm_list_nodes);\n    return dom_ast;\n}\n\nfunction set_dom_to(new_dom) {\n    const $container = ui.get_content_element($(\"#private_messages_list\"));\n\n    function replace_content(html) {\n        $container.html(html);\n    }\n\n    function find() {\n        return $container.find(\"ul\");\n    }\n\n    vdom.update(replace_content, find, new_dom, prior_dom);\n    prior_dom = new_dom;\n}\n\nexport function update_private_messages() {\n    if (private_messages_collapsed) {\n        // In the collapsed state, we will still display the current\n        // conversation, to preserve the UI invariant that there's\n        // always something highlighted in the left sidebar.\n        const conversations = pm_list_data.get_conversations();\n        const active_conversation = conversations.find((conversation) => conversation.is_active);\n\n        if (active_conversation) {\n            const node = [pm_list_dom.keyed_pm_li(active_conversation)];\n            const new_dom = pm_list_dom.pm_ul(node);\n            set_dom_to(new_dom);\n        } else {\n            // Otherwise, empty the section.\n            $(\".pm-list\").empty();\n            prior_dom = undefined;\n        }\n    } else {\n        const new_dom = _build_private_messages_list();\n        set_dom_to(new_dom);\n    }\n    // Make sure to update the left sidebar heights after updating PMs.\n    setTimeout(resize.resize_stream_filters_container, 0);\n}\n\nexport function expand() {\n    private_messages_collapsed = false;\n    $(\"#toggle_private_messages_section_icon\").addClass(\"fa-caret-down\");\n    $(\"#toggle_private_messages_section_icon\").removeClass(\"fa-caret-right\");\n    update_private_messages();\n}\n\nexport function update_dom_with_unread_counts(counts) {\n    // In theory, we could support passing the counts object through\n    // to pm_list_data, rather than fetching it directly there. But\n    // it's not an important optimization, because it's unlikely a\n    // user would have 10,000s of unread PMs where it could matter.\n    update_private_messages();\n    // This is just the global unread count.\n    set_count(counts.private_message_count);\n}\n\nexport function highlight_all_private_messages_view() {\n    $(\".private_messages_container\").addClass(\"active_private_messages_section\");\n}\n\nfunction unhighlight_all_private_messages_view() {\n    $(\".private_messages_container\").removeClass(\"active_private_messages_section\");\n}\n\nexport function handle_narrow_activated(filter) {\n    const active_filter = filter;\n    const is_all_private_message_view = _.isEqual(active_filter.sorted_term_types(), [\n        \"is-private\",\n    ]);\n    const narrow_to_private_messages_section = active_filter.operands(\"pm-with\").length !== 0;\n\n    if (is_all_private_message_view) {\n        highlight_all_private_messages_view();\n    } else {\n        unhighlight_all_private_messages_view();\n    }\n    if (narrow_to_private_messages_section) {\n        update_private_messages();\n    }\n}\n\nexport function handle_narrow_deactivated() {\n    // Since one can renarrow via the keyboard shortcut or similar, we\n    // avoid disturbing the zoomed state here.\n    unhighlight_all_private_messages_view();\n    update_private_messages();\n}\n\nexport function is_private_messages_collapsed() {\n    return private_messages_collapsed;\n}\n\nexport function toggle_private_messages_section() {\n    // change the state of PM section depending on the previous state.\n    if (private_messages_collapsed) {\n        expand();\n    } else {\n        close();\n    }\n}\n\nfunction zoom_in() {\n    zoomed = true;\n    if (topic_zoom.is_zoomed_in()) {\n        topic_zoom.zoom_out();\n    }\n    update_private_messages();\n    $(\".private_messages_container\").removeClass(\"zoom-out\").addClass(\"zoom-in\");\n    $(\"#streams_list\").hide();\n    $(\".left-sidebar .right-sidebar-items\").hide();\n}\n\nfunction zoom_out() {\n    zoomed = false;\n    update_private_messages();\n    $(\".private_messages_container\").removeClass(\"zoom-in\").addClass(\"zoom-out\");\n    $(\"#streams_list\").show();\n    $(\".left-sidebar .right-sidebar-items\").show();\n}\n\nexport function initialize() {\n    $(\".private_messages_container\").on(\"click\", \"#show_more_private_messages\", (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        zoom_in();\n    });\n\n    $(\".private_messages_container\").on(\"click\", \"#hide_more_private_messages\", (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        zoom_out();\n    });\n}\n","import * as buddy_data from \"./buddy_data\";\nimport * as hash_util from \"./hash_util\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as people from \"./people\";\nimport * as pm_conversations from \"./pm_conversations\";\nimport * as unread from \"./unread\";\nimport * as user_status from \"./user_status\";\n\n// Maximum number of conversation threads to show in default view.\nconst max_conversations_to_show = 5;\n\n// Maximum number of conversation threads to show in default view with unreads.\nconst max_conversations_to_show_with_unreads = 8;\n\nexport function get_active_user_ids_string() {\n    const filter = narrow_state.filter();\n\n    if (!filter) {\n        return undefined;\n    }\n\n    const emails = filter.operands(\"pm-with\")[0];\n\n    if (!emails) {\n        return undefined;\n    }\n\n    return people.emails_strings_to_user_ids_string(emails);\n}\n\nexport function get_conversations() {\n    const private_messages = pm_conversations.recent.get();\n    const display_objects = [];\n\n    // The user_ids_string for the current view, if any.\n    const active_user_ids_string = get_active_user_ids_string();\n\n    for (const conversation of private_messages) {\n        const user_ids_string = conversation.user_ids_string;\n        const reply_to = people.user_ids_string_to_emails_string(user_ids_string);\n        const recipients_string = people.get_recipients(user_ids_string);\n\n        const num_unread = unread.num_unread_for_user_ids_string(user_ids_string);\n        const is_group = user_ids_string.includes(\",\");\n        const is_active = user_ids_string === active_user_ids_string;\n\n        let user_circle_class;\n        let status_emoji_info;\n\n        if (!is_group) {\n            const user_id = Number.parseInt(user_ids_string, 10);\n            user_circle_class = buddy_data.get_user_circle_class(user_id);\n            const recipient_user_obj = people.get_by_user_id(user_id);\n\n            if (recipient_user_obj.is_bot) {\n                // Bots do not have status emoji, and are modeled as\n                // always present. We may want to use this space for a\n                // bot icon in the future.\n                user_circle_class = \"user_circle_green\";\n            } else {\n                status_emoji_info = user_status.get_status_emoji(user_id);\n            }\n        }\n\n        const display_object = {\n            recipients: recipients_string,\n            user_ids_string,\n            unread: num_unread,\n            is_zero: num_unread === 0,\n            is_active,\n            url: hash_util.pm_with_url(reply_to),\n            status_emoji_info,\n            user_circle_class,\n            is_group,\n        };\n        display_objects.push(display_object);\n    }\n\n    return display_objects;\n}\n\nexport function is_all_privates() {\n    const filter = narrow_state.filter();\n\n    if (!filter) {\n        return false;\n    }\n\n    return filter.operands(\"is\").includes(\"private\");\n}\n\n// Designed to closely match topic_list_data.get_list_info().\nexport function get_list_info(zoomed) {\n    const conversations = get_conversations();\n\n    if (zoomed || conversations.length <= max_conversations_to_show) {\n        return {\n            conversations_to_be_shown: conversations,\n            more_conversations_unread_count: 0,\n        };\n    }\n\n    const conversations_to_be_shown = [];\n    let more_conversations_unread_count = 0;\n    function should_show_conversation(idx, conversation) {\n        // We always show the active conversation; see the similar\n        // comment in topic_list_data.js.\n        if (conversation.is_active) {\n            return true;\n        }\n\n        // We don't need to filter muted users here, because\n        // pm_conversations.js takes care of this for us.\n\n        // We include the most recent max_conversations_to_show\n        // conversations, regardless of whether they have unread\n        // messages.\n        if (idx < max_conversations_to_show) {\n            return true;\n        }\n\n        // We include older conversations with unread messages up\n        // until max_conversations_to_show_with_unreads total\n        // topics have been included.\n        if (\n            conversation.unread > 0 &&\n            conversations_to_be_shown.length < max_conversations_to_show_with_unreads\n        ) {\n            return true;\n        }\n\n        // Otherwise, this conversation should only be visible in\n        // the unzoomed view.\n        return false;\n    }\n    for (const [idx, conversation] of conversations.entries()) {\n        if (should_show_conversation(idx, conversation)) {\n            conversations_to_be_shown.push(conversation);\n        } else {\n            more_conversations_unread_count += conversation.unread;\n        }\n    }\n\n    return {\n        conversations_to_be_shown,\n        more_conversations_unread_count,\n    };\n}\n","import _ from \"lodash\";\n\nimport render_more_private_conversations from \"../templates/more_pms.hbs\";\nimport render_pm_list_item from \"../templates/pm_list_item.hbs\";\n\nimport * as vdom from \"./vdom\";\n\nexport function keyed_pm_li(conversation) {\n    const render = () => render_pm_list_item(conversation);\n\n    const eq = (other) => _.isEqual(conversation, other.conversation);\n\n    const key = conversation.user_ids_string;\n\n    return {\n        key,\n        render,\n        conversation,\n        eq,\n    };\n}\n\nexport function more_private_conversations_li(more_conversations_unread_count) {\n    const render = () => render_more_private_conversations({more_conversations_unread_count});\n\n    // Used in vdom.js to check if an element has changed and needs to\n    // be updated in the DOM.\n    const eq = (other) =>\n        other.more_items &&\n        more_conversations_unread_count === other.more_conversations_unread_count;\n\n    // This special key must be impossible as a user_ids_string.\n    const key = \"more_private_conversations\";\n\n    return {\n        key,\n        more_items: true,\n        more_conversations_unread_count,\n        render,\n        eq,\n    };\n}\n\nexport function pm_ul(nodes) {\n    const attrs = [\n        [\"class\", \"pm-list\"],\n        [\"data-name\", \"private\"],\n    ];\n    return vdom.ul({\n        attrs,\n        keyed_nodes: nodes,\n    });\n}\n","import $ from \"jquery\";\n\nimport {PollData} from \"../shared/js/poll_data\";\nimport render_widgets_poll_widget from \"../templates/widgets/poll_widget.hbs\";\nimport render_widgets_poll_widget_results from \"../templates/widgets/poll_widget_results.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport {$t} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as people from \"./people\";\n\nexport function activate({\n    $elem,\n    callback,\n    extra_data: {question = \"\", options = []} = {},\n    message,\n}) {\n    const is_my_poll = people.is_my_user_id(message.sender_id);\n    const poll_data = new PollData({\n        message_sender_id: message.sender_id,\n        current_user_id: people.my_current_user_id(),\n        is_my_poll,\n        question,\n        options,\n        comma_separated_names: people.get_full_names_for_poll_option,\n        report_error_function: blueslip.warn,\n    });\n\n    function update_edit_controls() {\n        const has_question = $elem.find(\"input.poll-question\").val().trim() !== \"\";\n        $elem.find(\"button.poll-question-check\").toggle(has_question);\n    }\n\n    function render_question() {\n        const question = poll_data.get_question();\n        const input_mode = poll_data.get_input_mode();\n        const can_edit = is_my_poll && !input_mode;\n        const has_question = question.trim() !== \"\";\n        const can_vote = has_question;\n        const waiting = !is_my_poll && !has_question;\n        const author_help = is_my_poll && !has_question;\n\n        $elem.find(\".poll-question-header\").toggle(!input_mode);\n        $elem.find(\".poll-question-header\").text(question);\n        $elem.find(\".poll-edit-question\").toggle(can_edit);\n        update_edit_controls();\n\n        $elem.find(\".poll-question-bar\").toggle(input_mode);\n        $elem.find(\".poll-option-bar\").toggle(can_vote);\n\n        $elem.find(\".poll-please-wait\").toggle(waiting);\n\n        $elem.find(\".poll-author-help\").toggle(author_help);\n    }\n\n    function start_editing() {\n        poll_data.set_input_mode();\n\n        const question = poll_data.get_question();\n        $elem.find(\"input.poll-question\").val(question);\n        render_question();\n        $elem.find(\"input.poll-question\").trigger(\"focus\");\n    }\n\n    function abort_edit() {\n        poll_data.clear_input_mode();\n        render_question();\n    }\n\n    function submit_question() {\n        const $poll_question_input = $elem.find(\"input.poll-question\");\n        let new_question = $poll_question_input.val().trim();\n        const old_question = poll_data.get_question();\n\n        // We should disable the button for blank questions,\n        // so this is just defensive code.\n        if (new_question.trim() === \"\") {\n            new_question = old_question;\n        }\n\n        // Optimistically set the question locally.\n        poll_data.set_question(new_question);\n        render_question();\n\n        // If there were no actual edits, we can exit now.\n        if (new_question === old_question) {\n            return;\n        }\n\n        // Broadcast the new question to our peers.\n        const data = poll_data.handle.question.outbound(new_question);\n        callback(data);\n    }\n\n    function submit_option() {\n        const $poll_option_input = $elem.find(\"input.poll-option\");\n        const option = $poll_option_input.val().trim();\n        const options = poll_data.get_widget_data().options;\n\n        if (poll_data.is_option_present(options, option)) {\n            return;\n        }\n\n        if (option === \"\") {\n            return;\n        }\n\n        $poll_option_input.val(\"\").trigger(\"focus\");\n\n        const data = poll_data.handle.new_option.outbound(option);\n        callback(data);\n    }\n\n    function submit_vote(key) {\n        const data = poll_data.handle.vote.outbound(key);\n        callback(data);\n    }\n\n    function build_widget() {\n        const html = render_widgets_poll_widget();\n        $elem.html(html);\n\n        $elem.find(\"input.poll-question\").on(\"keyup\", (e) => {\n            e.stopPropagation();\n            update_edit_controls();\n        });\n\n        $elem.find(\"input.poll-question\").on(\"keydown\", (e) => {\n            e.stopPropagation();\n\n            if (keydown_util.is_enter_event(e)) {\n                submit_question();\n                return;\n            }\n\n            if (e.key === \"Escape\") {\n                abort_edit();\n                return;\n            }\n        });\n\n        $elem.find(\".poll-edit-question\").on(\"click\", (e) => {\n            e.stopPropagation();\n            start_editing();\n        });\n\n        $elem.find(\"button.poll-question-check\").on(\"click\", (e) => {\n            e.stopPropagation();\n            submit_question();\n        });\n\n        $elem.find(\"button.poll-question-remove\").on(\"click\", (e) => {\n            e.stopPropagation();\n            abort_edit();\n        });\n\n        $elem.find(\"button.poll-option\").on(\"click\", (e) => {\n            e.stopPropagation();\n            check_option_button();\n            submit_option();\n        });\n\n        $elem.find(\"input.poll-option\").on(\"keyup\", (e) => {\n            e.stopPropagation();\n            check_option_button();\n\n            if (keydown_util.is_enter_event(e)) {\n                submit_option();\n                return;\n            }\n\n            if (e.key === \"Escape\") {\n                $(\"input.poll-option\").val(\"\");\n                return;\n            }\n        });\n    }\n\n    function check_option_button() {\n        const $poll_option_input = $elem.find(\"input.poll-option\");\n        const option = $poll_option_input.val().trim();\n        const options = poll_data.get_widget_data().options;\n\n        if (poll_data.is_option_present(options, option)) {\n            $elem.find(\"button.poll-option\").attr(\"disabled\", true);\n            $elem\n                .find(\"button.poll-option\")\n                .attr(\"title\", $t({defaultMessage: \"Option already present.\"}));\n        } else {\n            $elem.find(\"button.poll-option\").attr(\"disabled\", false);\n            $elem.find(\"button.poll-option\").removeAttr(\"title\");\n        }\n    }\n\n    function render_results() {\n        const widget_data = poll_data.get_widget_data();\n\n        const html = render_widgets_poll_widget_results(widget_data);\n        $elem.find(\"ul.poll-widget\").html(html);\n\n        $elem\n            .find(\"button.poll-vote\")\n            .off(\"click\")\n            .on(\"click\", (e) => {\n                e.stopPropagation();\n                const key = $(e.target).attr(\"data-key\");\n                submit_vote(key);\n            });\n    }\n\n    $elem.handle_events = function (events) {\n        for (const event of events) {\n            poll_data.handle_event(event.sender_id, event.data);\n        }\n\n        render_question();\n        render_results();\n    };\n\n    build_widget();\n    render_question();\n    render_results();\n}\n","/* Module for popovers that have been ported to the modern\n   TippyJS/Popper popover library from the legacy Bootstrap\n   popovers system in popovers.js. */\n\nimport ClipboardJS from \"clipboard\";\nimport $ from \"jquery\";\nimport tippy, {delegate} from \"tippy.js\";\n\nimport render_actions_popover_content from \"../templates/actions_popover_content.hbs\";\nimport render_compose_control_buttons_popover from \"../templates/compose_control_buttons_popover.hbs\";\nimport render_compose_select_enter_behaviour_popover from \"../templates/compose_select_enter_behaviour_popover.hbs\";\nimport render_left_sidebar_stream_setting_popover from \"../templates/left_sidebar_stream_setting_popover.hbs\";\nimport render_mobile_message_buttons_popover_content from \"../templates/mobile_message_buttons_popover_content.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as common from \"./common\";\nimport * as compose_actions from \"./compose_actions\";\nimport * as condense from \"./condense\";\nimport * as emoji_picker from \"./emoji_picker\";\nimport * as giphy from \"./giphy\";\nimport {$t} from \"./i18n\";\nimport * as message_edit from \"./message_edit\";\nimport * as message_edit_history from \"./message_edit_history\";\nimport * as message_lists from \"./message_lists\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as popover_menus_data from \"./popover_menus_data\";\nimport * as popovers from \"./popovers\";\nimport * as read_receipts from \"./read_receipts\";\nimport * as rows from \"./rows\";\nimport * as settings_data from \"./settings_data\";\nimport * as stream_popover from \"./stream_popover\";\nimport {parse_html} from \"./ui_util\";\nimport * as unread_ops from \"./unread_ops\";\nimport {user_settings} from \"./user_settings\";\n\nlet left_sidebar_stream_setting_popover_displayed = false;\nlet compose_mobile_button_popover_displayed = false;\nexport let compose_enter_sends_popover_displayed = false;\nlet compose_control_buttons_popover_instance;\nlet message_actions_popover_displayed = false;\nlet message_actions_popover_keyboard_toggle = false;\n\nexport function actions_popped() {\n    return message_actions_popover_displayed;\n}\n\nexport function get_compose_control_buttons_popover() {\n    return compose_control_buttons_popover_instance;\n}\n\nconst default_popover_props = {\n    delay: 0,\n    appendTo: () => document.body,\n    trigger: \"click\",\n    interactive: true,\n    hideOnClick: true,\n    /* The light-border TippyJS theme is a bit of a misnomer; it\n       is a popover styling similar to Bootstrap.  We've also customized\n       its CSS to support Zulip's dark theme. */\n    theme: \"light-border\",\n    touch: true,\n    /* Don't use allow-HTML here since it is unsafe. Instead, use `parse_html`\n       to generate the required html */\n};\n\nexport function any_active() {\n    return (\n        left_sidebar_stream_setting_popover_displayed ||\n        compose_mobile_button_popover_displayed ||\n        compose_control_buttons_popover_instance ||\n        compose_enter_sends_popover_displayed ||\n        message_actions_popover_displayed\n    );\n}\n\nfunction on_show_prep(instance) {\n    $(instance.popper).on(\"click\", (e) => {\n        // Popover is not hidden on click inside it unless the click handler for the\n        // element explicitly hides the popover when handling the event.\n        // `stopPropagation` is required here to avoid global click handlers from\n        // being triggered.\n        e.stopPropagation();\n    });\n    $(instance.popper).one(\"click\", \".navigate_and_close_popover\", (e) => {\n        // Handler for links inside popover which don't need a special click handler.\n        e.stopPropagation();\n        instance.hide();\n    });\n    popovers.hide_all_except_sidebars();\n}\n\nfunction tippy_no_propagation(target, popover_props) {\n    // For some elements, such as the click target to open the message\n    // actions menu, we want to avoid propagating the click event to\n    // parent elements. Tippy's built-in `delegate` method does not\n    // have an option to do stopPropagation, so we use this method to\n    // open the Tippy popovers associated with such elements.\n    //\n    // A click on the click target will close the menu; for this to\n    // work correctly without leaking, all callers need call\n    // `instance.destroy()` inside their `onHidden` handler.\n    //\n    // TODO: Should we instead we wrap the caller's `onHidden` hook,\n    // if any, to add `instance.destroy()`?\n    $(\"body\").on(\"click\", target, (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const instance = e.currentTarget._tippy;\n\n        if (instance) {\n            instance.hide();\n            return;\n        }\n\n        tippy(e.currentTarget, {\n            ...default_popover_props,\n            showOnCreate: true,\n            ...popover_props,\n        });\n    });\n}\n\nexport function toggle_message_actions_menu(message) {\n    if (message.locally_echoed) {\n        // Don't open the popup for locally echoed messages for now.\n        // It creates bugs with things like keyboard handlers when\n        // we get the server response.\n        return true;\n    }\n\n    const $popover_reference = $(\".selected_message .actions_hover .zulip-icon-ellipsis-v-solid\");\n    message_actions_popover_keyboard_toggle = true;\n    $popover_reference.trigger(\"click\");\n    return true;\n}\n\nexport function initialize() {\n    tippy_no_propagation(\"#streams_inline_icon\", {\n        onShow(instance) {\n            const can_create_streams =\n                settings_data.user_can_create_private_streams() ||\n                settings_data.user_can_create_public_streams() ||\n                settings_data.user_can_create_web_public_streams();\n            on_show_prep(instance);\n\n            if (!can_create_streams) {\n                // If the user can't create streams, we directly\n                // navigate them to the Manage streams subscribe UI.\n                window.location.assign(\"#streams/all\");\n                // Returning false from an onShow handler cancels the show.\n                return false;\n            }\n\n            instance.setContent(parse_html(render_left_sidebar_stream_setting_popover()));\n            left_sidebar_stream_setting_popover_displayed = true;\n            return true;\n        },\n        onHidden(instance) {\n            instance.destroy();\n            left_sidebar_stream_setting_popover_displayed = false;\n        },\n    });\n\n    // compose box buttons popover shown on mobile widths.\n    // We want this click event to propagate and hide other popovers\n    // that could possibly obstruct user from using this popover.\n    delegate(\"body\", {\n        ...default_popover_props,\n        target: \".compose_mobile_button\",\n        placement: \"top\",\n        onShow(instance) {\n            on_show_prep(instance);\n            instance.setContent(\n                parse_html(\n                    render_mobile_message_buttons_popover_content({\n                        is_in_private_narrow: narrow_state.narrowed_to_pms(),\n                    }),\n                ),\n            );\n            compose_mobile_button_popover_displayed = true;\n        },\n        onMount(instance) {\n            const $popper = $(instance.popper);\n            $popper.one(\"click\", \".compose_mobile_stream_button\", (e) => {\n                compose_actions.start(\"stream\", {trigger: \"new topic button\"});\n                e.stopPropagation();\n                instance.hide();\n            });\n            $popper.one(\"click\", \".compose_mobile_private_button\", (e) => {\n                compose_actions.start(\"private\");\n                e.stopPropagation();\n                instance.hide();\n            });\n        },\n        onHidden(instance) {\n            // Destroy instance so that event handlers\n            // are destroyed too.\n            instance.destroy();\n            compose_mobile_button_popover_displayed = false;\n        },\n    });\n\n    // Click event handlers for it are handled in `compose_ui` and\n    // we don't want to close this popover on click inside it but\n    // only if user clicked outside it.\n    tippy_no_propagation(\".compose_control_menu_wrapper\", {\n        placement: \"top\",\n        onShow(instance) {\n            instance.setContent(\n                parse_html(\n                    render_compose_control_buttons_popover({\n                        giphy_enabled: giphy.is_giphy_enabled(),\n                    }),\n                ),\n            );\n            compose_control_buttons_popover_instance = instance;\n            popovers.hide_all_except_sidebars();\n        },\n        onHidden(instance) {\n            instance.destroy();\n            compose_control_buttons_popover_instance = undefined;\n        },\n    });\n\n    tippy_no_propagation(\".enter_sends\", {\n        placement: \"top\",\n        onShow(instance) {\n            on_show_prep(instance);\n            instance.setContent(\n                parse_html(\n                    render_compose_select_enter_behaviour_popover({\n                        enter_sends_true: user_settings.enter_sends,\n                    }),\n                ),\n            );\n            compose_enter_sends_popover_displayed = true;\n        },\n        onMount(instance) {\n            common.adjust_mac_shortcuts(\".enter_sends_choices kbd\");\n\n            $(instance.popper).one(\"click\", \".enter_sends_choice\", (e) => {\n                let selected_behaviour = $(e.currentTarget)\n                    .find(\"input[type='radio']\")\n                    .attr(\"value\");\n                selected_behaviour = selected_behaviour === \"true\"; // Convert to bool\n                user_settings.enter_sends = selected_behaviour;\n                $(`.enter_sends_${!selected_behaviour}`).hide();\n                $(`.enter_sends_${selected_behaviour}`).show();\n\n                // Refocus in the content box so you can continue typing or\n                // press Enter to send.\n                $(\"#compose-textarea\").trigger(\"focus\");\n\n                channel.patch({\n                    url: \"/json/settings\",\n                    data: {enter_sends: selected_behaviour},\n                });\n                e.stopPropagation();\n                instance.hide();\n            });\n        },\n        onHidden(instance) {\n            instance.destroy();\n            compose_enter_sends_popover_displayed = false;\n        },\n    });\n\n    tippy_no_propagation(\".actions_hover .zulip-icon-ellipsis-v-solid\", {\n        // The is our minimum supported width for mobile. We shouldn't\n        // make the popover wider than this.\n        maxWidth: \"320px\",\n        placement: \"bottom\",\n        popperOptions: {\n            modifiers: [\n                {\n                    // The placement is set to bottom, but if that placement does not fit,\n                    // the opposite top placement will be used.\n                    name: \"flip\",\n                    options: {\n                        fallbackPlacements: [\"top\", \"left\"],\n                    },\n                },\n            ],\n        },\n        onShow(instance) {\n            on_show_prep(instance);\n            const $row = $(instance.reference).closest(\".message_row\");\n            const message_id = rows.id($row);\n            message_lists.current.select_id(message_id);\n            const args = popover_menus_data.get_actions_popover_content_context(message_id);\n            instance.setContent(parse_html(render_actions_popover_content(args)));\n            $row.addClass(\"has_popover has_actions_popover\");\n            message_actions_popover_displayed = true;\n        },\n        onMount(instance) {\n            if (message_actions_popover_keyboard_toggle) {\n                popovers.focus_first_action_popover_item();\n            }\n            message_actions_popover_keyboard_toggle = false;\n\n            // We want click events to propagate to `instance` so that\n            // instance.hide gets called.\n            const $popper = $(instance.popper);\n            $popper.one(\"click\", \".respond_button\", (e) => {\n                // Arguably, we should fetch the message ID to respond to from\n                // e.target, but that should always be the current selected\n                // message in the current message list (and\n                // compose_actions.respond_to_message doesn't take a message\n                // argument).\n                compose_actions.quote_and_reply({trigger: \"popover respond\"});\n                e.preventDefault();\n                e.stopPropagation();\n                instance.hide();\n            });\n\n            $popper.one(\"click\", \".popover_edit_message, .popover_view_source\", (e) => {\n                const message_id = $(e.currentTarget).data(\"message-id\");\n                const $row = message_lists.current.get_row(message_id);\n                message_edit.start($row);\n                e.preventDefault();\n                e.stopPropagation();\n                instance.hide();\n            });\n\n            $popper.one(\"click\", \".popover_move_message\", (e) => {\n                const message_id = $(e.currentTarget).data(\"message-id\");\n                const message = message_lists.current.get(message_id);\n                stream_popover.build_move_topic_to_stream_popover(\n                    message.stream_id,\n                    message.topic,\n                    message,\n                );\n                e.preventDefault();\n                e.stopPropagation();\n                instance.hide();\n            });\n\n            $popper.one(\"click\", \".mark_as_unread\", (e) => {\n                const message_id = $(e.currentTarget).data(\"message-id\");\n                unread_ops.mark_as_unread_from_here(message_id);\n                e.preventDefault();\n                e.stopPropagation();\n                instance.hide();\n            });\n\n            $popper.one(\"click\", \".popover_toggle_collapse\", (e) => {\n                const message_id = $(e.currentTarget).data(\"message-id\");\n                const $row = message_lists.current.get_row(message_id);\n                const message = message_lists.current.get(rows.id($row));\n                if ($row) {\n                    if (message.collapsed) {\n                        condense.uncollapse($row);\n                    } else {\n                        condense.collapse($row);\n                    }\n                }\n                e.preventDefault();\n                e.stopPropagation();\n                instance.hide();\n            });\n\n            $popper.one(\"click\", \".rehide_muted_user_message\", (e) => {\n                const message_id = $(e.currentTarget).data(\"message-id\");\n                const $row = message_lists.current.get_row(message_id);\n                const message = message_lists.current.get(rows.id($row));\n                const message_container = message_lists.current.view.message_containers.get(\n                    message.id,\n                );\n                if ($row && !message_container.is_hidden) {\n                    message_lists.current.view.hide_revealed_message(message_id);\n                }\n                e.preventDefault();\n                e.stopPropagation();\n                instance.hide();\n            });\n\n            $popper.one(\"click\", \".view_edit_history\", (e) => {\n                const message_id = $(e.currentTarget).data(\"message-id\");\n                const $row = message_lists.current.get_row(message_id);\n                const message = message_lists.current.get(rows.id($row));\n                message_edit_history.show_history(message);\n                $(\"#message-history-cancel\").trigger(\"focus\");\n                e.preventDefault();\n                e.stopPropagation();\n                instance.hide();\n            });\n\n            $popper.one(\"click\", \".view_read_receipts\", (e) => {\n                const message_id = $(e.currentTarget).data(\"message-id\");\n                read_receipts.show_user_list(message_id);\n                e.preventDefault();\n                e.stopPropagation();\n                instance.hide();\n            });\n\n            $popper.one(\"click\", \".delete_message\", (e) => {\n                const message_id = $(e.currentTarget).data(\"message-id\");\n                message_edit.delete_message(message_id);\n                e.preventDefault();\n                e.stopPropagation();\n                instance.hide();\n            });\n\n            $popper.one(\"click\", \".reaction_button\", (e) => {\n                const message_id = $(e.currentTarget).data(\"message-id\");\n                // Don't propagate the click event since `toggle_emoji_popover` opens a\n                // emoji_picker which we don't want to hide after actions popover is hidden.\n                e.stopPropagation();\n                e.preventDefault();\n                emoji_picker.toggle_emoji_popover(\n                    instance.reference.parentElement,\n                    message_id,\n                    true,\n                );\n                instance.hide();\n            });\n\n            new ClipboardJS($popper.find(\".copy_link\")[0]).on(\"success\", (e) => {\n                // e.trigger returns the DOM element triggering the copy action\n                const message_id = e.trigger.dataset.messageId;\n                const $row = $(`[zid='${CSS.escape(message_id)}']`);\n                $row.find(\".alert-msg\")\n                    .text($t({defaultMessage: \"Copied!\"}))\n                    .css(\"display\", \"block\")\n                    .delay(1000)\n                    .fadeOut(300);\n\n                setTimeout(() => {\n                    // The Clipboard library works by focusing to a hidden textarea.\n                    // We unfocus this so keyboard shortcuts, etc., will work again.\n                    $(\":focus\").trigger(\"blur\");\n                }, 0);\n                instance.hide();\n            });\n        },\n        onHidden(instance) {\n            const $row = $(instance.reference).closest(\".message_row\");\n            $row.removeClass(\"has_popover has_actions_popover\");\n            instance.destroy();\n            message_actions_popover_displayed = false;\n            message_actions_popover_keyboard_toggle = false;\n        },\n    });\n}\n","/* This module provides relevant data to render popovers that require multiple args.\n   This helps keep the popovers code small and keep it focused on rendering side of things. */\n\nimport * as feature_flags from \"./feature_flags\";\nimport * as hash_util from \"./hash_util\";\nimport {$t} from \"./i18n\";\nimport * as message_edit from \"./message_edit\";\nimport * as message_lists from \"./message_lists\";\nimport * as muted_users from \"./muted_users\";\nimport * as narrow_state from \"./narrow_state\";\nimport {page_params} from \"./page_params\";\nimport * as stream_data from \"./stream_data\";\n\nexport function get_actions_popover_content_context(message_id) {\n    const message = message_lists.current.get(message_id);\n    const message_container = message_lists.current.view.message_containers.get(message.id);\n    const not_spectator = !page_params.is_spectator;\n    const should_display_hide_option =\n        muted_users.is_user_muted(message.sender_id) &&\n        !message_container.is_hidden &&\n        not_spectator;\n    const is_content_editable = message_edit.is_content_editable(message);\n    const can_move_message = message_edit.can_move_message(message);\n\n    let editability_menu_item;\n    let move_message_menu_item;\n    let view_source_menu_item;\n\n    if (is_content_editable) {\n        editability_menu_item = $t({defaultMessage: \"Edit message\"});\n    } else {\n        view_source_menu_item = $t({defaultMessage: \"View message source\"});\n    }\n\n    if (can_move_message) {\n        move_message_menu_item = $t({defaultMessage: \"Move messages\"});\n    }\n\n    // We do not offer \"Mark as unread\" on messages in streams\n    // that the user is not currently subscribed to. Zulip has an\n    // invariant that all unread messages must be in streams the\n    // user is subscribed to, and so the server will ignore any\n    // messages in such streams; it's better to hint this is not\n    // useful by not offering the option.\n    //\n    // We also require that the message is currently marked as\n    // read. Theoretically, it could be useful to offer this even\n    // for a message that is already unread, so you can mark those\n    // below it as unread; but that's an unlikely situation, and\n    // showing it can be a confusing source of clutter. We may\n    // want to revise this algorithm specifically in the context\n    // of interleaved views.\n    //\n    // To work around #22893, we also only offer the option if the\n    // fetch_status data structure means we'll be able to mark\n    // everything below the current message as read correctly.\n    const not_stream_message = message.type !== \"stream\";\n    const subscribed_to_stream =\n        message.type === \"stream\" && stream_data.is_subscribed(message.stream_id);\n    const should_display_mark_as_unread =\n        !message.unread && not_spectator && (not_stream_message || subscribed_to_stream);\n\n    const should_display_edit_history_option =\n        message.edit_history &&\n        message.edit_history.some(\n            (entry) =>\n                entry.prev_content !== undefined ||\n                entry.prev_stream !== undefined ||\n                entry.prev_topic !== undefined,\n        ) &&\n        page_params.realm_allow_edit_history &&\n        not_spectator;\n\n    // Disabling this for /me messages is a temporary workaround\n    // for the fact that we don't have a styling for how that\n    // should look.  See also condense.js.\n    const should_display_collapse =\n        !message.locally_echoed && !message.is_me_message && !message.collapsed && not_spectator;\n    const should_display_uncollapse =\n        !message.locally_echoed && !message.is_me_message && message.collapsed;\n\n    const should_display_quote_and_reply = message.content !== \"<p>(deleted)</p>\" && not_spectator;\n\n    const conversation_time_uri = hash_util.by_conversation_and_time_url(message);\n\n    const should_display_delete_option = message_edit.get_deletability(message) && not_spectator;\n    const should_display_read_receipts_option =\n        page_params.realm_enable_read_receipts && not_spectator;\n\n    return {\n        message_id: message.id,\n        stream_id: message.stream_id,\n        editability_menu_item,\n        move_message_menu_item,\n        should_display_mark_as_unread,\n        view_source_menu_item,\n        should_display_collapse,\n        should_display_uncollapse,\n        should_display_add_reaction_option: message.sent_by_me,\n        should_display_edit_history_option,\n        should_display_hide_option,\n        conversation_time_uri,\n        narrowed: narrow_state.active(),\n        should_display_delete_option,\n        should_display_read_receipts_option,\n        should_display_reminder_option: feature_flags.reminders_in_message_action_menu,\n        should_display_quote_and_reply,\n    };\n}\n","import ClipboardJS from \"clipboard\";\nimport {add, formatISO, parseISO, set} from \"date-fns\";\nimport $ from \"jquery\";\nimport tippy, {hideAll} from \"tippy.js\";\n\nimport render_no_arrow_popover from \"../templates/no_arrow_popover.hbs\";\nimport render_playground_links_popover_content from \"../templates/playground_links_popover_content.hbs\";\nimport render_user_group_info_popover from \"../templates/user_group_info_popover.hbs\";\nimport render_user_group_info_popover_content from \"../templates/user_group_info_popover_content.hbs\";\nimport render_user_info_popover_content from \"../templates/user_info_popover_content.hbs\";\nimport render_user_info_popover_manage_menu from \"../templates/user_info_popover_manage_menu.hbs\";\nimport render_user_info_popover_title from \"../templates/user_info_popover_title.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as buddy_data from \"./buddy_data\";\nimport * as channel from \"./channel\";\nimport * as compose_actions from \"./compose_actions\";\nimport * as compose_state from \"./compose_state\";\nimport * as compose_ui from \"./compose_ui\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport * as emoji_picker from \"./emoji_picker\";\nimport * as giphy from \"./giphy\";\nimport * as hash_util from \"./hash_util\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_viewport from \"./message_viewport\";\nimport * as muted_users from \"./muted_users\";\nimport * as muted_users_ui from \"./muted_users_ui\";\nimport * as narrow from \"./narrow\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as popover_menus from \"./popover_menus\";\nimport * as realm_playground from \"./realm_playground\";\nimport * as reminder from \"./reminder\";\nimport * as resize from \"./resize\";\nimport * as rows from \"./rows\";\nimport * as settings_bots from \"./settings_bots\";\nimport * as settings_config from \"./settings_config\";\nimport * as settings_data from \"./settings_data\";\nimport * as settings_users from \"./settings_users\";\nimport * as stream_popover from \"./stream_popover\";\nimport * as ui_report from \"./ui_report\";\nimport * as user_groups from \"./user_groups\";\nimport * as user_profile from \"./user_profile\";\nimport {user_settings} from \"./user_settings\";\nimport * as user_status from \"./user_status\";\nimport * as user_status_ui from \"./user_status_ui\";\nimport * as util from \"./util\";\n\nlet $current_message_info_popover_elem;\nlet $current_user_info_popover_elem;\nlet $current_user_info_popover_manage_menu;\nlet $current_playground_links_popover_elem;\nlet userlist_placement = \"right\";\n\nlet list_of_popovers = [];\n\nexport function clear_for_testing() {\n    $current_message_info_popover_elem = undefined;\n    $current_user_info_popover_elem = undefined;\n    $current_user_info_popover_manage_menu = undefined;\n    $current_playground_links_popover_elem = undefined;\n    list_of_popovers.length = 0;\n    userlist_placement = \"right\";\n}\n\nexport function clipboard_enable(arg) {\n    // arg is a selector or element\n    // We extract this function for testing purpose.\n    return new ClipboardJS(arg);\n}\n\nexport function elem_to_user_id($elem) {\n    return Number.parseInt($elem.attr(\"data-user-id\"), 10);\n}\n\n// this utilizes the proxy pattern to intercept all calls to $.fn.popover\n// and push the $.fn.data($o, \"popover\") results to an array.\n// this is needed so that when we try to unload popovers, we can kill all dead\n// ones that no longer have valid parents in the DOM.\nconst old_popover = $.fn.popover;\n$.fn.popover = Object.assign(function (...args) {\n    // apply the jQuery object as `this`, and popover function arguments.\n    old_popover.apply(this, args);\n\n    // if there is a valid \"popover\" key in the jQuery data object then\n    // push it to the array.\n    if (this.data(\"popover\")) {\n        list_of_popovers.push(this.data(\"popover\"));\n    }\n}, old_popover);\n\nfunction copy_email_handler(e) {\n    const $email_el = $(e.trigger.parentElement);\n    const $copy_icon = $email_el.find(\"i\");\n\n    // only change the parent element's text back to email\n    // and not overwrite the tooltip.\n    const email_textnode = $email_el[0].childNodes[2];\n\n    $email_el.addClass(\"email_copied\");\n    email_textnode.nodeValue = $t({defaultMessage: \"Email copied\"});\n\n    setTimeout(() => {\n        $email_el.removeClass(\"email_copied\");\n        email_textnode.nodeValue = $copy_icon.attr(\"data-clipboard-text\");\n    }, 1500);\n    e.clearSelection();\n}\n\nfunction init_email_clipboard() {\n    /*\n        This shows (and enables) the copy-text icon for folks\n        who have names that would overflow past the right\n        edge of our user mention popup.\n    */\n    $(\".user_popover_email\").each(function () {\n        if (this.clientWidth < this.scrollWidth) {\n            const $email_el = $(this);\n            const $copy_email_icon = $email_el.find(\"i\");\n\n            /*\n                For deactivated users, the copy-email icon will\n                not even be present in the HTML, so we don't do\n                anything.  We don't reveal emails for deactivated\n                users.\n            */\n            if ($copy_email_icon[0]) {\n                $copy_email_icon.removeClass(\"hide_copy_icon\");\n                const copy_email_clipboard = clipboard_enable($copy_email_icon[0]);\n                copy_email_clipboard.on(\"success\", copy_email_handler);\n            }\n        }\n    });\n}\n\nfunction init_email_tooltip(user) {\n    /*\n        This displays the email tooltip for folks\n        who have names that would overflow past the right\n        edge of our user mention popup.\n    */\n\n    $(\".user_popover_email\").each(function () {\n        if (this.clientWidth < this.scrollWidth) {\n            tippy(this, {\n                placement: \"bottom\",\n                content: people.get_visible_email(user),\n                interactive: true,\n            });\n        }\n    });\n}\n\nfunction load_medium_avatar(user, $elt) {\n    const user_avatar_url = people.medium_avatar_url_for_person(user);\n    const sender_avatar_medium = new Image();\n\n    sender_avatar_medium.src = user_avatar_url;\n    $(sender_avatar_medium).on(\"load\", function () {\n        $elt.css(\"background-image\", \"url(\" + $(this).attr(\"src\") + \")\");\n    });\n}\n\nfunction calculate_info_popover_placement(size, $elt) {\n    const ypos = $elt.offset().top;\n\n    if (!(ypos + size / 2 < message_viewport.height() && ypos > size / 2)) {\n        if (ypos + size < message_viewport.height()) {\n            return \"bottom\";\n        } else if (ypos > size) {\n            return \"top\";\n        }\n    }\n\n    return undefined;\n}\n\nexport function hide_user_info_popover_manage_menu() {\n    if ($current_user_info_popover_manage_menu !== undefined) {\n        $current_user_info_popover_manage_menu.popover(\"destroy\");\n        $current_user_info_popover_manage_menu = undefined;\n    }\n}\n\nfunction show_user_info_popover_manage_menu(element, user) {\n    const $last_popover_elem = $current_user_info_popover_manage_menu;\n    hide_user_info_popover_manage_menu();\n    if ($last_popover_elem !== undefined && $last_popover_elem.get()[0] === element) {\n        return;\n    }\n\n    const is_me = people.is_my_user_id(user.user_id);\n    const is_muted = muted_users.is_user_muted(user.user_id);\n    const is_system_bot = user.is_system_bot;\n    const muting_allowed = !is_me && !user.is_bot;\n\n    const args = {\n        can_mute: muting_allowed && !is_muted,\n        can_manage_user: page_params.is_admin && !is_me && !is_system_bot,\n        can_unmute: muting_allowed && is_muted,\n        is_active: people.is_active_user_for_popover(user.user_id),\n        is_bot: user.is_bot,\n        user_id: user.user_id,\n    };\n\n    const $popover_elt = $(element);\n    $popover_elt.popover({\n        content: render_user_info_popover_manage_menu(args),\n        placement: \"bottom\",\n        html: true,\n        trigger: \"manual\",\n    });\n\n    $popover_elt.popover(\"show\");\n    $current_user_info_popover_manage_menu = $popover_elt;\n}\n\nfunction render_user_info_popover(\n    user,\n    popover_element,\n    is_sender_popover,\n    has_message_context,\n    private_msg_class,\n    template_class,\n    popover_placement,\n) {\n    const is_me = people.is_my_user_id(user.user_id);\n\n    let invisible_mode = false;\n\n    if (is_me) {\n        invisible_mode = !user_settings.presence_enabled;\n    }\n\n    const muting_allowed = !is_me && !user.is_bot;\n    const is_active = people.is_active_user_for_popover(user.user_id);\n    const is_system_bot = user.is_system_bot;\n    const status_text = user_status.get_status_text(user.user_id);\n    const status_emoji_info = user_status.get_status_emoji(user.user_id);\n    const spectator_view = page_params.is_spectator;\n\n    // TODO: The show_manage_menu calculation can get a lot simpler\n    // if/when we allow muting bot users.\n    const can_manage_user = page_params.is_admin && !is_me && !is_system_bot;\n    const show_manage_menu = !spectator_view && (muting_allowed || can_manage_user);\n\n    let date_joined;\n    if (spectator_view) {\n        const dateFormat = new Intl.DateTimeFormat(\"default\", {dateStyle: \"long\"});\n        date_joined = dateFormat.format(parseISO(user.date_joined));\n    }\n    // Filtering out only those profile fields that can be display in the popover and are not empty.\n    const dateFormat = new Intl.DateTimeFormat(\"default\", {dateStyle: \"long\"});\n    const field_types = page_params.custom_profile_field_types;\n    const display_profile_fields = page_params.custom_profile_fields\n        .map((f) => user_profile.get_custom_profile_field_data(user, f, field_types, dateFormat))\n        .filter((f) => f.display_in_profile_summary && f.value !== undefined && f.value !== null);\n\n    const args = {\n        invisible_mode,\n        can_send_private_message:\n            is_active &&\n            !is_me &&\n            page_params.realm_private_message_policy !==\n                settings_config.private_message_policy_values.disabled.code,\n        display_profile_fields,\n        has_message_context,\n        is_active,\n        is_bot: user.is_bot,\n        is_me,\n        is_sender_popover,\n        pm_with_url: hash_util.pm_with_url(user.email),\n        user_circle_class: buddy_data.get_user_circle_class(user.user_id),\n        private_message_class: private_msg_class,\n        sent_by_uri: hash_util.by_sender_url(user.email),\n        show_email: settings_data.show_email(),\n        show_manage_menu,\n        user_email: people.get_visible_email(user),\n        user_full_name: user.full_name,\n        user_id: user.user_id,\n        user_last_seen_time_status: buddy_data.user_last_seen_time_status(user.user_id),\n        user_time: people.get_user_time(user.user_id),\n        user_type: people.get_user_type(user.user_id),\n        status_content_available: Boolean(status_text || status_emoji_info),\n        status_text,\n        status_emoji_info,\n        user_mention_syntax: people.get_mention_syntax(user.full_name, user.user_id),\n        date_joined,\n        spectator_view,\n    };\n\n    if (user.is_bot) {\n        const bot_owner_id = user.bot_owner_id;\n        if (is_system_bot) {\n            args.is_system_bot = is_system_bot;\n        } else if (bot_owner_id) {\n            const bot_owner = people.get_by_user_id(bot_owner_id);\n            args.bot_owner = bot_owner;\n        }\n    }\n\n    const $popover_content = $(render_user_info_popover_content(args));\n    popover_element.popover({\n        content: $popover_content.get(0),\n        // TODO: Determine whether `fixed` should be applied\n        // unconditionally.  Right now, we only do it for the user\n        // sidebar version of the popover.\n        fixed: template_class === \"user_popover\",\n        placement: popover_placement,\n        template: render_no_arrow_popover({class: template_class}),\n        title: render_user_info_popover_title({\n            // See the load_medium_avatar comment for important background.\n            user_avatar: people.small_avatar_url_for_person(user),\n            user_is_guest: user.is_guest,\n        }),\n        html: true,\n        trigger: \"manual\",\n        top_offset: $(\"#userlist-title\").offset().top + 15,\n        fix_positions: true,\n    });\n    popover_element.popover(\"show\");\n\n    init_email_clipboard();\n    init_email_tooltip(user);\n    const $user_name_element = $popover_content.find(\".user_full_name\");\n    const $bot_owner_element = $popover_content.find(\".bot_owner\");\n    if ($user_name_element.prop(\"clientWidth\") < $user_name_element.prop(\"scrollWidth\")) {\n        $user_name_element.addClass(\"tippy-zulip-tooltip\");\n    }\n    if (\n        args.bot_owner &&\n        $bot_owner_element.prop(\"clientWidth\") < $bot_owner_element.prop(\"scrollWidth\")\n    ) {\n        $bot_owner_element.addClass(\"tippy-zulip-tooltip\");\n    }\n\n    // Note: We pass the normal-size avatar in initial rendering, and\n    // then query the server to replace it with the medium-size\n    // avatar.  The purpose of this double-fetch approach is to take\n    // advantage of the fact that the browser should already have the\n    // low-resolution image cached and thus display a low-resolution\n    // avatar rather than a blank area during the network delay for\n    // fetching the medium-size one.\n    load_medium_avatar(user, $(\".popover-avatar\"));\n}\n\n// exporting for testability\nexport const _test_calculate_info_popover_placement = calculate_info_popover_placement;\n\n// element is the target element to pop off of\n// user is the user whose profile to show\n// message is the message containing it, which should be selected\nfunction show_user_info_popover_for_message(element, user, message) {\n    const $last_popover_elem = $current_message_info_popover_elem;\n    hide_all();\n    if ($last_popover_elem !== undefined && $last_popover_elem.get()[0] === element) {\n        // We want it to be the case that a user can dismiss a popover\n        // by clicking on the same element that caused the popover.\n        return;\n    }\n    message_lists.current.select_id(message.id);\n    const $elt = $(element);\n    if ($elt.data(\"popover\") === undefined) {\n        if (user === undefined) {\n            // This is never supposed to happen, not even for deactivated\n            // users, so we'll need to debug this error if it occurs.\n            blueslip.error(\"Bad sender in message\" + message.sender_id);\n            return;\n        }\n\n        const is_sender_popover = message.sender_id === user.user_id;\n        render_user_info_popover(\n            user,\n            $elt,\n            is_sender_popover,\n            true,\n            \"respond_personal_button\",\n            \"message-info-popover\",\n            \"right\",\n        );\n\n        $current_message_info_popover_elem = $elt;\n    }\n}\n\nexport function show_user_info_popover(element, user) {\n    const $last_popover_elem = $current_user_info_popover_elem;\n    hide_all();\n    if ($last_popover_elem !== undefined && $last_popover_elem.get()[0] === element) {\n        return;\n    }\n    const $elt = $(element);\n    render_user_info_popover(\n        user,\n        $elt,\n        false,\n        false,\n        \"compose_private_message\",\n        \"user-info-popover\",\n        \"right\",\n    );\n    $current_user_info_popover_elem = $elt;\n}\n\nfunction get_user_info_popover_for_message_items() {\n    if (!$current_message_info_popover_elem) {\n        blueslip.error(\"Trying to get menu items when action popover is closed.\");\n        return undefined;\n    }\n\n    const popover_data = $current_message_info_popover_elem.data(\"popover\");\n    if (!popover_data) {\n        blueslip.error(\"Cannot find popover data for actions menu.\");\n        return undefined;\n    }\n\n    return $(\"li:not(.divider):visible a\", popover_data.$tip);\n}\n\nfunction get_user_info_popover_items() {\n    const $popover_elt = $(\"div.user-info-popover\");\n    if (!$current_user_info_popover_elem || !$popover_elt.length) {\n        blueslip.error(\"Trying to get menu items when action popover is closed.\");\n        return undefined;\n    }\n\n    if ($popover_elt.length >= 2) {\n        blueslip.error(\"More than one user info popovers cannot be opened at same time.\");\n        return undefined;\n    }\n\n    return $(\"li:not(.divider):visible a\", $popover_elt);\n}\n\nfunction get_user_info_popover_manage_menu_items() {\n    if (!$current_user_info_popover_manage_menu) {\n        blueslip.error(\"Trying to get menu items when action popover is closed.\");\n        return undefined;\n    }\n\n    const popover_data = $current_user_info_popover_manage_menu.data(\"popover\");\n    if (!popover_data) {\n        blueslip.error(\"Cannot find popover data for actions menu.\");\n        return undefined;\n    }\n\n    return $(\".user_info_popover_manage_menu li:not(.divider):visible a\", popover_data.$tip);\n}\n\nfunction fetch_group_members(member_ids) {\n    return member_ids\n        .map((m) => people.get_by_user_id(m))\n        .filter((m) => m !== undefined)\n        .map((p) => ({\n            ...p,\n            user_circle_class: buddy_data.get_user_circle_class(p.user_id),\n            is_active: people.is_active_user_for_popover(p.user_id),\n            user_last_seen_time_status: buddy_data.user_last_seen_time_status(p.user_id),\n        }));\n}\n\nfunction sort_group_members(members) {\n    return members.sort((a, b) => util.strcmp(a.full_name, b.fullname));\n}\n\n// exporting these functions for testing purposes\nexport const _test_fetch_group_members = fetch_group_members;\n\nexport const _test_sort_group_members = sort_group_members;\n\n// element is the target element to pop off of\n// user is the user whose profile to show\n// message is the message containing it, which should be selected\nfunction show_user_group_info_popover(element, group, message) {\n    const $last_popover_elem = $current_message_info_popover_elem;\n    // hardcoded pixel height of the popover\n    // note that the actual size varies (in group size), but this is about as big as it gets\n    const popover_size = 390;\n    hide_all();\n    if ($last_popover_elem !== undefined && $last_popover_elem.get()[0] === element) {\n        // We want it to be the case that a user can dismiss a popover\n        // by clicking on the same element that caused the popover.\n        return;\n    }\n    message_lists.current.select_id(message.id);\n    const $elt = $(element);\n    if ($elt.data(\"popover\") === undefined) {\n        const args = {\n            group_name: group.name,\n            group_description: group.description,\n            members: sort_group_members(fetch_group_members(Array.from(group.members))),\n        };\n        $elt.popover({\n            placement: calculate_info_popover_placement(popover_size, $elt),\n            template: render_user_group_info_popover({class: \"message-info-popover\"}),\n            content: render_user_group_info_popover_content(args),\n            html: true,\n            trigger: \"manual\",\n        });\n        $elt.popover(\"show\");\n        $current_message_info_popover_elem = $elt;\n    }\n}\n\nfunction get_action_menu_menu_items() {\n    const $current_actions_popover_elem = $(\"[data-tippy-root] .actions_popover\");\n    if (!$current_actions_popover_elem) {\n        blueslip.error(\"Trying to get menu items when action popover is closed.\");\n        return undefined;\n    }\n\n    return $current_actions_popover_elem.find(\"li:not(.divider):visible a\");\n}\n\nexport function focus_first_popover_item($items, index = 0) {\n    if (!$items) {\n        return;\n    }\n\n    $items.eq(index).expectOne().trigger(\"focus\");\n}\n\nexport function popover_items_handle_keyboard(key, $items) {\n    if (!$items) {\n        return;\n    }\n\n    let index = $items.index($items.filter(\":focus\"));\n\n    if (key === \"enter\" && index >= 0 && index < $items.length) {\n        $items[index].click();\n        if ($current_user_info_popover_manage_menu) {\n            const $items = get_user_info_popover_manage_menu_items();\n            focus_first_popover_item($items);\n        }\n        return;\n    }\n    if (index === -1) {\n        if ($(\".user_info_popover_manage_menu_btn\").is(\":visible\")) {\n            index = 1;\n        } else {\n            index = 0;\n        }\n    } else if ((key === \"down_arrow\" || key === \"vim_down\") && index < $items.length - 1) {\n        index += 1;\n    } else if ((key === \"up_arrow\" || key === \"vim_up\") && index > 0) {\n        index -= 1;\n    }\n    $items.eq(index).trigger(\"focus\");\n}\n\nexport function focus_first_action_popover_item() {\n    // For now I recommend only calling this when the user opens the menu with a hotkey.\n    // Our popup menus act kind of funny when you mix keyboard and mouse.\n    const $items = get_action_menu_menu_items();\n    focus_first_popover_item($items);\n}\n\nexport function actions_menu_handle_keyboard(key) {\n    const $items = get_action_menu_menu_items();\n    popover_items_handle_keyboard(key, $items);\n}\n\nexport function message_info_popped() {\n    return $current_message_info_popover_elem !== undefined;\n}\n\nexport function hide_message_info_popover() {\n    if (message_info_popped()) {\n        $current_message_info_popover_elem.popover(\"destroy\");\n        $current_message_info_popover_elem = undefined;\n    }\n}\n\nexport function user_info_popped() {\n    return $current_user_info_popover_elem !== undefined;\n}\n\nexport function user_info_manage_menu_popped() {\n    return $current_user_info_popover_manage_menu !== undefined;\n}\n\nexport function hide_user_info_popover() {\n    if (user_info_popped()) {\n        $current_user_info_popover_elem.popover(\"destroy\");\n        $current_user_info_popover_elem = undefined;\n    }\n}\n\nexport function hide_userlist_sidebar() {\n    $(\".app-main .column-right\").removeClass(\"expanded\");\n}\n\nexport function hide_pm_list_sidebar() {\n    $(\".app-main .column-left\").removeClass(\"expanded\");\n}\n\nexport function show_userlist_sidebar() {\n    $(\".app-main .column-right\").addClass(\"expanded\");\n    resize.resize_page_components();\n}\n\nlet current_user_sidebar_user_id;\nlet current_user_sidebar_popover;\n\nexport function user_sidebar_popped() {\n    return current_user_sidebar_popover !== undefined;\n}\n\nexport function hide_user_sidebar_popover() {\n    if (user_sidebar_popped()) {\n        // this hide_* method looks different from all the others since\n        // the presence list may be redrawn. Due to funkiness with jQuery's .data()\n        // this would confuse $.popover(\"destroy\"), which looks at the .data() attached\n        // to a certain element. We thus save off the .data(\"popover\") in the\n        // show_user_sidebar_popover and inject it here before calling destroy.\n        $(\"#user_presences\").data(\"popover\", current_user_sidebar_popover);\n        $(\"#user_presences\").popover(\"destroy\");\n        current_user_sidebar_user_id = undefined;\n        current_user_sidebar_popover = undefined;\n    }\n}\n\nfunction hide_all_user_info_popovers() {\n    hide_user_info_popover_manage_menu();\n    hide_message_info_popover();\n    hide_user_sidebar_popover();\n    hide_user_info_popover();\n}\n\nfunction focus_user_info_popover_item() {\n    // For now I recommend only calling this when the user opens the menu with a hotkey.\n    // Our popup menus act kind of funny when you mix keyboard and mouse.\n    const $items = get_user_info_popover_for_message_items();\n\n    if ($(\".user_info_popover_manage_menu_btn\").is(\":visible\")) {\n        focus_first_popover_item($items, 1);\n    } else {\n        focus_first_popover_item($items);\n    }\n}\n\nfunction get_user_sidebar_popover_items() {\n    if (!current_user_sidebar_popover) {\n        blueslip.error(\"Trying to get menu items when user sidebar popover is closed.\");\n        return undefined;\n    }\n\n    return $(\"li:not(.divider):visible a\", current_user_sidebar_popover.$tip);\n}\n\nexport function user_sidebar_popover_handle_keyboard(key) {\n    const $items = get_user_sidebar_popover_items();\n    popover_items_handle_keyboard(key, $items);\n}\n\nexport function user_info_popover_for_message_handle_keyboard(key) {\n    const $items = get_user_info_popover_for_message_items();\n    popover_items_handle_keyboard(key, $items);\n}\n\nexport function user_info_popover_handle_keyboard(key) {\n    const $items = get_user_info_popover_items();\n    popover_items_handle_keyboard(key, $items);\n}\n\nexport function user_info_popover_manage_menu_handle_keyboard(key) {\n    const $items = get_user_info_popover_manage_menu_items();\n    popover_items_handle_keyboard(key, $items);\n}\n\nexport function show_sender_info() {\n    const $message = $(\".selected_message\");\n    const $sender = $message.find(\".sender_info_hover\");\n\n    const message = message_lists.current.get(rows.id($message));\n    const user = people.get_by_user_id(message.sender_id);\n    show_user_info_popover_for_message($sender[0], user, message);\n    if ($current_message_info_popover_elem && !page_params.is_spectator) {\n        focus_user_info_popover_item();\n    }\n}\n\n// On mobile web, opening the keyboard can trigger a resize event\n// (which in turn can trigger a scroll event).  This will have the\n// side effect of closing popovers, which we don't want.  So we\n// suppress the first hide from scrolling after a resize using this\n// variable.\nlet suppress_scroll_hide = false;\n\nexport function set_suppress_scroll_hide() {\n    suppress_scroll_hide = true;\n}\n\n// Playground_info contains all the data we need to generate a popover of\n// playground links for each code block. The element is the target element\n// to pop off of.\nexport function toggle_playground_link_popover(element, playground_info) {\n    const $last_popover_elem = $current_playground_links_popover_elem;\n    hide_all();\n    if ($last_popover_elem !== undefined && $last_popover_elem.get()[0] === element) {\n        // We want it to be the case that a user can dismiss a popover\n        // by clicking on the same element that caused the popover.\n        return;\n    }\n    const $elt = $(element);\n    if ($elt.data(\"popover\") === undefined) {\n        const ypos = $elt.offset().top;\n        $elt.popover({\n            // It's unlikely we'll have more than 3-4 playground links\n            // for one language, so it should be OK to hardcode 120 here.\n            placement: message_viewport.height() - ypos < 120 ? \"top\" : \"bottom\",\n            title: \"\",\n            content: render_playground_links_popover_content({playground_info}),\n            html: true,\n            trigger: \"manual\",\n        });\n        $elt.popover(\"show\");\n        $current_playground_links_popover_elem = $elt;\n    }\n}\n\nexport function hide_playground_links_popover() {\n    if ($current_playground_links_popover_elem !== undefined) {\n        $current_playground_links_popover_elem.popover(\"destroy\");\n        $current_playground_links_popover_elem = undefined;\n    }\n}\n\nexport function register_click_handlers() {\n    $(\"#main_div\").on(\n        \"click\",\n        \".sender_name, .sender_name-in-status, .inline_profile_picture\",\n        function (e) {\n            const $row = $(this).closest(\".message_row\");\n            e.stopPropagation();\n            const message = message_lists.current.get(rows.id($row));\n            const user = people.get_by_user_id(message.sender_id);\n            show_user_info_popover_for_message(this, user, message);\n        },\n    );\n\n    $(\"#main_div\").on(\"click\", \".user-mention\", function (e) {\n        const id_string = $(this).attr(\"data-user-id\");\n        // We fallback to email to handle legacy Markdown that was rendered\n        // before we cut over to using data-user-id\n        const email = $(this).attr(\"data-user-email\");\n        if (id_string === \"*\" || email === \"*\") {\n            return;\n        }\n        const $row = $(this).closest(\".message_row\");\n        e.stopPropagation();\n        const message = message_lists.current.get(rows.id($row));\n        let user;\n        if (id_string) {\n            const user_id = Number.parseInt(id_string, 10);\n            user = people.get_by_user_id(user_id);\n        } else {\n            user = people.get_by_email(email);\n        }\n        show_user_info_popover_for_message(this, user, message);\n    });\n\n    $(\"#main_div\").on(\"click\", \".user-group-mention\", function (e) {\n        const user_group_id = Number.parseInt($(this).attr(\"data-user-group-id\"), 10);\n        const $row = $(this).closest(\".message_row\");\n        e.stopPropagation();\n        const message = message_lists.current.get(rows.id($row));\n        try {\n            const group = user_groups.get_user_group_from_id(user_group_id);\n            show_user_group_info_popover(this, group, message);\n        } catch {\n            // This user group has likely been deleted.\n            blueslip.info(\"Unable to find user group in message\" + message.sender_id);\n        }\n    });\n\n    $(\"#main_div, #preview_content, #message-history\").on(\n        \"click\",\n        \".code_external_link\",\n        function (e) {\n            const $view_in_playground_button = $(this);\n            const $codehilite_div = $(this).closest(\".codehilite\");\n            e.stopPropagation();\n            const playground_info = realm_playground.get_playground_info_for_languages(\n                $codehilite_div.data(\"code-language\"),\n            );\n            // We do the code extraction here and set the target href combining the url_prefix\n            // and the extracted code. Depending on whether the language has multiple playground\n            // links configured, a popover is show.\n            const extracted_code = $codehilite_div.find(\"code\").text();\n            if (playground_info.length === 1) {\n                const url_prefix = playground_info[0].url_prefix;\n                $view_in_playground_button.attr(\n                    \"href\",\n                    url_prefix + encodeURIComponent(extracted_code),\n                );\n            } else {\n                for (const $playground of playground_info) {\n                    $playground.playground_url =\n                        $playground.url_prefix + encodeURIComponent(extracted_code);\n                }\n                toggle_playground_link_popover(this, playground_info);\n            }\n        },\n    );\n\n    $(\"body\").on(\"click\", \".popover_playground_link\", (e) => {\n        hide_playground_links_popover();\n        e.stopPropagation();\n    });\n\n    $(\"body\").on(\"click\", \".info_popover_actions .narrow_to_private_messages\", (e) => {\n        const user_id = elem_to_user_id($(e.target).parents(\"ul\"));\n        const email = people.get_by_user_id(user_id).email;\n        hide_all();\n        if (overlays.settings_open()) {\n            overlays.close_overlay(\"settings\");\n        }\n        narrow.by(\"pm-with\", email, {trigger: \"user sidebar popover\"});\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    $(\"body\").on(\"click\", \".info_popover_actions .narrow_to_messages_sent\", (e) => {\n        const user_id = elem_to_user_id($(e.target).parents(\"ul\"));\n        const email = people.get_by_user_id(user_id).email;\n        hide_all();\n        if (overlays.settings_open()) {\n            overlays.close_overlay(\"settings\");\n        }\n        narrow.by(\"sender\", email, {trigger: \"user sidebar popover\"});\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    $(\"body\").on(\"click\", \".user_popover .mention_user\", (e) => {\n        if (!compose_state.composing()) {\n            compose_actions.start(\"stream\", {trigger: \"sidebar user actions\"});\n        }\n        const user_id = elem_to_user_id($(e.target).parents(\"ul\"));\n        const name = people.get_by_user_id(user_id).full_name;\n        const mention = people.get_mention_syntax(name, user_id);\n        compose_ui.insert_syntax_and_focus(mention);\n        hide_user_sidebar_popover();\n        hide_userlist_sidebar();\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    $(\"body\").on(\"click\", \".message-info-popover .mention_user\", (e) => {\n        if (!compose_state.composing()) {\n            compose_actions.respond_to_message({trigger: \"user sidebar popover\"});\n        }\n        const user_id = elem_to_user_id($(e.target).parents(\"ul\"));\n        const name = people.get_by_user_id(user_id).full_name;\n        const mention = people.get_mention_syntax(name, user_id);\n        compose_ui.insert_syntax_and_focus(mention);\n        hide_message_info_popover();\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    $(\"body\").on(\"click\", \".info_popover_actions .clear_status\", (e) => {\n        e.preventDefault();\n        const me = elem_to_user_id($(e.target).parents(\"ul\"));\n        user_status.server_update_status({\n            user_id: me,\n            status_text: \"\",\n            emoji_name: \"\",\n            emoji_code: \"\",\n            success() {\n                $(\".info_popover_actions #status_message\").empty();\n            },\n        });\n    });\n\n    $(\"body\").on(\"click\", \".view_user_profile\", (e) => {\n        const user_id = Number.parseInt($(e.currentTarget).attr(\"data-user-id\"), 10);\n        const user = people.get_by_user_id(user_id);\n        show_user_info_popover(e.target, user);\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    /* These click handlers are implemented as just deep links to the\n     * relevant part of the Zulip UI, so we don't want preventDefault,\n     * but we do want to close the modal when you click them. */\n\n    $(\"body\").on(\"click\", \".invisible_mode_turn_on\", (e) => {\n        hide_all();\n        user_status.server_invisible_mode_on();\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    $(\"body\").on(\"click\", \".invisible_mode_turn_off\", (e) => {\n        hide_all();\n        user_status.server_invisible_mode_off();\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    function open_user_status_modal(e) {\n        hide_all();\n\n        user_status_ui.open_user_status_modal();\n\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    $(\"body\").on(\"click\", \".update_status_text\", open_user_status_modal);\n\n    // Clicking on one's own status emoji should open the user status modal.\n    $(\"#user_presences\").on(\n        \"click\",\n        \".user_sidebar_entry_me .status_emoji\",\n        open_user_status_modal,\n    );\n\n    $(\"body\").on(\"click\", \".sidebar-popover-mute-user\", (e) => {\n        const user_id = elem_to_user_id($(e.target).parents(\"ul\"));\n        hide_all_user_info_popovers();\n        e.stopPropagation();\n        e.preventDefault();\n        muted_users_ui.confirm_mute_user(user_id);\n    });\n\n    $(\"body\").on(\"click\", \".sidebar-popover-unmute-user\", (e) => {\n        const user_id = elem_to_user_id($(e.target).parents(\"ul\"));\n        hide_all_user_info_popovers();\n        muted_users_ui.unmute_user(user_id);\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    $(\"body\").on(\"click\", \".info_popover_actions .sidebar-popover-reactivate-user\", (e) => {\n        const user_id = elem_to_user_id($(e.target).parents(\"ul\"));\n        hide_all();\n        e.stopPropagation();\n        e.preventDefault();\n        function handle_confirm() {\n            const url = \"/json/users/\" + encodeURIComponent(user_id) + \"/reactivate\";\n            channel.post({\n                url,\n                success() {\n                    dialog_widget.close_modal();\n                },\n                error(xhr) {\n                    ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, $(\"#dialog_error\"));\n                    dialog_widget.hide_dialog_spinner();\n                },\n            });\n        }\n        settings_users.confirm_reactivation(user_id, handle_confirm, true);\n    });\n\n    $(\"#user_presences\").on(\"click\", \".user-list-sidebar-menu-icon\", function (e) {\n        e.stopPropagation();\n\n        const $target = $(this).closest(\"li\");\n        const user_id = elem_to_user_id($target.find(\"a\"));\n        // Hiding popovers may mutate current_user_sidebar_user_id.\n        const previous_user_sidebar_id = current_user_sidebar_user_id;\n\n        // Hide popovers, but we don't want to hide the sidebars on\n        // smaller browser windows.\n        hide_all_except_sidebars();\n\n        if (previous_user_sidebar_id === user_id) {\n            // If the popover is already shown, clicking again should toggle it.\n            return;\n        }\n\n        const user = people.get_by_user_id(user_id);\n        const popover_placement = userlist_placement === \"left\" ? \"right\" : \"left\";\n\n        render_user_info_popover(\n            user,\n            $target,\n            false,\n            false,\n            \"compose_private_message\",\n            \"user_popover\",\n            popover_placement,\n        );\n\n        current_user_sidebar_user_id = user.user_id;\n        current_user_sidebar_popover = $target.data(\"popover\");\n    });\n\n    $(\"body\").on(\"click\", \".remind.custom\", (e) => {\n        $(e.currentTarget)[0]._flatpickr.toggle();\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    function reminder_click_handler(datestr, e) {\n        const message_id = $(\".remind.custom\").data(\"message-id\");\n        reminder.do_set_reminder_for_message(message_id, datestr);\n        hide_all();\n        e.stopPropagation();\n        e.preventDefault();\n    }\n\n    $(\"body\").on(\"click\", \".remind.in_20m\", (e) => {\n        const datestr = formatISO(add(new Date(), {minutes: 20}));\n        reminder_click_handler(datestr, e);\n    });\n\n    $(\"body\").on(\"click\", \".remind.in_1h\", (e) => {\n        const datestr = formatISO(add(new Date(), {hours: 1}));\n        reminder_click_handler(datestr, e);\n    });\n\n    $(\"body\").on(\"click\", \".remind.in_3h\", (e) => {\n        const datestr = formatISO(add(new Date(), {hours: 3}));\n        reminder_click_handler(datestr, e);\n    });\n\n    $(\"body\").on(\"click\", \".remind.tomo\", (e) => {\n        const datestr = formatISO(\n            set(add(new Date(), {days: 1}), {hours: 9, minutes: 0, seconds: 0}),\n        );\n        reminder_click_handler(datestr, e);\n    });\n\n    $(\"body\").on(\"click\", \".remind.nxtw\", (e) => {\n        const datestr = formatISO(\n            set(add(new Date(), {weeks: 1}), {hours: 9, minutes: 0, seconds: 0}),\n        );\n        reminder_click_handler(datestr, e);\n    });\n\n    $(\"body\").on(\"click\", \".flatpickr-calendar\", (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    $(\"body\").on(\"click\", \".flatpickr-confirm\", (e) => {\n        if ($(\".remind.custom\")[0]) {\n            const datestr = $(\".remind.custom\")[0].value;\n            reminder_click_handler(datestr, e);\n        }\n    });\n\n    $(\"body\").on(\"click\", \".respond_personal_button, .compose_private_message\", (e) => {\n        const user_id = elem_to_user_id($(e.target).parents(\"ul\"));\n        const email = people.get_by_user_id(user_id).email;\n        compose_actions.start(\"private\", {\n            trigger: \"popover send private\",\n            private_message_recipient: email,\n        });\n        hide_all();\n        if (overlays.settings_open()) {\n            overlays.close_overlay(\"settings\");\n        }\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    clipboard_enable(\".copy_mention_syntax\");\n\n    $(\"body\").on(\"click\", \".copy_mention_syntax\", (e) => {\n        hide_all();\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    {\n        let last_scroll = 0;\n\n        $(\".app\").on(\"scroll\", () => {\n            if (suppress_scroll_hide) {\n                suppress_scroll_hide = false;\n                return;\n            }\n\n            const date = Date.now();\n\n            // only run `popovers.hide_all()` if the last scroll was more\n            // than 250ms ago.\n            if (date - last_scroll > 250) {\n                hide_all();\n            }\n\n            // update the scroll time on every event to make sure it doesn't\n            // retrigger `hide_all` while still scrolling.\n            last_scroll = date;\n        });\n    }\n\n    $(\"body\").on(\"click\", \".sidebar-popover-manage-user\", (e) => {\n        hide_all();\n        const user_id = elem_to_user_id($(e.target).parents(\"ul\"));\n        const user = people.get_by_user_id(user_id);\n        if (user.is_bot) {\n            settings_bots.show_edit_bot_info_modal(user_id, true);\n        } else {\n            settings_users.show_edit_user_info_modal(user_id, true);\n        }\n    });\n\n    $(\"body\").on(\"click\", \".user_info_popover_manage_menu_btn\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const user_id = elem_to_user_id($(e.target).parents(\"ul\"));\n        const user = people.get_by_user_id(user_id);\n        show_user_info_popover_manage_menu(e.target, user);\n    });\n}\n\nexport function any_active() {\n    // True if any popover (that this module manages) is currently shown.\n    // Expanded sidebars on mobile view count as popovers as well.\n    return (\n        popover_menus.any_active() ||\n        user_sidebar_popped() ||\n        stream_popover.stream_popped() ||\n        stream_popover.topic_popped() ||\n        message_info_popped() ||\n        user_info_popped() ||\n        emoji_picker.reactions_popped() ||\n        $(\"[class^='column-'].expanded\").length\n    );\n}\n\n// This function will hide all true popovers (the streamlist and\n// userlist sidebars use the popover infrastructure, but doesn't work\n// like a popover structurally).\nexport function hide_all_except_sidebars(opts) {\n    $(\".has_popover\").removeClass(\"has_popover has_actions_popover has_emoji_popover\");\n    if (!opts || !opts.not_hide_tippy_instances) {\n        // hideAll hides all tippy instances (tooltips and popovers).\n        hideAll();\n    }\n    emoji_picker.hide_emoji_popover();\n    giphy.hide_giphy_popover();\n    stream_popover.hide_stream_popover();\n    stream_popover.hide_topic_popover();\n    stream_popover.hide_all_messages_popover();\n    stream_popover.hide_starred_messages_popover();\n    stream_popover.hide_drafts_popover();\n    hide_all_user_info_popovers();\n    hide_playground_links_popover();\n\n    // look through all the popovers that have been added and removed.\n    for (const $o of list_of_popovers) {\n        if (!document.body.contains($o.$element[0]) && $o.$tip) {\n            $o.$tip.remove();\n        }\n    }\n    list_of_popovers = [];\n}\n\n// This function will hide all the popovers, including the mobile web\n// or narrow window sidebars.\nexport function hide_all(not_hide_tippy_instances) {\n    hide_userlist_sidebar();\n    stream_popover.hide_streamlist_sidebar();\n    hide_all_except_sidebars({\n        not_hide_tippy_instances,\n    });\n}\n\nexport function set_userlist_placement(placement) {\n    userlist_placement = placement || \"right\";\n}\n\nexport function compute_placement(\n    $elt,\n    popover_height,\n    popover_width,\n    prefer_vertical_positioning,\n) {\n    const client_rect = $elt.get(0).getBoundingClientRect();\n    const distance_from_top = client_rect.top;\n    const distance_from_bottom = message_viewport.height() - client_rect.bottom;\n    const distance_from_left = client_rect.left;\n    const distance_from_right = message_viewport.width() - client_rect.right;\n\n    const elt_will_fit_horizontally =\n        distance_from_left + $elt.width() / 2 > popover_width / 2 &&\n        distance_from_right + $elt.width() / 2 > popover_width / 2;\n\n    const elt_will_fit_vertically =\n        distance_from_bottom + $elt.height() / 2 > popover_height / 2 &&\n        distance_from_top + $elt.height() / 2 > popover_height / 2;\n\n    // default to placing the popover in the center of the screen\n    let placement = \"viewport_center\";\n\n    // prioritize left/right over top/bottom\n    if (distance_from_top > popover_height && elt_will_fit_horizontally) {\n        placement = \"top\";\n    }\n    if (distance_from_bottom > popover_height && elt_will_fit_horizontally) {\n        placement = \"bottom\";\n    }\n\n    if (prefer_vertical_positioning && placement !== \"viewport_center\") {\n        // If vertical positioning is preferred and the popover fits in\n        // either top or bottom position then return.\n        return placement;\n    }\n\n    if (distance_from_left > popover_width && elt_will_fit_vertically) {\n        placement = \"left\";\n    }\n    if (distance_from_right > popover_width && elt_will_fit_vertically) {\n        placement = \"right\";\n    }\n\n    return placement;\n}\n","import * as blueslip from \"./blueslip\";\nimport * as people from \"./people\";\nimport * as reload_state from \"./reload_state\";\nimport {user_settings} from \"./user_settings\";\nimport * as watchdog from \"./watchdog\";\n\n// This module just manages data.  See activity.js for\n// the UI of our buddy list.\n\n// The following Maps have user_id as the key.  Some of the\n// user_ids may not yet be registered in people.js.\n// See the long comment in `set_info` below for details.\n\n// In future commits we'll use raw_info to facilitate\n// handling server events and/or timeout events.\nconst raw_info = new Map();\nexport const presence_info = new Map();\n\n// We use this internally and export it for testing convenience.\nexport function clear_internal_data() {\n    raw_info.clear();\n    presence_info.clear();\n}\n\n/* Mark users as offline after 140 seconds since their last checkin,\n * Keep in sync with zerver/tornado/event_queue.py:receiver_is_idle\n */\nconst OFFLINE_THRESHOLD_SECS = 140;\n\nconst BIG_REALM_COUNT = 250;\n\nexport function get_status(user_id) {\n    if (people.is_my_user_id(user_id)) {\n        if (user_settings.presence_enabled) {\n            // if the current user is sharing presence, they always see themselves as online.\n            return \"active\";\n        }\n        // if the current user is not sharing presence, they always see themselves as offline.\n        return \"offline\";\n    }\n    if (presence_info.has(user_id)) {\n        return presence_info.get(user_id).status;\n    }\n    return \"offline\";\n}\n\nexport function get_user_ids() {\n    return Array.from(presence_info.keys());\n}\n\nexport function status_from_raw(raw) {\n    /*\n        Example of `raw`:\n\n        {\n            active_timestamp: 1585745133\n            idle_timestamp: 1585745091\n            server_timestamp: 1585745140\n        }\n    */\n    function age(timestamp) {\n        return raw.server_timestamp - (timestamp || 0);\n    }\n\n    const active_timestamp = raw.active_timestamp;\n    const idle_timestamp = raw.idle_timestamp;\n\n    let last_active;\n    if (active_timestamp !== undefined || idle_timestamp !== undefined) {\n        last_active = Math.max(active_timestamp || 0, idle_timestamp || 0);\n    }\n\n    /*\n        If the server sends us `active_timestamp`, this\n        means at least one client was active at this time\n        (and hasn't changed since).\n\n        As long as the timestamp is current enough, we will\n        show the user as active (even if there's a newer\n        timestamp for idle).\n    */\n    if (age(active_timestamp) < OFFLINE_THRESHOLD_SECS) {\n        return {\n            status: \"active\",\n            last_active,\n        };\n    }\n\n    if (age(idle_timestamp) < OFFLINE_THRESHOLD_SECS) {\n        return {\n            status: \"idle\",\n            last_active,\n        };\n    }\n\n    return {\n        status: \"offline\",\n        last_active,\n    };\n}\n\nexport function update_info_from_event(user_id, info, server_timestamp) {\n    /*\n        Example of `info`:\n\n        {\n            website: {\n                client: 'website',\n                pushable: false,\n                status: 'active',\n                timestamp: 1585745225\n            }\n        }\n\n        Example of `raw`:\n\n        {\n            active_timestamp: 1585745133\n            idle_timestamp: 1585745091\n            server_timestamp: 1585745140\n        }\n    */\n    const raw = raw_info.get(user_id) || {};\n\n    raw.server_timestamp = server_timestamp;\n\n    for (const rec of Object.values(info)) {\n        if (rec.status === \"active\" && rec.timestamp > (raw.active_timestamp || 0)) {\n            raw.active_timestamp = rec.timestamp;\n        }\n\n        if (rec.status === \"idle\" && rec.timestamp > (raw.idle_timestamp || 0)) {\n            raw.idle_timestamp = rec.timestamp;\n        }\n    }\n\n    raw_info.set(user_id, raw);\n\n    const status = status_from_raw(raw);\n    presence_info.set(user_id, status);\n}\n\nexport function set_info(presences, server_timestamp) {\n    /*\n        Example `presences` data:\n\n        {\n            6: Object { idle_timestamp: 1585746028 },\n            7: Object { active_timestamp: 1585745774 },\n            8: Object { active_timestamp: 1585745578 }\n        }\n    */\n\n    clear_internal_data();\n    for (const [user_id_str, info] of Object.entries(presences)) {\n        const user_id = Number.parseInt(user_id_str, 10);\n\n        // Note: In contrast with all other state updates received\n        // receive from the server, presence data is updated via a\n        // polling process rather than the events system\n        // (server_events_dispatch.js).\n        //\n        // This means that if we're coming back from being offline and\n        // new users were created in the meantime, we may see user IDs\n        // not yet present in people.js if server_events doesn't have\n        // current data (or we've been offline, our event queue was\n        // GC'ed, and we're about to reload).  Such user_ids being\n        // present could, in turn, create spammy downstream exceptions\n        // when rendering the buddy list.  To address this, we check\n        // if the user ID is not yet present in people.js, and if it\n        // is, we skip storing that user (we'll see them again in the\n        // next presence request in 1 minute anyway).\n        //\n        // It's important to check both suspect_offline and\n        // reload_state.is_in_progress, because races where presence\n        // returns data on users not yet received via the server_events\n        // system are common in both situations.\n        const person = people.get_by_user_id(user_id, true);\n        if (person === undefined) {\n            if (!(watchdog.suspects_user_is_offline() || reload_state.is_in_progress())) {\n                // If we're online, and we get a user who we don't\n                // know about in the presence data, throw an error.\n                blueslip.error(\"Unknown user ID in presence data: \" + user_id);\n            }\n            // Either way, we deal by skipping this user and\n            // continuing with processing everyone else.\n            continue;\n        }\n\n        const raw = {\n            server_timestamp,\n            active_timestamp: info.active_timestamp || undefined,\n            idle_timestamp: info.idle_timestamp || undefined,\n        };\n\n        raw_info.set(user_id, raw);\n\n        const status = status_from_raw(raw);\n        presence_info.set(user_id, status);\n    }\n    update_info_for_small_realm();\n}\n\nexport function update_info_for_small_realm() {\n    if (people.get_active_human_count() >= BIG_REALM_COUNT) {\n        // For big realms, we don't want to bloat our buddy\n        // lists with lots of long-time-inactive users.\n        return;\n    }\n\n    // For small realms, we create presence info for users\n    // that the server didn't include in its presence update.\n    const persons = people.get_realm_users();\n\n    for (const person of persons) {\n        const user_id = person.user_id;\n        let status = \"offline\";\n\n        if (presence_info.has(user_id)) {\n            // this is normal, we have data for active\n            // users that we don't want to clobber.\n            continue;\n        }\n\n        if (person.is_bot) {\n            // we don't show presence for bots\n            continue;\n        }\n\n        if (people.is_my_user_id(user_id)) {\n            status = \"active\";\n        }\n\n        presence_info.set(user_id, {\n            status,\n            last_active: undefined,\n        });\n    }\n}\n\nexport function last_active_date(user_id) {\n    const info = presence_info.get(user_id);\n\n    if (!info || !info.last_active) {\n        return undefined;\n    }\n\n    return new Date(info.last_active * 1000);\n}\n\nexport function initialize(params) {\n    set_info(params.presences, params.server_timestamp);\n}\n","import $ from \"jquery\";\n\nimport render_message_reaction from \"../templates/message_reaction.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport * as emoji from \"./emoji\";\nimport * as emoji_picker from \"./emoji_picker\";\nimport {$t} from \"./i18n\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_store from \"./message_store\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as spectators from \"./spectators\";\nimport {user_settings} from \"./user_settings\";\n\nexport const view = {}; // function namespace\n\nexport function get_local_reaction_id(reaction_info) {\n    return [reaction_info.reaction_type, reaction_info.emoji_code].join(\",\");\n}\n\nexport function open_reactions_popover() {\n    const message = message_lists.current.selected_message();\n    let target;\n\n    // Use verbose style to ensure we test both sides of the condition.\n    if (message.sent_by_me) {\n        target = $(message_lists.current.selected_row()).find(\".actions_hover\")[0];\n    } else {\n        target = $(message_lists.current.selected_row()).find(\".reaction_button\")[0];\n    }\n\n    emoji_picker.toggle_emoji_popover(target, message_lists.current.selected_id());\n    return true;\n}\n\nexport function current_user_has_reacted_to_emoji(message, local_id) {\n    set_clean_reactions(message);\n\n    const clean_reaction_object = message.clean_reactions.get(local_id);\n    return clean_reaction_object && clean_reaction_object.user_ids.includes(page_params.user_id);\n}\n\nfunction get_message(message_id) {\n    const message = message_store.get(message_id);\n    if (!message) {\n        blueslip.error(\"reactions: Bad message id: \" + message_id);\n        return undefined;\n    }\n\n    set_clean_reactions(message);\n    return message;\n}\n\nfunction create_reaction(message_id, reaction_info) {\n    return {\n        message_id,\n        user_id: page_params.user_id,\n        local_id: get_local_reaction_id(reaction_info),\n        reaction_type: reaction_info.reaction_type,\n        emoji_name: reaction_info.emoji_name,\n        emoji_code: reaction_info.emoji_code,\n    };\n}\n\nfunction update_ui_and_send_reaction_ajax(message_id, reaction_info) {\n    if (page_params.is_spectator) {\n        // Spectators can't react, since they don't have accounts.  We\n        // stop here to avoid a confusing reaction local echo.\n        spectators.login_to_access();\n        return;\n    }\n\n    const message = get_message(message_id);\n    const local_id = get_local_reaction_id(reaction_info);\n    const has_reacted = current_user_has_reacted_to_emoji(message, local_id);\n    const operation = has_reacted ? \"remove\" : \"add\";\n    const reaction = create_reaction(message_id, reaction_info);\n\n    if (operation === \"add\") {\n        add_reaction(reaction);\n    } else {\n        remove_reaction(reaction);\n    }\n\n    const args = {\n        url: \"/json/messages/\" + message_id + \"/reactions\",\n        data: reaction_info,\n        success() {},\n        error(xhr) {\n            const response = channel.xhr_error_message(\"Error sending reaction\", xhr);\n            // Errors are somewhat common here, due to race conditions\n            // where the user tries to add/remove the reaction when there is already\n            // an in-flight request.  We eventually want to make this a blueslip\n            // error, rather than a warning, but we need to implement either\n            // #4291 or #4295 first.\n            blueslip.warn(response);\n        },\n    };\n    if (operation === \"add\") {\n        channel.post(args);\n    } else if (operation === \"remove\") {\n        channel.del(args);\n    }\n}\n\nexport function toggle_emoji_reaction(message_id, emoji_name) {\n    // This codepath doesn't support toggling a deactivated realm emoji.\n    // Since an user can interact with a deactivated realm emoji only by\n    // clicking on a reaction and that is handled by `process_reaction_click()`\n    // method. This codepath is to be used only where there is no chance of an\n    // user interacting with a deactivated realm emoji like emoji picker.\n\n    const reaction_info = emoji.get_emoji_details_by_name(emoji_name);\n    update_ui_and_send_reaction_ajax(message_id, reaction_info);\n}\n\nexport function process_reaction_click(message_id, local_id) {\n    const message = get_message(message_id);\n\n    if (!message) {\n        blueslip.error(\"message_id for reaction click is unknown: \" + message_id);\n        return;\n    }\n\n    const clean_reaction_object = message.clean_reactions.get(local_id);\n\n    if (!clean_reaction_object) {\n        blueslip.error(\n            \"Data integrity problem for reaction \" + local_id + \" (message \" + message_id + \")\",\n        );\n        return;\n    }\n\n    const reaction_info = {\n        reaction_type: clean_reaction_object.reaction_type,\n        emoji_name: clean_reaction_object.emoji_name,\n        emoji_code: clean_reaction_object.emoji_code,\n    };\n\n    update_ui_and_send_reaction_ajax(message_id, reaction_info);\n}\n\nfunction generate_title(emoji_name, user_ids) {\n    const usernames = people.get_display_full_names(\n        user_ids.filter((user_id) => user_id !== page_params.user_id),\n    );\n    const current_user_reacted = user_ids.length !== usernames.length;\n\n    const context = {\n        emoji_name: \":\" + emoji_name + \":\",\n    };\n\n    if (user_ids.length === 1) {\n        if (current_user_reacted) {\n            return $t({defaultMessage: \"You (click to remove) reacted with {emoji_name}\"}, context);\n        }\n        context.username = usernames[0];\n        return $t({defaultMessage: \"{username} reacted with {emoji_name}\"}, context);\n    }\n\n    if (user_ids.length === 2 && current_user_reacted) {\n        context.other_username = usernames[0];\n        return $t(\n            {\n                defaultMessage:\n                    \"You (click to remove) and {other_username} reacted with {emoji_name}\",\n            },\n            context,\n        );\n    }\n\n    context.comma_separated_usernames = usernames.slice(0, -1).join(\", \");\n    context.last_username = usernames.at(-1);\n    if (current_user_reacted) {\n        return $t(\n            {\n                defaultMessage:\n                    \"You (click to remove), {comma_separated_usernames} and {last_username} reacted with {emoji_name}\",\n            },\n            context,\n        );\n    }\n    return $t(\n        {\n            defaultMessage:\n                \"{comma_separated_usernames} and {last_username} reacted with {emoji_name}\",\n        },\n        context,\n    );\n}\n\n// Add a tooltip showing who reacted to a message.\nexport function get_reaction_title_data(message_id, local_id) {\n    const message = get_message(message_id);\n\n    const clean_reaction_object = message.clean_reactions.get(local_id);\n    const user_list = clean_reaction_object.user_ids;\n    const emoji_name = clean_reaction_object.emoji_name;\n    const title = generate_title(emoji_name, user_list);\n\n    return title;\n}\n\nexport function get_reaction_section(message_id) {\n    const $message_element = $(\".message_table\").find(`[zid='${CSS.escape(message_id)}']`);\n    const $section = $message_element.find(\".message_reactions\");\n    return $section;\n}\n\nexport function find_reaction(message_id, local_id) {\n    const $reaction_section = get_reaction_section(message_id);\n    const $reaction = $reaction_section.find(`[data-reaction-id='${CSS.escape(local_id)}']`);\n    return $reaction;\n}\n\nexport function get_add_reaction_button(message_id) {\n    const $reaction_section = get_reaction_section(message_id);\n    const $add_button = $reaction_section.find(\".reaction_button\");\n    return $add_button;\n}\n\nexport function set_reaction_vote_text($reaction, vote_text) {\n    const $count_element = $reaction.find(\".message_reaction_count\");\n    $count_element.text(vote_text);\n}\n\nexport function add_reaction(event) {\n    const message_id = event.message_id;\n    const message = message_store.get(message_id);\n\n    if (message === undefined) {\n        // If we don't have the message in cache, do nothing; if we\n        // ever fetch it from the server, it'll come with the\n        // latest reactions attached\n        return;\n    }\n\n    set_clean_reactions(message);\n\n    const local_id = get_local_reaction_id(event);\n    const user_id = event.user_id;\n    let clean_reaction_object = message.clean_reactions.get(local_id);\n    if (clean_reaction_object && clean_reaction_object.user_ids.includes(user_id)) {\n        return;\n    }\n\n    if (clean_reaction_object) {\n        clean_reaction_object.user_ids.push(user_id);\n        update_user_fields(clean_reaction_object, message.clean_reactions);\n        view.update_existing_reaction(clean_reaction_object, message, user_id);\n    } else {\n        clean_reaction_object = make_clean_reaction({\n            local_id,\n            user_ids: [user_id],\n            reaction_type: event.reaction_type,\n            emoji_name: event.emoji_name,\n            emoji_code: event.emoji_code,\n        });\n\n        message.clean_reactions.set(local_id, clean_reaction_object);\n        update_user_fields(clean_reaction_object, message.clean_reactions);\n        view.insert_new_reaction(clean_reaction_object, message, user_id);\n    }\n}\n\nview.update_existing_reaction = function (clean_reaction_object, message, acting_user_id) {\n    // Our caller ensures that this message already has a reaction\n    // for this emoji and sets up our user_list.  This function\n    // simply updates the DOM.\n    const local_id = get_local_reaction_id(clean_reaction_object);\n    const $reaction = find_reaction(message.id, local_id);\n\n    const new_label = generate_title(\n        clean_reaction_object.emoji_name,\n        clean_reaction_object.user_ids,\n    );\n    $reaction.attr(\"aria-label\", new_label);\n\n    if (acting_user_id === page_params.user_id) {\n        $reaction.addClass(\"reacted\");\n    }\n\n    update_vote_text_on_message(message);\n};\n\nview.insert_new_reaction = function (clean_reaction_object, message, user_id) {\n    // Our caller ensures we are the first user to react to this\n    // message with this emoji. We then render the emoji/title/count\n    // and insert it before the add button.\n\n    const context = {\n        message_id: message.id,\n        ...emoji.get_emoji_details_for_rendering(clean_reaction_object),\n    };\n\n    const new_label = generate_title(\n        clean_reaction_object.emoji_name,\n        clean_reaction_object.user_ids,\n    );\n\n    context.count = 1;\n    context.label = new_label;\n    context.local_id = get_local_reaction_id(clean_reaction_object);\n    context.emoji_alt_code = user_settings.emojiset === \"text\";\n    context.is_realm_emoji =\n        context.reaction_type === \"realm_emoji\" || context.reaction_type === \"zulip_extra_emoji\";\n\n    if (user_id === page_params.user_id) {\n        context.class = \"message_reaction reacted\";\n    } else {\n        context.class = \"message_reaction\";\n    }\n\n    const $new_reaction = $(render_message_reaction(context));\n\n    // Now insert it before the add button.\n    const $reaction_button_element = get_add_reaction_button(message.id);\n    $new_reaction.insertBefore($reaction_button_element);\n\n    update_vote_text_on_message(message);\n};\n\nexport function remove_reaction(event) {\n    const message_id = event.message_id;\n    const user_id = event.user_id;\n    const message = message_store.get(message_id);\n    const local_id = get_local_reaction_id(event);\n\n    if (message === undefined) {\n        // If we don't have the message in cache, do nothing; if we\n        // ever fetch it from the server, it'll come with the\n        // latest reactions attached\n        return;\n    }\n\n    set_clean_reactions(message);\n\n    const clean_reaction_object = message.clean_reactions.get(local_id);\n\n    if (!clean_reaction_object) {\n        return;\n    }\n\n    if (!clean_reaction_object.user_ids.includes(user_id)) {\n        return;\n    }\n\n    clean_reaction_object.user_ids = clean_reaction_object.user_ids.filter((id) => id !== user_id);\n    if (clean_reaction_object.user_ids.length === 0) {\n        message.clean_reactions.delete(local_id);\n    }\n\n    const should_display_reactors = check_should_display_reactors(message.clean_reactions);\n    update_user_fields(clean_reaction_object, should_display_reactors);\n\n    view.remove_reaction(clean_reaction_object, message, user_id);\n}\n\nview.remove_reaction = function (clean_reaction_object, message, user_id) {\n    const local_id = get_local_reaction_id(clean_reaction_object);\n    const $reaction = find_reaction(message.id, local_id);\n    const reaction_count = clean_reaction_object.user_ids.length;\n\n    if (reaction_count === 0) {\n        // If this user was the only one reacting for this emoji, we simply\n        // remove the reaction and exit.\n        $reaction.remove();\n        update_vote_text_on_message(message);\n        return;\n    }\n\n    // The emoji still has reactions from other users, so we need to update\n    // the title/count and, if the user is the current user, turn off the\n    // \"reacted\" class.\n    const new_label = generate_title(\n        clean_reaction_object.emoji_name,\n        clean_reaction_object.user_ids,\n    );\n    $reaction.attr(\"aria-label\", new_label);\n    if (user_id === page_params.user_id) {\n        $reaction.removeClass(\"reacted\");\n    }\n\n    update_vote_text_on_message(message);\n};\n\nexport function get_emojis_used_by_user_for_message_id(message_id) {\n    const user_id = page_params.user_id;\n    const message = message_store.get(message_id);\n    set_clean_reactions(message);\n\n    const names = [];\n    for (const clean_reaction_object of message.clean_reactions.values()) {\n        if (clean_reaction_object.user_ids.includes(user_id)) {\n            names.push(clean_reaction_object.emoji_name);\n        }\n    }\n\n    return names;\n}\n\nexport function get_message_reactions(message) {\n    set_clean_reactions(message);\n    return Array.from(message.clean_reactions.values());\n}\n\nexport function set_clean_reactions(message) {\n    /*\n      set_clean_reactions processes the raw message.reactions object,\n      which will contain one object for each individual reaction, even\n      if two users react with the same emoji.\n\n      As output, it sets message.cleaned_reactions, which is a more\n      compressed format with one entry per reaction pill that should\n      be displayed visually to users.\n    */\n\n    if (message.clean_reactions) {\n        // Update display details for the reaction. In particular,\n        // user_settings.display_emoji_reaction_users or the names of\n        // the users appearing in the reaction may have changed since\n        // this reaction was first rendered.\n        const should_display_reactors = check_should_display_reactors(message.clean_reactions);\n        for (const clean_reaction of message.clean_reactions.values()) {\n            update_user_fields(clean_reaction, should_display_reactors);\n        }\n        return;\n    }\n\n    // This first loop creates a temporary distinct_reactions data\n    // structure, which will accumulate the set of users who have\n    // reacted with each distinct reaction.\n    const distinct_reactions = new Map();\n    const user_map = new Map();\n    for (const reaction of message.reactions) {\n        const local_id = get_local_reaction_id(reaction);\n        const user_id = reaction.user_id;\n\n        if (!people.is_known_user_id(user_id)) {\n            blueslip.warn(\"Unknown user_id \" + user_id + \" in reaction for message \" + message.id);\n            continue;\n        }\n\n        if (!distinct_reactions.has(local_id)) {\n            distinct_reactions.set(local_id, reaction);\n            user_map.set(local_id, []);\n        }\n\n        const user_ids = user_map.get(local_id);\n\n        if (user_ids.includes(user_id)) {\n            blueslip.error(\n                \"server sent duplicate reactions for user \" + user_id + \" (key=\" + local_id + \")\",\n            );\n            continue;\n        }\n\n        user_ids.push(user_id);\n    }\n\n    // TODO: Rather than adding this field to the message object, it\n    // might be cleaner to create an independent map from message_id\n    // => clean_reactions data for the message, with care being taken\n    // to make sure reify_message_id moves the data structure\n    // properly.\n    message.clean_reactions = new Map();\n    for (const local_id of distinct_reactions.keys()) {\n        const reaction = distinct_reactions.get(local_id);\n        const user_ids = user_map.get(local_id);\n\n        message.clean_reactions.set(\n            local_id,\n            make_clean_reaction({local_id, user_ids, ...reaction}),\n        );\n    }\n\n    // We do update_user_fields in a separate loop, because doing so\n    // lets us avoid duplicating check_should_display_reactors to\n    // determine whether to store in the vote_text field a count or\n    // the names of reactors (users who reacted).\n    const should_display_reactors = check_should_display_reactors(message.clean_reactions);\n    for (const clean_reaction of message.clean_reactions.values()) {\n        update_user_fields(clean_reaction, should_display_reactors);\n    }\n\n    // We don't maintain message.reactions when users react to\n    // messages we already have a copy of, so it's safest to delete it\n    // after we've processed the reactions data for a message into the\n    // clean_reactions data structure, which we do maintain.\n    delete message.reactions;\n}\n\nfunction make_clean_reaction({local_id, user_ids, emoji_name, emoji_code, reaction_type}) {\n    const clean_reaction_object = {\n        local_id,\n        user_ids,\n        ...emoji.get_emoji_details_for_rendering({emoji_name, emoji_code, reaction_type}),\n    };\n    clean_reaction_object.emoji_alt_code = user_settings.emojiset === \"text\";\n    clean_reaction_object.is_realm_emoji =\n        clean_reaction_object.reaction_type === \"realm_emoji\" ||\n        clean_reaction_object.reaction_type === \"zulip_extra_emoji\";\n    return clean_reaction_object;\n}\n\nexport function update_user_fields(clean_reaction_object, should_display_reactors) {\n    // update_user_fields needs to be called whenever the set of users\n    // whor eacted on a message might have changed, including due to\n    // upvote/downvotes on ANY reaction in the message, because those\n    // can change the correct value of should_display_reactors to use.\n    clean_reaction_object.count = clean_reaction_object.user_ids.length;\n    clean_reaction_object.label = generate_title(\n        clean_reaction_object.emoji_name,\n        clean_reaction_object.user_ids,\n    );\n    if (clean_reaction_object.user_ids.includes(page_params.user_id)) {\n        clean_reaction_object.class = \"message_reaction reacted\";\n    } else {\n        clean_reaction_object.class = \"message_reaction\";\n    }\n\n    clean_reaction_object.count = clean_reaction_object.user_ids.length;\n    clean_reaction_object.label = generate_title(\n        clean_reaction_object.emoji_name,\n        clean_reaction_object.user_ids,\n    );\n\n    // The vote_text field set here is used directly in the Handlebars\n    // template for rendering (or rerendering!) a message.\n    clean_reaction_object.vote_text = get_vote_text(clean_reaction_object, should_display_reactors);\n}\n\nexport function get_vote_text(clean_reaction_object, should_display_reactors) {\n    if (should_display_reactors) {\n        return comma_separated_usernames(clean_reaction_object.user_ids);\n    }\n    return `${clean_reaction_object.user_ids.length}`;\n}\n\nfunction check_should_display_reactors(cleaned_reactions) {\n    if (!user_settings.display_emoji_reaction_users) {\n        return false;\n    }\n\n    let total_reactions = 0;\n    for (const r of cleaned_reactions.values()) {\n        // r.count is not yet initialized when this is called during\n        // set_clean_reactions.\n        total_reactions += r.count || r.user_ids.length;\n    }\n    return total_reactions <= 3;\n}\n\nfunction comma_separated_usernames(user_list) {\n    const usernames = people.get_display_full_names(user_list);\n    const current_user_has_reacted = user_list.includes(page_params.user_id);\n\n    if (current_user_has_reacted) {\n        const current_user_index = user_list.indexOf(page_params.user_id);\n        usernames[current_user_index] = $t({\n            defaultMessage: \"You\",\n        });\n    }\n    const comma_separated_usernames = usernames.join(\", \");\n    return comma_separated_usernames;\n}\n\nexport function update_vote_text_on_message(message) {\n    // Because whether we display a count or the names of reacting\n    // users depends on total reactions on the message, we need to\n    // recalculate this whenever adjusting reaction rendering on a\n    // message.\n    const cleaned_reactions = get_message_reactions(message);\n    const should_display_reactors = check_should_display_reactors(cleaned_reactions);\n    for (const [reaction, clean_reaction] of message.clean_reactions.entries()) {\n        const reaction_elem = find_reaction(message.id, clean_reaction.local_id);\n        const vote_text = get_vote_text(clean_reaction, should_display_reactors);\n        message.clean_reactions.get(reaction).vote_text = vote_text;\n        set_reaction_vote_text(reaction_elem, vote_text);\n    }\n}\n","import $ from \"jquery\";\nimport SimpleBar from \"simplebar\";\n\nimport render_read_receipts from \"../templates/read_receipts.hbs\";\nimport render_read_receipts_modal from \"../templates/read_receipts_modal.hbs\";\n\nimport * as channel from \"./channel\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as loading from \"./loading\";\nimport * as message_store from \"./message_store\";\nimport * as overlays from \"./overlays\";\nimport * as people from \"./people\";\nimport * as popovers from \"./popovers\";\nimport * as ui_report from \"./ui_report\";\n\nexport function show_user_list(message_id) {\n    $(\"body\").append(render_read_receipts_modal());\n    overlays.open_modal(\"read_receipts_modal\", {\n        autoremove: true,\n        on_show() {\n            const message = message_store.get(message_id);\n            if (message.sender_email === \"notification-bot@zulip.com\") {\n                $(\"#read_receipts_modal .read_receipts_info\").text(\n                    $t({\n                        defaultMessage:\n                            \"Read receipts are not available for Notification Bot messages.\",\n                    }),\n                );\n                $(\"#read_receipts_modal .modal__content\").addClass(\"compact\");\n            } else {\n                loading.make_indicator($(\"#read_receipts_modal .loading_indicator\"));\n                channel.get({\n                    url: `/json/messages/${message_id}/read_receipts`,\n                    success(data) {\n                        const users = data.user_ids.map((id) => {\n                            const user = people.get_by_user_id(id);\n                            return {\n                                user_id: user.user_id,\n                                full_name: user.full_name,\n                                avatar_url: people.small_avatar_url_for_person(user),\n                            };\n                        });\n                        users.sort(people.compare_by_name);\n\n                        loading.destroy_indicator($(\"#read_receipts_modal .loading_indicator\"));\n                        if (users.length === 0) {\n                            $(\"#read_receipts_modal .read_receipts_info\").text(\n                                $t({defaultMessage: \"No one has read this message yet.\"}),\n                            );\n                        } else {\n                            $(\"#read_receipts_modal .read_receipts_info\").html(\n                                $t_html(\n                                    {\n                                        defaultMessage:\n                                            \"{num_of_people, plural, one {This message has been <z-link>read</z-link> by {num_of_people} person:} other {This message has been <z-link>read</z-link> by {num_of_people} people:}}\",\n                                    },\n                                    {\n                                        num_of_people: users.length,\n                                        \"z-link\": (content_html) =>\n                                            `<a href=\"/help/read-receipts\">${content_html.join(\n                                                \"\",\n                                            )}</a>`,\n                                    },\n                                ),\n                            );\n                            $(\"#read_receipts_modal .modal__container\").addClass(\n                                \"showing_read_receipts_list\",\n                            );\n                            $(\"#read_receipts_modal .modal__content\").append(\n                                render_read_receipts({users}),\n                            );\n                            new SimpleBar($(\"#read_receipts_modal .modal__content\")[0]);\n                        }\n                    },\n                    error(xhr) {\n                        ui_report.error(\"\", xhr, $(\"#read_receipts_error\"));\n                        loading.destroy_indicator($(\"#read_receipts_modal .loading_indicator\"));\n                    },\n                });\n            }\n        },\n        on_hide() {\n            // Ensure any user info popovers are closed\n            popovers.hide_all();\n        },\n    });\n}\n","import $ from \"jquery\";\n\nimport * as channel from \"./channel\";\nimport {page_params} from \"./page_params\";\nimport * as upload_widget from \"./upload_widget\";\n\nexport function build_realm_icon_widget(upload_function) {\n    const get_file_input = function () {\n        return $(\"#realm-icon-upload-widget .image_file_input\").expectOne();\n    };\n\n    if (!page_params.is_admin) {\n        return undefined;\n    }\n    if (page_params.realm_icon_source === \"G\") {\n        $(\"#realm-icon-upload-widget .image-delete-button\").hide();\n    } else {\n        $(\"#realm-icon-upload-widget .image-delete-button\").show();\n    }\n    $(\"#realm-icon-upload-widget .image-delete-button\").on(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        channel.del({\n            url: \"/json/realm/icon\",\n        });\n    });\n\n    return upload_widget.build_direct_upload_widget(\n        get_file_input,\n        $(\"#realm-icon-upload-widget .image_file_input_error\").expectOne(),\n        $(\"#realm-icon-upload-widget .image_upload_button\").expectOne(),\n        upload_function,\n        page_params.max_icon_file_size_mib,\n    );\n}\n\nexport function rerender() {\n    $(\"#realm-icon-upload-widget .image-block\").attr(\"src\", page_params.realm_icon_url);\n    if (page_params.realm_icon_source === \"U\") {\n        $(\"#realm-icon-upload-widget .image-delete-button\").show();\n    } else {\n        $(\"#realm-icon-upload-widget .image-delete-button\").hide();\n        // Need to clear input because of a small edge case\n        // where you try to upload the same image you just deleted.\n        const $file_input = $(\"#realm-icon-upload-widget .image_file_input\");\n        $file_input.val(\"\");\n    }\n}\n","import $ from \"jquery\";\n\nimport * as channel from \"./channel\";\nimport {page_params} from \"./page_params\";\nimport * as settings_data from \"./settings_data\";\nimport * as upload_widget from \"./upload_widget\";\n\nexport function build_realm_logo_widget(upload_function, is_night) {\n    let logo_section_id = \"#realm-day-logo-upload-widget\";\n    let logo_source = page_params.realm_logo_source;\n\n    if (is_night) {\n        logo_section_id = \"#realm-night-logo-upload-widget\";\n        logo_source = page_params.realm_night_logo_source;\n    }\n\n    const $delete_button_elem = $(logo_section_id + \" .image-delete-button\");\n    const $file_input_elem = $(logo_section_id + \" .image_file_input\");\n    const $file_input_error_elem = $(logo_section_id + \" .image_file_input_error\");\n    const $upload_button_elem = $(logo_section_id + \" .image_upload_button\");\n\n    const get_file_input = function () {\n        return $file_input_elem.expectOne();\n    };\n\n    if (!page_params.is_admin) {\n        return undefined;\n    }\n\n    if (logo_source === \"D\") {\n        $delete_button_elem.hide();\n    } else {\n        $delete_button_elem.show();\n    }\n\n    const data = {night: JSON.stringify(is_night)};\n    $delete_button_elem.on(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        channel.del({\n            url: \"/json/realm/logo\",\n            data,\n        });\n    });\n\n    return upload_widget.build_direct_upload_widget(\n        get_file_input,\n        $file_input_error_elem.expectOne(),\n        $upload_button_elem.expectOne(),\n        upload_function,\n        page_params.max_logo_file_size_mib,\n    );\n}\n\nfunction change_logo_delete_button(logo_source, $logo_delete_button, $file_input) {\n    if (logo_source === \"U\") {\n        $logo_delete_button.show();\n    } else {\n        $logo_delete_button.hide();\n        // Need to clear input because of a small edge case\n        // where you try to upload the same image you just deleted.\n        $file_input.val(\"\");\n    }\n}\n\nexport function render() {\n    const $file_input = $(\"#realm-day-logo-upload-widget .image_file_input\");\n    const $night_file_input = $(\"#realm-night-logo-upload-widget .realm-logo-file-input\");\n    $(\"#realm-day-logo-upload-widget .image-block\").attr(\"src\", page_params.realm_logo_url);\n\n    if (page_params.realm_night_logo_source === \"D\" && page_params.realm_logo_source !== \"D\") {\n        // If no dark theme logo is uploaded but a light theme one\n        // is, use the light theme one; this handles the common case\n        // of transparent background logos that look good on both\n        // dark and light themes.  See also similar code in admin.js.\n\n        $(\"#realm-night-logo-upload-widget .image-block\").attr(\"src\", page_params.realm_logo_url);\n    } else {\n        $(\"#realm-night-logo-upload-widget .image-block\").attr(\n            \"src\",\n            page_params.realm_night_logo_url,\n        );\n    }\n\n    if (settings_data.using_dark_theme() && page_params.realm_night_logo_source !== \"D\") {\n        $(\"#realm-logo\").attr(\"src\", page_params.realm_night_logo_url);\n    } else {\n        $(\"#realm-logo\").attr(\"src\", page_params.realm_logo_url);\n    }\n\n    change_logo_delete_button(\n        page_params.realm_logo_source,\n        $(\"#realm-day-logo-upload-widget .image-delete-button\"),\n        $file_input,\n    );\n    change_logo_delete_button(\n        page_params.realm_night_logo_source,\n        $(\"#realm-night-logo-upload-widget .image-delete-button\"),\n        $night_file_input,\n    );\n}\n\nexport function initialize() {\n    // render once\n    render();\n\n    // Rerender the realm-logo when the browser detects color scheme changes.\n    const dark_mode_media_query_list = window.matchMedia(\"(prefers-color-scheme: dark)\");\n    dark_mode_media_query_list.addEventListener(\"change\", () => {\n        if ($(\":root\").hasClass(\"color-scheme-automatic\")) {\n            render();\n        }\n    });\n}\n","import * as typeahead from \"../shared/js/typeahead\";\n\nimport {$t} from \"./i18n\";\nimport * as typeahead_helper from \"./typeahead_helper\";\n\nconst map_language_to_playground_info = new Map();\nconst map_pygments_pretty_name_to_aliases = new Map();\n\nexport function update_playgrounds(playgrounds_data) {\n    map_language_to_playground_info.clear();\n\n    for (const data of Object.values(playgrounds_data)) {\n        const element_to_push = {\n            id: data.id,\n            name: data.name,\n            url_prefix: data.url_prefix,\n        };\n        if (map_language_to_playground_info.has(data.pygments_language)) {\n            map_language_to_playground_info.get(data.pygments_language).push(element_to_push);\n        } else {\n            map_language_to_playground_info.set(data.pygments_language, [element_to_push]);\n        }\n    }\n}\n\nexport function get_playground_info_for_languages(lang) {\n    return map_language_to_playground_info.get(lang);\n}\n\nexport function sort_pygments_pretty_names_by_priority(generated_pygments_data) {\n    const priority_sorted_pygments_data = Object.keys(generated_pygments_data.langs).sort(\n        typeahead_helper.compare_by_popularity,\n    );\n    for (const alias of priority_sorted_pygments_data) {\n        const pretty_name = generated_pygments_data.langs[alias].pretty_name;\n        // JS Map remembers the original order of insertion of keys.\n        if (map_pygments_pretty_name_to_aliases.has(pretty_name)) {\n            map_pygments_pretty_name_to_aliases.get(pretty_name).push(alias);\n        } else {\n            map_pygments_pretty_name_to_aliases.set(pretty_name, [alias]);\n        }\n    }\n}\n\nexport function get_pygments_typeahead_list(query) {\n    const language_labels = new Map();\n\n    // Adds a typeahead that allows selecting a custom language, by adding a\n    // \"Custom language\" label in the first position of the typeahead list.\n    const clean_query = typeahead.clean_query_lowercase(query);\n    if (clean_query !== \"\") {\n        language_labels.set(\n            clean_query,\n            $t({defaultMessage: \"Custom language: {query}\"}, {query: clean_query}),\n        );\n    }\n\n    for (const [key, values] of map_pygments_pretty_name_to_aliases) {\n        language_labels.set(key, key + \" (\" + Array.from(values).join(\", \") + \")\");\n    }\n\n    return language_labels;\n}\n\nexport function initialize(playground_data, generated_pygments_data) {\n    update_playgrounds(playground_data);\n    sort_pygments_pretty_names_by_priority(generated_pygments_data);\n}\n","import _ from \"lodash\";\n\nimport {FoldDict} from \"./fold_dict\";\nimport * as message_store from \"./message_store\";\nimport * as people from \"./people\";\n\n// This class is only exported for unit testing purposes.\n// If we find reuse opportunities, we should just put it into\n// its own module.\nexport class IdTracker {\n    ids = new Set();\n\n    // We cache the max message id to make sure that\n    // typeahead code is efficient.  We don't eagerly\n    // compute it, since it's plausible a spammy bot\n    // could cause us to process many messages at a time\n    // during fetching.\n    _cached_max_id = undefined;\n\n    add(id) {\n        this.ids.add(id);\n        if (this._cached_max_id !== undefined && id > this._cached_max_id) {\n            this._cached_max_id = id;\n        }\n    }\n\n    remove(id) {\n        this.ids.delete(id);\n        this._cached_max_id = undefined;\n    }\n\n    max_id() {\n        if (this._cached_max_id === undefined) {\n            this._cached_max_id = _.max(Array.from(this.ids));\n        }\n        return this._cached_max_id || -1;\n    }\n\n    empty() {\n        return this.ids.size === 0;\n    }\n}\n\n// topic_senders[stream_id][sender_id] = IdTracker\nconst stream_senders = new Map();\n\n// topic_senders[stream_id][topic_id][sender_id] = IdTracker\nconst topic_senders = new Map();\n\n// pm_senders[user_ids_string][user_id] = IdTracker\nconst pm_senders = new Map();\n\nexport function clear_for_testing() {\n    stream_senders.clear();\n    topic_senders.clear();\n}\n\nfunction max_id_for_stream_topic_sender({stream_id, topic, sender_id}) {\n    const topic_dict = topic_senders.get(stream_id);\n    if (!topic_dict) {\n        return -1;\n    }\n    const sender_dict = topic_dict.get(topic);\n    if (!sender_dict) {\n        return -1;\n    }\n    const id_tracker = sender_dict.get(sender_id);\n    return id_tracker ? id_tracker.max_id() : -1;\n}\n\nfunction max_id_for_stream_sender({stream_id, sender_id}) {\n    const sender_dict = stream_senders.get(stream_id);\n    if (!sender_dict) {\n        return -1;\n    }\n    const id_tracker = sender_dict.get(sender_id);\n    return id_tracker ? id_tracker.max_id() : -1;\n}\n\nfunction add_stream_message({stream_id, sender_id, message_id}) {\n    const sender_dict = stream_senders.get(stream_id) || new Map();\n    const id_tracker = sender_dict.get(sender_id) || new IdTracker();\n    stream_senders.set(stream_id, sender_dict);\n    sender_dict.set(sender_id, id_tracker);\n    id_tracker.add(message_id);\n}\n\nfunction add_topic_message({stream_id, topic, sender_id, message_id}) {\n    const topic_dict = topic_senders.get(stream_id) || new FoldDict();\n    const sender_dict = topic_dict.get(topic) || new Map();\n    const id_tracker = sender_dict.get(sender_id) || new IdTracker();\n    topic_senders.set(stream_id, topic_dict);\n    topic_dict.set(topic, sender_dict);\n    sender_dict.set(sender_id, id_tracker);\n    id_tracker.add(message_id);\n}\n\nexport function process_stream_message(message) {\n    const stream_id = message.stream_id;\n    const topic = message.topic;\n    const sender_id = message.sender_id;\n    const message_id = message.id;\n\n    add_stream_message({stream_id, sender_id, message_id});\n    add_topic_message({stream_id, topic, sender_id, message_id});\n}\n\nfunction remove_topic_message({stream_id, topic, sender_id, message_id}) {\n    const topic_dict = topic_senders.get(stream_id);\n    if (!topic_dict) {\n        return;\n    }\n\n    const sender_dict = topic_dict.get(topic);\n\n    if (!sender_dict) {\n        return;\n    }\n\n    const id_tracker = sender_dict.get(sender_id);\n\n    if (!id_tracker) {\n        return;\n    }\n\n    id_tracker.remove(message_id);\n    if (id_tracker.empty()) {\n        sender_dict.delete(sender_id);\n    }\n\n    if (sender_dict.size === 0) {\n        topic_dict.delete(topic);\n    }\n}\n\nexport function process_topic_edit({\n    message_ids,\n    old_stream_id,\n    old_topic,\n    new_stream_id,\n    new_topic,\n}) {\n    // Note that we don't delete anything from stream_senders here.\n    // Our view is that it's probably better to not do so; users who\n    // recently posted to a stream are relevant for typeahead even if\n    // the messages were moved to another stream or deleted.\n\n    for (const message_id of message_ids) {\n        const message = message_store.get(message_id);\n        if (!message) {\n            continue;\n        }\n        const sender_id = message.sender_id;\n\n        remove_topic_message({stream_id: old_stream_id, topic: old_topic, sender_id, message_id});\n        add_topic_message({stream_id: new_stream_id, topic: new_topic, sender_id, message_id});\n\n        add_stream_message({stream_id: new_stream_id, sender_id, message_id});\n    }\n}\n\nexport function update_topics_of_deleted_message_ids(message_ids) {\n    for (const message_id of message_ids) {\n        const message = message_store.get(message_id);\n        if (!message) {\n            continue;\n        }\n\n        const stream_id = message.stream_id;\n        const topic = message.topic;\n        const sender_id = message.sender_id;\n\n        remove_topic_message({stream_id, topic, sender_id, message_id});\n    }\n}\n\nexport function compare_by_recency(user_a, user_b, stream_id, topic) {\n    let a_message_id;\n    let b_message_id;\n\n    a_message_id = max_id_for_stream_topic_sender({stream_id, topic, sender_id: user_a.user_id});\n    b_message_id = max_id_for_stream_topic_sender({stream_id, topic, sender_id: user_b.user_id});\n\n    if (a_message_id !== b_message_id) {\n        return b_message_id - a_message_id;\n    }\n\n    a_message_id = max_id_for_stream_sender({stream_id, sender_id: user_a.user_id});\n    b_message_id = max_id_for_stream_sender({stream_id, sender_id: user_b.user_id});\n\n    return b_message_id - a_message_id;\n}\n\nexport function get_topic_recent_senders(stream_id, topic) {\n    const topic_dict = topic_senders.get(stream_id);\n    if (topic_dict === undefined) {\n        return [];\n    }\n\n    const sender_dict = topic_dict.get(topic);\n    if (sender_dict === undefined) {\n        return [];\n    }\n\n    function by_max_message_id(item1, item2) {\n        const list1 = item1[1];\n        const list2 = item2[1];\n        return list2.max_id() - list1.max_id();\n    }\n\n    const sorted_senders = Array.from(sender_dict.entries()).sort(by_max_message_id);\n    const recent_senders = [];\n    for (const item of sorted_senders) {\n        recent_senders.push(item[0]);\n    }\n    return recent_senders;\n}\n\nexport function process_private_message({to_user_ids, sender_id, id}) {\n    const sender_dict = pm_senders.get(to_user_ids) || new Map();\n    const id_tracker = sender_dict.get(sender_id) || new IdTracker();\n    pm_senders.set(to_user_ids, sender_dict);\n    sender_dict.set(sender_id, id_tracker);\n    id_tracker.add(id);\n}\n\nexport function get_pm_recent_senders(user_ids_string) {\n    const user_ids = user_ids_string.split(\",\").map((id) => Number.parseInt(id, 10));\n    const sender_dict = pm_senders.get(user_ids_string);\n    const pm_senders_info = {participants: [], non_participants: []};\n    if (!sender_dict) {\n        return pm_senders_info;\n    }\n\n    function compare_pm_user_ids_by_recency(user_id1, user_id2) {\n        const max_id1 = sender_dict.get(user_id1)?.max_id() || -1;\n        const max_id2 = sender_dict.get(user_id2)?.max_id() || -1;\n        return max_id2 - max_id1;\n    }\n\n    // Add current user to user_ids.\n    user_ids.push(people.my_current_user_id());\n    pm_senders_info.non_participants = user_ids.filter((user_id) => {\n        if (sender_dict.get(user_id)) {\n            pm_senders_info.participants.push(user_id);\n            return false;\n        }\n        return true;\n    });\n    pm_senders_info.participants.sort(compare_pm_user_ids_by_recency);\n    return pm_senders_info;\n}\n","import * as people from \"./people\";\nimport {get_key_from_message} from \"./recent_topics_util\";\n\nexport const topics = new Map();\n// For stream messages, key is stream-id:topic.\n// For pms, key is the user IDs to whom the message is being sent.\n\nexport function process_message(msg) {\n    // Return whether any conversation data is updated.\n    let conversation_data_updated = false;\n\n    // Initialize conversation data\n    const key = get_key_from_message(msg);\n    if (!topics.has(key)) {\n        topics.set(key, {\n            last_msg_id: -1,\n            participated: false,\n            type: msg.type,\n        });\n        conversation_data_updated = true;\n    }\n    // Update conversation data\n    const topic_data = topics.get(key);\n    if (topic_data.last_msg_id < msg.id) {\n        // NOTE: This also stores locally echoed msg_id which\n        // has not been successfully received from the server.\n        // We store it now and reify it when response is available\n        // from server.\n        topic_data.last_msg_id = msg.id;\n        conversation_data_updated = true;\n    }\n    // TODO: Add backend support for participated topics.\n    // Currently participated === recently participated\n    // i.e. Only those topics are participated for which we have the user's\n    // message fetched in the topic. Ideally we would want this to be attached\n    // to topic info fetched from backend, which is currently not a thing.\n    if (!topic_data.participated && people.is_my_user_id(msg.sender_id)) {\n        topic_data.participated = true;\n        conversation_data_updated = true;\n    }\n    return conversation_data_updated;\n}\n\nfunction get_sorted_topics() {\n    // Sort all recent topics by last message time.\n    return new Map(\n        Array.from(topics.entries()).sort((a, b) => b[1].last_msg_id - a[1].last_msg_id),\n    );\n}\n\nexport function get() {\n    return get_sorted_topics();\n}\n\nexport function reify_message_id_if_available(opts) {\n    // We don't need to reify the message_id of the topic\n    // if a new message arrives in the topic from another user,\n    // since it replaces the last_msg_id of the topic which\n    // we were trying to reify.\n    for (const [, value] of topics.entries()) {\n        if (value.last_msg_id === opts.old_id) {\n            value.last_msg_id = opts.new_id;\n            return true;\n        }\n    }\n    return false;\n}\n","import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport render_recent_topic_row from \"../templates/recent_topic_row.hbs\";\nimport render_recent_topics_filters from \"../templates/recent_topics_filters.hbs\";\nimport render_recent_topics_body from \"../templates/recent_topics_table.hbs\";\nimport render_user_with_status_icon from \"../templates/user_with_status_icon.hbs\";\n\nimport * as buddy_data from \"./buddy_data\";\nimport * as compose_closed_ui from \"./compose_closed_ui\";\nimport * as hash_util from \"./hash_util\";\nimport {$t} from \"./i18n\";\nimport * as ListWidget from \"./list_widget\";\nimport * as loading from \"./loading\";\nimport {localstorage} from \"./localstorage\";\nimport * as message_store from \"./message_store\";\nimport * as message_util from \"./message_util\";\nimport * as message_view_header from \"./message_view_header\";\nimport * as narrow from \"./narrow\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as navbar_alerts from \"./navbar_alerts\";\nimport * as navigate from \"./navigate\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as pm_list from \"./pm_list\";\nimport * as recent_senders from \"./recent_senders\";\nimport {get, process_message, topics} from \"./recent_topics_data\";\nimport {\n    get_key_from_message,\n    get_topic_key,\n    is_in_focus,\n    is_visible,\n    set_visible,\n} from \"./recent_topics_util\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_list from \"./stream_list\";\nimport * as sub_store from \"./sub_store\";\nimport * as timerender from \"./timerender\";\nimport * as top_left_corner from \"./top_left_corner\";\nimport * as ui from \"./ui\";\nimport * as unread from \"./unread\";\nimport * as unread_ui from \"./unread_ui\";\nimport * as user_status from \"./user_status\";\nimport * as user_topics from \"./user_topics\";\n\nlet topics_widget;\nlet message_list_displayed_before;\n// Sets the number of avatars to display.\n// Rest of the avatars, if present, are displayed as {+x}\nconst MAX_AVATAR = 4;\nconst MAX_EXTRA_SENDERS = 10;\n\n// Use this to set the focused element.\n//\n// We set it's value to `table` in case the\n// focus in one of the table rows, since the\n// table rows are constantly updated and tracking\n// the selected element in them would be tedious via\n// jquery.\n//\n// So, we use table as a grid system and\n// track the coordinates of the focus element via\n// `row_focus` and `col_focus`.\nexport let $current_focus_elem = \"table\";\n\n// If user clicks a topic in recent topics, then\n// we store that topic here so that we can restore focus\n// to that topic when user revisits.\nlet last_visited_topic = \"\";\nlet row_focus = 0;\n// Start focus on the topic column, so Down+Enter works to visit a topic.\nlet col_focus = 1;\n\nexport const COLUMNS = {\n    stream: 0,\n    topic: 1,\n    read: 2,\n    mute: 3,\n};\n\n// The number of selectable actions in a recent_topics.  Used to\n// implement wraparound of elements with the right/left keys.  Must be\n// increased when we add new actions, or rethought if we add optional\n// actions that only appear in some rows.\nconst MAX_SELECTABLE_TOPIC_COLS = 4;\nconst MAX_SELECTABLE_PM_COLS = 3;\n\n// we use localstorage to persist the recent topic filters\nconst ls_key = \"recent_topic_filters\";\nconst ls = localstorage();\n\nlet filters = new Set();\n\nconst recent_conversation_key_prefix = \"recent_conversation:\";\n\nexport function clear_for_tests() {\n    filters.clear();\n    topics.clear();\n    topics_widget = undefined;\n}\n\nexport function save_filters() {\n    ls.set(ls_key, Array.from(filters));\n}\n\nexport function load_filters() {\n    if (!page_params.is_spectator) {\n        // A user may have a stored filter and can log out\n        // to see web public view. This ensures no filters are\n        // selected for spectators.\n        filters = new Set(ls.get(ls_key));\n    }\n}\n\nexport function set_default_focus() {\n    // If at any point we are confused about the currently\n    // focused element, we switch focus to search.\n    $current_focus_elem = $(\"#recent_topics_search\");\n    $current_focus_elem.trigger(\"focus\");\n    compose_closed_ui.set_standard_text_for_reply_button();\n}\n\nfunction get_min_load_count(already_rendered_count, load_count) {\n    const extra_rows_for_viewing_pleasure = 15;\n    if (row_focus > already_rendered_count + load_count) {\n        return row_focus + extra_rows_for_viewing_pleasure - already_rendered_count;\n    }\n    return load_count;\n}\n\nfunction is_table_focused() {\n    return $current_focus_elem === \"table\";\n}\n\nfunction get_row_type(row) {\n    // Return \"private\" or \"stream\"\n    // We use CSS method for finding row type until topics_widget gets initialized.\n    if (!topics_widget) {\n        const $topic_rows = $(\"#recent_topics_table table tbody tr\");\n        const $topic_row = $topic_rows.eq(row);\n        const is_private = $topic_row.attr(\"data-private\");\n        if (is_private) {\n            return \"private\";\n        }\n        return \"stream\";\n    }\n\n    const current_list = topics_widget.get_current_list();\n    const current_row = current_list[row];\n    return current_row.type;\n}\n\nfunction get_max_selectable_cols(row) {\n    // returns maximum number of columns in stream message or private message row.\n    const type = get_row_type(row);\n    if (type === \"private\") {\n        return MAX_SELECTABLE_PM_COLS;\n    }\n    return MAX_SELECTABLE_TOPIC_COLS;\n}\n\nfunction set_table_focus(row, col, using_keyboard) {\n    const $topic_rows = $(\"#recent_topics_table table tbody tr\");\n    if ($topic_rows.length === 0 || row < 0 || row >= $topic_rows.length) {\n        row_focus = 0;\n        // return focus back to filters if we cannot focus on the table.\n        set_default_focus();\n        return true;\n    }\n\n    const unread = has_unread(row);\n    if (col === 2 && !unread) {\n        col = 1;\n        col_focus = 1;\n    }\n    const type = get_row_type(row);\n    if (col === 3 && type === \"private\") {\n        col = unread ? 2 : 1;\n        col_focus = col;\n    }\n\n    const $topic_row = $topic_rows.eq(row);\n    // We need to allow table to render first before setting focus.\n    setTimeout(\n        () => $topic_row.find(\".recent_topics_focusable\").eq(col).children().trigger(\"focus\"),\n        0,\n    );\n    $current_focus_elem = \"table\";\n\n    if (using_keyboard) {\n        const scroll_element = document.querySelector(\n            \"#recent_topics_table .table_fix_head .simplebar-content-wrapper\",\n        );\n        const half_height_of_visible_area = scroll_element.offsetHeight / 2;\n        const topic_offset = topic_offset_to_visible_area($topic_row);\n\n        if (topic_offset === \"above\") {\n            scroll_element.scrollBy({top: -1 * half_height_of_visible_area});\n        } else if (topic_offset === \"below\") {\n            scroll_element.scrollBy({top: half_height_of_visible_area});\n        }\n    }\n\n    // TODO: This fake \"message\" object is designed to allow using the\n    // get_recipient_label helper inside compose_closed_ui. Surely\n    // there's a more readable way to write this code.\n    let message;\n    if (type === \"private\") {\n        message = {\n            display_reply_to: $topic_row.find(\".recent_topic_name a\").text(),\n        };\n    } else {\n        message = {\n            stream: $topic_row.find(\".recent_topic_stream a\").text(),\n            topic: $topic_row.find(\".recent_topic_name a\").text(),\n        };\n    }\n    compose_closed_ui.update_reply_recipient_label(message);\n    return true;\n}\n\nexport function get_focused_row_message() {\n    if (is_table_focused()) {\n        const $topic_rows = $(\"#recent_topics_table table tbody tr\");\n        if ($topic_rows.length === 0) {\n            return undefined;\n        }\n\n        const $topic_row = $topic_rows.eq(row_focus);\n        const conversation_id = $topic_row.attr(\"id\").slice(recent_conversation_key_prefix.length);\n        const topic_last_msg_id = topics.get(conversation_id).last_msg_id;\n        return message_store.get(topic_last_msg_id);\n    }\n    return undefined;\n}\n\nexport function revive_current_focus() {\n    // After re-render, the current_focus_elem is no longer linked\n    // to the focused element, this function attempts to revive the\n    // link and focus to the element prior to the rerender.\n\n    // We try to avoid setting focus when user\n    // is not focused on recent topics.\n    if (!is_in_focus()) {\n        return false;\n    }\n\n    if (!$current_focus_elem) {\n        set_default_focus();\n        return false;\n    }\n\n    if (is_table_focused()) {\n        if (last_visited_topic) {\n            // If the only message in the topic was deleted,\n            // then the topic will not be in recent topics data.\n            if (topics.get(last_visited_topic) !== undefined) {\n                const topic_last_msg_id = topics.get(last_visited_topic).last_msg_id;\n                const current_list = topics_widget.get_current_list();\n                const last_visited_topic_index = current_list.findIndex(\n                    (topic) => topic.last_msg_id === topic_last_msg_id,\n                );\n                if (last_visited_topic_index >= 0) {\n                    row_focus = last_visited_topic_index;\n                }\n            }\n            last_visited_topic = \"\";\n        }\n        set_table_focus(row_focus, col_focus);\n        return true;\n    }\n\n    const filter_button = $current_focus_elem.data(\"filter\");\n    if (!filter_button) {\n        set_default_focus();\n    } else {\n        $current_focus_elem = $(\"#recent_topics_filter_buttons\").find(\n            `[data-filter='${CSS.escape(filter_button)}']`,\n        );\n        $current_focus_elem.trigger(\"focus\");\n    }\n    return true;\n}\n\nexport function show_loading_indicator() {\n    loading.make_indicator($(\"#recent_topics_loading_messages_indicator\"));\n}\n\nexport function hide_loading_indicator() {\n    $(\"#recent_topics_bottom_whitespace\").hide();\n    loading.destroy_indicator($(\"#recent_topics_loading_messages_indicator\"), {\n        abs_positioned: false,\n    });\n    // Show empty table text if there are no messages fetched.\n    $(\"#recent_topics_table tbody\").addClass(\"required-text\");\n}\n\nexport function process_messages(messages) {\n    // While this is inexpensive and handles all the cases itself,\n    // the UX can be bad if user wants to scroll down the list as\n    // the UI will be returned to the beginning of the list on every\n    // update.\n    let conversation_data_updated = false;\n    if (messages.length > 0) {\n        for (const msg of messages) {\n            if (process_message(msg)) {\n                conversation_data_updated = true;\n            }\n        }\n    }\n\n    // Only rerender if conversation data actually changed.\n    if (conversation_data_updated) {\n        complete_rerender();\n    }\n}\n\nfunction message_to_conversation_unread_count(msg) {\n    if (msg.type === \"private\") {\n        return unread.num_unread_for_user_ids_string(msg.to_user_ids);\n    }\n    return unread.num_unread_for_topic(msg.stream_id, msg.topic);\n}\n\nexport function get_pm_tooltip_data(user_ids_string) {\n    const user_id = Number.parseInt(user_ids_string, 10);\n    const person = people.get_by_user_id(user_id);\n\n    if (person.is_bot) {\n        const bot_owner = people.get_bot_owner_user(person);\n\n        if (bot_owner) {\n            const bot_owner_name = $t(\n                {defaultMessage: \"Owner: {name}\"},\n                {name: bot_owner.full_name},\n            );\n\n            return {\n                first_line: person.full_name,\n                second_line: bot_owner_name,\n            };\n        }\n\n        // Bot does not have an owner.\n        return {\n            first_line: person.full_name,\n            second_line: \"\",\n            third_line: \"\",\n        };\n    }\n\n    const last_seen = buddy_data.user_last_seen_time_status(user_id);\n\n    // Users does not have a status.\n    return {\n        first_line: last_seen,\n        second_line: \"\",\n        third_line: \"\",\n    };\n}\n\nfunction format_conversation(conversation_data) {\n    const context = {};\n    const last_msg = message_store.get(conversation_data.last_msg_id);\n    const time = new Date(last_msg.timestamp * 1000);\n    const type = last_msg.type;\n    context.full_last_msg_date_time = timerender.get_full_datetime(time);\n    context.conversation_key = get_key_from_message(last_msg);\n    context.unread_count = message_to_conversation_unread_count(last_msg);\n    context.last_msg_time = timerender.last_seen_status_from_date(time);\n    context.is_private = last_msg.type === \"private\";\n    let all_senders;\n    let senders;\n    let displayed_other_senders;\n    let extra_sender_ids;\n\n    if (type === \"stream\") {\n        const stream_info = sub_store.get(last_msg.stream_id);\n\n        // Stream info\n        context.stream_id = last_msg.stream_id;\n        context.stream = last_msg.stream;\n        context.stream_color = stream_info.color;\n        context.stream_url = hash_util.by_stream_url(context.stream_id);\n        context.invite_only = stream_info.invite_only;\n        context.is_web_public = stream_info.is_web_public;\n        // Topic info\n        context.topic = last_msg.topic;\n        context.topic_url = hash_util.by_stream_topic_url(context.stream_id, context.topic);\n\n        // We hide the row according to filters or if it's muted.\n        // We only supply the data to the topic rows and let jquery\n        // display / hide them according to filters instead of\n        // doing complete re-render.\n        context.topic_muted = Boolean(user_topics.is_topic_muted(context.stream_id, context.topic));\n        const stream_muted = stream_data.is_muted(context.stream_id);\n        context.muted = context.topic_muted || stream_muted;\n        context.mention_in_unread = unread.topic_has_any_unread_mentions(\n            context.stream_id,\n            context.topic,\n        );\n\n        // Since the css for displaying senders in reverse order is much simpler,\n        // we provide our handlebars with senders in opposite order.\n        // Display in most recent sender first order.\n        all_senders = recent_senders\n            .get_topic_recent_senders(context.stream_id, context.topic)\n            .reverse();\n        senders = all_senders.slice(-MAX_AVATAR);\n\n        // Collect extra sender fullname for tooltip\n        extra_sender_ids = all_senders.slice(0, -MAX_AVATAR);\n        displayed_other_senders = extra_sender_ids.slice(-MAX_EXTRA_SENDERS);\n    } else if (type === \"private\") {\n        // Private message info\n        context.user_ids_string = last_msg.to_user_ids;\n        context.rendered_pm_with = last_msg.display_recipient\n            .filter(\n                (recipient) =>\n                    !people.is_my_user_id(recipient.id) || last_msg.display_recipient.length === 1,\n            )\n            .map((user) =>\n                render_user_with_status_icon({\n                    name: user.full_name,\n                    status_emoji_info: user_status.get_status_emoji(user.id),\n                }),\n            )\n            .join(\", \");\n        context.recipient_id = last_msg.recipient_id;\n        context.pm_url = last_msg.pm_with_url;\n        context.is_group = last_msg.display_recipient.length > 2;\n\n        if (!context.is_group) {\n            const user_id = Number.parseInt(last_msg.to_user_ids, 10);\n            const user = people.get_by_user_id(user_id);\n            if (user.is_bot) {\n                // Bots do not have status emoji, and are modeled as\n                // always present.\n                context.user_circle_class = \"user_circle_green\";\n            } else {\n                context.user_circle_class = buddy_data.get_user_circle_class(user_id);\n            }\n        }\n\n        // Since the css for displaying senders in reverse order is much simpler,\n        // we provide our handlebars with senders in opposite order.\n        // Display in most recent sender first order.\n        // To match the behavior for streams, we display the set of users who've actually\n        // participated, with the most recent participants first. It could make sense to\n        // display the other recipients on the PM conversation with different styling,\n        // but it's important to not destroy the information of \"who's actually talked\".\n        all_senders = recent_senders\n            .get_pm_recent_senders(context.user_ids_string)\n            .participants.reverse();\n        senders = all_senders.slice(-MAX_AVATAR);\n        // Collect extra senders fullname for tooltip.\n        extra_sender_ids = all_senders.slice(0, -MAX_AVATAR);\n        displayed_other_senders = extra_sender_ids\n            .slice(-MAX_EXTRA_SENDERS)\n            .map((sender) => sender.id);\n    }\n\n    context.senders = people.sender_info_for_recent_topics_row(senders);\n    context.other_senders_count = Math.max(0, all_senders.length - MAX_AVATAR);\n    extra_sender_ids = all_senders.slice(0, -MAX_AVATAR);\n    const displayed_other_names = people.get_display_full_names(displayed_other_senders.reverse());\n\n    if (extra_sender_ids.length > MAX_EXTRA_SENDERS) {\n        // We display only 10 extra senders in tooltips,\n        // and just display remaining number of senders.\n        const remaining_senders = extra_sender_ids.length - MAX_EXTRA_SENDERS;\n        // Pluralization syntax from:\n        // https://formatjs.io/docs/core-concepts/icu-syntax/#plural-format\n        displayed_other_names.push(\n            $t(\n                {\n                    defaultMessage:\n                        \"and {remaining_senders, plural, one {1 other} other {# others}}.\",\n                },\n                {remaining_senders},\n            ),\n        );\n    }\n    context.other_sender_names_html = displayed_other_names\n        .map((name) => _.escape(name))\n        .join(\"<br />\");\n    context.participated = conversation_data.participated;\n    context.last_msg_url = hash_util.by_conversation_and_time_url(last_msg);\n\n    return context;\n}\n\nfunction get_topic_row(topic_data) {\n    const msg = message_store.get(topic_data.last_msg_id);\n    const topic_key = get_key_from_message(msg);\n    return $(`#${CSS.escape(recent_conversation_key_prefix + topic_key)}`);\n}\n\nexport function process_topic_edit(old_stream_id, old_topic, new_topic, new_stream_id) {\n    // See `recent_senders.process_topic_edit` for\n    // logic behind this and important notes on use of this function.\n    topics.delete(get_topic_key(old_stream_id, old_topic));\n\n    const old_topic_msgs = message_util.get_messages_in_topic(old_stream_id, old_topic);\n    process_messages(old_topic_msgs);\n\n    new_stream_id = new_stream_id || old_stream_id;\n    const new_topic_msgs = message_util.get_messages_in_topic(new_stream_id, new_topic);\n    process_messages(new_topic_msgs);\n}\n\nexport function topic_in_search_results(keyword, stream, topic) {\n    if (keyword === \"\") {\n        return true;\n    }\n    const text = (stream + \" \" + topic).toLowerCase();\n    const search_words = keyword.toLowerCase().split(/\\s+/);\n    return search_words.every((word) => text.includes(word));\n}\n\nexport function update_topics_of_deleted_message_ids(message_ids) {\n    const topics_to_rerender = message_util.get_topics_for_message_ids(message_ids);\n\n    for (const [stream_id, topic] of topics_to_rerender.values()) {\n        topics.delete(get_topic_key(stream_id, topic));\n        const msgs = message_util.get_messages_in_topic(stream_id, topic);\n        process_messages(msgs);\n    }\n}\n\nexport function filters_should_hide_topic(topic_data) {\n    const msg = message_store.get(topic_data.last_msg_id);\n    const sub = sub_store.get(msg.stream_id);\n\n    if ((sub === undefined || !sub.subscribed) && topic_data.type === \"stream\") {\n        // Never try to process deactivated & unsubscribed stream msgs.\n        return true;\n    }\n\n    if (filters.has(\"unread\")) {\n        const unread_count = message_to_conversation_unread_count(msg);\n        if (unread_count === 0) {\n            return true;\n        }\n    }\n\n    if (!topic_data.participated && filters.has(\"participated\")) {\n        return true;\n    }\n\n    if (!filters.has(\"include_muted\") && topic_data.type === \"stream\") {\n        const topic_muted = Boolean(user_topics.is_topic_muted(msg.stream_id, msg.topic));\n        const stream_muted = stream_data.is_muted(msg.stream_id);\n        if (topic_muted || stream_muted) {\n            return true;\n        }\n    }\n\n    if (!filters.has(\"include_private\") && topic_data.type === \"private\") {\n        return true;\n    }\n\n    const search_keyword = $(\"#recent_topics_search\").val();\n    if (!topic_in_search_results(search_keyword, msg.stream, msg.topic)) {\n        return true;\n    }\n\n    return false;\n}\n\nexport function inplace_rerender(topic_key) {\n    if (!is_visible()) {\n        return false;\n    }\n    if (!topics.has(topic_key)) {\n        return false;\n    }\n\n    const topic_data = topics.get(topic_key);\n    const topic_row = get_topic_row(topic_data);\n    // We cannot rely on `topic_widget.meta.filtered_list` to know\n    // if a topic is rendered since the `filtered_list` might have\n    // already been updated via other calls.\n    const is_topic_rendered = topic_row.length;\n    // Resorting the topics_widget is important for the case where we\n    // are rerendering because of message editing or new messages\n    // arriving, since those operations often change the sort key.\n    topics_widget.filter_and_sort();\n    const current_topics_list = topics_widget.get_current_list();\n    if (is_topic_rendered && filters_should_hide_topic(topic_data)) {\n        // Since the row needs to be removed from DOM, we need to adjust `row_focus`\n        // if the row being removed is focused and is the last row in the list.\n        // This prevents the row_focus either being reset to the first row or\n        // middle of the visible table rows.\n        // We need to get the current focused row details from DOM since we cannot\n        // rely on `current_topics_list` since it has already been updated and row\n        // doesn't exist inside it.\n        const row_is_focused = get_focused_row_message()?.id === topic_data.last_msg_id;\n        if (row_is_focused && row_focus >= current_topics_list.length) {\n            row_focus = current_topics_list.length - 1;\n        }\n        topics_widget.remove_rendered_row(topic_row);\n    } else if (!is_topic_rendered && filters_should_hide_topic(topic_data)) {\n        // In case `topic_row` is not present, our job is already done here\n        // since it has not been rendered yet and we already removed it from\n        // the filtered list in `topic_widget`. So, it won't be displayed in\n        // the future too.\n    } else if (is_topic_rendered && !filters_should_hide_topic(topic_data)) {\n        // Only a re-render is required in this case.\n        topics_widget.render_item(topic_data);\n    } else {\n        // Final case: !is_topic_rendered && !filters_should_hide_topic(topic_data).\n        topics_widget.insert_rendered_row(topic_data);\n    }\n    setTimeout(revive_current_focus, 0);\n    return true;\n}\n\nexport function update_topic_is_muted(stream_id, topic) {\n    const key = get_topic_key(stream_id, topic);\n    if (!topics.has(key)) {\n        // we receive mute request for a topic we are\n        // not tracking currently\n        return false;\n    }\n\n    inplace_rerender(key);\n    return true;\n}\n\nexport function update_topic_unread_count(message) {\n    const topic_key = get_key_from_message(message);\n    inplace_rerender(topic_key);\n}\n\nexport function set_filter(filter) {\n    // This function updates the `filters` variable\n    // after user clicks on one of the filter buttons\n    // based on `btn-recent-selected` class and current\n    // set `filters`.\n\n    // Get the button which was clicked.\n    const $filter_elem = $(\"#recent_topics_filter_buttons\").find(\n        `[data-filter=\"${CSS.escape(filter)}\"]`,\n    );\n\n    // If user clicks `All`, we clear all filters.\n    if (filter === \"all\" && filters.size !== 0) {\n        filters = new Set();\n        // If the button was already selected, remove the filter.\n    } else if ($filter_elem.hasClass(\"btn-recent-selected\")) {\n        filters.delete(filter);\n        // If the button was not selected, we add the filter.\n    } else {\n        filters.add(filter);\n    }\n\n    save_filters();\n}\n\nfunction show_selected_filters() {\n    // Add `btn-selected-filter` to the buttons to show\n    // which filters are applied.\n    if (filters.size === 0) {\n        $(\"#recent_topics_filter_buttons\")\n            .find('[data-filter=\"all\"]')\n            .addClass(\"btn-recent-selected\")\n            .attr(\"aria-checked\", \"true\");\n    } else {\n        for (const filter of filters) {\n            $(\"#recent_topics_filter_buttons\")\n                .find(`[data-filter=\"${CSS.escape(filter)}\"]`)\n                .addClass(\"btn-recent-selected\")\n                .attr(\"aria-checked\", \"true\");\n        }\n    }\n}\n\nexport function update_filters_view() {\n    const rendered_filters = render_recent_topics_filters({\n        filter_participated: filters.has(\"participated\"),\n        filter_unread: filters.has(\"unread\"),\n        filter_muted: filters.has(\"include_muted\"),\n        filter_pm: filters.has(\"include_private\"),\n        is_spectator: page_params.is_spectator,\n    });\n    $(\"#recent_filters_group\").html(rendered_filters);\n    show_selected_filters();\n\n    topics_widget.hard_redraw();\n}\n\nfunction sort_comparator(a, b) {\n    // compares strings in lowercase and returns -1, 0, 1\n    if (a.toLowerCase() > b.toLowerCase()) {\n        return 1;\n    } else if (a.toLowerCase() === b.toLowerCase()) {\n        return 0;\n    }\n    return -1;\n}\n\nfunction stream_sort(a, b) {\n    if (a.type === b.type) {\n        const a_msg = message_store.get(a.last_msg_id);\n        const b_msg = message_store.get(b.last_msg_id);\n\n        if (a.type === \"stream\") {\n            return sort_comparator(a_msg.stream, b_msg.stream);\n        }\n        return sort_comparator(a_msg.display_reply_to, b_msg.display_reply_to);\n    }\n    // if type is not same sort between \"private\" and \"stream\"\n    return sort_comparator(a.type, b.type);\n}\n\nfunction topic_sort_key(conversation_data) {\n    const message = message_store.get(conversation_data.last_msg_id);\n    if (message.type === \"private\") {\n        return message.display_reply_to;\n    }\n    return message.topic;\n}\n\nfunction topic_sort(a, b) {\n    return sort_comparator(topic_sort_key(a), topic_sort_key(b));\n}\n\nfunction topic_offset_to_visible_area(topic_row) {\n    const $scroll_container = $(\"#recent_topics_table .table_fix_head\");\n    const thead_height = 30;\n    const under_closed_compose_region_height = 50;\n\n    const scroll_container_top = $scroll_container.offset().top + thead_height;\n    const scroll_container_bottom =\n        scroll_container_top + $scroll_container.height() - under_closed_compose_region_height;\n\n    const topic_row_top = $(topic_row).offset().top;\n    const topic_row_bottom = topic_row_top + $(topic_row).height();\n\n    // Topic is above the visible scroll region.\n    if (topic_row_top < scroll_container_top) {\n        return \"above\";\n        // Topic is below the visible scroll region.\n    } else if (topic_row_bottom > scroll_container_bottom) {\n        return \"below\";\n    }\n\n    // Topic is visible\n    return \"visible\";\n}\n\nfunction set_focus_to_element_in_center() {\n    const table_wrapper_element = document.querySelector(\"#recent_topics_table .table_fix_head\");\n    const $topic_rows = $(\"#recent_topics_table table tbody tr\");\n\n    if (row_focus > $topic_rows.length) {\n        // User used a filter which reduced\n        // the number of visible rows.\n        return;\n    }\n    let $topic_row = $topic_rows.eq(row_focus);\n    const topic_offset = topic_offset_to_visible_area($topic_row);\n    if (topic_offset !== \"visible\") {\n        // Get the element at the center of the table.\n        const position = table_wrapper_element.getBoundingClientRect();\n        const topic_center_x = (position.left + position.right) / 2;\n        const topic_center_y = (position.top + position.bottom) / 2;\n\n        $topic_row = $(document.elementFromPoint(topic_center_x, topic_center_y)).closest(\"tr\");\n\n        row_focus = $topic_rows.index($topic_row);\n        set_table_focus(row_focus, col_focus);\n    }\n}\n\nfunction is_scroll_position_for_render(scroll_container) {\n    const table_bottom_margin = 100; // Extra margin at the bottom of table.\n    const table_row_height = 50;\n    return (\n        scroll_container.scrollTop +\n            scroll_container.clientHeight +\n            table_bottom_margin +\n            table_row_height >\n        scroll_container.scrollHeight\n    );\n}\n\nexport function complete_rerender() {\n    if (!is_visible()) {\n        return;\n    }\n\n    // Update header\n    load_filters();\n    show_selected_filters();\n\n    // Show topics list\n    const mapped_topic_values = Array.from(get().values()).map((value) => value);\n\n    if (topics_widget) {\n        topics_widget.replace_list_data(mapped_topic_values);\n        return;\n    }\n\n    const rendered_body = render_recent_topics_body({\n        filter_participated: filters.has(\"participated\"),\n        filter_unread: filters.has(\"unread\"),\n        filter_muted: filters.has(\"include_muted\"),\n        filter_pm: filters.has(\"include_private\"),\n        search_val: $(\"#recent_topics_search\").val() || \"\",\n        is_spectator: page_params.is_spectator,\n    });\n    $(\"#recent_topics_table\").html(rendered_body);\n    const $container = $(\"#recent_topics_table table tbody\");\n    $container.empty();\n    topics_widget = ListWidget.create($container, mapped_topic_values, {\n        name: \"recent_topics_table\",\n        $parent_container: $(\"#recent_topics_table\"),\n        modifier(item) {\n            return render_recent_topic_row(format_conversation(item));\n        },\n        filter: {\n            // We use update_filters_view & filters_should_hide_topic to do all the\n            // filtering for us, which is called using click_handlers.\n            predicate(topic_data) {\n                return !filters_should_hide_topic(topic_data);\n            },\n        },\n        sort_fields: {\n            stream_sort,\n            topic_sort,\n        },\n        html_selector: get_topic_row,\n        $simplebar_container: $(\"#recent_topics_table .table_fix_head\"),\n        callback_after_render: () => setTimeout(revive_current_focus, 0),\n        is_scroll_position_for_render,\n        post_scroll__pre_render_callback: set_focus_to_element_in_center,\n        get_min_load_count,\n    });\n}\n\nexport function show() {\n    if (narrow.has_shown_message_list_view) {\n        narrow.save_pre_narrow_offset_for_reload();\n    }\n\n    if (is_visible()) {\n        // If we're already visible, E.g. because the user hit Esc\n        // while already in the recent topics view, do nothing.\n        return;\n    }\n    // Hide selected elements in the left sidebar.\n    top_left_corner.narrow_to_recent_topics();\n    stream_list.handle_narrow_deactivated();\n\n    // Hide \"middle-column\" which has html for rendering\n    // a messages narrow. We hide it and show recent topics.\n    $(\"#message_feed_container\").hide();\n    $(\"#recent_topics_view\").show();\n    set_visible(true);\n    $(\"#message_view_header_underpadding\").hide();\n    $(\".header\").css(\"padding-bottom\", \"0px\");\n\n    unread_ui.hide_mark_as_read_turned_off_banner();\n\n    // We want to show `new stream message` instead of\n    // `new topic`, which we are already doing in this\n    // function. So, we reuse it here.\n    compose_closed_ui.update_buttons_for_recent_topics();\n\n    narrow_state.reset_current_filter();\n    narrow.update_narrow_title(narrow_state.filter());\n    message_view_header.render_title_area();\n    narrow.handle_middle_pane_transition();\n    pm_list.handle_narrow_deactivated();\n\n    complete_rerender();\n}\n\nfunction filter_buttons() {\n    return $(\"#recent_filters_group\").children();\n}\n\nexport function hide() {\n    // On firefox (and flaky on other browsers), focus\n    // remains on the focused element even after it is hidden. We\n    // forcefully blur it so that focus returns to the visible\n    // focused element.\n    const $focused_element = $(document.activeElement);\n    if ($(\"#recent_topics_view\").has($focused_element)) {\n        $focused_element.trigger(\"blur\");\n    }\n\n    $(\"#message_view_header_underpadding\").show();\n    $(\"#message_feed_container\").show();\n    $(\"#recent_topics_view\").hide();\n    set_visible(false);\n\n    $(\".header\").css(\"padding-bottom\", \"10px\");\n\n    // This solves a bug with message_view_header\n    // being broken sometimes when we narrow\n    // to a filter and back to recent topics\n    // before it completely re-rerenders.\n    message_view_header.render_title_area();\n\n    if (!message_list_displayed_before) {\n        // Hack: If the app is loaded directly to recent topics, then we\n        // need to arrange to call navbar_alerts.resize_app when we first\n        // visit a message list. This is a workaround for bugs where the\n        // floating recipient bar will be invisible (as well as other\n        // alignment issues) when they are initially rendered in the\n        // background because recent topics is displayed.\n        message_list_displayed_before = true;\n        navbar_alerts.resize_app();\n    }\n\n    // This makes sure user lands on the selected message\n    // and not always at the top of the narrow.\n    navigate.plan_scroll_to_selected();\n}\n\nfunction is_focus_at_last_table_row() {\n    return row_focus >= topics_widget.get_current_list().length - 1;\n}\n\nfunction has_unread(row) {\n    const last_msg_id = topics_widget.get_current_list()[row].last_msg_id;\n    const last_msg = message_store.get(last_msg_id);\n    if (last_msg.type === \"stream\") {\n        return unread.num_unread_for_topic(last_msg.stream_id, last_msg.topic) > 0;\n    }\n    return unread.num_unread_for_user_ids_string(last_msg.to_user_ids) > 0;\n}\n\nexport function focus_clicked_element(topic_row_index, col, topic_key) {\n    $current_focus_elem = \"table\";\n    col_focus = col;\n    row_focus = topic_row_index;\n\n    if (col === COLUMNS.topic) {\n        last_visited_topic = topic_key;\n    }\n    // Set compose_closed_ui reply button text.  The rest of the table\n    // focus logic should be a noop.\n    set_table_focus(row_focus, col_focus);\n}\n\nfunction left_arrow_navigation(row, col) {\n    const type = get_row_type(row);\n\n    if (type === \"stream\" && col === MAX_SELECTABLE_TOPIC_COLS - 1 && !has_unread(row)) {\n        col_focus -= 1;\n    }\n\n    col_focus -= 1;\n    if (col_focus < 0) {\n        col_focus = get_max_selectable_cols(row) - 1;\n    }\n}\n\nfunction right_arrow_navigation(row, col) {\n    const type = get_row_type(row);\n\n    if (type === \"stream\" && col === 1 && !has_unread(row)) {\n        col_focus += 1;\n    }\n\n    col_focus += 1;\n    if (col_focus >= get_max_selectable_cols(row)) {\n        col_focus = 0;\n    }\n}\n\nfunction up_arrow_navigation(row, col) {\n    row_focus -= 1;\n    if (row_focus < 0) {\n        return;\n    }\n    const type = get_row_type(row);\n\n    if (type === \"stream\" && col === 2 && row - 1 >= 0 && !has_unread(row - 1)) {\n        col_focus = 1;\n    }\n}\n\nfunction down_arrow_navigation() {\n    row_focus += 1;\n}\n\nfunction get_page_up_down_delta() {\n    const table_height = $(\"#recent_topics_table .table_fix_head\").height();\n    const table_header_height = $(\"#recent_topics_table table thead\").height();\n    const compose_box_height = $(\"#compose\").height();\n    // One usually wants PageDown to move what had been the bottom row\n    // to now be at the top, so one can be confident one will see\n    // every row using it. This offset helps achieve that goal.\n    //\n    // See navigate.amount_to_paginate for similar logic in the message feed.\n    const scrolling_reduction_to_maintain_context = 75;\n\n    const delta =\n        table_height -\n        table_header_height -\n        compose_box_height -\n        scrolling_reduction_to_maintain_context;\n    return delta;\n}\n\nfunction page_up_navigation() {\n    const $scroll_container = ui.get_scroll_element($(\"#recent_topics_table .table_fix_head\"));\n    const delta = get_page_up_down_delta();\n    const new_scrollTop = $scroll_container.scrollTop() - delta;\n    if (new_scrollTop <= 0) {\n        row_focus = 0;\n    }\n    $scroll_container.scrollTop(new_scrollTop);\n    set_table_focus(row_focus, col_focus);\n}\n\nfunction page_down_navigation() {\n    const $scroll_container = ui.get_scroll_element($(\"#recent_topics_table .table_fix_head\"));\n    const delta = get_page_up_down_delta();\n    const new_scrollTop = $scroll_container.scrollTop() + delta;\n    const table_height = $(\"#recent_topics_table .table_fix_head\").height();\n    if (new_scrollTop >= table_height) {\n        row_focus = topics_widget.get_current_list().length - 1;\n    }\n    $scroll_container.scrollTop(new_scrollTop);\n    set_table_focus(row_focus, col_focus);\n}\n\nfunction check_row_type_transition(row, col) {\n    // This function checks if the row is transitioning\n    // from type \"Private messages\" to \"Stream\" or vice versa.\n    // This helps in setting the col_focus as maximum column\n    // of both the type are different.\n    if (row < 0) {\n        return false;\n    }\n    const max_col = get_max_selectable_cols(row);\n    if (col > max_col - 1) {\n        return true;\n    }\n    return false;\n}\n\nexport function change_focused_element($elt, input_key) {\n    // Called from hotkeys.js; like all logic in that module,\n    // returning true will cause the caller to do\n    // preventDefault/stopPropagation; false will let the browser\n    // handle the key.\n\n    if ($elt.attr(\"id\") === \"recent_topics_search\") {\n        // Since the search box a text area, we want the browser to handle\n        // Left/Right and selection within the widget; but if the user\n        // arrows off the edges, we should move focus to the adjacent widgets..\n        const textInput = $(\"#recent_topics_search\").get(0);\n        const start = textInput.selectionStart;\n        const end = textInput.selectionEnd;\n        const text_length = textInput.value.length;\n        let is_selected = false;\n        if (end - start > 0) {\n            is_selected = true;\n        }\n\n        switch (input_key) {\n            //  Allow browser to handle all\n            //  character keypresses.\n            case \"vim_left\":\n            case \"vim_right\":\n            case \"vim_down\":\n            case \"vim_up\":\n            case \"open_recent_topics\":\n                return false;\n            case \"shift_tab\":\n                $current_focus_elem = filter_buttons().last();\n                break;\n            case \"left_arrow\":\n                if (start !== 0 || is_selected) {\n                    return false;\n                }\n                $current_focus_elem = filter_buttons().last();\n                break;\n            case \"tab\":\n                $current_focus_elem = filter_buttons().first();\n                break;\n            case \"right_arrow\":\n                if (end !== text_length || is_selected) {\n                    return false;\n                }\n                $current_focus_elem = filter_buttons().first();\n                break;\n            case \"down_arrow\":\n                set_table_focus(row_focus, col_focus);\n                return true;\n            case \"click\":\n                // Note: current_focus_elem can be different here, so we just\n                // set current_focus_elem to the input box, we don't want .trigger(\"focus\") on\n                // it since it is already focused.\n                // We only do this for search because we don't want the focus to\n                // go away from the input box when `revive_current_focus` is called\n                // on rerender when user is typing.\n                $current_focus_elem = $(\"#recent_topics_search\");\n                compose_closed_ui.set_standard_text_for_reply_button();\n                return true;\n            case \"escape\":\n                if (is_table_focused()) {\n                    return false;\n                }\n                set_table_focus(row_focus, col_focus);\n                return true;\n        }\n    } else if ($elt.hasClass(\"btn-recent-filters\")) {\n        switch (input_key) {\n            case \"click\":\n                $current_focus_elem = $elt;\n                return true;\n            case \"shift_tab\":\n            case \"vim_left\":\n            case \"left_arrow\":\n                if (filter_buttons().first()[0] === $elt[0]) {\n                    $current_focus_elem = $(\"#recent_topics_search\");\n                } else {\n                    $current_focus_elem = $elt.prev();\n                }\n                break;\n            case \"tab\":\n            case \"vim_right\":\n            case \"right_arrow\":\n                if (filter_buttons().last()[0] === $elt[0]) {\n                    $current_focus_elem = $(\"#recent_topics_search\");\n                } else {\n                    $current_focus_elem = $elt.next();\n                }\n                break;\n            case \"vim_down\":\n            case \"down_arrow\":\n                set_table_focus(row_focus, col_focus);\n                return true;\n            case \"escape\":\n                if (is_table_focused()) {\n                    return false;\n                }\n                set_table_focus(row_focus, col_focus);\n                return true;\n        }\n    } else if (is_table_focused()) {\n        // Don't process hotkeys in table if there are no rows.\n        if (!topics_widget || topics_widget.get_current_list().length === 0) {\n            return true;\n        }\n\n        // For arrowing around the table of topics, we implement left/right\n        // wraparound.  Going off the top or the bottom takes one\n        // to the navigation at the top (see set_table_focus).\n        switch (input_key) {\n            case \"escape\":\n                return false;\n            case \"open_recent_topics\":\n                set_default_focus();\n                return true;\n            case \"shift_tab\":\n            case \"vim_left\":\n            case \"left_arrow\":\n                left_arrow_navigation(row_focus, col_focus);\n                break;\n            case \"tab\":\n            case \"vim_right\":\n            case \"right_arrow\":\n                right_arrow_navigation(row_focus, col_focus);\n                break;\n            case \"down_arrow\":\n            case \"vim_down\":\n                // We stop user at last table row\n                // so that user doesn't end up in\n                // input box where it is impossible to\n                // get out of using vim_up / vim_down\n                // keys. This also blocks the user from\n                // having `jjjj` typed in the input box\n                // when continuously pressing `j`.\n                if (is_focus_at_last_table_row()) {\n                    return true;\n                }\n                down_arrow_navigation();\n                break;\n            case \"vim_up\":\n                // See comment on vim_down.\n                // Similarly, blocks the user from\n                // having `kkkk` typed in the input box\n                // when continuously pressing `k`.\n                if (row_focus === 0) {\n                    return true;\n                }\n                up_arrow_navigation(row_focus, col_focus);\n                break;\n            case \"up_arrow\":\n                up_arrow_navigation(row_focus, col_focus);\n                break;\n            case \"page_up\":\n                page_up_navigation();\n                return true;\n            case \"page_down\":\n                page_down_navigation();\n                return true;\n        }\n\n        if (check_row_type_transition(row_focus, col_focus)) {\n            col_focus = get_max_selectable_cols(row_focus) - 1;\n        }\n\n        set_table_focus(row_focus, col_focus, true);\n        return true;\n    }\n    if ($current_focus_elem && input_key !== \"escape\") {\n        $current_focus_elem.trigger(\"focus\");\n        if ($current_focus_elem.hasClass(\"btn-recent-filters\")) {\n            compose_closed_ui.set_standard_text_for_reply_button();\n        }\n        return true;\n    }\n\n    return false;\n}\n","import $ from \"jquery\";\n\nimport * as compose_state from \"./compose_state\";\nimport * as overlays from \"./overlays\";\nimport * as popovers from \"./popovers\";\n\nlet is_rt_visible = false;\n\nexport function set_visible(value) {\n    is_rt_visible = value;\n}\n\nexport function is_visible() {\n    return is_rt_visible;\n}\n\nexport function is_in_focus() {\n    // Check if user is focused on\n    // recent topics.\n    return (\n        is_visible() &&\n        !compose_state.composing() &&\n        !popovers.any_active() &&\n        !overlays.is_overlay_or_modal_open() &&\n        !$(\".home-page-input\").is(\":focus\")\n    );\n}\n\nexport function get_topic_key(stream_id, topic) {\n    return stream_id + \":\" + topic.toLowerCase();\n}\n\nexport function get_key_from_message(msg) {\n    if (msg.type === \"private\") {\n        // The to_user_ids field on a private message object is a\n        // string containing the user IDs involved in the message in\n        // sorted order.\n        return msg.to_user_ids;\n    } else if (msg.type === \"stream\") {\n        return get_topic_key(msg.stream_id, msg.topic);\n    }\n    throw new Error(`Invalid message type ${msg.type}`);\n}\n","import $ from \"jquery\";\n\nimport * as activity from \"./activity\";\nimport * as blueslip from \"./blueslip\";\nimport * as compose from \"./compose\";\nimport * as compose_actions from \"./compose_actions\";\nimport * as compose_state from \"./compose_state\";\nimport {csrf_token} from \"./csrf\";\nimport * as drafts from \"./drafts\";\nimport * as hash_util from \"./hash_util\";\nimport * as hashchange from \"./hashchange\";\nimport {localstorage} from \"./localstorage\";\nimport * as message_lists from \"./message_lists\";\nimport * as narrow_state from \"./narrow_state\";\nimport {page_params} from \"./page_params\";\nimport * as reload_state from \"./reload_state\";\nimport * as server_events from \"./server_events\";\nimport * as ui_report from \"./ui_report\";\nimport * as util from \"./util\";\n\n// Read https://zulip.readthedocs.io/en/latest/subsystems/hashchange-system.html\nfunction preserve_state(send_after_reload, save_pointer, save_narrow, save_compose) {\n    if (!localstorage.supported()) {\n        // If local storage is not supported by the browser, we can't\n        // save the browser's position across reloads (since there's\n        // no secure way to pass that state in a signed fashion to the\n        // next instance of the browser client).\n        //\n        // So we just return here and let the reload proceed without\n        // having preserved state.  We keep the hash the same so we'll\n        // at least save their narrow state.\n        blueslip.log(\"Can't preserve state; no local storage.\");\n        return;\n    }\n\n    let url = \"#reload:send_after_reload=\" + Number(send_after_reload);\n    url += \"+csrf_token=\" + encodeURIComponent(csrf_token);\n\n    if (save_compose) {\n        const msg_type = compose_state.get_message_type();\n        if (msg_type === \"stream\") {\n            url += \"+msg_type=stream\";\n            url += \"+stream=\" + encodeURIComponent(compose_state.stream_name());\n            url += \"+topic=\" + encodeURIComponent(compose_state.topic());\n        } else if (msg_type === \"private\") {\n            url += \"+msg_type=private\";\n            url += \"+recipient=\" + encodeURIComponent(compose_state.private_message_recipient());\n        }\n\n        if (msg_type) {\n            url += \"+msg=\" + encodeURIComponent(compose_state.message_content());\n            const draft_id = drafts.update_draft();\n            if (draft_id) {\n                url += \"+draft_id=\" + encodeURIComponent(draft_id);\n            }\n        }\n    }\n\n    if (save_pointer) {\n        const pointer = message_lists.home.selected_id();\n        if (pointer !== -1) {\n            url += \"+pointer=\" + pointer;\n        }\n    }\n\n    if (save_narrow) {\n        const $row = message_lists.home.selected_row();\n        if (!narrow_state.active()) {\n            if ($row.length > 0) {\n                url += \"+offset=\" + $row.offset().top;\n            }\n        } else {\n            url += \"+offset=\" + message_lists.home.pre_narrow_offset;\n\n            // narrow_state.active() is true, so this is the current\n            // narrowed message list.\n            const narrow_pointer = message_lists.current.selected_id();\n            if (narrow_pointer !== -1) {\n                url += \"+narrow_pointer=\" + narrow_pointer;\n            }\n            const $narrow_row = message_lists.current.selected_row();\n            if ($narrow_row.length > 0) {\n                url += \"+narrow_offset=\" + $narrow_row.offset().top;\n            }\n        }\n    }\n\n    url += hash_util.build_reload_url();\n\n    // Delete unused states that have been around for a while.\n    const ls = localstorage();\n    delete_stale_tokens(ls);\n\n    // To protect the browser against CSRF type attacks, the reload\n    // logic uses a random token (to distinct this browser from\n    // others) which is passed via the URL to the browser (post\n    // reloading).  The token is a key into local storage, where we\n    // marshall and store the URL.\n    //\n    // TODO: Remove the now-unnecessary URL-encoding logic above and\n    // just pass the actual data structures through local storage.\n    const token = util.random_int(0, 1024 * 1024 * 1024 * 1024);\n    const metadata = {\n        url,\n        timestamp: Date.now(),\n    };\n    ls.set(\"reload:\" + token, metadata);\n    window.location.replace(\"#reload:\" + token);\n}\n\nexport function is_stale_refresh_token(token_metadata, now) {\n    // TODO/compatibility: the metadata was changed from a string\n    // to a map containing the string and a timestamp. For now we'll\n    // delete all tokens that only contain the url. Remove this\n    // early return once you can no longer directly upgrade from\n    // Zulip 5.x to the current version.\n    if (!token_metadata.timestamp) {\n        return true;\n    }\n\n    // The time between reload token generation and use should usually be\n    // fewer than 30 seconds, but we keep tokens around for a week just in case\n    // (e.g. a tab could fail to load and be refreshed a while later).\n    const milliseconds_in_a_day = 1000 * 60 * 60 * 24;\n    const timedelta = now - token_metadata.timestamp;\n    const days_since_token_creation = timedelta / milliseconds_in_a_day;\n    return days_since_token_creation > 7;\n}\n\nfunction delete_stale_tokens(ls) {\n    const now = Date.now();\n    ls.removeDataRegexWithCondition(\"reload:\\\\d+\", (metadata) =>\n        is_stale_refresh_token(metadata, now),\n    );\n}\n\n// Check if we're doing a compose-preserving reload.  This must be\n// done before the first call to get_events\nexport function initialize() {\n    // location.hash should be e.g. `#reload:12345123412312`\n    if (!location.hash.startsWith(\"#reload:\")) {\n        return;\n    }\n    const hash_fragment = location.hash.slice(\"#\".length);\n\n    // Using the token, recover the saved pre-reload data from local\n    // storage.  Afterwards, we clear the reload entry from local\n    // storage to avoid a local storage space leak.\n    const ls = localstorage();\n    let fragment = ls.get(hash_fragment);\n    if (fragment === undefined) {\n        // Since this can happen sometimes with hand-reloading, it's\n        // not really worth throwing an exception if these don't\n        // exist, but be log it so that it's available for future\n        // debugging if an exception happens later.\n        blueslip.info(\"Invalid hash change reload token\");\n        hashchange.changehash(\"\");\n        return;\n    }\n    ls.remove(hash_fragment);\n\n    // TODO/compatibility: `fragment` was changed from a string\n    // to a map containing the string and a timestamp. For now we'll\n    // delete all tokens that only contain the url. Remove the\n    // `|| fragment` once you can no longer directly upgrade\n    // from Zulip 5.x to the current version.\n    [, fragment] = /^#reload:(.*)/.exec(fragment.url || fragment);\n    const keyvals = fragment.split(\"+\");\n    const vars = {};\n\n    for (const str of keyvals) {\n        const pair = str.split(\"=\");\n        vars[pair[0]] = decodeURIComponent(pair[1]);\n    }\n\n    if (vars.msg !== undefined) {\n        const send_now = Number.parseInt(vars.send_after_reload, 10);\n\n        try {\n            compose_actions.start(vars.msg_type, {\n                stream: vars.stream || \"\",\n                topic: vars.topic || \"\",\n                private_message_recipient: vars.recipient || \"\",\n                content: vars.msg || \"\",\n                draft_id: vars.draft_id || \"\",\n            });\n            if (send_now) {\n                compose.finish();\n            }\n        } catch (error) {\n            // We log an error if we can't open the compose box, but otherwise\n            // we continue, since this is not critical.\n            blueslip.warn(error.toString());\n        }\n    }\n\n    const pointer = Number.parseInt(vars.pointer, 10);\n\n    if (pointer) {\n        page_params.initial_pointer = pointer;\n    }\n    const offset = Number.parseInt(vars.offset, 10);\n    if (offset) {\n        page_params.initial_offset = offset;\n    }\n\n    const narrow_pointer = Number.parseInt(vars.narrow_pointer, 10);\n    if (narrow_pointer) {\n        page_params.initial_narrow_pointer = narrow_pointer;\n    }\n    const narrow_offset = Number.parseInt(vars.narrow_offset, 10);\n    if (narrow_offset) {\n        page_params.initial_narrow_offset = narrow_offset;\n    }\n\n    activity.set_new_user_input(false);\n    hashchange.changehash(vars.oldhash);\n}\n\nfunction do_reload_app(send_after_reload, save_pointer, save_narrow, save_compose, message_html) {\n    if (reload_state.is_in_progress()) {\n        blueslip.log(\"do_reload_app: Doing nothing since reload_in_progress\");\n        return;\n    }\n\n    // TODO: we should completely disable the UI here\n    if (save_pointer || save_narrow || save_compose) {\n        try {\n            preserve_state(send_after_reload, save_pointer, save_narrow, save_compose);\n        } catch (error) {\n            blueslip.error(\"Failed to preserve state\", undefined, error.stack);\n        }\n    }\n\n    // TODO: We need a better API for showing messages.\n    ui_report.message(message_html, $(\"#reloading-application\"));\n    blueslip.log(\"Starting server requested page reload\");\n    reload_state.set_state_to_in_progress();\n\n    // Sometimes the window.location.reload that we attempt has no\n    // immediate effect (likely by browsers trying to save power by\n    // skipping requested reloads), which can leave the Zulip app in a\n    // broken state and cause lots of confusing tracebacks.  So, we\n    // set ourselves to try reloading a bit later, both periodically\n    // and when the user focuses the window.\n    $(window).one(\"focus\", () => {\n        blueslip.log(\"Retrying on-focus page reload\");\n        window.location.reload(true);\n    });\n\n    function retry_reload() {\n        blueslip.log(\"Retrying page reload due to 30s timer\");\n        window.location.reload(true);\n    }\n    util.call_function_periodically(retry_reload, 30000);\n\n    try {\n        server_events.cleanup_event_queue();\n    } catch (error) {\n        blueslip.error(\"Failed to clean up before reloading\", undefined, error.stack);\n    }\n\n    window.location.reload(true);\n}\n\nexport function initiate({\n    immediate = false,\n    save_pointer = true,\n    save_narrow = true,\n    save_compose = true,\n    send_after_reload = false,\n    message_html = \"Reloading ...\",\n}) {\n    if (immediate) {\n        do_reload_app(send_after_reload, save_pointer, save_narrow, save_compose, message_html);\n    }\n\n    if (reload_state.is_pending() || reload_state.is_in_progress()) {\n        return;\n    }\n    reload_state.set_state_to_pending();\n\n    // We're now planning to execute a reload of the browser, usually\n    // to get an updated version of the Zulip web app code.  Because in\n    // most cases all browsers will be receiving this notice at the\n    // same or similar times, we need to randomize the time that we do\n    // this in order to avoid a thundering herd overloading the server.\n    //\n    // Additionally, we try to do this reload at a time the user will\n    // not notice.  So completely idle clients will reload first;\n    // those will an open compose box will wait until the message has\n    // been sent (or until it's clear the user isn't likely to send it).\n    //\n    // And then we unconditionally reload sometime after 30 minutes\n    // even if there is continued activity, because we don't support\n    // old JavaScript versions against newer servers and eventually\n    // letting that situation continue will lead to users seeing bugs.\n    //\n    // It's a little odd that how this timeout logic works with\n    // compose box resets including the random variance, but that\n    // makes it simple to reason about: We know that reloads will be\n    // spread over at least 5 minutes in all cases.\n\n    let idle_control;\n    const random_variance = util.random_int(0, 1000 * 60 * 5);\n    const unconditional_timeout = 1000 * 60 * 30 + random_variance;\n    const composing_idle_timeout = 1000 * 60 * 7 + random_variance;\n    const basic_idle_timeout = 1000 * 60 * 1 + random_variance;\n    let compose_started_handler;\n\n    function reload_from_idle() {\n        do_reload_app(false, save_pointer, save_narrow, save_compose, message_html);\n    }\n\n    // Make sure we always do a reload eventually after\n    // unconditional_timeout.  Because we save cursor location and\n    // compose state when reloading, we expect this to not be\n    // particularly disruptive.\n    setTimeout(reload_from_idle, unconditional_timeout);\n\n    const compose_done_handler = function () {\n        // If the user sends their message or otherwise closes\n        // compose, we return them to the not-composing timeouts.\n        idle_control.cancel();\n        idle_control = $(document).idle({idle: basic_idle_timeout, onIdle: reload_from_idle});\n        $(document).off(\"compose_canceled.zulip compose_finished.zulip\", compose_done_handler);\n        $(document).on(\"compose_started.zulip\", compose_started_handler);\n    };\n    compose_started_handler = function () {\n        // If the user stops being idle and starts composing a\n        // message, switch to the compose-open timeouts.\n        idle_control.cancel();\n        idle_control = $(document).idle({idle: composing_idle_timeout, onIdle: reload_from_idle});\n        $(document).off(\"compose_started.zulip\", compose_started_handler);\n        $(document).on(\"compose_canceled.zulip compose_finished.zulip\", compose_done_handler);\n    };\n\n    if (compose_state.composing()) {\n        idle_control = $(document).idle({idle: composing_idle_timeout, onIdle: reload_from_idle});\n        $(document).on(\"compose_canceled.zulip compose_finished.zulip\", compose_done_handler);\n    } else {\n        idle_control = $(document).idle({idle: basic_idle_timeout, onIdle: reload_from_idle});\n        $(document).on(\"compose_started.zulip\", compose_started_handler);\n    }\n}\n\nwindow.addEventListener(\"beforeunload\", () => {\n    // When navigating away from the page do not try to reload.\n    // The polling get_events call will fail after we delete the event queue.\n    // When that happens we reload the page to correct the problem. If this\n    // happens before the navigation is complete the user is kept captive at\n    // zulip.\n    blueslip.log(\"Setting reload_in_progress in beforeunload handler\");\n    reload_state.set_state_to_in_progress();\n});\n\nreload_state.set_csrf_failed_handler(() => {\n    initiate({\n        immediate: true,\n        save_pointer: true,\n        save_narrow: true,\n        save_compose: true,\n    });\n});\n","import $ from \"jquery\";\n\nimport * as channel from \"./channel\";\nimport * as compose from \"./compose\";\nimport * as compose_banner from \"./compose_banner\";\nimport * as hash_util from \"./hash_util\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as message_lists from \"./message_lists\";\nimport * as notifications from \"./notifications\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as transmit from \"./transmit\";\nimport * as util from \"./util\";\n\nexport const deferred_message_types = {\n    scheduled: {\n        delivery_type: \"send_later\",\n        test: /^\\/schedule/,\n        slash_command: \"/schedule\",\n    },\n    reminders: {\n        delivery_type: \"remind\",\n        test: /^\\/remind/,\n        slash_command: \"/remind\",\n    },\n};\n\nexport function is_deferred_delivery(message_content) {\n    const reminders_test = deferred_message_types.reminders.test;\n    const scheduled_test = deferred_message_types.scheduled.test;\n    return reminders_test.test(message_content) || scheduled_test.test(message_content);\n}\n\nexport function patch_request_for_scheduling(request, message_content, deliver_at, delivery_type) {\n    if (request.type === \"private\") {\n        request.to = JSON.stringify(request.to);\n    } else {\n        request.to = JSON.stringify([request.to]);\n    }\n\n    const new_request = request;\n    new_request.content = message_content;\n    new_request.deliver_at = deliver_at;\n    new_request.delivery_type = delivery_type;\n    new_request.tz_guess = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    return new_request;\n}\n\nexport function schedule_message(request = compose.create_message_object()) {\n    const raw_message = request.content.split(\"\\n\");\n    const command_line = raw_message[0];\n    const message = raw_message.slice(1).join(\"\\n\");\n\n    const deferred_message_type = Object.values(deferred_message_types).find(\n        (props) => command_line.match(props.test) !== null,\n    );\n    const command = command_line.match(deferred_message_type.test)[0];\n\n    const deliver_at = command_line.slice(command.length + 1);\n\n    let error_message;\n    if (command_line.slice(command.length, command.length + 1) !== \" \") {\n        error_message = $t({\n            defaultMessage:\n                \"Invalid slash command. Check if you are missing a space after the command.\",\n        });\n    } else if (deliver_at.trim() === \"\") {\n        error_message = $t({defaultMessage: \"Please specify a date or time.\"});\n    } else if (message.trim() === \"\") {\n        error_message = $t({defaultMessage: \"You have nothing to send!\"});\n    }\n\n    if (error_message) {\n        compose_banner.show_error_message(\n            error_message,\n            compose_banner.CLASSNAMES.generic_compose_error,\n            $(\"#compose-textarea\"),\n        );\n        $(\"#compose-textarea\").prop(\"disabled\", false);\n        return;\n    }\n\n    request = patch_request_for_scheduling(\n        request,\n        message,\n        deliver_at,\n        deferred_message_type.delivery_type,\n    );\n\n    const success = function (data) {\n        if (request.delivery_type === deferred_message_types.scheduled.delivery_type) {\n            const deliver_at = data.deliver_at;\n            notifications.notify_above_composebox(\n                $t_html({defaultMessage: `Message scheduled for {deliver_at}`}, {deliver_at}),\n            );\n        }\n        $(\"#compose-textarea\").prop(\"disabled\", false);\n        compose.clear_compose_box();\n    };\n    const error = function (response) {\n        $(\"#compose-textarea\").prop(\"disabled\", false);\n        compose_banner.show_error_message(\n            response,\n            compose_banner.CLASSNAMES.generic_compose_error,\n            $(\"#compose-textarea\"),\n        );\n    };\n    /* We are adding a disable on compose under this block because we\n    want slash commands to be blocking in nature. */\n    $(\"#compose-textarea\").prop(\"disabled\", true);\n\n    const future_message = true;\n    transmit.send_message(request, success, error, future_message);\n}\n\nexport function do_set_reminder_for_message(message_id, timestamp) {\n    const $row = $(`[zid='${CSS.escape(message_id)}']`);\n    function error() {\n        $row.find(\".alert-msg\")\n            .text($t({defaultMessage: \"Reminder not set!\"}))\n            .css(\"display\", \"block\")\n            .css(\"color\", \"#b94a48\")\n            .delay(1000)\n            .fadeOut(300, function () {\n                $(this).css(\"color\", \"\");\n            });\n    }\n\n    const message = message_lists.current.get(message_id);\n\n    if (!message.raw_content) {\n        const msg_list = message_lists.current;\n        channel.get({\n            url: \"/json/messages/\" + message.id,\n            success(data) {\n                if (message_lists.current === msg_list) {\n                    message.raw_content = data.raw_content;\n                    do_set_reminder_for_message(message_id, timestamp);\n                }\n            },\n            error,\n        });\n        return;\n    }\n\n    const link_to_msg = hash_util.by_conversation_and_time_url(message);\n    const reminder_msg_content =\n        message.raw_content + \"\\n\\n[Link to conversation](\" + link_to_msg + \")\";\n    let reminder_message = {\n        type: \"private\",\n        sender_id: page_params.user_id,\n        stream: \"\",\n    };\n    reminder_message.topic = \"\";\n\n    const recipient = page_params.email;\n    const emails = util.extract_pm_recipients(recipient);\n    reminder_message.to = emails;\n    reminder_message.reply_to = recipient;\n    reminder_message.private_message_recipient = recipient;\n    reminder_message.to_user_ids = people.email_list_to_user_ids_string(emails);\n\n    function success() {\n        $row.find(\".alert-msg\")\n            .text($t({defaultMessage: \"Reminder set!\"}))\n            .css(\"display\", \"block\")\n            .delay(1000)\n            .fadeOut(300);\n    }\n\n    reminder_message = patch_request_for_scheduling(\n        reminder_message,\n        reminder_msg_content,\n        timestamp,\n        deferred_message_types.reminders.delivery_type,\n    );\n    transmit.send_message(reminder_message, success, error);\n}\n","import ClipboardJS from \"clipboard\";\nimport {isValid, parseISO} from \"date-fns\";\nimport $ from \"jquery\";\n\nimport copy_code_button from \"../templates/copy_code_button.hbs\";\nimport render_markdown_timestamp from \"../templates/markdown_timestamp.hbs\";\nimport view_code_in_playground from \"../templates/view_code_in_playground.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as people from \"./people\";\nimport * as realm_playground from \"./realm_playground\";\nimport * as rtl from \"./rtl\";\nimport * as stream_data from \"./stream_data\";\nimport * as timerender from \"./timerender\";\nimport * as user_groups from \"./user_groups\";\nimport {user_settings} from \"./user_settings\";\n\n/*\n    rendered_markdown\n\n    This module provides a single function 'update_elements' to\n    update any renamed users/streams/groups etc. and other\n    dynamic parts of our rendered messages.\n\n    Use this module wherever some Markdown rendered content\n    is being displayed.\n*/\n\nexport function get_user_id_for_mention_button(elem) {\n    const user_id_string = $(elem).attr(\"data-user-id\");\n    // Handle legacy Markdown that was rendered before we cut\n    // over to using data-user-id.\n    const email = $(elem).attr(\"data-user-email\");\n\n    if (user_id_string === \"*\" || email === \"*\") {\n        return \"*\";\n    }\n\n    if (user_id_string) {\n        return Number.parseInt(user_id_string, 10);\n    }\n\n    if (email) {\n        // Will return undefined if there's no match\n        const user = people.get_by_email(email);\n        if (user) {\n            return user.user_id;\n        }\n    }\n    return undefined;\n}\n\nfunction get_user_group_id_for_mention_button(elem) {\n    const user_group_id = $(elem).attr(\"data-user-group-id\");\n\n    if (user_group_id) {\n        return Number.parseInt(user_group_id, 10);\n    }\n\n    return undefined;\n}\n\n// Helper function to update a mentioned user's name.\nexport function set_name_in_mention_element(element, name) {\n    if ($(element).hasClass(\"silent\")) {\n        $(element).text(name);\n    } else {\n        $(element).text(\"@\" + name);\n    }\n}\n\nexport const update_elements = ($content) => {\n    // Set the rtl class if the text has an rtl direction\n    if (rtl.get_direction($content.text()) === \"rtl\") {\n        $content.addClass(\"rtl\");\n    }\n\n    $content.find(\".user-mention\").each(function () {\n        const user_id = get_user_id_for_mention_button(this);\n        // We give special highlights to the mention buttons\n        // that refer to the current user.\n        if (user_id === \"*\" || people.is_my_user_id(user_id)) {\n            // Either a wildcard mention or us, so mark it.\n            $(this).addClass(\"user-mention-me\");\n        }\n        if (user_id && user_id !== \"*\" && !$(this).find(\".highlight\").length) {\n            // If it's a mention of a specific user, edit the\n            // mention text to show the user's current name,\n            // assuming that you're not searching for text\n            // inside the highlight.\n            const person = people.get_by_user_id(user_id, true);\n            if (person !== undefined) {\n                // Note that person might be undefined in some\n                // unpleasant corner cases involving data import.\n                set_name_in_mention_element(this, person.full_name);\n            }\n        }\n    });\n\n    $content.find(\".user-group-mention\").each(function () {\n        const user_group_id = get_user_group_id_for_mention_button(this);\n        let user_group;\n        try {\n            user_group = user_groups.get_user_group_from_id(user_group_id);\n        } catch {\n            // This is a user group the current user doesn't have\n            // data on.  This can happen when user groups are\n            // deleted.\n            blueslip.info(\"Rendered unexpected user group \" + user_group_id);\n            return;\n        }\n\n        const my_user_id = people.my_current_user_id();\n        // Mark user group you're a member of.\n        if (user_groups.is_direct_member_of(my_user_id, user_group_id)) {\n            $(this).addClass(\"user-mention-me\");\n        }\n\n        if (user_group_id && !$(this).find(\".highlight\").length) {\n            // Edit the mention to show the current name for the\n            // user group, if its not in search.\n            set_name_in_mention_element(this, user_group.name);\n        }\n    });\n\n    $content.find(\"a.stream\").each(function () {\n        const stream_id = Number.parseInt($(this).attr(\"data-stream-id\"), 10);\n        if (stream_id && !$(this).find(\".highlight\").length) {\n            // Display the current name for stream if it is not\n            // being displayed in search highlight.\n            const stream_name = stream_data.maybe_get_stream_name(stream_id);\n            if (stream_name !== undefined) {\n                // If the stream has been deleted,\n                // stream_data.maybe_get_stream_name might return\n                // undefined.  Otherwise, display the current stream name.\n                $(this).text(\"#\" + stream_name);\n            }\n        }\n    });\n\n    $content.find(\"a.stream-topic\").each(function () {\n        const stream_id = Number.parseInt($(this).attr(\"data-stream-id\"), 10);\n        if (stream_id && !$(this).find(\".highlight\").length) {\n            // Display the current name for stream if it is not\n            // being displayed in search highlight.\n            const stream_name = stream_data.maybe_get_stream_name(stream_id);\n            if (stream_name !== undefined) {\n                // If the stream has been deleted,\n                // stream_data.maybe_get_stream_name might return\n                // undefined.  Otherwise, display the current stream name.\n                const text = $(this).text();\n                $(this).text(\"#\" + stream_name + text.slice(text.indexOf(\" > \")));\n            }\n        }\n    });\n\n    $content.find(\"time\").each(function () {\n        // Populate each timestamp span with mentioned time\n        // in user's local time zone.\n        const time_str = $(this).attr(\"datetime\");\n        if (time_str === undefined) {\n            return;\n        }\n\n        const timestamp = parseISO(time_str);\n        if (isValid(timestamp)) {\n            const rendered_timestamp = render_markdown_timestamp({\n                text: timerender.format_markdown_time(timestamp),\n            });\n            $(this).html(rendered_timestamp);\n        } else {\n            // This shouldn't happen. If it does, we're very interested in debugging it.\n            blueslip.error(`Could not parse datetime supplied by backend: ${time_str}`);\n        }\n    });\n\n    $content.find(\"span.timestamp-error\").each(function () {\n        const [, time_str] = /^Invalid time format: (.*)$/.exec($(this).text());\n        const text = $t(\n            {defaultMessage: \"Invalid time format: {timestamp}\"},\n            {timestamp: time_str},\n        );\n        $(this).text(text);\n    });\n\n    $content.find(\"div.spoiler-header\").each(function () {\n        // If a spoiler block has no header content, it should have a default header.\n        // We do this client side to allow for i18n by the client.\n        if ($(this).html().trim().length === 0) {\n            $(this).append(`<p>${$t_html({defaultMessage: \"Spoiler\"})}</p>`);\n        }\n\n        // Add the expand/collapse button to spoiler blocks\n        const toggle_button_html =\n            '<span class=\"spoiler-button\" aria-expanded=\"false\"><span class=\"spoiler-arrow\"></span></span>';\n        $(this).prepend(toggle_button_html);\n    });\n\n    // Display the view-code-in-playground and the copy-to-clipboard button inside the div.codehilite element.\n    $content.find(\"div.codehilite\").each(function () {\n        const $codehilite = $(this);\n        const $pre = $codehilite.find(\"pre\");\n        const fenced_code_lang = $codehilite.data(\"code-language\");\n        if (fenced_code_lang !== undefined) {\n            const playground_info =\n                realm_playground.get_playground_info_for_languages(fenced_code_lang);\n            if (playground_info !== undefined) {\n                // If a playground is configured for this language,\n                // offer to view the code in that playground.  When\n                // there are multiple playgrounds, we display a\n                // popover listing the options.\n                let title = $t({defaultMessage: \"View in playground\"});\n                const $view_in_playground_button = $(view_code_in_playground());\n                $pre.prepend($view_in_playground_button);\n                if (playground_info.length === 1) {\n                    title = $t(\n                        {defaultMessage: \"View in {playground_name}\"},\n                        {playground_name: playground_info[0].name},\n                    );\n                } else {\n                    $view_in_playground_button.attr(\"aria-haspopup\", \"true\");\n                }\n                $view_in_playground_button.attr(\"data-tippy-content\", title);\n                $view_in_playground_button.attr(\"aria-label\", title);\n            }\n        }\n        const $copy_button = $(copy_code_button());\n        $pre.prepend($copy_button);\n        new ClipboardJS($copy_button[0], {\n            text(copy_element) {\n                return $(copy_element).siblings(\"code\").text();\n            },\n        });\n    });\n\n    // Display emoji (including realm emoji) as text if\n    // user_settings.emojiset is 'text'.\n    if (user_settings.emojiset === \"text\") {\n        $content.find(\".emoji\").replaceWith(function () {\n            const text = $(this).attr(\"title\");\n            return \":\" + text + \":\";\n        });\n    }\n};\n","import autosize from \"autosize\";\nimport $ from \"jquery\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as compose_state from \"./compose_state\";\nimport * as condense from \"./condense\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_viewport from \"./message_viewport\";\nimport * as navbar_alerts from \"./navbar_alerts\";\nimport * as navigate from \"./navigate\";\nimport * as popovers from \"./popovers\";\nimport * as util from \"./util\";\n\nfunction get_new_heights() {\n    const res = {};\n    const viewport_height = message_viewport.height();\n    const top_navbar_height = $(\"#top_navbar\").safeOuterHeight(true);\n    const right_sidebar_shorcuts_height = $(\".right-sidebar-shortcuts\").safeOuterHeight(true) || 0;\n\n    res.bottom_whitespace_height = viewport_height * 0.4;\n\n    res.main_div_min_height = viewport_height - top_navbar_height;\n\n    res.stream_filters_max_height =\n        viewport_height -\n        Number.parseInt($(\"#left-sidebar\").css(\"marginTop\"), 10) -\n        Number.parseInt($(\".narrows_panel\").css(\"marginTop\"), 10) -\n        Number.parseInt($(\".narrows_panel\").css(\"marginBottom\"), 10) -\n        $(\"#global_filters\").safeOuterHeight(true) -\n        $(\"#private_messages_sticky_header\").safeOuterHeight(true);\n\n    // Don't let us crush the stream sidebar completely out of view\n    res.stream_filters_max_height = Math.max(80, res.stream_filters_max_height);\n\n    // RIGHT SIDEBAR\n\n    const usable_height =\n        viewport_height -\n        Number.parseInt($(\"#right-sidebar\").css(\"marginTop\"), 10) -\n        $(\"#userlist-header\").safeOuterHeight(true) -\n        $(\"#user_search_section\").safeOuterHeight(true) -\n        right_sidebar_shorcuts_height;\n\n    res.buddy_list_wrapper_max_height = Math.max(80, usable_height);\n\n    return res;\n}\n\nexport function watch_manual_resize(element) {\n    const box = document.querySelector(element);\n\n    if (!box) {\n        blueslip.error(\"Bad selector in watch_manual_resize: \" + element);\n        return undefined;\n    }\n\n    const meta = {\n        box,\n        height: null,\n        mousedown: false,\n    };\n\n    const box_handler = function () {\n        meta.mousedown = true;\n        meta.height = meta.box.clientHeight;\n    };\n    meta.box.addEventListener(\"mousedown\", box_handler);\n\n    // If the user resizes the textarea manually, we use the\n    // callback to stop autosize from adjusting the height.\n    // It will be re-enabled when this component is next opened.\n    const body_handler = function () {\n        if (meta.mousedown === true) {\n            meta.mousedown = false;\n            if (meta.height !== meta.box.clientHeight) {\n                meta.height = meta.box.clientHeight;\n                autosize.destroy($(element)).height(meta.height + \"px\");\n            }\n        }\n    };\n    document.body.addEventListener(\"mouseup\", body_handler);\n\n    return [box_handler, body_handler];\n}\n\nexport function reset_compose_message_max_height(bottom_whitespace_height) {\n    // If the compose-box is open, we set the `max-height` property of\n    // `compose-textarea` and `preview-textarea`, so that the\n    // compose-box's maximum extent does not overlap the last message\n    // in the current stream.  We also leave a tiny bit of space after\n    // the last message of the current stream.\n\n    // Compute bottom_whitespace_height if not provided by caller.\n    if (bottom_whitespace_height === undefined) {\n        const h = get_new_heights();\n        bottom_whitespace_height = h.bottom_whitespace_height;\n    }\n\n    const compose_height = $(\"#compose\").get(0).getBoundingClientRect().height;\n    const compose_textarea_height = Math.max(\n        $(\"#compose-textarea\").get(0).getBoundingClientRect().height,\n        $(\"#preview_message_area\").get(0).getBoundingClientRect().height,\n    );\n    const compose_non_textarea_height = compose_height - compose_textarea_height;\n\n    // We ensure that the last message is not overlapped by compose box.\n    $(\"#compose-textarea\").css(\n        \"max-height\",\n        // Because <textarea> max-height includes padding, we subtract\n        // 10 for the padding and 10 for the selected message border.\n        bottom_whitespace_height - compose_non_textarea_height - 20,\n    );\n    $(\"#preview_message_area\").css(\n        \"max-height\",\n        // Because <div> max-height doesn't include padding, we only\n        // subtract 10 for the selected message border.\n        bottom_whitespace_height - compose_non_textarea_height - 10,\n    );\n}\n\nexport function resize_bottom_whitespace(h) {\n    $(\"#bottom_whitespace\").height(h.bottom_whitespace_height);\n\n    // The height of the compose box is tied to that of\n    // bottom_whitespace, so update it if necessary.\n    //\n    // reset_compose_message_max_height cannot compute the right\n    // height correctly while compose is hidden. This is OK, because\n    // we also resize compose every time it is opened.\n    if (compose_state.composing()) {\n        reset_compose_message_max_height(h.bottom_whitespace_height);\n    }\n}\n\nexport function resize_stream_filters_container() {\n    const h = get_new_heights();\n    resize_bottom_whitespace(h);\n    $(\"#left_sidebar_scroll_container\").css(\"max-height\", h.stream_filters_max_height);\n}\n\nexport function resize_sidebars() {\n    const h = get_new_heights();\n    $(\"#buddy_list_wrapper\").css(\"max-height\", h.buddy_list_wrapper_max_height);\n    $(\"#left_sidebar_scroll_container\").css(\"max-height\", h.stream_filters_max_height);\n    return h;\n}\n\nexport function resize_page_components() {\n    navbar_alerts.resize_app();\n    const h = resize_sidebars();\n    resize_bottom_whitespace(h);\n}\n\nlet _old_width = $(window).width();\n\nexport function handler() {\n    const new_width = $(window).width();\n\n    // On mobile web, we want to avoid hiding a popover here on height change,\n    // especially if this resize was triggered by a virtual keyboard\n    // popping up when the user opened that very popover.\n    const mobile = util.is_mobile();\n    if (!mobile || new_width !== _old_width) {\n        popovers.hide_all();\n    }\n\n    if (new_width !== _old_width) {\n        _old_width = new_width;\n        condense.clear_message_content_height_cache();\n    }\n    resize_page_components();\n\n    // Re-compute and display/remove [More] links to messages\n    condense.condense_and_collapse($(\".message_table .message_row\"));\n\n    // This function might run onReady (if we're in a narrow window),\n    // but before we've loaded in the messages; in that case, don't\n    // try to scroll to one.\n    if (message_lists.current.selected_id() !== -1) {\n        if (mobile) {\n            popovers.set_suppress_scroll_hide();\n        }\n\n        navigate.scroll_to_selected();\n    }\n}\n","import $ from \"jquery\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_store from \"./message_store\";\n// We don't need an andSelf() here because we already know\n// that our next element is *not* a message_row, so this\n// isn't going to end up empty unless we're at the bottom or top.\nexport function next_visible($message_row) {\n    if ($message_row === undefined || $message_row.length === 0) {\n        return $();\n    }\n    const $row = $message_row.next(\".selectable_row\");\n    if ($row.length !== 0) {\n        return $row;\n    }\n    const $recipient_row = get_message_recipient_row($message_row);\n    const $next_recipient_rows = $recipient_row.nextAll(\".recipient_row\");\n    if ($next_recipient_rows.length === 0) {\n        return $();\n    }\n    return $(\".selectable_row\", $next_recipient_rows[0]).first();\n}\n\nexport function prev_visible($message_row) {\n    if ($message_row === undefined || $message_row.length === 0) {\n        return $();\n    }\n    const $row = $message_row.prev(\".selectable_row\");\n    if ($row.length !== 0) {\n        return $row;\n    }\n    const $recipient_row = get_message_recipient_row($message_row);\n    const $prev_recipient_rows = $recipient_row.prevAll(\".recipient_row\");\n    if ($prev_recipient_rows.length === 0) {\n        return $();\n    }\n    return $(\".selectable_row\", $prev_recipient_rows[0]).last();\n}\n\nexport function first_visible() {\n    return $(\".focused_table .selectable_row\").first();\n}\n\nexport function last_visible() {\n    return $(\".focused_table .selectable_row\").last();\n}\n\nexport function visible_range(start_id, end_id) {\n    /*\n        Get all visible rows between start_id\n        and end_in, being inclusive on both ends.\n    */\n\n    const rows = [];\n\n    let $row = message_lists.current.get_row(start_id);\n    let msg_id = id($row);\n\n    while (msg_id <= end_id) {\n        rows.push($row);\n\n        if (msg_id >= end_id) {\n            break;\n        }\n        $row = next_visible($row);\n        msg_id = id($row);\n    }\n\n    return rows;\n}\n\nexport function is_draft_row($row) {\n    return $row.find(\".restore-draft\").length >= 1;\n}\n\nexport function id($message_row) {\n    if (is_draft_row($message_row)) {\n        blueslip.error(\"Drafts have no zid\");\n        return undefined;\n    }\n\n    /*\n        For blueslip errors, don't return early, since\n        we may have some code now that actually relies\n        on the NaN behavior here.  We can try to clean\n        that up in the future, but we mainly just want\n        more data now.\n    */\n\n    if ($message_row.length !== 1) {\n        blueslip.error(\"Caller should pass in a single row.\");\n    }\n\n    const zid = $message_row.attr(\"zid\");\n\n    if (zid === undefined) {\n        blueslip.error(\"Calling code passed rows.id a row with no zid attr.\");\n    }\n\n    return Number.parseFloat(zid);\n}\n\nexport function local_echo_id($message_row) {\n    const zid = $message_row.attr(\"zid\");\n\n    if (zid === undefined) {\n        blueslip.error(\"Calling code passed rows.local_id a row with no zid attr.\");\n        return undefined;\n    }\n\n    if (!zid.includes(\".0\")) {\n        blueslip.error(\"Trying to get local_id from row that has reified message id: \" + zid);\n    }\n\n    return zid;\n}\n\nconst valid_table_names = new Set([\"zhome\", \"zfilt\"]);\n\nexport function get_table(table_name) {\n    if (!valid_table_names.has(table_name)) {\n        return $();\n    }\n\n    return $(`#${CSS.escape(table_name)}`);\n}\n\nexport function get_message_id(elem) {\n    // Gets the message_id for elem, where elem is a DOM\n    // element inside a message.  This is typically used\n    // in click handlers for things like the reaction button.\n    const $row = $(elem).closest(\".message_row\");\n    const message_id = id($row);\n    return message_id;\n}\n\nexport function get_closest_group(element) {\n    // This gets the closest message row to an element, whether it's\n    // a recipient bar or message.  With our current markup,\n    // this is the most reliable way to do it.\n    return $(element).closest(\"div.recipient_row\");\n}\n\nexport function get_closest_row(element) {\n    return $(element).closest(\"div.message_row\");\n}\n\nexport function first_message_in_group(message_group) {\n    return $(\"div.message_row\", message_group).first();\n}\n\nexport function get_message_recipient_row($message_row) {\n    return $message_row.parent(\".recipient_row\").expectOne();\n}\n\nexport function get_message_recipient_header($message_row) {\n    return $message_row.parent(\".recipient_row\").find(\".message_header\").expectOne();\n}\n\nexport function recipient_from_group(message_group) {\n    return message_store.get(id($(message_group).children(\".message_row\").first().expectOne()));\n}\n\nexport function id_for_recipient_row($recipient_row) {\n    // A recipient row can be either a normal recipient row, or\n    // the FRB, which is a fake recipient row. If it's a FRB, it has\n    // a 'zid' property that stores the message id it is directly over\n    const $msg_row = first_message_in_group($recipient_row);\n    if ($msg_row.length === 0) {\n        // If we're narrowing from the FRB, take the msg id\n        // directly from it\n        return id($recipient_row);\n    }\n    return id($msg_row);\n}\n","import _ from \"lodash\";\n\n// How to determine the direction of a paragraph (P1-P3): https://www.unicode.org/reports/tr9/tr9-35.html#The_Paragraph_Level\n// Embedding level: https://www.unicode.org/reports/tr9/tr9-35.html#BD2\n// How to find the matching PDI for an isolation initiator: https://www.unicode.org/reports/tr9/tr9-35.html#BD9\n// Bidirectional character types: https://www.unicode.org/reports/tr9/tr9-35.html#Table_Bidirectional_Character_Types\n\n// Ranges data is extracted from: https://www.unicode.org/Public/9.0.0/ucd/extracted/DerivedBidiClass.txt\n// References:\n// https://www.unicode.org/reports/tr44/tr44-18.html#UnicodeData.txt\n// https://www.unicode.org/reports/tr44/tr44-18.html#Extracted_Properties_Table\n// https://www.unicode.org/Public/9.0.0/ucd/UnicodeData.txt\n// https://www.unicode.org/Public/9.0.0/ucd/extracted/DerivedBidiClass.txt\n\n/**\n * Splits {@link raw} into parts of length {@link part_length},\n * and then converts each part to a character using simple base\n * conversion with the digits {@link digits}.\n * @param {string} digits\n * @param {number} part_length\n * @param {string} raw\n * @returns {number[]}\n */\nfunction convert_from_raw(digits, part_length, raw) {\n    const result = [];\n    for (let i = 0; i < raw.length; ) {\n        let t = 0;\n        for (let j = 0; j < part_length; j += 1) {\n            t = t * digits.length + digits.indexOf(raw.charAt(i));\n            i += 1;\n        }\n        result.push(t);\n    }\n    return result;\n}\n\n/** Isolate initiator characters. */\nconst i_chars = new Set([0x2066, 0x2067, 0x2068]);\n/** Pop directional isolate character. */\nconst pdi_chars = new Set([0x2069]);\n/** The digits that are used for base conversions from base 92. */\nconst digits =\n    '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\"#$%&()*+,-./:;<=>?@[]^_`{|}~';\n/**\n * Ranges of strong non-left-to-right characters (right-to-left, and arabic-letter).\n *\n * The ranges are stored as pairs of characters, the first\n * character of the range, and the last character of the range.\n * All ranges are concatenated together and stored here.\n */\nconst rl_ranges = convert_from_raw(\n    digits,\n    2,\n    'fIfIf}f}g0g0g3g3g6g6g8g\"g,g,g/g/g;g;g~hKh?h[h^j1jhjijqjrjCjYj!j~krlplBm2mcmdmimJmOmOmYmYm#m#m*nknooP|j|j',\n).concat(\n    convert_from_raw(\n        digits,\n        3,\n        '7S)7S)7S+7S>7S@7YZ7Y#7!n7!U7!(7!*7!+7#07$O7}U81%81(84g84k84k84n84r84w84+84/84<84>86Y86\"87Q87Y8gv8g\"8k=e)]e,fe,ne-De-Le|je|mf0f',\n    ),\n);\n/**\n * Ranges of strong left-to-right characters.\n *\n * The ranges are stored as pairs of characters, the first\n * character of the range, and the last character of the range.\n * All ranges are concatenated together and stored here.\n */\nconst lr_ranges = convert_from_raw(\n    digits,\n    2,\n    '0$0}151u1<1<1|1|2222282u2w2!2#7Q7T7Z7:7;80848e8e9Q9T9W9$9&9+9.9.9:b1b3cOcWfBfDfEp7pZp\"p\"p$p(p;p>p@p]q0q9qcqEqGr7r9rcrhrorqrJrMrZr#r*r,r:r=sHsJsMsPsSsVsWs!s#s%t3t6t8tatktnt=t?t]t}t}u1u4u6upusuEuGuUuWvnvpvqvsvsvxvEvGvNvPvZv#w1w3w\"w$w:w<xmxvxzxBy5y9ydyhyhymysyvyFyIy\"y+y,y.zDzFzTzWz;z>AgAiA>A^B0B2BlBoCxCzCFCJCJCLDIDKDLDTDWDYD%D/E>E@E[E}E}F1FbFiF~G2GsGuGuGwGwGCG{HbHbHhHhHkHoHAHAH-H?H[J0J5J5JcJcJfJgJjJHJKJNJRJ(J-J^J`J{J~K4K6KkKmR>R]SDSOTXTZ!T!V!@!^#h#l#N#R#?#]$l$o$`$}$}%6%d%f%g%s%y%A%A%C%T%%%+%`(k(n(U(W)[)`)}*1*9*b*g*k*n*p*r*u+|,w,S,V,W,Y-p-r-r-z-z-B-B-D-E-N-S-$-%-(.n.D/b/g/\"/$/$/+/+/-/;/=:q:A:L:O:?:_:`:}:};2;V;X;X;!;#;%;%;*<z<I<J<M>f>j>j>x>x>F>I>K>P>R>T>W@+[y[C[I{s{u{u{y{I{M{Y{#{:{>|0|3|3|i|i}p}r}D}D}T}+~Z~/~<~<~[~[',\n).concat(\n    convert_from_raw(\n        digits,\n        3,\n        '0~_10310510510910d10k10k10m10m10o10o10q10t10v10F10I10L10R10V10!10\"10>11s11w11z15}16%17117118f18f18T18=18~19j19>1a$1fU1fU1js1m71s]1s^1tq1tr1t!1t#1t;1t;1t_1uj1uo1w]1w~1x21x61xc1xk1yS1yU1zX1A)1Bz1B!1B!1CY1C+1Fa1Fz1FM1FP1FV1FX1F^1G11G61G71G91Gd1Gg1Gk1Go1Hk1Hp1Hr1Ht1Iq1Is1KD1K:1LE1LH1L~1Mg1MH1ML1N41Nk1Nv1NA1Pi1Pn1Qt1Qw1Q!1Q#2wv2x44|[4}L52452853a53s53V53Y54L54O54\"55656f56h57J57L57N57P57S57U57>57[57[57{58758a58&58,59T59W59[5aa5aZ5a*5b25be5bX5b\"5ci5ck5cl5cq5cr5ct5c(5c*5dI5dP5dQ5dT5dU5dX5d*5d,5d=5d?5ez5eB5e`5e|5e|5f15f25f55f95fc5fc5fe5fT5fW5f$5f&5is5iu5iv5ix5iA5iC7S(7\"67\"b7\"\"7\"\"7\"[7\"[7\"{7\"~7$Q7$Q7$^7%i7%p7%O7%!7&~7(77(77(f7(f7(w7+c7+e7+/7,Z7,\"7,:7,=7,?7->7-@7:v7:Y7;|7<37}T8k>8k>8k@8lH8lX8l)8l}8mm8mq8m.8m=8m>8m[8nX8n\"8o68oc8oc8ol8o@8o]8p38p68pV8p&8p;8p?8q_8q}8q~8r18r18r48r98rb8s<8s>8s@8s~8tj8tm8t=8t?8t[8t^8ut8uB8uD8uJ8wT8w#8w$8w)8w)8w+8x_8y18y18y38y68y98y98yc8A$8A*8A/8A<8A<8A?8Bf8Bi8Ca8Cj8Ck8Cm8Cm8Cp8CT8C)8DC8DE8DE8DG8DH8DO8DO8DQ8EY8E#8E$8E*8E*8E:8S+8S=8S=8S_8T;8U88U98Uh8Uh8Uk8Uk8Una|[a||a}Ta}\"ba*ba/dFgdFjdFjdFoe72e76e7ee7ve7we7Ee7)e7.e8\"e9GebHecDemiemkem:em<enGenIeo8eoaeo%eo(eo;epAeu`evPevSewdewkewmewzewBewWew#ew#ew>eLXeL&eL&eL^eL_eM2eM2eM5eM5eMbe)[f0Yf0\"f1,f1[f27f28f2of2of2Ef2Ef2<f2`f39f49f4cf8LfjffjrfjFfjHfjPfjXfk]fl3fl|fmDfmQfmTfnkfnrfnCfnHfn]fn~foufpzfpPfpPfpYfp&fp)fp*fp[fp[fq4fq7fqnfqTfq.frrfrtfIZfI#nl1nl4u|xu|AC$$C$(KG5KG8SiBSiEZ_)Z_,)\"9)\"c;DF;DI^f-',\n    ),\n    convert_from_raw(digits, 4, \"0^f:10]d10]g18YJ18YM1gA;1g?A1odh1odk1v?N1v?Q1DV?1DV]1DV]\"),\n);\n\n/**\n * Gets a character and returns a simplified version of its bidirectional class.\n * @param {number} ch A character to get its bidirectional class.\n * @returns {'I' | 'PDI' | 'R' | 'L' | 'Other'}\n */\nfunction get_bidi_class(ch) {\n    if (i_chars.has(ch)) {\n        return \"I\"; // LRI, RLI, FSI\n    }\n    if (pdi_chars.has(ch)) {\n        return \"PDI\";\n    }\n    let i = _.sortedIndex(rl_ranges, ch);\n    if (i < rl_ranges.length && (rl_ranges[i] === ch || i % 2 === 1)) {\n        return \"R\"; // R, AL\n    }\n    i = _.sortedIndex(lr_ranges, ch);\n    if (i < lr_ranges.length && (lr_ranges[i] === ch || i % 2 === 1)) {\n        return \"L\";\n    }\n    return \"Other\";\n}\n\n/**\n * Gets the direction that should be used to show the string.\n * @param {string} str The string to get its direction.\n * @returns {'ltr' | 'rtl'}\n */\nexport function get_direction(str) {\n    let isolations = 0;\n    for (const ch of str) {\n        const bidi_class = get_bidi_class(ch.codePointAt(0));\n        switch (bidi_class) {\n            case \"I\":\n                // LRI, RLI, FSI\n                isolations += 1;\n                break;\n            case \"PDI\":\n                if (isolations > 0) {\n                    isolations -= 1;\n                }\n                break;\n            case \"R\":\n                // R, AL\n                if (isolations === 0) {\n                    return \"rtl\";\n                }\n                break;\n            case \"L\":\n                if (isolations === 0) {\n                    return \"ltr\";\n                }\n                break;\n        }\n    }\n    return \"ltr\";\n}\n\nexport function set_rtl_class_for_textarea($textarea) {\n    // Set the rtl class if the text has an rtl direction, remove it otherwise\n    let text = $textarea.val();\n    if (text.startsWith(\"```quote\")) {\n        text = text.slice(8);\n    }\n    if (get_direction(text) === \"rtl\") {\n        $textarea.addClass(\"rtl\");\n    } else {\n        $textarea.removeClass(\"rtl\");\n    }\n}\n","/*\n\nThese runtime schema validators are defensive and\nshould always succeed, so we don't necessarily want\nto translate these.  These are very similar to server\nside validators in zerver/lib/validator.py.\n\n*/\n\nexport function check_string(var_name, val) {\n    if (typeof val !== \"string\") {\n        return var_name + \" is not a string\";\n    }\n    return undefined;\n}\n\nexport function check_record(var_name, val, fields) {\n    if (typeof val !== \"object\") {\n        return var_name + \" is not a record\";\n    }\n\n    const field_results = Object.entries(fields).map(([field_name, f]) => {\n        if (val[field_name] === undefined) {\n            return field_name + \" is missing\";\n        }\n        return f(field_name, val[field_name]);\n    });\n\n    const msg = field_results.filter(Boolean).sort().join(\", \");\n\n    if (msg) {\n        return \"in \" + var_name + \" \" + msg;\n    }\n\n    return undefined;\n}\n\nexport function check_array(var_name, val, checker) {\n    if (!Array.isArray(val)) {\n        return var_name + \" is not an array\";\n    }\n\n    for (const item of val) {\n        const msg = checker(\"item\", item);\n\n        if (msg) {\n            return \"in \" + var_name + \" we found an item where \" + msg;\n        }\n    }\n\n    return undefined;\n}\n","import $ from \"jquery\";\n\nimport {user_settings} from \"./user_settings\";\n\n// A few of our width properties in Zulip depend on the width of the\n// browser scrollbar that is generated at the far right side of the\n// page, which unfortunately varies depending on the browser and\n// cannot be detected directly using CSS.  As a result, we adjust a\n// number of element widths based on the value detected here.\n//\n// From https://stackoverflow.com/questions/13382516/getting-scroll-bar-width-using-javascript\nfunction getScrollbarWidth() {\n    const outer = document.createElement(\"div\");\n    outer.style.visibility = \"hidden\";\n    outer.style.width = \"100px\";\n    outer.style.msOverflowStyle = \"scrollbar\"; // needed for WinJS apps\n\n    document.body.append(outer);\n\n    const widthNoScroll = outer.offsetWidth;\n    // force scrollbars\n    outer.style.overflow = \"scroll\";\n\n    // add inner div\n    const inner = document.createElement(\"div\");\n    inner.style.width = \"100%\";\n    outer.append(inner);\n\n    const widthWithScroll = inner.offsetWidth;\n\n    // remove divs\n    outer.remove();\n\n    return widthNoScroll - widthWithScroll;\n}\n\nlet sbWidth;\n\nexport function initialize() {\n    // Workaround for browsers with fixed scrollbars\n    sbWidth = getScrollbarWidth();\n    if (sbWidth > 0) {\n        // Reduce width of screen-wide parent containers, whose width doesn't vary with scrollbar width, by scrollbar width.\n        $(\"#navbar-container .header, .fixed-app .app-main, #compose\").css(\n            \"width\",\n            `calc(100% - ${sbWidth}px)`,\n        );\n\n        // Align floating recipient bar with the middle column.\n        $(\".fixed-app\").css(\"left\", \"-\" + sbWidth / 2 + \"px\");\n    }\n    set_layout_width();\n}\n\nexport function set_layout_width() {\n    if (user_settings.fluid_layout_width) {\n        $(\".header-main, .app .app-main, .fixed-app .app-main, #compose-container\").css(\n            \"max-width\",\n            \"inherit\",\n        );\n    } else {\n        $(\".header-main, .app .app-main, .fixed-app .app-main, #compose-container\").css(\n            \"max-width\",\n            \"1400px\",\n        );\n    }\n}\n","import * as ui from \"./ui\";\n\nexport function scroll_delta(opts) {\n    const elem_top = opts.elem_top;\n    const container_height = opts.container_height;\n    const elem_bottom = opts.elem_bottom;\n\n    let delta = 0;\n\n    if (elem_top < 0) {\n        delta = Math.max(elem_top, elem_bottom - container_height);\n        delta = Math.min(0, delta);\n    } else {\n        if (elem_bottom > container_height) {\n            delta = Math.min(elem_top, elem_bottom - container_height);\n            delta = Math.max(0, delta);\n        }\n    }\n\n    return delta;\n}\n\nexport function scroll_element_into_container($elem, $container, sticky_header_height = 0) {\n    // This does the minimum amount of scrolling that is needed to make\n    // the element visible.  It doesn't try to center the element, so\n    // this will be non-intrusive to users when they already have\n    // the element visible.\n\n    $container = ui.get_scroll_element($container);\n    const elem_top = $elem.position().top - sticky_header_height;\n    const elem_bottom = elem_top + $elem.innerHeight();\n    const container_height = $container.height() - sticky_header_height;\n\n    const opts = {\n        elem_top,\n        elem_bottom,\n        container_height,\n    };\n\n    const delta = scroll_delta(opts);\n\n    if (delta === 0) {\n        return;\n    }\n\n    $container.scrollTop($container.scrollTop() + delta);\n}\n","import $ from \"jquery\";\n\nimport render_search_list_item from \"../templates/search_list_item.hbs\";\n\nimport {Filter} from \"./filter\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as message_view_header from \"./message_view_header\";\nimport * as narrow from \"./narrow\";\nimport * as narrow_state from \"./narrow_state\";\nimport {page_params} from \"./page_params\";\nimport * as search_pill from \"./search_pill\";\nimport * as search_pill_widget from \"./search_pill_widget\";\nimport * as search_suggestion from \"./search_suggestion\";\nimport * as ui_util from \"./ui_util\";\n\n// Exported for unit testing\nexport let is_using_input_method = false;\n\nexport function narrow_or_search_for_term(search_string) {\n    const $search_query_box = $(\"#search_query\");\n    if (is_using_input_method) {\n        // Neither narrow nor search when using input tools as\n        // `updater` is also triggered when 'enter' is triggered\n        // while using input tool\n        return $search_query_box.val();\n    }\n\n    let operators;\n    if (page_params.search_pills_enabled) {\n        // We have to take care to append the new pill before calling this\n        // function, so that the base_query includes the suggestion selected\n        // along with query corresponding to the existing pills.\n        const base_query = search_pill.get_search_string_for_current_filter(\n            search_pill_widget.widget,\n        );\n        operators = Filter.parse(base_query);\n    } else {\n        operators = Filter.parse(search_string);\n    }\n    narrow.activate(operators, {trigger: \"search\"});\n\n    // It's sort of annoying that this is not in a position to\n    // blur the search box, because it means that Esc won't\n    // unnarrow, it'll leave the searchbox.\n\n    // Narrowing will have already put some operators in the search box,\n    // so leave the current text in.\n    if (!page_params.search_pills_enabled) {\n        $search_query_box.trigger(\"blur\");\n    }\n    return $search_query_box.val();\n}\n\nfunction update_buttons_with_focus(focused) {\n    const $search_query_box = $(\"#search_query\");\n\n    // Show buttons iff the search input is focused, or has non-empty contents,\n    // or we are narrowed.\n    if (focused || $search_query_box.val() || narrow_state.active()) {\n        $(\".search_button\").prop(\"disabled\", false);\n    }\n}\n\nexport function update_button_visibility() {\n    update_buttons_with_focus($(\"#search_query\").is(\":focus\"));\n}\n\nexport function initialize() {\n    const $search_query_box = $(\"#search_query\");\n    const $searchbox_form = $(\"#searchbox_form\");\n    const $searchbox = $(\"#searchbox\");\n\n    // Data storage for the typeahead.\n    // This maps a search string to an object with a \"description_html\" field.\n    // (It's a bit of legacy that we have an object with only one important\n    // field.  There's also a \"search_string\" field on each element that actually\n    // just represents the key of the hash, so it's redundant.)\n    let search_map = new Map();\n\n    $search_query_box.typeahead({\n        source(query) {\n            let base_query = \"\";\n            if (page_params.search_pills_enabled) {\n                base_query = search_pill.get_search_string_for_current_filter(\n                    search_pill_widget.widget,\n                );\n            }\n            const suggestions = search_suggestion.get_suggestions(base_query, query);\n            // Update our global search_map hash\n            search_map = suggestions.lookup_table;\n            return suggestions.strings;\n        },\n        fixed: true,\n        items: search_suggestion.max_num_of_search_results,\n        helpOnEmptyStrings: true,\n        naturalSearch: true,\n        highlighter(item) {\n            const obj = search_map.get(item);\n            return render_search_list_item(obj);\n        },\n        matcher() {\n            return true;\n        },\n        updater(search_string) {\n            if (page_params.search_pills_enabled) {\n                search_pill.append_search_string(search_string, search_pill_widget.widget);\n                return $search_query_box.val();\n            }\n            return narrow_or_search_for_term(search_string);\n        },\n        sorter(items) {\n            return items;\n        },\n        stopAdvance: page_params.search_pills_enabled,\n        advanceKeyCodes: [8],\n\n        on_move() {\n            if (page_params.search_pills_enabled) {\n                ui_util.place_caret_at_end($search_query_box[0]);\n            }\n        },\n        // Use our custom typeahead `on_escape` hook to exit\n        // the search bar as soon as the user hits Esc.\n        on_escape: message_view_header.exit_search,\n    });\n\n    $searchbox_form.on(\"compositionend\", () => {\n        // Set `is_using_input_method` to true if Enter is pressed to exit\n        // the input tool popover and get the text in the search bar. Then\n        // we suppress searching triggered by this Enter key by checking\n        // `is_using_input_method` before searching.\n        // More details in the commit message that added this line.\n        is_using_input_method = true;\n    });\n\n    $searchbox_form\n        .on(\"keydown\", (e) => {\n            update_button_visibility();\n            if (keydown_util.is_enter_event(e) && $search_query_box.is(\":focus\")) {\n                // Don't submit the form so that the typeahead can instead\n                // handle our Enter keypress. Any searching that needs\n                // to be done will be handled in the keyup.\n                e.preventDefault();\n            }\n        })\n        .on(\"keyup\", (e) => {\n            if (is_using_input_method) {\n                is_using_input_method = false;\n                return;\n            }\n\n            if (keydown_util.is_enter_event(e) && $search_query_box.is(\":focus\")) {\n                // We just pressed Enter and the box had focus, which\n                // means we didn't use the typeahead at all.  In that\n                // case, we should act as though we're searching by\n                // operators.  (The reason the other actions don't call\n                // this codepath is that they first all blur the box to\n                // indicate that they've done what they need to do)\n\n                // Pill is already added during keydown event of input pills.\n                narrow_or_search_for_term($search_query_box.val());\n                $search_query_box.trigger(\"blur\");\n                update_buttons_with_focus(false);\n            }\n        });\n\n    // Some of these functions don't actually need to be exported,\n    // but the code was moved here from elsewhere, and it would be\n    // more work to re-order everything and make them private.\n\n    $search_query_box.on(\"focus\", focus_search);\n    $search_query_box.on(\"blur\", (e) => {\n        // The search query box is a visual cue as to\n        // whether search or narrowing is active.  If\n        // the user blurs the search box, then we should\n        // update the search string to reflect the current\n        // narrow (or lack of narrow).\n        //\n        // But we can't do this right away, because\n        // selecting something in the typeahead menu causes\n        // the box to lose focus a moment before.\n        //\n        // The workaround is to check 100ms later -- long\n        // enough for the search to have gone through, but\n        // short enough that the user won't notice (though\n        // really it would be OK if they did).\n\n        if (page_params.search_pills_enabled) {\n            const $element = $(e.relatedTarget).closest(\".pill\");\n            const search_pill = search_pill_widget.widget.getByElement($element[0]);\n            if (search_pill) {\n                // The searchbox loses focus while the search\n                // pill element gains focus.\n                // We do not consider the searchbox to actually\n                // lose focus when a pill inside it gets selected\n                // or deleted by a click.\n                return;\n            }\n        }\n        setTimeout(() => {\n            update_button_visibility();\n        }, 100);\n    });\n\n    if (page_params.search_pills_enabled) {\n        // Uses jquery instead of pure css as the `:focus` event occurs on `#search_query`,\n        // while we want to add box-shadow to `#searchbox`. This could have been done\n        // with `:focus-within` CSS selector, but it is not supported in IE or Opera.\n        $searchbox.on(\"focusout\", () => {\n            message_view_header.close_search_bar_and_open_narrow_description();\n            $searchbox.css({\"box-shadow\": \"unset\"});\n        });\n    }\n}\n\nexport function focus_search() {\n    // The search bar is not focused yet, but will be.\n    update_buttons_with_focus(true);\n}\n\nexport function initiate_search() {\n    message_view_header.open_search_bar_and_close_narrow_description();\n    $(\"#searchbox\").css({\"box-shadow\": \"inset 0px 0px 0px 2px hsl(204, 20%, 74%)\"});\n    $(\"#search_query\").typeahead(\"lookup\").trigger(\"select\");\n    if (page_params.search_pills_enabled) {\n        $(\"#search_query\").trigger(\"focus\");\n        ui_util.place_caret_at_end($(\"#search_query\")[0]);\n    }\n}\n\nexport function clear_search_form() {\n    $(\"#search_query\").val(\"\");\n    $(\"#search_query\").trigger(\"blur\");\n    $(\".search_button\").prop(\"disabled\", true);\n}\n","import {Filter} from \"./filter\";\nimport * as input_pill from \"./input_pill\";\n\nexport function create_item_from_search_string(search_string) {\n    const operator = Filter.parse(search_string);\n    const description_html = Filter.describe(operator);\n    return {\n        display_value: search_string,\n        description_html,\n    };\n}\n\nexport function get_search_string_from_item(item) {\n    return item.display_value;\n}\n\nexport function create_pills($pill_container) {\n    const pills = input_pill.create({\n        $container: $pill_container,\n        create_item_from_text: create_item_from_search_string,\n        get_text_from_item: get_search_string_from_item,\n    });\n    return pills;\n}\n\nexport function append_search_string(search_string, pill_widget) {\n    const operators = Filter.parse(search_string);\n    for (const operator of operators) {\n        const input = Filter.unparse([operator]);\n        pill_widget.appendValue(input);\n    }\n    if (pill_widget.clear_text !== undefined) {\n        pill_widget.clear_text();\n    }\n}\n\nexport function get_search_string_for_current_filter(pill_widget) {\n    const items = pill_widget.items();\n    const search_strings = items.map((item) => item.display_value);\n    return search_strings.join(\" \");\n}\n","import $ from \"jquery\";\n\nimport * as browser_history from \"./browser_history\";\nimport {page_params} from \"./page_params\";\nimport * as search_pill from \"./search_pill\";\n\nexport let widget;\n\nexport function initialize() {\n    if (!page_params.search_pills_enabled) {\n        return;\n    }\n    const $container = $(\"#search_arrows\");\n    widget = search_pill.create_pills($container);\n\n    widget.onPillRemove(() => {\n        if (widget.items().length === 0) {\n            browser_history.go_to_location(\"\");\n        }\n    });\n\n    widget.createPillonPaste(() => false);\n}\n","import Handlebars from \"handlebars/runtime\";\n\nimport * as common from \"./common\";\nimport {Filter} from \"./filter\";\nimport * as huddle_data from \"./huddle_data\";\nimport * as narrow_state from \"./narrow_state\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_topic_history from \"./stream_topic_history\";\nimport * as stream_topic_history_util from \"./stream_topic_history_util\";\nimport * as typeahead_helper from \"./typeahead_helper\";\n\nexport const max_num_of_search_results = 12;\n\nfunction stream_matches_query(stream_name, q) {\n    return common.phrase_match(q, stream_name);\n}\n\nfunction make_person_highlighter(query) {\n    const highlight_query = typeahead_helper.make_query_highlighter(query);\n\n    return function (person) {\n        return highlight_query(person.full_name);\n    };\n}\n\nfunction highlight_person(person, highlighter) {\n    const avatar_url = people.small_avatar_url_for_person(person);\n    const highlighted_name = highlighter(person);\n\n    return {\n        id: person.user_id,\n        display_value: new Handlebars.SafeString(highlighted_name),\n        has_image: true,\n        img_src: avatar_url,\n    };\n}\n\nfunction match_criteria(operators, criteria) {\n    const filter = new Filter(operators);\n    return criteria.some((cr) => {\n        if (Object.hasOwn(cr, \"operand\")) {\n            return filter.has_operand(cr.operator, cr.operand);\n        }\n        return filter.has_operator(cr.operator);\n    });\n}\n\nfunction check_validity(last, operators, valid, invalid) {\n    // valid: list of strings valid for the last operator\n    // invalid: list of operators invalid for any previous operators except last.\n    if (!valid.includes(last.operator)) {\n        return false;\n    }\n    if (match_criteria(operators, invalid)) {\n        return false;\n    }\n    return true;\n}\n\nfunction format_as_suggestion(terms) {\n    return {\n        description_html: Filter.describe(terms),\n        search_string: Filter.unparse(terms),\n    };\n}\n\nfunction compare_by_huddle(huddle) {\n    huddle = huddle.slice(0, -1).map((person) => {\n        person = people.get_by_email(person);\n        return person && person.user_id;\n    });\n\n    // Construct dict for all huddles, so we can look up each's recency\n    const huddles = huddle_data.get_huddles();\n    const huddle_dict = new Map();\n    for (const [i, huddle] of huddles.entries()) {\n        huddle_dict.set(huddle, i + 1);\n    }\n\n    return function (person1, person2) {\n        const huddle1 = people.concat_huddle(huddle, person1.user_id);\n        const huddle2 = people.concat_huddle(huddle, person2.user_id);\n\n        // If not in the dict, assign an arbitrarily high index\n        const score1 = huddle_dict.get(huddle1) || huddles.length + 1;\n        const score2 = huddle_dict.get(huddle2) || huddles.length + 1;\n        const diff = score1 - score2;\n\n        if (diff !== 0) {\n            return diff;\n        }\n        return typeahead_helper.compare_by_pms(person1, person2);\n    };\n}\n\nfunction get_stream_suggestions(last, operators) {\n    const valid = [\"stream\", \"search\", \"\"];\n    const invalid = [\n        {operator: \"stream\"},\n        {operator: \"streams\"},\n        {operator: \"is\", operand: \"private\"},\n        {operator: \"pm-with\"},\n    ];\n    if (!check_validity(last, operators, valid, invalid)) {\n        return [];\n    }\n\n    const query = last.operand;\n    let streams = stream_data.subscribed_streams();\n\n    streams = streams.filter((stream) => stream_matches_query(stream, query));\n\n    streams = typeahead_helper.sorter(query, streams);\n\n    const regex = typeahead_helper.build_highlight_regex(query);\n    const highlight_query = typeahead_helper.highlight_with_escaping_and_regex;\n\n    const objs = streams.map((stream) => {\n        const prefix = \"stream\";\n        const highlighted_stream = highlight_query(regex, stream);\n        const verb = last.negated ? \"exclude \" : \"\";\n        const description_html = verb + prefix + \" \" + highlighted_stream;\n        const term = {\n            operator: \"stream\",\n            operand: stream,\n            negated: last.negated,\n        };\n        const search_string = Filter.unparse([term]);\n        return {description_html, search_string};\n    });\n\n    return objs;\n}\n\nfunction get_group_suggestions(last, operators) {\n    if (!check_validity(last, operators, [\"pm-with\"], [{operator: \"stream\"}])) {\n        return [];\n    }\n\n    const operand = last.operand;\n    const negated = last.negated;\n\n    // The operand has the form \"part1,part2,pa\", where all but the last part\n    // are emails, and the last part is an arbitrary query.\n    //\n    // We only generate group suggestions when there's more than one part, and\n    // we only use the last part to generate suggestions.\n\n    const last_comma_index = operand.lastIndexOf(\",\");\n    if (last_comma_index < 0) {\n        return [];\n    }\n\n    // Neither all_but_last_part nor last_part include the final comma.\n    const all_but_last_part = operand.slice(0, last_comma_index);\n    const last_part = operand.slice(last_comma_index + 1);\n\n    // We don't suggest a person if their email is already present in the\n    // operand (not including the last part).\n    const parts = all_but_last_part.split(\",\").concat(people.my_current_email());\n\n    const person_matcher = people.build_person_matcher(last_part);\n    let persons = people.filter_all_persons((person) => {\n        if (parts.includes(person.email)) {\n            return false;\n        }\n        return last_part === \"\" || person_matcher(person);\n    });\n\n    persons.sort(compare_by_huddle(parts));\n\n    // Take top 15 persons, since they're ordered by pm_recipient_count.\n    persons = persons.slice(0, 15);\n\n    const prefix = Filter.operator_to_prefix(\"pm-with\", negated);\n\n    const person_highlighter = make_person_highlighter(last_part);\n\n    const suggestions = persons.map((person) => {\n        const term = {\n            operator: \"pm-with\",\n            operand: all_but_last_part + \",\" + person.email,\n            negated,\n        };\n\n        // Note that description_html won't contain the user's\n        // identity; that instead will be rendered in the separate\n        // user pill.\n        const description_html =\n            prefix + Handlebars.Utils.escapeExpression(\" \" + all_but_last_part + \",\");\n\n        let terms = [term];\n        if (negated) {\n            terms = [{operator: \"is\", operand: \"private\"}, term];\n        }\n\n        return {\n            description_html,\n            search_string: Filter.unparse(terms),\n            is_person: true,\n            user_pill_context: highlight_person(person, person_highlighter),\n        };\n    });\n\n    return suggestions;\n}\n\nfunction make_people_getter(last) {\n    let persons;\n\n    /* The next function will be called between 0 and 4\n       times for each keystroke in a search, but we will\n       only do real work one time.\n    */\n    return function () {\n        if (persons !== undefined) {\n            return persons;\n        }\n\n        let query;\n\n        // This next block is designed to match the behavior of the\n        // `is:private` block in get_person_suggestions\n        if (last.operator === \"is\" && last.operand === \"private\") {\n            query = \"\";\n        } else {\n            query = last.operand;\n        }\n\n        persons = people.get_people_for_search_bar(query);\n        persons.sort(typeahead_helper.compare_by_pms);\n        return persons;\n    };\n}\n\n// Possible args for autocomplete_operator: pm-with, sender, from\nfunction get_person_suggestions(people_getter, last, operators, autocomplete_operator) {\n    if (last.operator === \"is\" && last.operand === \"private\") {\n        // Interpret 'is:private' as equivalent to 'pm-with:'\n        last = {operator: \"pm-with\", operand: \"\", negated: false};\n    }\n\n    const query = last.operand;\n\n    // Be especially strict about the less common \"from\" operator.\n    if (autocomplete_operator === \"from\" && last.operator !== \"from\") {\n        return [];\n    }\n\n    const valid = [\"search\", autocomplete_operator];\n    let invalid;\n    if (autocomplete_operator === \"pm-with\") {\n        invalid = [{operator: \"pm-with\"}, {operator: \"stream\"}];\n    } else {\n        // If not pm-with, then this must either be 'sender' or 'from'\n        invalid = [{operator: \"sender\"}, {operator: \"from\"}];\n    }\n\n    if (!check_validity(last, operators, valid, invalid)) {\n        return [];\n    }\n\n    const persons = people_getter();\n\n    const prefix = Filter.operator_to_prefix(autocomplete_operator, last.negated);\n\n    const person_highlighter = make_person_highlighter(query);\n\n    const objs = persons.map((person) => {\n        const terms = [\n            {\n                operator: autocomplete_operator,\n                operand: person.email,\n                negated: last.negated,\n            },\n        ];\n        if (autocomplete_operator === \"pm-with\" && last.negated) {\n            // In the special case of '-pm-with', add 'is:private' before it\n            // because we assume the user still wants to narrow to PMs\n            terms.unshift({operator: \"is\", operand: \"private\"});\n        }\n\n        return {\n            description_html: prefix,\n            search_string: Filter.unparse(terms),\n            is_person: true,\n            user_pill_context: highlight_person(person, person_highlighter),\n        };\n    });\n\n    return objs;\n}\n\nfunction get_default_suggestion(operators) {\n    // Here we return the canonical suggestion for the query that the\n    // user typed. (The caller passes us the parsed query as \"operators\".)\n    if (operators.length === 0) {\n        return {description_html: \"\", search_string: \"\"};\n    }\n    return format_as_suggestion(operators);\n}\n\nexport function get_topic_suggestions_from_candidates({candidate_topics, guess}) {\n    // This function is exported for unit testing purposes.\n    const max_num_topics = 10;\n\n    if (guess === \"\") {\n        // In the search UI, once you autocomplete the stream,\n        // we just show you the most recent topics before you even\n        // need to start typing any characters.\n        return candidate_topics.slice(0, max_num_topics);\n    }\n\n    // Once the user starts typing characters for a topic name,\n    // it is pretty likely they want to get suggestions for\n    // topics that may be fairly low in our list of candidates,\n    // so we do an aggressive search here.\n    //\n    // The following loop can be expensive if you have lots\n    // of topics in a stream, so we try to exit the loop as\n    // soon as we find enough matches.\n    const topics = [];\n    for (const topic of candidate_topics) {\n        if (common.phrase_match(guess, topic)) {\n            topics.push(topic);\n            if (topics.length >= max_num_topics) {\n                break;\n            }\n        }\n    }\n\n    return topics;\n}\n\nfunction get_topic_suggestions(last, operators) {\n    const invalid = [\n        {operator: \"pm-with\"},\n        {operator: \"is\", operand: \"private\"},\n        {operator: \"topic\"},\n    ];\n    if (!check_validity(last, operators, [\"stream\", \"topic\", \"search\"], invalid)) {\n        return [];\n    }\n\n    const operator = Filter.canonicalize_operator(last.operator);\n    const operand = last.operand;\n    const negated = operator === \"topic\" && last.negated;\n    let stream;\n    let guess;\n    const filter = new Filter(operators);\n    const suggest_operators = [];\n\n    // stream:Rome -> show all Rome topics\n    // stream:Rome topic: -> show all Rome topics\n    // stream:Rome f -> show all Rome topics with a word starting in f\n    // stream:Rome topic:f -> show all Rome topics with a word starting in f\n    // stream:Rome topic:f -> show all Rome topics with a word starting in f\n\n    // When narrowed to a stream:\n    //   topic: -> show all topics in current stream\n    //   foo -> show all topics in current stream with words starting with foo\n\n    // If somebody explicitly types search:, then we might\n    // not want to suggest topics, but I feel this is a very\n    // minor issue, and Filter.parse() is currently lossy\n    // in terms of telling us whether they provided the operator,\n    // i.e. \"foo\" and \"search:foo\" both become [{operator: 'search', operand: 'foo'}].\n    switch (operator) {\n        case \"stream\":\n            guess = \"\";\n            stream = operand;\n            suggest_operators.push(last);\n            break;\n        case \"topic\":\n        case \"search\":\n            guess = operand;\n            if (filter.has_operator(\"stream\")) {\n                stream = filter.operands(\"stream\")[0];\n            } else {\n                stream = narrow_state.stream();\n                suggest_operators.push({operator: \"stream\", operand: stream});\n            }\n            break;\n    }\n\n    if (!stream) {\n        return [];\n    }\n\n    const stream_sub = stream_data.get_sub(stream);\n    if (!stream_sub) {\n        return [];\n    }\n\n    if (stream_data.can_access_topic_history(stream_sub)) {\n        // Fetch topic history from the server, in case we will need it.\n        // Note that we won't actually use the results from the server here\n        // for this particular keystroke from the user, because we want to\n        // show results immediately. Assuming the server responds quickly,\n        // as the user makes their search more specific, subsequent calls to\n        // this function will get more candidates from calling\n        // stream_topic_history.get_recent_topic_names.\n        stream_topic_history_util.get_server_history(stream_sub.stream_id, () => {});\n    }\n\n    const candidate_topics = stream_topic_history.get_recent_topic_names(stream_sub.stream_id);\n\n    if (!candidate_topics || !candidate_topics.length) {\n        return [];\n    }\n\n    const topics = get_topic_suggestions_from_candidates({candidate_topics, guess});\n\n    // Just use alphabetical order.  While recency and read/unreadness of\n    // topics do matter in some contexts, you can get that from the left sidebar,\n    // and I'm leaning toward high scannability for autocompletion.  I also don't\n    // care about case.\n    topics.sort();\n\n    return topics.map((topic) => {\n        const topic_term = {operator: \"topic\", operand: topic, negated};\n        const operators = suggest_operators.concat([topic_term]);\n        return format_as_suggestion(operators);\n    });\n}\n\nfunction get_operator_subset_suggestions(operators) {\n    // For stream:a topic:b search:c, suggest:\n    //  stream:a topic:b\n    //  stream:a\n    if (operators.length < 1) {\n        return [];\n    }\n\n    let i;\n    const suggestions = [];\n\n    for (i = operators.length - 1; i >= 1; i -= 1) {\n        const subset = operators.slice(0, i);\n        suggestions.push(format_as_suggestion(subset));\n    }\n\n    return suggestions;\n}\n\nfunction get_special_filter_suggestions(last, operators, suggestions) {\n    const is_search_operand_negated = last.operator === \"search\" && last.operand[0] === \"-\";\n    // Negating suggestions on is_search_operand_negated is required for\n    // suggesting negated operators.\n    if (last.negated || is_search_operand_negated) {\n        suggestions = suggestions.map((suggestion) => ({\n            search_string: \"-\" + suggestion.search_string,\n            description_html: \"exclude \" + suggestion.description_html,\n            invalid: suggestion.invalid,\n        }));\n    }\n\n    const last_string = Filter.unparse([last]).toLowerCase();\n    suggestions = suggestions.filter((s) => {\n        if (match_criteria(operators, s.invalid)) {\n            return false;\n        }\n        if (last_string === \"\") {\n            return true;\n        }\n\n        // returns the substring after the \":\" symbol.\n        const suggestion_operand = s.search_string.slice(s.search_string.indexOf(\":\") + 1);\n        // e.g for `att` search query, `has:attachment` should be suggested.\n        const show_operator_suggestions =\n            last.operator === \"search\" && suggestion_operand.toLowerCase().startsWith(last_string);\n        return (\n            s.search_string.toLowerCase().startsWith(last_string) ||\n            show_operator_suggestions ||\n            s.description_html.toLowerCase().startsWith(last_string)\n        );\n    });\n\n    // Only show home if there's an empty bar\n    if (operators.length === 0 && last_string === \"\") {\n        suggestions.unshift({search_string: \"\", description_html: \"All messages\"});\n    }\n    return suggestions;\n}\n\nfunction get_streams_filter_suggestions(last, operators) {\n    const suggestions = [\n        {\n            search_string: \"streams:public\",\n            description_html: \"All public streams in organization\",\n            invalid: [\n                {operator: \"is\", operand: \"private\"},\n                {operator: \"stream\"},\n                {operator: \"group-pm-with\"},\n                {operator: \"pm-with\"},\n                {operator: \"in\"},\n                {operator: \"streams\"},\n            ],\n        },\n    ];\n    return get_special_filter_suggestions(last, operators, suggestions);\n}\nfunction get_is_filter_suggestions(last, operators) {\n    const suggestions = [\n        {\n            search_string: \"is:private\",\n            description_html: \"private messages\",\n            invalid: [\n                {operator: \"is\", operand: \"private\"},\n                {operator: \"stream\"},\n                {operator: \"pm-with\"},\n                {operator: \"in\"},\n            ],\n        },\n        {\n            search_string: \"is:starred\",\n            description_html: \"starred messages\",\n            invalid: [{operator: \"is\", operand: \"starred\"}],\n        },\n        {\n            search_string: \"is:mentioned\",\n            description_html: \"@-mentions\",\n            invalid: [{operator: \"is\", operand: \"mentioned\"}],\n        },\n        {\n            search_string: \"is:alerted\",\n            description_html: \"alerted messages\",\n            invalid: [{operator: \"is\", operand: \"alerted\"}],\n        },\n        {\n            search_string: \"is:unread\",\n            description_html: \"unread messages\",\n            invalid: [{operator: \"is\", operand: \"unread\"}],\n        },\n        {\n            search_string: \"is:resolved\",\n            description_html: \"topics marked as resolved\",\n            invalid: [{operator: \"is\", operand: \"resolved\"}],\n        },\n    ];\n    return get_special_filter_suggestions(last, operators, suggestions);\n}\n\nfunction get_has_filter_suggestions(last, operators) {\n    const suggestions = [\n        {\n            search_string: \"has:link\",\n            description_html: \"messages with one or more link\",\n            invalid: [{operator: \"has\", operand: \"link\"}],\n        },\n        {\n            search_string: \"has:image\",\n            description_html: \"messages with one or more image\",\n            invalid: [{operator: \"has\", operand: \"image\"}],\n        },\n        {\n            search_string: \"has:attachment\",\n            description_html: \"messages with one or more attachment\",\n            invalid: [{operator: \"has\", operand: \"attachment\"}],\n        },\n    ];\n    return get_special_filter_suggestions(last, operators, suggestions);\n}\n\nfunction get_sent_by_me_suggestions(last, operators) {\n    const last_string = Filter.unparse([last]).toLowerCase();\n    const negated = last.negated || (last.operator === \"search\" && last.operand[0] === \"-\");\n    const negated_symbol = negated ? \"-\" : \"\";\n    const verb = negated ? \"exclude \" : \"\";\n\n    const sender_query = negated_symbol + \"sender:\" + people.my_current_email();\n    const from_query = negated_symbol + \"from:\" + people.my_current_email();\n    const sender_me_query = negated_symbol + \"sender:me\";\n    const from_me_query = negated_symbol + \"from:me\";\n    const sent_string = negated_symbol + \"sent\";\n    const description_html = verb + \"sent by me\";\n\n    const invalid = [{operator: \"sender\"}, {operator: \"from\"}];\n\n    if (match_criteria(operators, invalid)) {\n        return [];\n    }\n\n    if (\n        last.operator === \"\" ||\n        sender_query.startsWith(last_string) ||\n        sender_me_query.startsWith(last_string) ||\n        last_string === sent_string\n    ) {\n        return [\n            {\n                search_string: sender_query,\n                description_html,\n            },\n        ];\n    } else if (from_query.startsWith(last_string) || from_me_query.startsWith(last_string)) {\n        return [\n            {\n                search_string: from_query,\n                description_html,\n            },\n        ];\n    }\n    return [];\n}\n\nfunction get_operator_suggestions(last) {\n    if (!(last.operator === \"search\")) {\n        return [];\n    }\n    let last_operand = last.operand;\n\n    let negated = false;\n    if (last_operand.startsWith(\"-\")) {\n        negated = true;\n        last_operand = last_operand.slice(1);\n    }\n\n    let choices = [\"stream\", \"topic\", \"pm-with\", \"sender\", \"near\", \"from\", \"group-pm-with\"];\n    choices = choices.filter((choice) => common.phrase_match(last_operand, choice));\n\n    return choices.map((choice) => {\n        const op = [{operator: choice, operand: \"\", negated}];\n        return format_as_suggestion(op);\n    });\n}\n\nclass Attacher {\n    result = [];\n    prev = new Set();\n\n    constructor(base) {\n        this.base = base;\n    }\n\n    prepend_base(suggestion) {\n        if (this.base && this.base.description_html.length > 0) {\n            suggestion.search_string = this.base.search_string + \" \" + suggestion.search_string;\n            suggestion.description_html =\n                this.base.description_html + \", \" + suggestion.description_html;\n        }\n    }\n\n    push(suggestion) {\n        if (!this.prev.has(suggestion.search_string)) {\n            this.prev.add(suggestion.search_string);\n            this.result.push(suggestion);\n        }\n    }\n\n    concat(suggestions) {\n        for (const suggestion of suggestions) {\n            this.push(suggestion);\n        }\n    }\n\n    attach_many(suggestions) {\n        for (const suggestion of suggestions) {\n            this.prepend_base(suggestion);\n            this.push(suggestion);\n        }\n    }\n}\n\nexport function get_search_result(base_query, query) {\n    let suggestion;\n    let all_operators;\n\n    // search_operators correspond to the operators for the query in the input.\n    // For search_pills_enabled, this includes just editable query where search pills\n    // have not been created yet.\n    // And for this disabled case, this includes the entire query entered in the searchbox.\n    // operators correspond to the operators for the entire query entered in the searchbox.\n    if (page_params.search_pills_enabled) {\n        all_operators = Filter.parse((base_query + \" \" + query).trim());\n    }\n    const search_operators = Filter.parse(query);\n    let last = {operator: \"\", operand: \"\", negated: false};\n    if (search_operators.length > 0) {\n        last = search_operators.slice(-1)[0];\n    } else if (page_params.search_pills_enabled) {\n        // We push an empty term so that we can get suggestions\n        // on the empty string based on the base query which is\n        // calculated from the created search pills.\n        // Else search results are returned as if the user is still\n        // typing the non-editable last search pill.\n        all_operators.push(last);\n        search_operators.push(last);\n    }\n\n    const person_suggestion_ops = [\"sender\", \"pm-with\", \"from\", \"group-pm\"];\n\n    // Handle spaces in person name in new suggestions only. Checks if the last operator is 'search'\n    // and the second last operator in search_operators is one out of person_suggestion_ops.\n    // e.g for `sender:Ted sm`, initially last = {operator: 'search', operand: 'sm'....}\n    // and second last is {operator: 'sender', operand: 'sm'....}. If the second last operand\n    // is an email of a user, both of these operators remain unchanged. Otherwise search operator\n    // will be deleted and new last will become {operator:'sender', operand: 'Ted sm`....}.\n    if (\n        search_operators.length > 1 &&\n        last.operator === \"search\" &&\n        person_suggestion_ops.includes(search_operators.at(-2).operator)\n    ) {\n        const person_op = search_operators.at(-2);\n        if (!people.reply_to_to_user_ids_string(person_op.operand)) {\n            last = {\n                operator: person_op.operator,\n                operand: person_op.operand + \" \" + last.operand,\n                negated: person_op.negated,\n            };\n            if (page_params.search_pills_enabled) {\n                all_operators.splice(-2);\n                all_operators.push(last);\n            }\n            search_operators.splice(-2);\n            search_operators.push(last);\n        }\n    }\n\n    const base = get_default_suggestion(search_operators.slice(0, -1));\n    const attacher = new Attacher(base);\n\n    // Display the default first\n    // `has` and `is` operators work only on predefined categories. Default suggestion\n    // is not displayed in that case. e.g. `messages with one or more abc` as\n    // a suggestion for `has:abc`does not make sense.\n    if (last.operator !== \"\" && last.operator !== \"has\" && last.operator !== \"is\") {\n        suggestion = get_default_suggestion(search_operators);\n        attacher.push(suggestion);\n    }\n\n    // only make one people_getter to avoid duplicate work\n    const people_getter = make_people_getter(last);\n\n    function get_people(flavor) {\n        return function (last, base_operators) {\n            return get_person_suggestions(people_getter, last, base_operators, flavor);\n        };\n    }\n\n    // Remember to update the spectator list when changing this.\n    let filterers = [\n        get_streams_filter_suggestions,\n        get_is_filter_suggestions,\n        get_sent_by_me_suggestions,\n        get_stream_suggestions,\n        get_people(\"sender\"),\n        get_people(\"pm-with\"),\n        get_people(\"from\"),\n        get_people(\"group-pm-with\"),\n        get_group_suggestions,\n        get_topic_suggestions,\n        get_operator_suggestions,\n        get_has_filter_suggestions,\n    ];\n\n    if (page_params.is_spectator) {\n        filterers = [\n            get_stream_suggestions,\n            get_people(\"sender\"),\n            get_people(\"from\"),\n            get_topic_suggestions,\n            get_operator_suggestions,\n            get_has_filter_suggestions,\n        ];\n    }\n\n    if (!page_params.search_pills_enabled) {\n        all_operators = search_operators;\n    }\n    const base_operators = all_operators.slice(0, -1);\n    const max_items = max_num_of_search_results;\n\n    for (const filterer of filterers) {\n        if (attacher.result.length < max_items) {\n            const suggestions = filterer(last, base_operators);\n            attacher.attach_many(suggestions);\n        }\n    }\n\n    if (\n        !page_params.search_pills_enabled &&\n        // This is unique to the legacy search system.  With pills\n        // it is difficult to \"suggest\" a subset of operators,\n        // and there's a more natural mechanism under that paradigm,\n        // where the user just deletes one or more pills.  So you\n        // won't see this is in the new code.\n        attacher.result.length < max_items\n    ) {\n        const subset_suggestions = get_operator_subset_suggestions(search_operators);\n        attacher.concat(subset_suggestions);\n    }\n\n    return attacher.result.slice(0, max_items);\n}\n\nexport function get_suggestions(base_query, query) {\n    const result = get_search_result(base_query, query);\n    return finalize_search_result(result);\n}\n\nexport function finalize_search_result(result) {\n    for (const sug of result) {\n        const first = sug.description_html.charAt(0).toUpperCase();\n        sug.description_html = first + sug.description_html.slice(1);\n    }\n\n    // Typeahead expects us to give it strings, not objects,\n    // so we maintain our own hash back to our objects\n    const lookup_table = new Map();\n\n    for (const obj of result) {\n        lookup_table.set(obj.search_string, obj);\n    }\n\n    const strings = result.map((obj) => obj.search_string);\n    return {\n        strings,\n        lookup_table,\n    };\n}\n","import * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport * as server_events from \"./server_events\";\n\nexport let next_local_id;\nexport const messages = new Map();\n\nexport function reset_id_state() {\n    next_local_id = 0;\n}\n\nexport function get_new_local_id() {\n    next_local_id += 1;\n    const local_id = next_local_id;\n    return \"loc-\" + local_id.toString();\n}\n\nfunction report_send_time(send_time, receive_time, locally_echoed, rendered_changed) {\n    const data = {\n        time: send_time.toString(),\n        received: receive_time.toString(),\n        locally_echoed,\n    };\n\n    if (locally_echoed) {\n        data.rendered_content_disparity = rendered_changed;\n    }\n\n    channel.post({\n        url: \"/json/report/send_times\",\n        data,\n    });\n}\n\nexport class MessageState {\n    start = new Date();\n\n    received = undefined;\n    send_finished = undefined;\n    rendered_content_disparity = false;\n\n    constructor(opts) {\n        this.local_id = opts.local_id;\n        this.locally_echoed = opts.locally_echoed;\n    }\n\n    start_resend() {\n        this.start = new Date();\n        this.received = undefined;\n        this.send_finished = undefined;\n        this.rendered_content_disparity = false;\n    }\n\n    maybe_restart_event_loop() {\n        if (this.received) {\n            // We got our event, no need to do anything\n            return;\n        }\n\n        blueslip.log(\n            `Restarting get_events due to delayed receipt of sent message ${this.local_id}`,\n        );\n\n        server_events.restart_get_events();\n    }\n\n    maybe_report_send_times() {\n        if (!this.ready()) {\n            return;\n        }\n        report_send_time(\n            this.send_finished - this.start,\n            this.received - this.start,\n            this.locally_echoed,\n            this.rendered_content_disparity,\n        );\n    }\n\n    report_event_received() {\n        this.received = new Date();\n        this.maybe_report_send_times();\n    }\n\n    mark_disparity() {\n        this.rendered_content_disparity = true;\n    }\n\n    report_server_ack() {\n        this.send_finished = new Date();\n        this.maybe_report_send_times();\n\n        // We only start our timer for events coming in here,\n        // since it's plausible the server rejected our message,\n        // or took a while to process it, but there is nothing\n        // wrong with our event loop.\n\n        if (!this.received) {\n            setTimeout(() => this.maybe_restart_event_loop(), 5000);\n        }\n    }\n\n    ready() {\n        return this.send_finished !== undefined && this.received !== undefined;\n    }\n}\n\nexport function start_tracking_message(opts) {\n    const local_id = opts.local_id;\n\n    if (!opts.local_id) {\n        blueslip.error(\"You must supply a local_id\");\n        return;\n    }\n\n    if (messages.has(local_id)) {\n        blueslip.error(\"We are re-using a local_id\");\n        return;\n    }\n\n    const state = new MessageState(opts);\n\n    messages.set(local_id, state);\n}\n\nexport function get_message_state(local_id) {\n    const state = messages.get(local_id);\n\n    if (!state) {\n        blueslip.warn(\"Unknown local_id: \" + local_id);\n    }\n\n    return state;\n}\n\nexport function mark_disparity(local_id) {\n    const state = get_message_state(local_id);\n    if (!state) {\n        return;\n    }\n    state.mark_disparity();\n}\n\nexport function report_event_received(local_id) {\n    const state = get_message_state(local_id);\n    if (!state) {\n        return;\n    }\n\n    state.report_event_received();\n}\n\nexport function start_resend(local_id) {\n    const state = get_message_state(local_id);\n    if (!state) {\n        return;\n    }\n\n    state.start_resend();\n}\n\nexport function report_server_ack(local_id) {\n    const state = get_message_state(local_id);\n    if (!state) {\n        return;\n    }\n\n    state.report_server_ack();\n}\n\nexport function initialize() {\n    reset_id_state();\n}\n","import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport * as echo from \"./echo\";\nimport * as message_events from \"./message_events\";\nimport * as message_lists from \"./message_lists\";\nimport {page_params} from \"./page_params\";\nimport * as reload from \"./reload\";\nimport * as reload_state from \"./reload_state\";\nimport * as sent_messages from \"./sent_messages\";\nimport * as server_events_dispatch from \"./server_events_dispatch\";\nimport * as ui_report from \"./ui_report\";\nimport * as watchdog from \"./watchdog\";\n\n// Docs: https://zulip.readthedocs.io/en/latest/subsystems/events-system.html\n\nlet waiting_on_homeview_load = true;\n\nlet events_stored_while_loading = [];\n\nlet get_events_xhr;\nlet get_events_timeout;\nlet get_events_failures = 0;\nconst get_events_params = {};\n\nfunction get_events_success(events) {\n    let messages = [];\n    const update_message_events = [];\n    const post_message_events = [];\n\n    const clean_event = function clean_event(event) {\n        // Only log a whitelist of the event to remove private data\n        return _.pick(event, \"id\", \"type\", \"op\");\n    };\n\n    for (const event of events) {\n        try {\n            get_events_params.last_event_id = Math.max(get_events_params.last_event_id, event.id);\n        } catch (error) {\n            blueslip.error(\n                \"Failed to update last_event_id\",\n                {event: clean_event(event)},\n                error.stack,\n            );\n        }\n    }\n\n    if (waiting_on_homeview_load) {\n        events_stored_while_loading = events_stored_while_loading.concat(events);\n        return;\n    }\n\n    if (events_stored_while_loading.length > 0) {\n        events = events_stored_while_loading.concat(events);\n        events_stored_while_loading = [];\n    }\n\n    // Most events are dispatched via the code server_events_dispatch,\n    // called in the default case.  The goal of this split is to avoid\n    // contributors needing to read or understand the complex and\n    // rarely modified logic for non-normal events.\n    const dispatch_event = function dispatch_event(event) {\n        switch (event.type) {\n            case \"message\": {\n                const msg = event.message;\n                msg.flags = event.flags;\n                if (event.local_message_id) {\n                    msg.local_id = event.local_message_id;\n                    sent_messages.report_event_received(event.local_message_id);\n                }\n                messages.push(msg);\n                break;\n            }\n\n            case \"update_message\":\n                update_message_events.push(event);\n                break;\n\n            case \"delete_message\":\n            case \"submessage\":\n            case \"update_message_flags\":\n                post_message_events.push(event);\n                break;\n\n            default:\n                server_events_dispatch.dispatch_normal_event(event);\n        }\n    };\n\n    for (const event of events) {\n        try {\n            dispatch_event(event);\n        } catch (error) {\n            blueslip.error(\n                \"Failed to process an event\\n\" + blueslip.exception_msg(error),\n                {event: clean_event(event)},\n                error.stack,\n            );\n        }\n    }\n\n    if (messages.length !== 0) {\n        // Sort by ID, so that if we get multiple messages back from\n        // the server out-of-order, we'll still end up with our\n        // message lists in order.\n        messages = _.sortBy(messages, \"id\");\n        try {\n            messages = echo.process_from_server(messages);\n            if (messages.length > 0) {\n                const sent_by_this_client = messages.some((msg) =>\n                    sent_messages.messages.has(msg.local_id),\n                );\n                // If some message in this batch of events was sent by this\n                // client, almost every time, this message will be the only one\n                // in messages, because multiple messages being returned by\n                // get_events usually only happens when a client is offline.\n                // But in any case, insert_new_messages handles multiple\n                // messages, only one of which was sent by this client,\n                // correctly.\n\n                message_events.insert_new_messages(messages, sent_by_this_client);\n            }\n        } catch (error) {\n            blueslip.error(\n                \"Failed to insert new messages\\n\" + blueslip.exception_msg(error),\n                undefined,\n                error.stack,\n            );\n        }\n    }\n\n    if (message_lists.home.selected_id() === -1 && !message_lists.home.empty()) {\n        message_lists.home.select_id(message_lists.home.first().id, {then_scroll: false});\n    }\n\n    if (update_message_events.length !== 0) {\n        try {\n            message_events.update_messages(update_message_events);\n        } catch (error) {\n            blueslip.error(\n                \"Failed to update messages\\n\" + blueslip.exception_msg(error),\n                undefined,\n                error.stack,\n            );\n        }\n    }\n\n    // We do things like updating message flags and deleting messages last,\n    // to avoid ordering issues that are caused by batch handling of\n    // messages above.\n    for (const event of post_message_events) {\n        server_events_dispatch.dispatch_normal_event(event);\n    }\n}\n\nfunction show_ui_connection_error() {\n    ui_report.show_error($(\"#connection-error\"));\n    $(\"#connection-error\").addClass(\"get-events-error\");\n}\n\nfunction hide_ui_connection_error() {\n    ui_report.hide_error($(\"#connection-error\"));\n    $(\"#connection-error\").removeClass(\"get-events-error\");\n}\n\nfunction get_events({dont_block = false} = {}) {\n    if (reload_state.is_in_progress()) {\n        return;\n    }\n\n    // TODO: In the future, we may implement Tornado support for live\n    // update for spectator, but until then, there's nothing\n    // to do here.\n    if (page_params.is_spectator) {\n        return;\n    }\n\n    get_events_params.dont_block = dont_block || get_events_failures > 0;\n\n    if (get_events_params.dont_block) {\n        // If we're requesting an immediate re-connect to the server,\n        // that means it's fairly likely that this client has been off\n        // the Internet and thus may have stale state (which is\n        // important for potential presence issues).\n        watchdog.set_suspect_offline(true);\n    }\n    if (get_events_params.queue_id === undefined) {\n        get_events_params.queue_id = page_params.queue_id;\n        get_events_params.last_event_id = page_params.last_event_id;\n    }\n\n    if (get_events_xhr !== undefined) {\n        get_events_xhr.abort();\n    }\n    if (get_events_timeout !== undefined) {\n        clearTimeout(get_events_timeout);\n    }\n\n    get_events_params.client_gravatar = true;\n    get_events_params.slim_presence = true;\n\n    get_events_timeout = undefined;\n    get_events_xhr = channel.get({\n        url: \"/json/events\",\n        data: get_events_params,\n        timeout: page_params.event_queue_longpoll_timeout_seconds * 1000,\n        success(data) {\n            watchdog.set_suspect_offline(false);\n            try {\n                get_events_xhr = undefined;\n                get_events_failures = 0;\n                hide_ui_connection_error();\n\n                get_events_success(data.events);\n            } catch (error) {\n                blueslip.error(\n                    \"Failed to handle get_events success\\n\" + blueslip.exception_msg(error),\n                    undefined,\n                    error.stack,\n                );\n            }\n            get_events_timeout = setTimeout(get_events, 0);\n        },\n        error(xhr, error_type) {\n            try {\n                get_events_xhr = undefined;\n                // If we're old enough that our message queue has been\n                // garbage collected, immediately reload.\n                if (\n                    xhr.status === 400 &&\n                    JSON.parse(xhr.responseText).code === \"BAD_EVENT_QUEUE_ID\"\n                ) {\n                    page_params.event_queue_expired = true;\n                    reload.initiate({\n                        immediate: true,\n                        save_pointer: false,\n                        save_narrow: true,\n                        save_compose: true,\n                    });\n                    return;\n                }\n\n                if (error_type === \"abort\") {\n                    // Don't restart if we explicitly aborted\n                    return;\n                } else if (error_type === \"timeout\") {\n                    // Retry indefinitely on timeout.\n                    get_events_failures = 0;\n                    hide_ui_connection_error();\n                } else {\n                    get_events_failures += 1;\n                }\n\n                if (get_events_failures >= 5) {\n                    show_ui_connection_error();\n                } else {\n                    hide_ui_connection_error();\n                }\n            } catch (error) {\n                blueslip.error(\n                    \"Failed to handle get_events error\\n\" + blueslip.exception_msg(error),\n                    undefined,\n                    error.stack,\n                );\n            }\n            const retry_sec = Math.min(90, Math.exp(get_events_failures / 2));\n            get_events_timeout = setTimeout(get_events, retry_sec * 1000);\n        },\n    });\n}\n\nexport function assert_get_events_running(error_message) {\n    if (get_events_xhr === undefined && get_events_timeout === undefined) {\n        restart_get_events({dont_block: true});\n        blueslip.error(error_message);\n    }\n}\n\nexport function restart_get_events(options) {\n    get_events(options);\n}\n\nexport function force_get_events() {\n    get_events_timeout = setTimeout(get_events, 0);\n}\n\nexport function home_view_loaded() {\n    waiting_on_homeview_load = false;\n    get_events_success([]);\n    $(document).trigger(\"home_view_loaded.zulip\");\n}\n\nexport function initialize() {\n    watchdog.on_unsuspend(() => {\n        // Immediately poll for new events on unsuspend\n        blueslip.log(\"Restarting get_events due to unsuspend\");\n        get_events_failures = 0;\n        restart_get_events({dont_block: true});\n    });\n    get_events();\n}\n\nexport function cleanup_event_queue() {\n    // Submit a request to the server to clean up our event queue\n    if (page_params.event_queue_expired === true || page_params.no_event_queue === true) {\n        return;\n    }\n    blueslip.log(\"Cleaning up our event queue\");\n    // Set expired because in a reload we may be called twice.\n    page_params.event_queue_expired = true;\n    channel.del({\n        url: \"/json/events\",\n        data: {queue_id: page_params.queue_id},\n        ignore_reload: true,\n    });\n}\n\nwindow.addEventListener(\"beforeunload\", () => {\n    cleanup_event_queue();\n});\n\n// For unit testing\nexport const _get_events_success = get_events_success;\n","import $ from \"jquery\";\n\nimport * as activity from \"./activity\";\nimport * as alert_words from \"./alert_words\";\nimport * as alert_words_ui from \"./alert_words_ui\";\nimport * as attachments_ui from \"./attachments_ui\";\nimport * as blueslip from \"./blueslip\";\nimport * as bot_data from \"./bot_data\";\nimport {buddy_list} from \"./buddy_list\";\nimport * as compose from \"./compose\";\nimport * as compose_actions from \"./compose_actions\";\nimport * as compose_fade from \"./compose_fade\";\nimport * as compose_pm_pill from \"./compose_pm_pill\";\nimport * as composebox_typeahead from \"./composebox_typeahead\";\nimport * as dark_theme from \"./dark_theme\";\nimport * as emoji from \"./emoji\";\nimport * as emoji_picker from \"./emoji_picker\";\nimport * as giphy from \"./giphy\";\nimport * as hotspots from \"./hotspots\";\nimport * as linkifiers from \"./linkifiers\";\nimport * as message_events from \"./message_events\";\nimport * as message_flags from \"./message_flags\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_live_update from \"./message_live_update\";\nimport * as muted_topics_ui from \"./muted_topics_ui\";\nimport * as muted_users_ui from \"./muted_users_ui\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as navbar_alerts from \"./navbar_alerts\";\nimport * as notifications from \"./notifications\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\nimport * as peer_data from \"./peer_data\";\nimport * as people from \"./people\";\nimport * as pm_list from \"./pm_list\";\nimport * as reactions from \"./reactions\";\nimport * as realm_icon from \"./realm_icon\";\nimport * as realm_logo from \"./realm_logo\";\nimport * as realm_playground from \"./realm_playground\";\nimport {realm_user_settings_defaults} from \"./realm_user_settings_defaults\";\nimport * as reload from \"./reload\";\nimport * as scroll_bar from \"./scroll_bar\";\nimport * as settings_account from \"./settings_account\";\nimport * as settings_bots from \"./settings_bots\";\nimport * as settings_config from \"./settings_config\";\nimport * as settings_display from \"./settings_display\";\nimport * as settings_emoji from \"./settings_emoji\";\nimport * as settings_exports from \"./settings_exports\";\nimport * as settings_invites from \"./settings_invites\";\nimport * as settings_linkifiers from \"./settings_linkifiers\";\nimport * as settings_notifications from \"./settings_notifications\";\nimport * as settings_org from \"./settings_org\";\nimport * as settings_playgrounds from \"./settings_playgrounds\";\nimport * as settings_profile_fields from \"./settings_profile_fields\";\nimport * as settings_realm_domains from \"./settings_realm_domains\";\nimport * as settings_realm_user_settings_defaults from \"./settings_realm_user_settings_defaults\";\nimport * as settings_streams from \"./settings_streams\";\nimport * as settings_user_groups from \"./settings_user_groups_legacy\";\nimport * as settings_users from \"./settings_users\";\nimport * as starred_messages from \"./starred_messages\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_events from \"./stream_events\";\nimport * as stream_list from \"./stream_list\";\nimport * as stream_settings_ui from \"./stream_settings_ui\";\nimport * as stream_topic_history from \"./stream_topic_history\";\nimport * as sub_store from \"./sub_store\";\nimport * as submessage from \"./submessage\";\nimport * as typing_events from \"./typing_events\";\nimport * as unread_ops from \"./unread_ops\";\nimport * as user_events from \"./user_events\";\nimport * as user_groups from \"./user_groups\";\nimport {user_settings} from \"./user_settings\";\nimport * as user_status from \"./user_status\";\n\nexport function dispatch_normal_event(event) {\n    const noop = function () {};\n    switch (event.type) {\n        case \"alert_words\":\n            alert_words.set_words(event.alert_words);\n            alert_words_ui.rerender_alert_words_ui();\n            break;\n\n        case \"attachment\":\n            attachments_ui.update_attachments(event);\n            break;\n\n        case \"custom_profile_fields\":\n            page_params.custom_profile_fields = event.fields;\n            settings_profile_fields.populate_profile_fields(page_params.custom_profile_fields);\n            settings_account.add_custom_profile_fields_to_settings();\n            break;\n\n        case \"default_streams\":\n            stream_data.set_realm_default_streams(event.default_streams);\n            settings_streams.update_default_streams_table();\n            break;\n\n        case \"delete_message\": {\n            const msg_ids = event.message_ids;\n            // message is passed to unread.get_unread_messages,\n            // which returns all the unread messages out of a given list.\n            // So double marking something as read would not occur\n            unread_ops.process_read_messages_event(msg_ids);\n            // This methods updates message_list too and since stream_topic_history relies on it\n            // this method should be called first.\n            message_events.remove_messages(msg_ids);\n\n            if (event.message_type === \"stream\") {\n                stream_topic_history.remove_messages({\n                    stream_id: event.stream_id,\n                    topic_name: event.topic,\n                    num_messages: msg_ids.length,\n                    max_removed_msg_id: Math.max(...msg_ids),\n                });\n                stream_list.update_streams_sidebar();\n            }\n\n            break;\n        }\n\n        case \"has_zoom_token\":\n            page_params.has_zoom_token = event.value;\n            if (event.value) {\n                for (const callback of compose.zoom_token_callbacks.values()) {\n                    callback();\n                }\n                compose.zoom_token_callbacks.clear();\n            }\n            break;\n\n        case \"hotspots\":\n            hotspots.load_new(event.hotspots);\n            page_params.hotspots = page_params.hotspots\n                ? page_params.hotspots.concat(event.hotspots)\n                : event.hotspots;\n            break;\n\n        case \"invites_changed\":\n            if ($(\"#admin-invites-list\").length) {\n                settings_invites.set_up(false);\n            }\n            break;\n\n        case \"user_topic\":\n            muted_topics_ui.handle_topic_updates(event);\n            break;\n\n        case \"muted_users\":\n            muted_users_ui.handle_user_updates(event.muted_users);\n            break;\n\n        case \"presence\":\n            activity.update_presence_info(event.user_id, event.presence, event.server_timestamp);\n            break;\n\n        case \"restart\": {\n            const reload_options = {\n                save_pointer: true,\n                save_narrow: true,\n                save_compose: true,\n                message_html: \"The application has been updated; reloading!\",\n            };\n            if (event.immediate) {\n                reload_options.immediate = true;\n            }\n            reload.initiate(reload_options);\n            break;\n        }\n\n        case \"reaction\":\n            switch (event.op) {\n                case \"add\":\n                    reactions.add_reaction(event);\n                    break;\n                case \"remove\":\n                    reactions.remove_reaction(event);\n                    break;\n                default:\n                    blueslip.error(\"Unexpected event type reaction/\" + event.op);\n                    break;\n            }\n            break;\n\n        case \"realm\": {\n            const realm_settings = {\n                add_custom_emoji_policy: settings_emoji.update_custom_emoji_ui,\n                allow_edit_history: noop,\n                allow_message_editing: noop,\n                edit_topic_policy: noop,\n                user_group_edit_policy: noop,\n                avatar_changes_disabled: settings_account.update_avatar_change_display,\n                bot_creation_policy: settings_bots.update_bot_permissions_ui,\n                create_public_stream_policy: noop,\n                create_private_stream_policy: noop,\n                create_web_public_stream_policy: noop,\n                invite_to_stream_policy: noop,\n                default_code_block_language: noop,\n                default_language: noop,\n                delete_own_message_policy: noop,\n                description: noop,\n                digest_emails_enabled: noop,\n                digest_weekday: noop,\n                email_address_visibility: noop,\n                email_changes_disabled: settings_account.update_email_change_display,\n                disallow_disposable_email_addresses: noop,\n                inline_image_preview: noop,\n                inline_url_embed_preview: noop,\n                invite_to_realm_policy: noop,\n                invite_required: noop,\n                mandatory_topics: noop,\n                message_content_edit_limit_seconds: noop,\n                message_content_delete_limit_seconds: noop,\n                message_retention_days: noop,\n                name: notifications.redraw_title,\n                name_changes_disabled: settings_account.update_name_change_display,\n                notifications_stream_id: noop,\n                org_type: noop,\n                private_message_policy: noop,\n                send_welcome_emails: noop,\n                message_content_allowed_in_email_notifications: noop,\n                enable_spectator_access: noop,\n                signup_notifications_stream_id: noop,\n                emails_restricted_to_domains: noop,\n                video_chat_provider: compose.update_video_chat_button_display,\n                giphy_rating: giphy.update_giphy_rating,\n                waiting_period_threshold: noop,\n                want_advertise_in_communities_directory: noop,\n                wildcard_mention_policy: noop,\n                enable_read_receipts: settings_account.update_send_read_receipts_tooltip,\n            };\n            switch (event.op) {\n                case \"update\":\n                    if (Object.hasOwn(realm_settings, event.property)) {\n                        page_params[\"realm_\" + event.property] = event.value;\n                        realm_settings[event.property]();\n                        settings_org.sync_realm_settings(event.property);\n\n                        if (event.property === \"name\" && window.electron_bridge !== undefined) {\n                            window.electron_bridge.send_event(\"realm_name\", event.value);\n                        }\n\n                        const stream_creation_settings = [\n                            \"create_private_stream_policy\",\n                            \"create_public_stream_policy\",\n                            \"create_web_public_stream_policy\",\n                        ];\n                        if (stream_creation_settings.includes(event.property)) {\n                            stream_settings_ui.update_stream_privacy_choices(event.property);\n                        }\n\n                        if (event.property === \"enable_spectator_access\") {\n                            stream_settings_ui.update_stream_privacy_choices(\n                                \"create_web_public_stream_policy\",\n                            );\n                        }\n                    }\n                    break;\n                case \"update_dict\":\n                    switch (event.property) {\n                        case \"default\":\n                            for (const [key, value] of Object.entries(event.data)) {\n                                page_params[\"realm_\" + key] = value;\n                                if (Object.hasOwn(realm_settings, key)) {\n                                    settings_org.sync_realm_settings(key);\n                                }\n                            }\n                            if (event.data.authentication_methods !== undefined) {\n                                settings_org.populate_auth_methods(\n                                    event.data.authentication_methods,\n                                );\n                            }\n                            break;\n                        case \"icon\":\n                            page_params.realm_icon_url = event.data.icon_url;\n                            page_params.realm_icon_source = event.data.icon_source;\n                            realm_icon.rerender();\n                            {\n                                const electron_bridge = window.electron_bridge;\n                                if (electron_bridge !== undefined) {\n                                    electron_bridge.send_event(\n                                        \"realm_icon_url\",\n                                        event.data.icon_url,\n                                    );\n                                }\n                            }\n                            break;\n                        case \"logo\":\n                            page_params.realm_logo_url = event.data.logo_url;\n                            page_params.realm_logo_source = event.data.logo_source;\n                            realm_logo.render();\n                            break;\n                        case \"night_logo\":\n                            page_params.realm_night_logo_url = event.data.night_logo_url;\n                            page_params.realm_night_logo_source = event.data.night_logo_source;\n                            realm_logo.render();\n                            break;\n                        default:\n                            blueslip.error(\n                                \"Unexpected event type realm/update_dict/\" + event.property,\n                            );\n                            break;\n                    }\n                    break;\n                case \"deactivated\":\n                    // This handler is likely unnecessary, in that if we\n                    // did nothing here, we'd reload and end up at the\n                    // same place when we attempt the next `GET /events`\n                    // and get an error.  Some clients will do that even\n                    // with this code, if they didn't have an active\n                    // longpoll waiting at the moment the realm was\n                    // deactivated.\n                    window.location.href = \"/accounts/deactivated/\";\n                    break;\n            }\n            if (page_params.is_admin) {\n                // Update the UI notice about the user's profile being\n                // incomplete, as we might have filled in the missing field(s).\n                navbar_alerts.show_profile_incomplete(navbar_alerts.check_profile_incomplete());\n            }\n            break;\n        }\n\n        case \"realm_bot\":\n            switch (event.op) {\n                case \"add\":\n                    bot_data.add(event.bot);\n                    settings_bots.render_bots();\n                    settings_users.redraw_bots_list();\n                    break;\n                case \"remove\":\n                    bot_data.deactivate(event.bot.user_id);\n                    event.bot.is_active = false;\n                    settings_bots.render_bots();\n                    settings_users.update_bot_data(event.bot.user_id);\n                    break;\n                case \"delete\":\n                    bot_data.del(event.bot.user_id);\n                    settings_bots.render_bots();\n                    settings_users.redraw_bots_list();\n                    break;\n                case \"update\":\n                    bot_data.update(event.bot.user_id, event.bot);\n                    settings_bots.render_bots();\n                    settings_users.update_bot_data(event.bot.user_id);\n                    break;\n                default:\n                    blueslip.error(\"Unexpected event type realm_bot/\" + event.op);\n                    break;\n            }\n            break;\n        case \"realm_emoji\":\n            // The authoritative data source is here.\n            emoji.update_emojis(event.realm_emoji);\n\n            // And then let other widgets know.\n            settings_emoji.populate_emoji();\n            emoji_picker.rebuild_catalog();\n            composebox_typeahead.update_emoji_data();\n            break;\n\n        case \"realm_linkifiers\":\n            page_params.realm_linkifiers = event.realm_linkifiers;\n            linkifiers.update_linkifier_rules(page_params.realm_linkifiers);\n            settings_linkifiers.populate_linkifiers(page_params.realm_linkifiers);\n            break;\n\n        case \"realm_playgrounds\":\n            page_params.realm_playgrounds = event.realm_playgrounds;\n            realm_playground.update_playgrounds(page_params.realm_playgrounds);\n            settings_playgrounds.populate_playgrounds(page_params.realm_playgrounds);\n            break;\n\n        case \"realm_domains\":\n            {\n                let i;\n                switch (event.op) {\n                    case \"add\":\n                        page_params.realm_domains.push(event.realm_domain);\n                        settings_org.populate_realm_domains_label(page_params.realm_domains);\n                        settings_realm_domains.populate_realm_domains_table(\n                            page_params.realm_domains,\n                        );\n                        break;\n                    case \"change\":\n                        for (i = 0; i < page_params.realm_domains.length; i += 1) {\n                            if (page_params.realm_domains[i].domain === event.realm_domain.domain) {\n                                page_params.realm_domains[i].allow_subdomains =\n                                    event.realm_domain.allow_subdomains;\n                                break;\n                            }\n                        }\n                        settings_org.populate_realm_domains_label(page_params.realm_domains);\n                        settings_realm_domains.populate_realm_domains_table(\n                            page_params.realm_domains,\n                        );\n                        break;\n                    case \"remove\":\n                        for (i = 0; i < page_params.realm_domains.length; i += 1) {\n                            if (page_params.realm_domains[i].domain === event.domain) {\n                                page_params.realm_domains.splice(i, 1);\n                                break;\n                            }\n                        }\n                        settings_org.populate_realm_domains_label(page_params.realm_domains);\n                        settings_realm_domains.populate_realm_domains_table(\n                            page_params.realm_domains,\n                        );\n                        break;\n                    default:\n                        blueslip.error(\"Unexpected event type realm_domains/\" + event.op);\n                        break;\n                }\n            }\n            break;\n\n        case \"realm_user_settings_defaults\": {\n            realm_user_settings_defaults[event.property] = event.value;\n            settings_realm_user_settings_defaults.update_page(event.property);\n\n            if (event.property === \"notification_sound\") {\n                notifications.update_notification_sound_source(\n                    $(\"#realm-default-notification-sound-audio\"),\n                    realm_user_settings_defaults,\n                );\n            }\n            break;\n        }\n\n        case \"realm_user\":\n            switch (event.op) {\n                case \"add\":\n                    people.add_active_user(event.person);\n                    break;\n                case \"remove\":\n                    people.deactivate(event.person);\n                    stream_events.remove_deactivated_user_from_all_streams(event.person.user_id);\n                    settings_users.update_view_on_deactivate(event.person.user_id);\n                    buddy_list.maybe_remove_key({key: event.person.user_id});\n                    break;\n                case \"update\":\n                    user_events.update_person(event.person);\n                    break;\n                default:\n                    blueslip.error(\"Unexpected event type realm_user/\" + event.op);\n                    break;\n            }\n            break;\n\n        case \"stream\":\n            switch (event.op) {\n                case \"update\":\n                    stream_events.update_property(event.stream_id, event.property, event.value, {\n                        rendered_description: event.rendered_description,\n                        history_public_to_subscribers: event.history_public_to_subscribers,\n                        is_web_public: event.is_web_public,\n                    });\n                    settings_streams.update_default_streams_table();\n                    stream_list.update_subscribe_to_more_streams_link();\n                    break;\n                case \"create\":\n                    stream_data.create_streams(event.streams);\n\n                    for (const stream of event.streams) {\n                        const sub = sub_store.get(stream.stream_id);\n                        if (overlays.streams_open()) {\n                            stream_settings_ui.add_sub_to_table(sub);\n                        }\n                    }\n                    stream_list.update_subscribe_to_more_streams_link();\n                    break;\n                case \"delete\":\n                    for (const stream of event.streams) {\n                        const was_subscribed = sub_store.get(stream.stream_id).subscribed;\n                        const is_narrowed_to_stream = narrow_state.is_for_stream_id(\n                            stream.stream_id,\n                        );\n                        stream_settings_ui.remove_stream(stream.stream_id);\n                        stream_data.delete_sub(stream.stream_id);\n                        if (was_subscribed) {\n                            stream_list.remove_sidebar_row(stream.stream_id);\n                        }\n                        settings_streams.update_default_streams_table();\n                        stream_data.remove_default_stream(stream.stream_id);\n                        if (is_narrowed_to_stream) {\n                            message_lists.current.update_trailing_bookend();\n                        }\n                        if (page_params.realm_notifications_stream_id === stream.stream_id) {\n                            page_params.realm_notifications_stream_id = -1;\n                            settings_org.sync_realm_settings(\"notifications_stream_id\");\n                        }\n                        if (page_params.realm_signup_notifications_stream_id === stream.stream_id) {\n                            page_params.realm_signup_notifications_stream_id = -1;\n                            settings_org.sync_realm_settings(\"signup_notifications_stream_id\");\n                        }\n                    }\n                    stream_list.update_subscribe_to_more_streams_link();\n                    break;\n                default:\n                    blueslip.error(\"Unexpected event type stream/\" + event.op);\n                    break;\n            }\n            break;\n\n        case \"submessage\": {\n            // The fields in the event don't quite exactly\n            // match the layout of a submessage, since there's\n            // an event id.  We also want to be explicit here.\n            const submsg = {\n                id: event.submessage_id,\n                sender_id: event.sender_id,\n                msg_type: event.msg_type,\n                message_id: event.message_id,\n                content: event.content,\n            };\n            submessage.handle_event(submsg);\n            break;\n        }\n\n        case \"subscription\":\n            switch (event.op) {\n                case \"add\":\n                    for (const rec of event.subscriptions) {\n                        const sub = sub_store.get(rec.stream_id);\n                        if (sub) {\n                            stream_data.update_stream_email_address(sub, rec.email_address);\n                            stream_events.mark_subscribed(sub, rec.subscribers, rec.color);\n                        } else {\n                            blueslip.error(\n                                \"Subscribing to unknown stream with ID \" + rec.stream_id,\n                            );\n                        }\n                    }\n                    break;\n                case \"peer_add\": {\n                    const stream_ids = sub_store.validate_stream_ids(event.stream_ids);\n                    const user_ids = people.validate_user_ids(event.user_ids);\n\n                    peer_data.bulk_add_subscribers({stream_ids, user_ids});\n\n                    for (const stream_id of stream_ids) {\n                        const sub = sub_store.get(stream_id);\n                        stream_settings_ui.update_subscribers_ui(sub);\n                    }\n\n                    compose_fade.update_faded_users();\n                    break;\n                }\n                case \"peer_remove\": {\n                    const stream_ids = sub_store.validate_stream_ids(event.stream_ids);\n                    const user_ids = people.validate_user_ids(event.user_ids);\n\n                    peer_data.bulk_remove_subscribers({stream_ids, user_ids});\n\n                    for (const stream_id of stream_ids) {\n                        const sub = sub_store.get(stream_id);\n                        stream_settings_ui.update_subscribers_ui(sub);\n                    }\n\n                    compose_fade.update_faded_users();\n                    break;\n                }\n                case \"remove\":\n                    for (const rec of event.subscriptions) {\n                        const sub = sub_store.get(rec.stream_id);\n                        stream_events.mark_unsubscribed(sub);\n                    }\n                    break;\n                case \"update\":\n                    stream_events.update_property(event.stream_id, event.property, event.value);\n                    break;\n                default:\n                    blueslip.error(\"Unexpected event type subscription/\" + event.op);\n                    break;\n            }\n            break;\n        case \"typing\":\n            if (event.sender.user_id === page_params.user_id) {\n                // typing notifications are sent to the user who is typing\n                // as well as recipients; we ignore such self-generated events.\n                return;\n            }\n            switch (event.op) {\n                case \"start\":\n                    typing_events.display_notification(event);\n                    break;\n                case \"stop\":\n                    typing_events.hide_notification(event);\n                    break;\n                default:\n                    blueslip.error(\"Unexpected event type typing/\" + event.op);\n                    break;\n            }\n            break;\n\n        case \"user_settings\": {\n            if (settings_config.all_notification_settings.includes(event.property)) {\n                notifications.handle_global_notification_updates(event.property, event.value);\n                settings_notifications.update_page(settings_notifications.user_settings_panel);\n                // TODO: This should also do a refresh of the stream_edit UI\n                // if it's currently displayed, possibly reusing some code\n                // from stream_events.js\n                // (E.g. update_stream_push_notifications).\n                break;\n            }\n\n            const user_display_settings = [\n                \"color_scheme\",\n                \"default_language\",\n                \"default_view\",\n                \"demote_inactive_streams\",\n                \"dense_mode\",\n                \"emojiset\",\n                \"escape_navigates_to_default_view\",\n                \"fluid_layout_width\",\n                \"high_contrast_mode\",\n                \"timezone\",\n                \"twenty_four_hour_time\",\n                \"translate_emoticons\",\n                \"display_emoji_reaction_users\",\n                \"user_list_style\",\n                \"starred_message_counts\",\n                \"send_stream_typing_notifications\",\n                \"send_private_typing_notifications\",\n                \"send_read_receipts\",\n            ];\n\n            if (user_display_settings.includes(event.property)) {\n                user_settings[event.property] = event.value;\n            }\n            if (event.property === \"default_language\") {\n                // We additionally need to set the language name.\n                //\n                // Note that this does not change translations at all;\n                // a reload is fundamentally required because we\n                // cannot rerender with the new language the strings\n                // present in the backend/Jinja2 templates.\n                settings_display.set_default_language_name(event.language_name);\n            }\n            if (event.property === \"twenty_four_hour_time\") {\n                // Rerender the whole message list UI\n                for (const msg_list of message_lists.all_rendered_message_lists()) {\n                    msg_list.rerender();\n                }\n            }\n            if (event.property === \"high_contrast_mode\") {\n                $(\"body\").toggleClass(\"high-contrast\");\n            }\n            if (event.property === \"demote_inactive_streams\") {\n                stream_list.update_streams_sidebar();\n                stream_data.set_filter_out_inactives();\n            }\n            if (event.property === \"user_list_style\") {\n                settings_display.report_user_list_style_change(\n                    settings_display.user_settings_panel,\n                );\n                activity.build_user_sidebar();\n            }\n            if (event.property === \"dense_mode\") {\n                $(\"body\").toggleClass(\"less_dense_mode\");\n                $(\"body\").toggleClass(\"more_dense_mode\");\n            }\n            if (event.property === \"color_scheme\") {\n                $(\"body\").fadeOut(300);\n                setTimeout(() => {\n                    if (event.value === settings_config.color_scheme_values.night.code) {\n                        dark_theme.enable();\n                        realm_logo.render();\n                    } else if (event.value === settings_config.color_scheme_values.day.code) {\n                        dark_theme.disable();\n                        realm_logo.render();\n                    } else {\n                        dark_theme.default_preference_checker();\n                        realm_logo.render();\n                    }\n                    $(\"body\").fadeIn(300);\n                }, 300);\n            }\n            if (event.property === \"starred_message_counts\") {\n                starred_messages.rerender_ui();\n            }\n            if (event.property === \"fluid_layout_width\") {\n                scroll_bar.set_layout_width();\n            }\n            if (event.property === \"default_language\") {\n                // TODO: Make this change the view immediately rather than\n                // requiring a reload.  This is likely fairly difficult,\n                // because various i18n strings are rendered by the\n                // server; we may want to instead just trigger a page\n                // reload.\n            }\n            if (event.property === \"emojiset\") {\n                settings_display.report_emojiset_change(settings_display.user_settings_panel);\n\n                // Rerender the whole message list UI\n                for (const msg_list of message_lists.all_rendered_message_lists()) {\n                    msg_list.rerender();\n                }\n                // Rerender buddy list status emoji\n                activity.build_user_sidebar();\n            }\n\n            if (event.property === \"display_emoji_reaction_users\") {\n                message_live_update.rerender_messages_view();\n            }\n            if (event.property === \"escape_navigates_to_default_view\") {\n                $(\"#go-to-default-view-hotkey-help\").toggleClass(\"notdisplayed\", !event.value);\n            }\n            if (event.property === \"enter_sends\") {\n                user_settings.enter_sends = event.value;\n                $(`.enter_sends_${!user_settings.enter_sends}`).hide();\n                $(`.enter_sends_${user_settings.enter_sends}`).show();\n                break;\n            }\n            if (event.property === \"presence_enabled\") {\n                user_settings.presence_enabled = event.value;\n                $(\"#user_presence_enabled\").prop(\"checked\", user_settings.presence_enabled);\n                activity.redraw_user(page_params.user_id);\n                break;\n            }\n            settings_display.update_page(event.property);\n            break;\n        }\n\n        case \"update_message_flags\": {\n            const new_value = event.op === \"add\";\n            switch (event.flag) {\n                case \"starred\":\n                    for (const message_id of event.messages) {\n                        message_flags.update_starred_flag(message_id, new_value);\n                    }\n\n                    if (event.op === \"add\") {\n                        starred_messages.add(event.messages);\n                    } else {\n                        starred_messages.remove(event.messages);\n                    }\n                    break;\n                case \"read\":\n                    if (event.op === \"add\") {\n                        unread_ops.process_read_messages_event(event.messages);\n                    } else {\n                        unread_ops.process_unread_messages_event({\n                            message_ids: event.messages,\n                            message_details: event.message_details,\n                        });\n                    }\n                    break;\n            }\n            break;\n        }\n\n        case \"user_group\":\n            switch (event.op) {\n                case \"add\":\n                    user_groups.add(event.group);\n                    break;\n                case \"remove\":\n                    user_groups.remove(user_groups.get_user_group_from_id(event.group_id));\n                    break;\n                case \"add_members\":\n                    user_groups.add_members(event.group_id, event.user_ids);\n                    break;\n                case \"remove_members\":\n                    user_groups.remove_members(event.group_id, event.user_ids);\n                    break;\n                case \"add_subgroups\":\n                    user_groups.add_subgroups(event.group_id, event.direct_subgroup_ids);\n                    break;\n                case \"remove_subgroups\":\n                    user_groups.remove_subgroups(event.group_id, event.direct_subgroup_ids);\n                    break;\n                case \"update\":\n                    user_groups.update(event);\n                    break;\n                default:\n                    blueslip.error(\"Unexpected event type user_group/\" + event.op);\n                    break;\n            }\n            settings_user_groups.reload();\n            break;\n\n        case \"user_status\":\n            if (event.status_text !== undefined) {\n                user_status.set_status_text({\n                    user_id: event.user_id,\n                    status_text: event.status_text,\n                });\n                activity.redraw_user(event.user_id);\n\n                // Update the status text in compose box placeholder when opened to self.\n                if (compose_pm_pill.get_user_ids().includes(event.user_id)) {\n                    compose_actions.update_placeholder_text();\n                }\n            }\n\n            if (event.emoji_name !== undefined) {\n                user_status.set_status_emoji(event);\n                activity.redraw_user(event.user_id);\n                pm_list.update_private_messages();\n                message_live_update.update_user_status_emoji(\n                    event.user_id,\n                    user_status.get_status_emoji(event.user_id),\n                );\n            }\n            break;\n        case \"realm_export\":\n            settings_exports.populate_exports_table(event.exports);\n            break;\n    }\n}\n","import {parseISO} from \"date-fns\";\nimport $ from \"jquery\";\n\n// import timezones from \"../generated/timezones.json\";\nimport render_settings_overlay from \"../templates/settings_overlay.hbs\";\nimport render_settings_tab from \"../templates/settings_tab.hbs\";\n\nimport * as admin from \"./admin\";\nimport * as blueslip from \"./blueslip\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as settings_bots from \"./settings_bots\";\nimport * as settings_config from \"./settings_config\";\nimport * as settings_data from \"./settings_data\";\nimport * as settings_display from \"./settings_display\";\nimport * as settings_panel_menu from \"./settings_panel_menu\";\nimport * as settings_sections from \"./settings_sections\";\nimport * as settings_toggle from \"./settings_toggle\";\nimport {user_settings} from \"./user_settings\";\n\nexport let settings_label;\n\n$(() => {\n    $(\"#settings_overlay_container\").on(\"click\", (e) => {\n        if (!overlays.is_modal_open()) {\n            return;\n        }\n        if ($(e.target).closest(\".micromodal\").length > 0) {\n            return;\n        }\n        e.preventDefault();\n        e.stopPropagation();\n        // Whenever opening a modal(over settings overlay) in an event handler\n        // attached to a click event, make sure to stop the propagation of the\n        // event to the parent container otherwise the modal will not open. This\n        // is so because this event handler will get fired on any click in settings\n        // overlay and subsequently close any open modal.\n        overlays.close_active_modal();\n    });\n});\n\nfunction setup_settings_label() {\n    settings_label = {\n        // settings_notification\n        presence_enabled: $t({\n            defaultMessage: \"Display my availability to other users\",\n        }),\n        presence_enabled_parens_text: $t({defaultMessage: \"invisible mode off\"}),\n        send_stream_typing_notifications: $t({\n            defaultMessage: \"Let subscribers see when I'm typing messages in streams\",\n        }),\n        send_private_typing_notifications: $t({\n            defaultMessage: \"Let recipients see when I'm typing private messages\",\n        }),\n        send_read_receipts: $t({\n            defaultMessage: \"Let others see when I've read messages\",\n        }),\n\n        ...settings_config.notification_settings_labels,\n        ...settings_config.display_settings_labels,\n    };\n}\n\nfunction get_parsed_date_of_joining() {\n    const user_date_joined = people.get_by_user_id(page_params.user_id, false).date_joined;\n    const dateFormat = new Intl.DateTimeFormat(\"default\", {dateStyle: \"long\"});\n    return dateFormat.format(parseISO(user_date_joined));\n}\n\nexport function build_page() {\n    setup_settings_label();\n\n    const rendered_settings_tab = render_settings_tab({\n        full_name: people.my_full_name(),\n        date_joined_text: get_parsed_date_of_joining(),\n        page_params,\n        enable_sound_select:\n            user_settings.enable_sounds || user_settings.enable_stream_audible_notifications,\n        zuliprc: \"zuliprc\",\n        botserverrc: \"botserverrc\",\n        // timezones: timezones.timezones,\n        can_create_new_bots: settings_bots.can_create_new_bots(),\n        settings_label,\n        demote_inactive_streams_values: settings_config.demote_inactive_streams_values,\n        user_list_style_values: settings_config.user_list_style_values,\n        color_scheme_values: settings_config.color_scheme_values,\n        default_view_values: settings_config.default_view_values,\n        twenty_four_hour_time_values: settings_config.twenty_four_hour_time_values,\n        general_settings: settings_config.all_notifications(user_settings).general_settings,\n        notification_settings: settings_config.all_notifications(user_settings).settings,\n        email_notifications_batching_period_values:\n            settings_config.email_notifications_batching_period_values,\n        desktop_icon_count_display_values: settings_config.desktop_icon_count_display_values,\n        show_push_notifications_tooltip:\n            settings_config.all_notifications(user_settings).show_push_notifications_tooltip,\n        display_settings: settings_config.get_all_display_settings(),\n        user_can_change_name: settings_data.user_can_change_name(),\n        user_can_change_avatar: settings_data.user_can_change_avatar(),\n        user_role_text: people.get_user_type(page_params.user_id),\n        default_language_name: settings_display.user_default_language_name,\n        realm_push_notifications_enabled: page_params.realm_push_notifications_enabled,\n        settings_object: user_settings,\n        send_read_receipts_tooltip: $t({\n            defaultMessage: \"Read receipts are currently disabled in this organization.\",\n        }),\n    });\n\n    $(\".settings-box\").html(rendered_settings_tab);\n}\n\nexport function launch(section) {\n    build_page();\n    admin.build_page();\n    settings_sections.reset_sections();\n\n    overlays.open_settings();\n    settings_panel_menu.normal_settings.activate_section_or_default(section);\n    settings_toggle.highlight_toggle(\"settings\");\n}\n\nexport function set_settings_header(key) {\n    const selected_tab_key = $(\"#settings_page .tab-switcher .selected\").data(\"tab-key\");\n    let header_prefix = $t_html({defaultMessage: \"Personal settings\"});\n    if (selected_tab_key === \"organization\") {\n        header_prefix = $t_html({defaultMessage: \"Organization settings\"});\n    }\n    $(\".settings-header h1 .header-prefix\").text(header_prefix);\n\n    const header_text = $(\n        `#settings_page .sidebar-list [data-section='${CSS.escape(key)}'] .text`,\n    ).text();\n    if (header_text) {\n        $(\".settings-header h1 .section\").text(\" / \" + header_text);\n    } else {\n        blueslip.warn(\n            \"Error: the key '\" +\n                key +\n                \"' does not exist in the settings\" +\n                \" sidebar list. Please add it.\",\n        );\n    }\n}\n\nexport function initialize() {\n    const rendered_settings_overlay = render_settings_overlay({\n        is_owner: page_params.is_owner,\n        is_admin: page_params.is_admin,\n        is_guest: page_params.is_guest,\n        show_uploaded_files_section: page_params.max_file_upload_size_mib > 0,\n        show_emoji_settings_lock:\n            !page_params.is_admin && page_params.realm_add_emoji_by_admins_only,\n    });\n    $(\"#settings_overlay_container\").append(rendered_settings_overlay);\n}\n","import $ from \"jquery\";\n\nimport render_change_email_modal from \"../templates/change_email_modal.hbs\";\nimport render_confirm_deactivate_own_user from \"../templates/confirm_dialog/confirm_deactivate_own_user.hbs\";\nimport render_dialog_change_password from \"../templates/dialog_change_password.hbs\";\nimport render_settings_api_key_modal from \"../templates/settings/api_key_modal.hbs\";\nimport render_settings_custom_user_profile_field from \"../templates/settings/custom_user_profile_field.hbs\";\nimport render_settings_dev_env_email_access from \"../templates/settings/dev_env_email_access.hbs\";\n\nimport * as avatar from \"./avatar\";\nimport * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport * as common from \"./common\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport {csrf_token} from \"./csrf\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as pill_typeahead from \"./pill_typeahead\";\nimport * as settings_bots from \"./settings_bots\";\nimport * as settings_data from \"./settings_data\";\nimport * as settings_ui from \"./settings_ui\";\nimport * as typeahead_helper from \"./typeahead_helper\";\nimport * as ui_report from \"./ui_report\";\nimport * as user_pill from \"./user_pill\";\nimport * as user_profile from \"./user_profile\";\nimport {user_settings} from \"./user_settings\";\n\nlet password_quality; // Loaded asynchronously\n\nexport function update_email(new_email) {\n    const $email_input = $(\"#change_email\");\n\n    if ($email_input) {\n        $email_input.text(new_email);\n    }\n}\n\nexport function update_full_name(new_full_name) {\n    // Arguably, this should work more like how the `update_email`\n    // flow works, where we update the name in the modal on open,\n    // rather than updating it here, but this works.\n    const $full_name_input = $(\".full-name-change-container input[name='full_name']\");\n    if ($full_name_input) {\n        $full_name_input.val(new_full_name);\n    }\n}\n\nexport function update_name_change_display() {\n    if (!settings_data.user_can_change_name()) {\n        $(\"#full_name\").prop(\"disabled\", true);\n        $(\".change_name_tooltip\").show();\n    } else {\n        $(\"#full_name\").prop(\"disabled\", false);\n        $(\".change_name_tooltip\").hide();\n    }\n}\n\nexport function update_email_change_display() {\n    if (page_params.realm_email_changes_disabled && !page_params.is_admin) {\n        $(\"#change_email\").prop(\"disabled\", true);\n        $(\".change_email_tooltip\").show();\n    } else {\n        $(\"#change_email\").prop(\"disabled\", false);\n        $(\".change_email_tooltip\").hide();\n    }\n}\n\nexport function update_avatar_change_display() {\n    if (!settings_data.user_can_change_avatar()) {\n        // We disable this widget by simply hiding its edit UI.\n        $(\"#user-avatar-upload-widget .image_upload_button\").hide();\n        $(\".user-avatar-section .settings-info-icon\").show();\n    } else {\n        $(\"#user-avatar-upload-widget .image_upload_button\").show();\n        $(\".user-avatar-section .settings-info-icon\").hide();\n    }\n}\n\nexport function update_send_read_receipts_tooltip() {\n    if (page_params.realm_enable_read_receipts) {\n        $(\"#send_read_receipts_label .settings-info-icon\").hide();\n    } else {\n        $(\"#send_read_receipts_label .settings-info-icon\").show();\n    }\n}\n\nfunction display_avatar_upload_complete() {\n    $(\"#user-avatar-upload-widget .upload-spinner-background\").css({visibility: \"hidden\"});\n    $(\"#user-avatar-upload-widget .image-upload-text\").show();\n    $(\"#user-avatar-upload-widget .image-delete-button\").show();\n}\n\nfunction display_avatar_upload_started() {\n    $(\"#user-avatar-source\").hide();\n    $(\"#user-avatar-upload-widget .upload-spinner-background\").css({visibility: \"visible\"});\n    $(\"#user-avatar-upload-widget .image-upload-text\").hide();\n    $(\"#user-avatar-upload-widget .image-delete-button\").hide();\n}\n\nfunction settings_change_error(message_html, xhr) {\n    ui_report.error(message_html, xhr, $(\"#account-settings-status\").expectOne());\n}\n\nfunction update_custom_profile_field(field, method) {\n    let field_id;\n    if (method === channel.del) {\n        field_id = field;\n    } else {\n        field_id = field.id;\n    }\n\n    const $spinner_element = $(\n        `.custom_user_field[data-field-id=\"${CSS.escape(field_id)}\"] .custom-field-status`,\n    ).expectOne();\n    settings_ui.do_settings_change(\n        method,\n        \"/json/users/me/profile_data\",\n        {data: JSON.stringify([field])},\n        $spinner_element,\n    );\n}\n\nfunction update_user_custom_profile_fields(fields, method) {\n    if (method === undefined) {\n        blueslip.error(\"Undefined method in update_user_custom_profile_fields\");\n    }\n\n    for (const field of fields) {\n        update_custom_profile_field(field, method);\n    }\n}\n\nexport function append_custom_profile_fields(element_id, user_id) {\n    const person = people.get_by_user_id(user_id);\n    if (person.is_bot) {\n        return;\n    }\n    const all_custom_fields = page_params.custom_profile_fields;\n    const all_field_types = page_params.custom_profile_field_types;\n\n    const all_field_template_types = new Map([\n        [all_field_types.LONG_TEXT.id, \"text\"],\n        [all_field_types.SHORT_TEXT.id, \"text\"],\n        [all_field_types.SELECT.id, \"select\"],\n        [all_field_types.USER.id, \"user\"],\n        [all_field_types.DATE.id, \"date\"],\n        [all_field_types.EXTERNAL_ACCOUNT.id, \"text\"],\n        [all_field_types.URL.id, \"url\"],\n        [all_field_types.PRONOUNS.id, \"text\"],\n    ]);\n\n    for (const field of all_custom_fields) {\n        let field_value = people.get_custom_profile_data(user_id, field.id);\n        const is_select_field = field.type === all_field_types.SELECT.id;\n        const field_choices = [];\n\n        if (field_value === undefined || field_value === null) {\n            field_value = {value: \"\", rendered_value: \"\"};\n        }\n        if (is_select_field) {\n            const field_choice_dict = JSON.parse(field.field_data);\n            for (const choice in field_choice_dict) {\n                if (choice) {\n                    field_choices[field_choice_dict[choice].order] = {\n                        value: choice,\n                        text: field_choice_dict[choice].text,\n                        selected: choice === field_value.value,\n                    };\n                }\n            }\n        }\n\n        const html = render_settings_custom_user_profile_field({\n            field,\n            field_type: all_field_template_types.get(field.type),\n            field_value,\n            is_long_text_field: field.type === all_field_types.LONG_TEXT.id,\n            is_user_field: field.type === all_field_types.USER.id,\n            is_date_field: field.type === all_field_types.DATE.id,\n            is_url_field: field.type === all_field_types.URL.id,\n            is_pronouns_field: field.type === all_field_types.PRONOUNS.id,\n            is_select_field,\n            field_choices,\n        });\n        $(element_id).append(html);\n    }\n}\n\nexport function initialize_custom_date_type_fields(element_id) {\n    $(element_id).find(\".custom_user_field .datepicker\").flatpickr({\n        altInput: true,\n        altFormat: \"F j, Y\",\n        allowInput: true,\n    });\n\n    $(element_id)\n        .find(\".custom_user_field .datepicker\")\n        .on(\"mouseenter\", function () {\n            if ($(this).val().length <= 0) {\n                $(this).parent().find(\".remove_date\").hide();\n            } else {\n                $(this).parent().find(\".remove_date\").show();\n            }\n        });\n\n    $(element_id)\n        .find(\".custom_user_field .remove_date\")\n        .on(\"click\", function () {\n            $(this).parent().find(\".custom_user_field_value\").val(\"\");\n        });\n}\n\nexport function initialize_custom_user_type_fields(\n    element_id,\n    user_id,\n    is_editable,\n    set_handler_on_update,\n) {\n    const field_types = page_params.custom_profile_field_types;\n    const user_pills = new Map();\n\n    const person = people.get_by_user_id(user_id);\n    if (person.is_bot) {\n        return user_pills;\n    }\n\n    for (const field of page_params.custom_profile_fields) {\n        let field_value_raw = people.get_custom_profile_data(user_id, field.id);\n\n        if (field_value_raw) {\n            field_value_raw = field_value_raw.value;\n        }\n\n        // If field is not editable and field value is null, we don't expect\n        // pill container for that field and proceed further\n        if (field.type === field_types.USER.id && (field_value_raw || is_editable)) {\n            const $pill_container = $(element_id)\n                .find(`.custom_user_field[data-field-id=\"${CSS.escape(field.id)}\"] .pill-container`)\n                .expectOne();\n            const pills = user_pill.create_pills($pill_container);\n\n            function update_custom_user_field() {\n                const fields = [];\n                const user_ids = user_pill.get_user_ids(pills);\n                if (user_ids.length < 1) {\n                    fields.push(field.id);\n                    update_user_custom_profile_fields(fields, channel.del);\n                } else {\n                    fields.push({id: field.id, value: user_ids});\n                    update_user_custom_profile_fields(fields, channel.patch);\n                }\n            }\n\n            if (field_value_raw) {\n                const field_value = JSON.parse(field_value_raw);\n                if (field_value) {\n                    for (const pill_user_id of field_value) {\n                        const user = people.get_by_user_id(pill_user_id);\n                        user_pill.append_user(user, pills);\n                    }\n                }\n            }\n\n            if (is_editable) {\n                const $input = $pill_container.children(\".input\");\n                if (set_handler_on_update) {\n                    const opts = {update_func: update_custom_user_field, user: true};\n                    pill_typeahead.set_up($input, pills, opts);\n                    pills.onPillRemove(() => {\n                        update_custom_user_field();\n                    });\n                } else {\n                    pill_typeahead.set_up($input, pills, {user: true});\n                }\n            }\n            user_pills.set(field.id, pills);\n        }\n    }\n\n    return user_pills;\n}\n\nexport function initialize_custom_pronouns_type_fields(element_id) {\n    const commonly_used_pronouns = [\n        $t({defaultMessage: \"he/him\"}),\n        $t({defaultMessage: \"she/her\"}),\n        $t({defaultMessage: \"they/them\"}),\n    ];\n    $(element_id)\n        .find(\".pronouns_type_field\")\n        .typeahead({\n            items: 3,\n            fixed: true,\n            helpOnEmptyStrings: true,\n            source() {\n                return commonly_used_pronouns;\n            },\n            highlighter(item) {\n                return typeahead_helper.render_typeahead_item({primary: item});\n            },\n        });\n}\n\nexport function add_custom_profile_fields_to_settings() {\n    if (!overlays.settings_open()) {\n        return;\n    }\n\n    const element_id = \"#profile-settings .custom-profile-fields-form\";\n    $(element_id).empty();\n\n    append_custom_profile_fields(element_id, people.my_current_user_id());\n    initialize_custom_user_type_fields(element_id, people.my_current_user_id(), true, true);\n    initialize_custom_date_type_fields(element_id);\n    initialize_custom_pronouns_type_fields(element_id);\n}\n\nexport function hide_confirm_email_banner() {\n    if (!overlays.settings_open()) {\n        return;\n    }\n    $(\"#account-settings-status\").hide();\n}\n\nexport function set_up() {\n    // Add custom profile fields elements to user account settings.\n    add_custom_profile_fields_to_settings();\n    $(\"#account-settings-status\").hide();\n\n    const setup_api_key_modal = () => {\n        function request_api_key(data) {\n            channel.post({\n                url: \"/json/fetch_api_key\",\n                data,\n                success(data) {\n                    $(\"#get_api_key_password\").val(\"\");\n                    $(\"#api_key_value\").text(data.api_key);\n                    // The display property on the error bar is set to important\n                    // so instead of making display: none !important we just\n                    // remove it.\n                    $(\"#api_key_status\").remove();\n                    $(\"#password_confirmation\").hide();\n                    $(\"#get_api_key_button\").hide();\n                    $(\"#show_api_key\").show();\n                    $(\"#api_key_buttons\").show();\n                },\n                error(xhr) {\n                    ui_report.error(\n                        $t_html({defaultMessage: \"Error\"}),\n                        xhr,\n                        $(\"#api_key_status\").expectOne(),\n                    );\n                    $(\"#show_api_key\").hide();\n                },\n            });\n        }\n\n        $(\"#api_key_value\").text(\"\");\n        $(\"#show_api_key\").hide();\n        $(\"#api_key_buttons\").hide();\n        common.setup_password_visibility_toggle(\n            \"#get_api_key_password\",\n            \"#get_api_key_password + .password_visibility_toggle\",\n            {tippy_tooltips: true},\n        );\n\n        function do_get_api_key() {\n            $(\"#api_key_status\").hide();\n            const data = {};\n            data.password = $(\"#get_api_key_password\").val();\n            request_api_key(data);\n        }\n\n        if (page_params.realm_password_auth_enabled === false) {\n            // Skip the password prompt step, since the user doesn't have one.\n            request_api_key({});\n        } else {\n            $(\"#get_api_key_button\").on(\"click\", (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                do_get_api_key();\n            });\n            $(\"#get_api_key_password\").on(\"keydown\", (e) => {\n                if (keydown_util.is_enter_event(e)) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    do_get_api_key();\n                }\n            });\n        }\n\n        $(\"#regenerate_api_key\").on(\"click\", (e) => {\n            const email = page_params.delivery_email;\n            const api_key = $(\"#api_key_value\").text();\n            const authorization_header = \"Basic \" + btoa(`${email}:${api_key}`);\n\n            channel.post({\n                // This endpoint is only accessible with the previous API key,\n                // via our usual HTTP Basic auth mechanism.\n                url: \"/api/v1/users/me/api_key/regenerate\",\n                headers: {Authorization: authorization_header},\n                success(data) {\n                    $(\"#api_key_value\").text(data.api_key);\n                },\n                error(xhr) {\n                    $(\"#user_api_key_error\").text(JSON.parse(xhr.responseText).msg).show();\n                },\n            });\n            e.preventDefault();\n            e.stopPropagation();\n        });\n\n        $(\"#download_zuliprc\").on(\"click\", function () {\n            const bot_object = {\n                user_id: people.my_current_user_id(),\n                email: page_params.delivery_email,\n                api_key: $(\"#api_key_value\").text(),\n            };\n            const data = settings_bots.generate_zuliprc_content(bot_object);\n            $(this).attr(\"href\", settings_bots.encode_zuliprc_as_uri(data));\n        });\n\n        $(\"#api_key_modal [data-micromodal-close]\").on(\"click\", () => {\n            common.reset_password_toggle_icons(\n                \"#get_api_key_password\",\n                \"#get_api_key_password + .password_visibility_toggle\",\n            );\n        });\n    };\n\n    $(\"#api_key_button\").on(\"click\", (e) => {\n        $(\"body\").append(render_settings_api_key_modal());\n        setup_api_key_modal();\n        $(\"#api_key_status\").hide();\n        overlays.open_modal(\"api_key_modal\", {\n            autoremove: true,\n            on_show() {\n                $(\"#get_api_key_password\").trigger(\"focus\");\n            },\n        });\n        e.preventDefault();\n        e.stopPropagation();\n    });\n\n    function clear_password_change() {\n        // Clear the password boxes so that passwords don't linger in the DOM\n        // for an XSS attacker to find.\n        common.reset_password_toggle_icons(\n            \"#old_password\",\n            \"#old_password + .password_visibility_toggle\",\n        );\n        common.reset_password_toggle_icons(\n            \"#new_password\",\n            \"#new_password + .password_visibility_toggle\",\n        );\n        $(\"#old_password, #new_password\").val(\"\");\n        password_quality?.(\"\", $(\"#pw_strength .bar\"), $(\"#new_password\"));\n    }\n\n    function change_password_post_render() {\n        $(\"#change_password_modal\")\n            .find(\"[data-micromodal-close]\")\n            .on(\"click\", () => {\n                clear_password_change();\n            });\n        common.setup_password_visibility_toggle(\n            \"#old_password\",\n            \"#old_password + .password_visibility_toggle\",\n            {tippy_tooltips: true},\n        );\n        common.setup_password_visibility_toggle(\n            \"#new_password\",\n            \"#new_password + .password_visibility_toggle\",\n            {tippy_tooltips: true},\n        );\n        clear_password_change();\n    }\n\n    $(\"#change_password\").on(\"click\", async (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        function validate_input(e) {\n            e.preventDefault();\n            e.stopPropagation();\n            const old_password = $(\"#old_password\").val();\n            const new_password = $(\"#new_password\").val();\n\n            if (old_password === \"\") {\n                ui_report.error(\n                    $t_html({defaultMessage: \"Please enter your password\"}),\n                    undefined,\n                    $(\"#dialog_error\"),\n                );\n                return false;\n            }\n\n            if (new_password === \"\") {\n                ui_report.error(\n                    $t_html({defaultMessage: \"Please choose a new password\"}),\n                    undefined,\n                    $(\"#dialog_error\"),\n                );\n                return false;\n            }\n            return true;\n        }\n\n        dialog_widget.launch({\n            html_heading: $t_html({defaultMessage: \"Change password\"}),\n            html_body: render_dialog_change_password(),\n            html_submit_button: $t_html({defaultMessage: \"Change\"}),\n            loading_spinner: true,\n            id: \"change_password_modal\",\n            form_id: \"change_password_container\",\n            post_render: change_password_post_render,\n            on_click: do_change_password,\n            validate_input,\n        });\n        $(\"#pw_change_controls\").show();\n\n        if (page_params.realm_password_auth_enabled !== false) {\n            // zxcvbn.js is pretty big, and is only needed on password\n            // change, so load it asynchronously.\n            password_quality = (await import(\"./password_quality\")).password_quality;\n            $(\"#pw_strength .bar\").removeClass(\"fade\");\n\n            $(\"#new_password\").on(\"input\", () => {\n                const $field = $(\"#new_password\");\n                password_quality($field.val(), $(\"#pw_strength .bar\"), $field);\n            });\n        }\n    });\n\n    function do_change_password(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const $change_password_error = $(\"#change_password_modal\").find(\"#dialog_error\");\n        $change_password_error.hide();\n\n        const data = {\n            old_password: $(\"#old_password\").val(),\n            new_password: $(\"#new_password\").val(),\n        };\n\n        const $new_pw_field = $(\"#new_password\");\n        const new_pw = data.new_password;\n        if (new_pw !== \"\") {\n            if (password_quality === undefined) {\n                // password_quality didn't load, for whatever reason.\n                settings_change_error(\n                    \"An internal error occurred; try reloading the page. \" +\n                        \"Sorry for the trouble!\",\n                );\n                return;\n            } else if (!password_quality(new_pw, undefined, $new_pw_field)) {\n                settings_change_error($t_html({defaultMessage: \"New password is too weak\"}));\n                return;\n            }\n        }\n\n        channel.set_password_change_in_progress(true);\n        const opts = {\n            success_continuation() {\n                channel.set_password_change_in_progress(false);\n                dialog_widget.close_modal();\n            },\n            error_continuation() {\n                dialog_widget.hide_dialog_spinner();\n                channel.set_password_change_in_progress(false);\n            },\n            $error_msg_element: $change_password_error,\n            failure_msg_html: null,\n        };\n        settings_ui.do_settings_change(\n            channel.patch,\n            \"/json/settings\",\n            data,\n            $(\"#account-settings-status\").expectOne(),\n            opts,\n        );\n        clear_password_change();\n    }\n\n    $(\"#full_name\").on(\"change\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const data = {};\n\n        data.full_name = $(\"#full_name\").val();\n\n        settings_ui.do_settings_change(\n            channel.patch,\n            \"/json/settings\",\n            data,\n            $(\".full-name-status\").expectOne(),\n        );\n    });\n\n    function do_change_email(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const $change_email_error = $(\"#change_email_modal\").find(\"#dialog_error\");\n        const data = {};\n        data.email = $(\"#change_email_container\").find(\"input[name='email']\").val();\n\n        const opts = {\n            success_continuation() {\n                if (page_params.development_environment) {\n                    const email_msg = render_settings_dev_env_email_access();\n                    ui_report.success(\n                        email_msg,\n                        $(\"#dev-account-settings-status\").expectOne(),\n                        4000,\n                    );\n                }\n                dialog_widget.close_modal();\n            },\n            error_continuation() {\n                dialog_widget.hide_dialog_spinner();\n            },\n            $error_msg_element: $change_email_error,\n            success_msg_html: $t_html(\n                {defaultMessage: \"Check your email ({email}) to confirm the new address.\"},\n                {email: data.email},\n            ),\n            sticky: true,\n        };\n        settings_ui.do_settings_change(\n            channel.patch,\n            \"/json/settings\",\n            data,\n            $(\"#account-settings-status\").expectOne(),\n            opts,\n        );\n    }\n\n    function change_email_post_render() {\n        const $input_elem = $(\"#change_email_container\").find(\"input[name='email']\");\n        const email = $(\"#change_email\").text().trim();\n        $input_elem.val(email);\n    }\n\n    $(\"#change_email\").on(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        if (!page_params.realm_email_changes_disabled || page_params.is_admin) {\n            dialog_widget.launch({\n                html_heading: $t_html({defaultMessage: \"Change email\"}),\n                html_body: render_change_email_modal(),\n                html_submit_button: $t_html({defaultMessage: \"Change\"}),\n                loading_spinner: true,\n                id: \"change_email_modal\",\n                form_id: \"change_email_container\",\n                on_click: do_change_email,\n                post_render: change_email_post_render,\n                on_shown() {\n                    $(\"#change_email_container input\").trigger(\"focus\");\n                },\n            });\n        }\n    });\n\n    $(\"#profile-settings\").on(\"click\", \".custom_user_field .remove_date\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const $field = $(e.target).closest(\".custom_user_field\").expectOne();\n        const field_id = Number.parseInt($field.attr(\"data-field-id\"), 10);\n        update_user_custom_profile_fields([field_id], channel.del);\n    });\n\n    $(\"#profile-settings\").on(\"change\", \".custom_user_field_value\", function (e) {\n        const fields = [];\n        const value = $(this).val();\n        const field_id = Number.parseInt(\n            $(e.target).closest(\".custom_user_field\").attr(\"data-field-id\"),\n            10,\n        );\n        if (value) {\n            fields.push({id: field_id, value});\n            update_user_custom_profile_fields(fields, channel.patch);\n        } else {\n            fields.push(field_id);\n            update_user_custom_profile_fields(fields, channel.del);\n        }\n    });\n\n    $(\"#user_deactivate_account_button\").on(\"click\", (e) => {\n        // This click event must not get propagated to parent container otherwise the modal\n        // will not show up because of a call to `close_active_modal` in `settings.js`.\n        e.preventDefault();\n        e.stopPropagation();\n\n        function handle_confirm() {\n            channel.del({\n                url: \"/json/users/me\",\n                success() {\n                    dialog_widget.hide_dialog_spinner();\n                    dialog_widget.close_modal();\n                    window.location.href = \"/login/\";\n                },\n                error(xhr) {\n                    const error_last_owner = $t_html({\n                        defaultMessage: \"Error: Cannot deactivate the only organization owner.\",\n                    });\n                    const error_last_user = $t_html(\n                        {\n                            defaultMessage:\n                                \"Error: Cannot deactivate the only user. You can deactivate the whole organization though in your <z-link>organization profile settings</z-link>.\",\n                        },\n                        {\n                            \"z-link\": (content_html) =>\n                                `<a target=\"_blank\" href=\"/#organization/organization-profile\">${content_html.join(\n                                    \"\",\n                                )}</a>`,\n                        },\n                    );\n                    let rendered_error_msg;\n                    if (xhr.responseJSON.code === \"CANNOT_DEACTIVATE_LAST_USER\") {\n                        if (xhr.responseJSON.is_last_owner) {\n                            rendered_error_msg = error_last_owner;\n                        } else {\n                            rendered_error_msg = error_last_user;\n                        }\n                    }\n                    dialog_widget.hide_dialog_spinner();\n                    dialog_widget.close_modal();\n                    $(\"#account-settings-status\")\n                        .addClass(\"alert-error\")\n                        .html(rendered_error_msg)\n                        .show();\n                },\n            });\n        }\n        const html_body = render_confirm_deactivate_own_user();\n        confirm_dialog.launch({\n            html_heading: $t_html({defaultMessage: \"Deactivate your account\"}),\n            html_body,\n            on_click: handle_confirm,\n            help_link: \"/help/deactivate-your-account\",\n            loading_spinner: true,\n        });\n    });\n\n    $(\"#show_my_user_profile_modal\").on(\"click\", (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        const user = people.get_by_user_id(people.my_current_user_id());\n        user_profile.show_user_profile(user);\n    });\n\n    function upload_avatar($file_input) {\n        const form_data = new FormData();\n\n        form_data.append(\"csrfmiddlewaretoken\", csrf_token);\n        for (const [i, file] of Array.prototype.entries.call($file_input[0].files)) {\n            form_data.append(\"file-\" + i, file);\n        }\n        display_avatar_upload_started();\n        channel.post({\n            url: \"/json/users/me/avatar\",\n            data: form_data,\n            cache: false,\n            processData: false,\n            contentType: false,\n            success() {\n                display_avatar_upload_complete();\n                $(\"#user-avatar-upload-widget .image_file_input_error\").hide();\n                $(\"#user-avatar-source\").hide();\n                // Rest of the work is done via the user_events -> avatar_url event we will get\n            },\n            error(xhr) {\n                display_avatar_upload_complete();\n                if (page_params.avatar_source === \"G\") {\n                    $(\"#user-avatar-source\").show();\n                }\n                const $error = $(\"#user-avatar-upload-widget .image_file_input_error\");\n                $error.text(JSON.parse(xhr.responseText).msg);\n                $error.show();\n            },\n        });\n    }\n\n    avatar.build_user_avatar_widget(upload_avatar);\n\n    $(\"#user_timezone\").val(user_settings.timezone);\n\n    $(\"#user_timezone\").on(\"change\", function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const data = {timezone: this.value};\n\n        settings_ui.do_settings_change(\n            channel.patch,\n            \"/json/settings\",\n            data,\n            $(\".timezone-setting-status\").expectOne(),\n        );\n    });\n\n    $(\"#privacy_settings_box\").on(\"change\", \"input\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const $input_elem = $(e.currentTarget);\n        const setting_name = $input_elem.attr(\"name\");\n        const checked = $input_elem.prop(\"checked\");\n\n        const data = {[setting_name]: checked};\n        settings_ui.do_settings_change(\n            channel.patch,\n            \"/json/settings\",\n            data,\n            $(\"#account-settings .privacy-setting-status\").expectOne(),\n        );\n    });\n}\n","import ClipboardJS from \"clipboard\";\nimport $ from \"jquery\";\n\nimport render_settings_deactivation_bot_modal from \"../templates/confirm_dialog/confirm_deactivate_bot.hbs\";\nimport render_add_new_bot_form from \"../templates/settings/add_new_bot_form.hbs\";\nimport render_bot_avatar_row from \"../templates/settings/bot_avatar_row.hbs\";\nimport render_edit_bot_form from \"../templates/settings/edit_bot_form.hbs\";\nimport render_settings_edit_embedded_bot_service from \"../templates/settings/edit_embedded_bot_service.hbs\";\nimport render_settings_edit_outgoing_webhook_service from \"../templates/settings/edit_outgoing_webhook_service.hbs\";\n\nimport * as avatar from \"./avatar\";\nimport * as blueslip from \"./blueslip\";\nimport * as bot_data from \"./bot_data\";\nimport * as channel from \"./channel\";\nimport {csrf_token} from \"./csrf\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport {DropdownListWidget} from \"./dropdown_list_widget\";\nimport {$t, $t_html} from \"./i18n\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as settings_config from \"./settings_config\";\nimport * as settings_users from \"./settings_users\";\nimport * as ui_report from \"./ui_report\";\nimport * as user_profile from \"./user_profile\";\n\nconst OUTGOING_WEBHOOK_BOT_TYPE = \"3\";\nconst EMBEDDED_BOT_TYPE = \"4\";\n\nexport function hide_errors() {\n    $(\"#bot_table_error\").hide();\n    $(\".bot_error\").hide();\n}\n\nconst focus_tab = {\n    active_bots_tab() {\n        $(\"#bots_lists_navbar .active\").removeClass(\"active\");\n        $(\"#bots_lists_navbar .active-bots-tab\").addClass(\"active\");\n        $(\"#active_bots_list\").show();\n        $(\"#inactive_bots_list\").hide();\n        hide_errors();\n    },\n    inactive_bots_tab() {\n        $(\"#bots_lists_navbar .active\").removeClass(\"active\");\n        $(\"#bots_lists_navbar .inactive-bots-tab\").addClass(\"active\");\n        $(\"#active_bots_list\").hide();\n        $(\"#inactive_bots_list\").show();\n        hide_errors();\n    },\n};\n\nexport function get_bot_info_div(bot_id) {\n    const sel = `.bot_info[data-user-id=\"${CSS.escape(bot_id)}\"]`;\n    return $(sel).expectOne();\n}\n\nexport function bot_error(bot_id, xhr) {\n    const $bot_info = get_bot_info_div(bot_id);\n    const $bot_error_div = $bot_info.find(\".bot_error\");\n    $bot_error_div.text(JSON.parse(xhr.responseText).msg);\n    $bot_error_div.show();\n    const $bot_box = $bot_info.closest(\".bot-information-box\");\n    $bot_box.scrollTop($bot_box[0].scrollHeight - $bot_box[0].clientHeight);\n}\n\nfunction add_bot_row(info) {\n    const $row = $(render_bot_avatar_row(info));\n    if (info.is_active) {\n        $(\"#active_bots_list\").append($row);\n    } else {\n        $(\"#inactive_bots_list\").append($row);\n    }\n}\n\nfunction is_local_part(value) {\n    // Adapted from Django's EmailValidator\n    return /^[\\w!#$%&'*+/=?^`{|}~-]+(\\.[\\w!#$%&'*+/=?^`{|}~-]+)*$/i.test(value);\n}\n\nexport function type_id_to_string(type_id) {\n    return page_params.bot_types.find((bot_type) => bot_type.type_id === type_id).name;\n}\n\nexport function render_bots() {\n    $(\"#active_bots_list\").empty();\n    $(\"#inactive_bots_list\").empty();\n\n    const all_bots_for_current_user = bot_data.get_all_bots_for_current_user();\n    let user_owns_an_active_bot = false;\n\n    for (const elem of all_bots_for_current_user) {\n        add_bot_row({\n            name: elem.full_name,\n            email: elem.email,\n            user_id: elem.user_id,\n            type: type_id_to_string(elem.bot_type),\n            avatar_url: elem.avatar_url,\n            api_key: elem.api_key,\n            is_active: elem.is_active,\n            zuliprc: \"zuliprc\", // Most browsers do not allow filename starting with `.`\n        });\n        user_owns_an_active_bot = user_owns_an_active_bot || elem.is_active;\n    }\n}\n\nexport function generate_zuliprc_uri(bot_id) {\n    const bot = bot_data.get(bot_id);\n    const data = generate_zuliprc_content(bot);\n    return encode_zuliprc_as_uri(data);\n}\n\nexport function encode_zuliprc_as_uri(zuliprc) {\n    return \"data:application/octet-stream;charset=utf-8,\" + encodeURIComponent(zuliprc);\n}\n\nexport function generate_zuliprc_content(bot) {\n    let token;\n    // For outgoing webhooks, include the token in the zuliprc.\n    // It's needed for authenticating to the Botserver.\n    if (bot.bot_type === 3) {\n        token = bot_data.get_services(bot.user_id)[0].token;\n    }\n    return (\n        \"[api]\" +\n        \"\\nemail=\" +\n        bot.email +\n        \"\\nkey=\" +\n        bot.api_key +\n        \"\\nsite=\" +\n        page_params.realm_uri +\n        (token === undefined ? \"\" : \"\\ntoken=\" + token) +\n        // Some tools would not work in files without a trailing new line.\n        \"\\n\"\n    );\n}\n\nexport function generate_botserverrc_content(email, api_key, token) {\n    return (\n        \"[]\" +\n        \"\\nemail=\" +\n        email +\n        \"\\nkey=\" +\n        api_key +\n        \"\\nsite=\" +\n        page_params.realm_uri +\n        \"\\ntoken=\" +\n        token +\n        \"\\n\"\n    );\n}\n\nexport const bot_creation_policy_values = {\n    admins_only: {\n        code: 3,\n        description: $t({defaultMessage: \"Admins\"}),\n    },\n    everyone: {\n        code: 1,\n        description: $t({defaultMessage: \"Admins, moderators and members\"}),\n    },\n    restricted: {\n        code: 2,\n        description: $t({\n            defaultMessage: \"Admins, moderators and members, but only admins can add generic bots\",\n        }),\n    },\n};\n\nexport function can_create_new_bots() {\n    if (page_params.is_admin) {\n        return true;\n    }\n\n    if (page_params.is_guest) {\n        return false;\n    }\n\n    return page_params.realm_bot_creation_policy !== bot_creation_policy_values.admins_only.code;\n}\n\nexport function update_bot_settings_tip() {\n    const permission_type = bot_creation_policy_values;\n    const current_permission = page_params.realm_bot_creation_policy;\n    let tip_text;\n    if (current_permission === permission_type.admins_only.code) {\n        tip_text = $t({\n            defaultMessage: \"Only organization administrators can add bots to this organization.\",\n        });\n    } else if (current_permission === permission_type.restricted.code) {\n        tip_text = $t({defaultMessage: \"Only organization administrators can add generic bots.\"});\n    } else {\n        tip_text = $t({defaultMessage: \"Anyone in this organization can add bots.\"});\n    }\n    $(\".bot-settings-tip\").text(tip_text);\n}\n\nfunction update_add_bot_button() {\n    if (can_create_new_bots()) {\n        $(\"#bot-settings .add-a-new-bot\").show();\n        $(\"#admin-bot-list .add-a-new-bot\").show();\n    } else {\n        $(\"#bot-settings .add-a-new-bot\").hide();\n        $(\"#admin-bot-list .add-a-new-bot\").hide();\n    }\n}\n\nexport function update_bot_permissions_ui() {\n    update_bot_settings_tip();\n    hide_errors();\n    update_add_bot_button();\n    $(\"#id_realm_bot_creation_policy\").val(page_params.realm_bot_creation_policy);\n}\n\nexport function add_a_new_bot() {\n    const html_body = render_add_new_bot_form({\n        bot_types: page_params.bot_types,\n        realm_embedded_bots: page_params.realm_embedded_bots,\n        realm_bot_domain: page_params.realm_bot_domain,\n    });\n\n    let create_avatar_widget;\n\n    function create_a_new_bot() {\n        const bot_type = $(\"#create_bot_type :selected\").val();\n        const full_name = $(\"#create_bot_name\").val();\n        const short_name = $(\"#create_bot_short_name\").val() || $(\"#create_bot_short_name\").text();\n        const payload_url = $(\"#create_payload_url\").val();\n        const interface_type = $(\"#create_interface_type\").val();\n        const service_name = $(\"#select_service_name :selected\").val();\n        const formData = new FormData();\n\n        formData.append(\"csrfmiddlewaretoken\", csrf_token);\n        formData.append(\"bot_type\", bot_type);\n        formData.append(\"full_name\", full_name);\n        formData.append(\"short_name\", short_name);\n\n        // If the selected bot_type is Outgoing webhook\n        if (bot_type === OUTGOING_WEBHOOK_BOT_TYPE) {\n            formData.append(\"payload_url\", JSON.stringify(payload_url));\n            formData.append(\"interface_type\", interface_type);\n        } else if (bot_type === EMBEDDED_BOT_TYPE) {\n            formData.append(\"service_name\", service_name);\n            const config_data = {};\n            $(`#config_inputbox [name*='${CSS.escape(service_name)}'] input`).each(function () {\n                config_data[$(this).attr(\"name\")] = $(this).val();\n            });\n            formData.append(\"config_data\", JSON.stringify(config_data));\n        }\n        for (const [i, file] of Array.prototype.entries.call(\n            $(\"#bot_avatar_file_input\")[0].files,\n        )) {\n            formData.append(\"file-\" + i, file);\n        }\n\n        channel.post({\n            url: \"/json/bots\",\n            data: formData,\n            cache: false,\n            processData: false,\n            contentType: false,\n            success() {\n                hide_errors();\n                create_avatar_widget.clear();\n                dialog_widget.close_modal();\n            },\n            error(xhr) {\n                ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, $(\"#dialog_error\"));\n                dialog_widget.hide_dialog_spinner();\n            },\n        });\n    }\n\n    function set_up_form_fields() {\n        $(\"#payload_url_inputbox\").hide();\n        $(\"#create_payload_url\").val(\"\");\n        $(\"#service_name_list\").hide();\n        $(\"#config_inputbox\").hide();\n        const selected_embedded_bot = \"converter\";\n        $(\"#select_service_name\").val(selected_embedded_bot); // TODO: Use 'select a bot'.\n        $(\"#config_inputbox\").children().hide();\n        $(`[name*='${CSS.escape(selected_embedded_bot)}']`).show();\n\n        create_avatar_widget = avatar.build_bot_create_widget();\n\n        $(\"#create_bot_type\").on(\"change\", () => {\n            const bot_type = $(\"#create_bot_type :selected\").val();\n            // For \"generic bot\" or \"incoming webhook\" both these fields need not be displayed.\n            $(\"#service_name_list\").hide();\n            $(\"#select_service_name\").removeClass(\"required\");\n            $(\"#config_inputbox\").hide();\n\n            $(\"#payload_url_inputbox\").hide();\n            $(\"#create_payload_url\").removeClass(\"required\");\n            if (bot_type === OUTGOING_WEBHOOK_BOT_TYPE) {\n                $(\"#payload_url_inputbox\").show();\n                $(\"#create_payload_url\").addClass(\"required\");\n            } else if (bot_type === EMBEDDED_BOT_TYPE) {\n                $(\"#service_name_list\").show();\n                $(\"#select_service_name\").addClass(\"required\");\n                $(\"#select_service_name\").trigger(\"change\");\n                $(\"#config_inputbox\").show();\n            }\n        });\n\n        $(\"#select_service_name\").on(\"change\", () => {\n            $(\"#config_inputbox\").children().hide();\n            const selected_bot = $(\"#select_service_name :selected\").val();\n            $(`[name*='${CSS.escape(selected_bot)}']`).show();\n        });\n    }\n\n    function validate_input(e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const bot_short_name = $(\"#create_bot_short_name\").val();\n\n        if (is_local_part(bot_short_name)) {\n            return true;\n        }\n        ui_report.error(\n            $t_html({\n                defaultMessage: \"Please only use characters that are valid in an email address\",\n            }),\n            undefined,\n            $(\"#dialog_error\"),\n        );\n        return false;\n    }\n\n    dialog_widget.launch({\n        form_id: \"create_bot_form\",\n        help_link: \"/help/add-a-bot-or-integration\",\n        html_body,\n        html_heading: $t_html({defaultMessage: \"Add a new bot\"}),\n        html_submit_button: $t_html({defaultMessage: \"Add\"}),\n        loading_spinner: true,\n        on_click: create_a_new_bot,\n        on_shown: () => $(\"#create_bot_type\").trigger(\"focus\"),\n        post_render: set_up_form_fields,\n        validate_input,\n    });\n}\n\nexport function confirm_bot_deactivation(bot_id, handle_confirm, loading_spinner) {\n    const bot = people.get_by_user_id(bot_id);\n    const html_body = render_settings_deactivation_bot_modal();\n\n    dialog_widget.launch({\n        html_heading: $t_html({defaultMessage: \"Deactivate {name}?\"}, {name: bot.full_name}),\n        help_link: \"/help/deactivate-or-reactivate-a-bot\",\n        html_body,\n        html_submit_button: $t_html({defaultMessage: \"Deactivate\"}),\n        on_click: handle_confirm,\n        loading_spinner,\n    });\n}\n\nexport function show_edit_bot_info_modal(user_id, from_user_info_popover) {\n    const bot = people.get_by_user_id(user_id);\n\n    if (!bot) {\n        return;\n    }\n\n    const html_body = render_edit_bot_form({\n        user_id,\n        email: bot.email,\n        full_name: bot.full_name,\n        user_role_values: settings_config.user_role_values,\n        disable_role_dropdown: !page_params.is_admin || (bot.is_owner && !page_params.is_owner),\n    });\n\n    let owner_widget;\n    let avatar_widget;\n\n    const bot_type = bot.bot_type.toString();\n    const service = bot_data.get_services(bot.user_id)[0];\n\n    function submit_bot_details() {\n        const role = Number.parseInt($(\"#bot-role-select\").val().trim(), 10);\n        const $full_name = $(\"#dialog_widget_modal\").find(\"input[name='full_name']\");\n        const url = \"/json/bots/\" + encodeURIComponent(bot.user_id);\n\n        const formData = new FormData();\n        formData.append(\"csrfmiddlewaretoken\", csrf_token);\n        formData.append(\"full_name\", $full_name.val());\n        formData.append(\"role\", JSON.stringify(role));\n\n        if (owner_widget === undefined) {\n            blueslip.error(\"get_bot_owner_widget not called\");\n        }\n        const human_user_id = owner_widget.value();\n        if (human_user_id) {\n            formData.append(\"bot_owner_id\", human_user_id);\n        }\n\n        if (bot_type === OUTGOING_WEBHOOK_BOT_TYPE) {\n            const service_payload_url = $(\"#edit_service_base_url\").val();\n            const service_interface = $(\"#edit_service_interface :selected\").val();\n            formData.append(\"service_payload_url\", JSON.stringify(service_payload_url));\n            formData.append(\"service_interface\", service_interface);\n        } else if (bot_type === EMBEDDED_BOT_TYPE && service !== undefined) {\n            const config_data = {};\n            $(\"#config_edit_inputbox input\").each(function () {\n                config_data[$(this).attr(\"name\")] = $(this).val();\n            });\n            formData.append(\"config_data\", JSON.stringify(config_data));\n        }\n\n        const $file_input = $(\"#bot-edit-form\").find(\".edit_bot_avatar_file_input\");\n        for (const [i, file] of Array.prototype.entries.call($file_input[0].files)) {\n            formData.append(\"file-\" + i, file);\n        }\n\n        channel.patch({\n            url,\n            data: formData,\n            processData: false,\n            contentType: false,\n            success() {\n                avatar_widget.clear();\n                dialog_widget.close_modal();\n            },\n            error(xhr) {\n                ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, $(\"#dialog_error\"));\n                dialog_widget.hide_dialog_spinner();\n            },\n        });\n    }\n\n    function edit_bot_post_render() {\n        const owner_id = bot_data.get(user_id).owner_id;\n\n        const user_ids = people.get_active_human_ids();\n        const users_list = user_ids.map((user_id) => ({\n            name: people.get_full_name(user_id),\n            value: user_id.toString(),\n        }));\n\n        const opts = {\n            widget_name: \"edit_bot_owner\",\n            data: users_list,\n            default_text: $t({defaultMessage: \"No owner\"}),\n            value: owner_id,\n        };\n        // Note: Rendering this is quite expensive in\n        // organizations with 10Ks of users.\n        owner_widget = new DropdownListWidget(opts);\n        owner_widget.setup();\n\n        $(\"#bot-role-select\").val(bot.role);\n        if (!page_params.is_owner) {\n            $(\"#bot-role-select\")\n                .find(`option[value=\"${CSS.escape(settings_config.user_role_values.owner.code)}\"]`)\n                .hide();\n        }\n\n        avatar_widget = avatar.build_bot_edit_widget($(\"#bot-edit-form\"));\n\n        if (bot_type === OUTGOING_WEBHOOK_BOT_TYPE) {\n            $(\"#service_data\").append(\n                render_settings_edit_outgoing_webhook_service({\n                    service,\n                }),\n            );\n            $(\"#edit_service_interface\").val(service.interface);\n        }\n        if (bot_type === EMBEDDED_BOT_TYPE) {\n            $(\"#service_data\").append(\n                render_settings_edit_embedded_bot_service({\n                    service,\n                }),\n            );\n        }\n\n        $(\"#bot-edit-form\").on(\"click\", \".deactivate_bot_button\", (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            const bot_id = $(\"#bot-edit-form\").data(\"user-id\");\n            function handle_confirm() {\n                const url = \"/json/bots/\" + encodeURIComponent(bot_id);\n                dialog_widget.submit_api_request(channel.del, url);\n            }\n            const open_deactivate_modal_callback = () =>\n                confirm_bot_deactivation(bot_id, handle_confirm, true);\n            dialog_widget.close_modal(open_deactivate_modal_callback);\n        });\n    }\n\n    dialog_widget.launch({\n        html_heading: $t_html({defaultMessage: \"Manage bot\"}),\n        html_body,\n        id: \"edit_bot_modal\",\n        on_click: submit_bot_details,\n        post_render: edit_bot_post_render,\n        loading_spinner: from_user_info_popover,\n    });\n}\n\nexport function set_up() {\n    $(\"#download_botserverrc\").on(\"click\", function () {\n        const OUTGOING_WEBHOOK_BOT_TYPE_INT = 3;\n        let content = \"\";\n\n        for (const bot of bot_data.get_all_bots_for_current_user()) {\n            if (bot.is_active && bot.bot_type === OUTGOING_WEBHOOK_BOT_TYPE_INT) {\n                const bot_token = bot_data.get_services(bot.user_id)[0].token;\n                content += generate_botserverrc_content(bot.email, bot.api_key, bot_token);\n            }\n        }\n\n        $(this).attr(\n            \"href\",\n            \"data:application/octet-stream;charset=utf-8,\" + encodeURIComponent(content),\n        );\n    });\n\n    // This needs to come before render_bots() in case the user\n    // has no active bots\n    focus_tab.active_bots_tab();\n    render_bots();\n\n    $(\"#active_bots_list\").on(\"click\", \"button.deactivate_bot\", (e) => {\n        const bot_id = Number.parseInt($(e.currentTarget).attr(\"data-user-id\"), 10);\n\n        function handle_confirm() {\n            const url = \"/json/bots/\" + encodeURIComponent(bot_id);\n            const opts = {\n                success_continuation() {\n                    const $row = $(e.currentTarget).closest(\"li\");\n                    $row.hide(\"slow\", () => {\n                        $row.remove();\n                    });\n                },\n            };\n            dialog_widget.submit_api_request(channel.del, url, {}, opts);\n        }\n        confirm_bot_deactivation(bot_id, handle_confirm, true);\n    });\n\n    $(\"#inactive_bots_list\").on(\"click\", \"button.reactivate_bot\", (e) => {\n        const user_id = Number.parseInt($(e.currentTarget).attr(\"data-user-id\"), 10);\n        e.stopPropagation();\n        e.preventDefault();\n\n        function handle_confirm() {\n            channel.post({\n                url: \"/json/users/\" + encodeURIComponent(user_id) + \"/reactivate\",\n                success() {\n                    dialog_widget.close_modal();\n                },\n                error(xhr) {\n                    ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, $(\"#dialog_error\"));\n                    dialog_widget.hide_dialog_spinner();\n                },\n            });\n        }\n\n        settings_users.confirm_reactivation(user_id, handle_confirm, true);\n    });\n\n    $(\"#active_bots_list\").on(\"click\", \"button.regenerate_bot_api_key\", (e) => {\n        const bot_id = Number.parseInt($(e.currentTarget).attr(\"data-user-id\"), 10);\n        channel.post({\n            url: \"/json/bots/\" + encodeURIComponent(bot_id) + \"/api_key/regenerate\",\n            success(data) {\n                const $row = $(e.currentTarget).closest(\"li\");\n                $row.find(\".api_key\").find(\".value\").text(data.api_key);\n                $row.find(\"api_key_error\").hide();\n            },\n            error(xhr) {\n                const $row = $(e.currentTarget).closest(\"li\");\n                $row.find(\".api_key_error\").text(JSON.parse(xhr.responseText).msg).show();\n            },\n        });\n    });\n\n    $(\"#active_bots_list\").on(\"click\", \"button.open_edit_bot_form\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const $li = $(e.currentTarget).closest(\"li\");\n        const bot_id = Number.parseInt($li.find(\".bot_info\").attr(\"data-user-id\"), 10);\n        show_edit_bot_info_modal(bot_id, false);\n    });\n\n    $(\"#active_bots_list\").on(\"click\", \"a.download_bot_zuliprc\", function () {\n        const $bot_info = $(this).closest(\".bot-information-box\").find(\".bot_info\");\n        const bot_id = Number.parseInt($bot_info.attr(\"data-user-id\"), 10);\n        $(this).attr(\"href\", generate_zuliprc_uri(bot_id));\n    });\n\n    $(\"#active_bots_list\").on(\"click\", \"button.open_bots_subscribed_streams\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const bot_id = Number.parseInt($(e.currentTarget).attr(\"data-user-id\"), 10);\n        const bot = people.get_by_user_id(bot_id);\n        user_profile.show_user_profile(bot, \"user-profile-streams-tab\");\n    });\n\n    new ClipboardJS(\"#copy_zuliprc\", {\n        text(trigger) {\n            const $bot_info = $(trigger).closest(\".bot-information-box\").find(\".bot_info\");\n            const bot_id = Number.parseInt($bot_info.attr(\"data-user-id\"), 10);\n            const bot = bot_data.get(bot_id);\n            const data = generate_zuliprc_content(bot);\n            return data;\n        },\n    });\n\n    $(\"#bots_lists_navbar .active-bots-tab\").on(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        focus_tab.active_bots_tab();\n    });\n\n    $(\"#bots_lists_navbar .inactive-bots-tab\").on(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        focus_tab.inactive_bots_tab();\n    });\n\n    $(\"#bot-settings .add-a-new-bot\").on(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        add_a_new_bot();\n    });\n}\n","import $ from \"jquery\";\nimport Cookies from \"js-cookie\"; // eslint-disable-line import/no-unresolved\n\nimport render_dialog_default_language from \"../templates/default_language_modal.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport * as emojisets from \"./emojisets\";\nimport * as hash_util from \"./hash_util\";\nimport {$t_html, get_language_list_columns, get_language_name} from \"./i18n\";\nimport * as loading from \"./loading\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\nimport * as settings_org from \"./settings_org\";\nimport * as settings_ui from \"./settings_ui\";\nimport * as ui_report from \"./ui_report\";\nimport {user_settings} from \"./user_settings\";\n\nconst meta = {\n    loaded: false,\n};\n\nexport const user_settings_panel = {};\n\nexport let user_default_language_name;\n\nexport function set_default_language_name(name) {\n    user_default_language_name = name;\n}\n\nfunction change_display_setting(data, $status_el, success_msg_html, sticky) {\n    const status_is_sticky = $status_el.data(\"is_sticky\");\n    const display_message_html = status_is_sticky\n        ? $status_el.data(\"sticky_msg_html\")\n        : success_msg_html;\n    const opts = {\n        success_msg_html: display_message_html,\n        sticky: status_is_sticky || sticky,\n    };\n\n    if (sticky) {\n        $status_el.data(\"is_sticky\", true);\n        $status_el.data(\"sticky_msg_html\", success_msg_html);\n    }\n    settings_ui.do_settings_change(channel.patch, \"/json/settings\", data, $status_el, opts);\n}\n\nfunction spectator_default_language_modal_post_render() {\n    $(\"#language_selection_modal\")\n        .find(\".language\")\n        .on(\"click\", (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            dialog_widget.close_modal();\n\n            const $link = $(e.target).closest(\"a[data-code]\");\n            Cookies.set(page_params.language_cookie_name, $link.attr(\"data-code\"));\n            window.location.reload();\n        });\n}\n\nfunction org_notification_default_language_modal_post_render() {\n    $(\"#language_selection_modal\")\n        .find(\".language\")\n        .on(\"click\", (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            dialog_widget.close_modal();\n\n            const $link = $(e.target).closest(\"a[data-code]\");\n            const setting_value = $link.attr(\"data-code\");\n            const new_language = $link.attr(\"data-name\");\n            const $language_element = $(\n                \"#org-notifications .language_selection_widget .language_selection_button span\",\n            );\n            $language_element.text(new_language);\n            $language_element.attr(\"data-language-code\", setting_value);\n            settings_org.save_discard_widget_status_handler($(\"#org-notifications\"));\n        });\n}\n\nfunction user_default_language_modal_post_render() {\n    $(\"#language_selection_modal\")\n        .find(\".language\")\n        .on(\"click\", (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            dialog_widget.close_modal();\n\n            const $link = $(e.target).closest(\"a[data-code]\");\n            const setting_value = $link.attr(\"data-code\");\n            const data = {default_language: setting_value};\n\n            const new_language = $link.attr(\"data-name\");\n            $(\n                \"#user-display-settings .language_selection_widget .language_selection_button span\",\n            ).text(new_language);\n\n            change_display_setting(\n                data,\n                $(\"#settings_content\").find(\".lang-time-settings-status\"),\n                $t_html(\n                    {\n                        defaultMessage:\n                            \"Saved. Please <z-link>reload</z-link> for the change to take effect.\",\n                    },\n                    {\n                        \"z-link\": (content_html) =>\n                            `<a class='reload_link'>${content_html.join(\"\")}</a>`,\n                    },\n                ),\n                true,\n            );\n        });\n}\n\nfunction default_language_modal_post_render() {\n    if (page_params.is_spectator) {\n        spectator_default_language_modal_post_render();\n    } else if (hash_util.get_current_hash_category() === \"organization\") {\n        org_notification_default_language_modal_post_render();\n    } else {\n        user_default_language_modal_post_render();\n    }\n}\n\nexport function launch_default_language_setting_modal() {\n    let selected_language = user_settings.default_language;\n\n    if (hash_util.get_current_hash_category() === \"organization\") {\n        selected_language = page_params.realm_default_language;\n    }\n\n    const html_body = render_dialog_default_language({\n        language_list: get_language_list_columns(selected_language),\n    });\n\n    dialog_widget.launch({\n        html_heading: $t_html({defaultMessage: \"Select language\"}),\n        html_body,\n        html_submit_button: $t_html({defaultMessage: \"Close\"}),\n        id: \"language_selection_modal\",\n        close_on_submit: true,\n        focus_submit_on_open: true,\n        single_footer_button: true,\n        post_render: default_language_modal_post_render,\n        on_click() {},\n    });\n}\n\nexport function set_up(settings_panel) {\n    meta.loaded = true;\n    const $container = $(settings_panel.container);\n    const settings_object = settings_panel.settings_object;\n    const for_realm_settings = settings_panel.for_realm_settings;\n\n    $container.find(\".advanced-settings-status\").hide();\n\n    // Select current values for enum/select type fields. For boolean\n    // fields, the current value is set automatically in the template.\n    $container\n        .find(\".setting_demote_inactive_streams\")\n        .val(settings_object.demote_inactive_streams);\n    $container.find(\".setting_color_scheme\").val(settings_object.color_scheme);\n    $container.find(\".setting_default_view\").val(settings_object.default_view);\n    $container\n        .find(\".setting_twenty_four_hour_time\")\n        .val(JSON.stringify(settings_object.twenty_four_hour_time));\n    $container\n        .find(`.setting_emojiset_choice[value=\"${CSS.escape(settings_object.emojiset)}\"]`)\n        .prop(\"checked\", true);\n    $container\n        .find(`.setting_user_list_style_choice[value=${settings_object.user_list_style}]`)\n        .prop(\"checked\", true);\n\n    if (for_realm_settings) {\n        // For the realm-level defaults page, we use the common\n        // settings_org.js handlers, so we can return early here.\n        return;\n    }\n\n    // Common handler for sending requests to the server when an input\n    // element is changed.\n    $container.on(\"change\", \"input[type=checkbox], select\", function (e) {\n        const $input_elem = $(e.currentTarget);\n        const setting = $input_elem.attr(\"name\");\n        const data = {};\n        data[setting] = settings_org.get_input_element_value(this);\n        const $status_element = $input_elem\n            .closest(\".subsection-parent\")\n            .find(\".alert-notification\");\n        change_display_setting(data, $status_element);\n    });\n\n    $container.find(\".setting_emojiset_choice\").on(\"click\", function () {\n        const data = {emojiset: $(this).val()};\n        const current_emojiset = settings_object.emojiset;\n        if (current_emojiset === data.emojiset) {\n            return;\n        }\n        const $spinner = $container.find(\".theme-settings-status\").expectOne();\n        loading.make_indicator($spinner, {text: settings_ui.strings.saving});\n\n        channel.patch({\n            url: \"/json/settings\",\n            data,\n            success() {},\n            error(xhr) {\n                ui_report.error(\n                    settings_ui.strings.failure_html,\n                    xhr,\n                    $container.find(\".theme-settings-status\").expectOne(),\n                );\n            },\n        });\n    });\n\n    $container.find(\".setting_user_list_style_choice\").on(\"click\", function () {\n        const data = {user_list_style: $(this).val()};\n        const current_user_list_style = settings_object.user_list_style;\n        if (current_user_list_style === data.user_list_style) {\n            return;\n        }\n        const $spinner = $container.find(\".theme-settings-status\").expectOne();\n        loading.make_indicator($spinner, {text: settings_ui.strings.saving});\n\n        channel.patch({\n            url: \"/json/settings\",\n            data,\n            success() {},\n            error(xhr) {\n                ui_report.error(\n                    settings_ui.strings.failure_html,\n                    xhr,\n                    $container.find(\".theme-settings-status\").expectOne(),\n                );\n            },\n        });\n    });\n}\n\nexport async function report_emojiset_change(settings_panel) {\n    // TODO: Clean up how this works so we can use\n    // change_display_setting.  The challenge is that we don't want to\n    // report success before the server_events request returns that\n    // causes the actual sprite sheet to change.  The current\n    // implementation is wrong, though, in that it displays the UI\n    // update in all active browser windows.\n    await emojisets.select(settings_panel.settings_object.emojiset);\n\n    const $spinner = $(settings_panel.container).find(\".theme-settings-status\");\n    if ($spinner.length) {\n        loading.destroy_indicator($spinner);\n        ui_report.success(\n            $t_html({defaultMessage: \"Emoji set changed successfully!\"}),\n            $spinner.expectOne(),\n        );\n        $spinner.expectOne();\n        settings_ui.display_checkmark($spinner);\n    }\n}\n\nexport async function report_user_list_style_change(settings_panel) {\n    // TODO: Clean up how this works so we can use\n    // change_display_setting.  The challenge is that we don't want to\n    // report success before the server_events request returns that\n    // causes the actual sprite sheet to change.  The current\n    // implementation is wrong, though, in that it displays the UI\n    // update in all active browser windows.\n    const $spinner = $(settings_panel.container).find(\".theme-settings-status\");\n    if ($spinner.length) {\n        loading.destroy_indicator($spinner);\n        ui_report.success(\n            $t_html({defaultMessage: \"User list style changed successfully!\"}),\n            $spinner.expectOne(),\n        );\n        $spinner.expectOne();\n        settings_ui.display_checkmark($spinner);\n    }\n}\n\nexport function update_page(property) {\n    if (!overlays.settings_open()) {\n        return;\n    }\n    const $container = $(user_settings_panel.container);\n    let value = user_settings[property];\n\n    // The default_language button text updates to the language\n    // name and not the value of the user_settings property.\n    if (property === \"default_language\") {\n        $container.find(\".default_language_name\").text(user_default_language_name);\n        return;\n    }\n\n    // settings_org.set_input_element_value doesn't support radio\n    // button widgets like these.\n    if (property === \"emojiset\" || property === \"user_list_style\") {\n        $container.find(`input[value=${CSS.escape(value)}]`).prop(\"checked\", true);\n        return;\n    }\n\n    // The twenty_four_hour_time setting is represented as a boolean\n    // in the API, but a dropdown with \"true\"/\"false\" as strings in\n    // the UI, so we need to convert its format here.\n    if (property === \"twenty_four_hour_time\") {\n        value = value.toString();\n    }\n\n    const $input_elem = $container.find(`[name=${CSS.escape(property)}]`);\n    settings_org.set_input_element_value($input_elem, value);\n}\n\nexport function initialize() {\n    const user_language_name = get_language_name(user_settings.default_language);\n    set_default_language_name(user_language_name);\n\n    user_settings_panel.container = \"#user-display-settings\";\n    user_settings_panel.settings_object = user_settings;\n    user_settings_panel.for_realm_settings = false;\n}\n","/* eslint-disable no-unused-vars */\nimport $ from \"jquery\";\n\n// import emoji_codes from \"../generated/emoji/emoji_codes.json\";\nimport render_confirm_deactivate_custom_emoji from \"../templates/confirm_dialog/confirm_deactivate_custom_emoji.hbs\";\nimport emoji_settings_warning_modal from \"../templates/confirm_dialog/confirm_emoji_settings_warning.hbs\";\nimport render_admin_emoji_list from \"../templates/settings/admin_emoji_list.hbs\";\nimport render_settings_emoji_settings_tip from \"../templates/settings/emoji_settings_tip.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport * as emoji from \"./emoji\";\nimport {$t_html} from \"./i18n\";\nimport * as ListWidget from \"./list_widget\";\nimport * as loading from \"./loading\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as settings_config from \"./settings_config\";\nimport * as settings_data from \"./settings_data\";\nimport * as ui from \"./ui\";\nimport * as ui_report from \"./ui_report\";\nimport * as upload_widget from \"./upload_widget\";\n\nconst meta = {\n    loaded: false,\n};\n\nfunction can_delete_emoji(emoji) {\n    if (page_params.is_admin) {\n        return true;\n    }\n    if (emoji.author_id === null) {\n        // If we don't have the author information then only admin is allowed to disable that emoji.\n        return false;\n    }\n    if (people.is_my_user_id(emoji.author_id)) {\n        return true;\n    }\n    return false;\n}\n\nexport function update_custom_emoji_ui() {\n    const rendered_tip = render_settings_emoji_settings_tip({\n        realm_add_custom_emoji_policy: page_params.realm_add_custom_emoji_policy,\n        policy_values: settings_config.common_policy_values,\n    });\n    $(\"#emoji-settings\").find(\".emoji-settings-tip-container\").html(rendered_tip);\n    if (!settings_data.user_can_add_custom_emoji()) {\n        $(\".add-emoji-text\").hide();\n        $(\".admin-emoji-form\").hide();\n    } else {\n        $(\".add-emoji-text\").show();\n        $(\".admin-emoji-form\").show();\n    }\n\n    populate_emoji();\n}\n\nexport function reset() {\n    meta.loaded = false;\n}\n\nfunction sort_author_full_name(a, b) {\n    if (a.author.full_name > b.author.full_name) {\n        return 1;\n    } else if (a.author.full_name === b.author.full_name) {\n        return 0;\n    }\n    return -1;\n}\n\nfunction is_default_emoji(emoji_name) {\n    // return emoji_codes.names.includes(emoji_name);\n}\n\nfunction is_custom_emoji(emoji_name) {\n    const emoji_data = emoji.get_server_realm_emoji_data();\n    for (const emoji of Object.values(emoji_data)) {\n        if (emoji.name === emoji_name && !emoji.deactivated) {\n            return true;\n        }\n    }\n    return false;\n}\n\nexport function populate_emoji() {\n    if (!meta.loaded) {\n        return;\n    }\n\n    const emoji_data = emoji.get_server_realm_emoji_data();\n\n    for (const emoji of Object.values(emoji_data)) {\n        // Add people.js data for the user here.\n        if (emoji.author_id !== null) {\n            emoji.author = people.get_by_user_id(emoji.author_id);\n        } else {\n            emoji.author = null;\n        }\n    }\n\n    const $emoji_table = $(\"#admin_emoji_table\").expectOne();\n    ListWidget.create($emoji_table, Object.values(emoji_data), {\n        name: \"emoji_list\",\n        modifier(item) {\n            if (item.deactivated !== true) {\n                return render_admin_emoji_list({\n                    emoji: {\n                        name: item.name,\n                        display_name: item.name.replace(/_/g, \" \"),\n                        source_url: item.source_url,\n                        author: item.author || \"\",\n                        can_delete_emoji: can_delete_emoji(item),\n                    },\n                });\n            }\n            return \"\";\n        },\n        filter: {\n            $element: $emoji_table.closest(\".settings-section\").find(\".search\"),\n            predicate(item, value) {\n                return item.name.toLowerCase().includes(value);\n            },\n            onupdate() {\n                ui.reset_scrollbar($emoji_table);\n            },\n        },\n        $parent_container: $(\"#emoji-settings\").expectOne(),\n        sort_fields: {\n            author_full_name: sort_author_full_name,\n        },\n        init_sort: [\"alphabetic\", \"name\"],\n        $simplebar_container: $(\"#emoji-settings .progressive-table-wrapper\"),\n    });\n\n    loading.destroy_indicator($(\"#admin_page_emoji_loading_indicator\"));\n}\n\nexport function build_emoji_upload_widget() {\n    const get_file_input = function () {\n        return $(\"#emoji_file_input\");\n    };\n\n    const $file_name_field = $(\"#emoji-file-name\");\n    const $input_error = $(\"#emoji_file_input_error\");\n    const $clear_button = $(\"#emoji_image_clear_button\");\n    const $upload_button = $(\"#emoji_upload_button\");\n    const $preview_text = $(\"#emoji_preview_text\");\n    const $preview_image = $(\"#emoji_preview_image\");\n\n    return upload_widget.build_widget(\n        get_file_input,\n        $file_name_field,\n        $input_error,\n        $clear_button,\n        $upload_button,\n        $preview_text,\n        $preview_image,\n    );\n}\n\nexport function set_up() {\n    meta.loaded = true;\n\n    loading.make_indicator($(\"#admin_page_emoji_loading_indicator\"));\n\n    // Populate emoji table\n    populate_emoji();\n\n    $(\".admin_emoji_table\").on(\"click\", \".delete\", function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const $btn = $(this);\n        const url = \"/json/realm/emoji/\" + encodeURIComponent($btn.attr(\"data-emoji-name\"));\n        const html_body = render_confirm_deactivate_custom_emoji();\n\n        const opts = {\n            success_continuation() {\n                const $row = $btn.parents(\"tr\");\n                $row.remove();\n            },\n        };\n\n        confirm_dialog.launch({\n            html_heading: $t_html({defaultMessage: \"Deactivate custom emoji?\"}),\n            html_body,\n            id: \"confirm_deactivate_custom_emoji_modal\",\n            on_click: () => dialog_widget.submit_api_request(channel.del, url, {}, opts),\n            loading_spinner: true,\n        });\n    });\n\n    const emoji_widget = build_emoji_upload_widget();\n\n    $(\".organization form.admin-emoji-form\")\n        .off(\"submit\")\n        .on(\"submit\", function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            const $emoji_status = $(\"#admin-emoji-status\");\n            const emoji = {};\n\n            function submit_custom_emoji_request() {\n                $(\"#admin_emoji_submit\").prop(\"disabled\", true);\n                const formData = new FormData();\n                for (const [i, file] of Array.prototype.entries.call(\n                    $(\"#emoji_file_input\")[0].files,\n                )) {\n                    formData.append(\"file-\" + i, file);\n                }\n\n                channel.post({\n                    url: \"/json/realm/emoji/\" + encodeURIComponent(emoji.name),\n                    data: formData,\n                    cache: false,\n                    processData: false,\n                    contentType: false,\n                    success() {\n                        $(\"#admin-emoji-status\").hide();\n                        ui_report.success(\n                            $t_html({defaultMessage: \"Custom emoji added!\"}),\n                            $emoji_status,\n                        );\n                        $(\"form.admin-emoji-form input[type='text']\").val(\"\");\n                        $(\"#admin_emoji_submit\").prop(\"disabled\", false);\n                        emoji_widget.clear();\n                    },\n                    error(xhr) {\n                        $(\"#admin-emoji-status\").hide();\n                        const errors = JSON.parse(xhr.responseText).msg;\n                        xhr.responseText = JSON.stringify({msg: errors});\n                        ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, $emoji_status);\n                        $(\"#admin_emoji_submit\").prop(\"disabled\", false);\n                    },\n                });\n            }\n\n            for (const obj of $(this).serializeArray()) {\n                emoji[obj.name] = obj.value;\n            }\n\n            if (emoji.name.trim() === \"\") {\n                ui_report.client_error(\n                    $t_html({defaultMessage: \"Failed: Emoji name is required.\"}),\n                    $emoji_status,\n                );\n                return;\n            }\n\n            if (is_custom_emoji(emoji.name)) {\n                ui_report.client_error(\n                    $t_html({\n                        defaultMessage: \"Failed: A custom emoji with this name already exists.\",\n                    }),\n                    $emoji_status,\n                );\n                return;\n            }\n\n            if (is_default_emoji(emoji.name)) {\n                const html_body = emoji_settings_warning_modal({\n                    emoji_name: emoji.name,\n                });\n\n                confirm_dialog.launch({\n                    html_heading: $t_html({defaultMessage: \"Override built-in emoji?\"}),\n                    html_body,\n                    on_click: submit_custom_emoji_request,\n                });\n            } else {\n                submit_custom_emoji_request();\n            }\n        });\n}\n","import $ from \"jquery\";\n\nimport render_confirm_delete_data_export from \"../templates/confirm_dialog/confirm_delete_data_export.hbs\";\nimport render_admin_export_list from \"../templates/settings/admin_export_list.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport {$t_html} from \"./i18n\";\nimport * as ListWidget from \"./list_widget\";\nimport * as loading from \"./loading\";\nimport * as people from \"./people\";\nimport * as timerender from \"./timerender\";\nimport * as ui from \"./ui\";\nimport * as ui_report from \"./ui_report\";\n\nconst meta = {\n    loaded: false,\n};\n\nexport function reset() {\n    meta.loaded = false;\n}\n\nfunction sort_user(a, b) {\n    const a_name = people.get_full_name(a.acting_user_id).toLowerCase();\n    const b_name = people.get_full_name(b.acting_user_id).toLowerCase();\n    if (a_name > b_name) {\n        return 1;\n    } else if (a_name === b_name) {\n        return 0;\n    }\n    return -1;\n}\n\nexport function populate_exports_table(exports) {\n    if (!meta.loaded) {\n        return;\n    }\n\n    const $exports_table = $(\"#admin_exports_table\").expectOne();\n    ListWidget.create($exports_table, Object.values(exports), {\n        name: \"admin_exports_list\",\n        modifier(data) {\n            let failed_timestamp = data.failed_timestamp;\n            let deleted_timestamp = data.deleted_timestamp;\n\n            if (failed_timestamp !== null) {\n                failed_timestamp = timerender.last_seen_status_from_date(\n                    new Date(failed_timestamp * 1000),\n                );\n            }\n\n            if (deleted_timestamp !== null) {\n                deleted_timestamp = timerender.last_seen_status_from_date(\n                    new Date(deleted_timestamp * 1000),\n                );\n            }\n\n            return render_admin_export_list({\n                realm_export: {\n                    id: data.id,\n                    acting_user: people.get_full_name(data.acting_user_id),\n                    // Convert seconds -> milliseconds\n                    event_time: timerender.last_seen_status_from_date(\n                        new Date(data.export_time * 1000),\n                    ),\n                    url: data.export_url,\n                    time_failed: failed_timestamp,\n                    pending: data.pending,\n                    time_deleted: deleted_timestamp,\n                },\n            });\n        },\n        filter: {\n            $element: $exports_table.closest(\".settings-section\").find(\".search\"),\n            predicate(item, value) {\n                return people.get_full_name(item.acting_user_id).toLowerCase().includes(value);\n            },\n            onupdate() {\n                ui.reset_scrollbar($exports_table);\n            },\n        },\n        $parent_container: $(\"#data-exports\").expectOne(),\n        init_sort: [sort_user],\n        sort_fields: {\n            user: sort_user,\n        },\n        $simplebar_container: $(\"#data-exports .progressive-table-wrapper\"),\n    });\n\n    const $spinner = $(\".export_row .export_url_spinner\");\n    if ($spinner.length) {\n        loading.make_indicator($spinner);\n    } else {\n        loading.destroy_indicator($spinner);\n    }\n}\n\nexport function set_up() {\n    meta.loaded = true;\n\n    $(\"#export-data\").on(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const $export_status = $(\"#export_status\");\n\n        channel.post({\n            url: \"/json/export/realm\",\n            success() {\n                ui_report.success(\n                    $t_html({defaultMessage: \"Export started. Check back in a few minutes.\"}),\n                    $export_status,\n                    4000,\n                );\n            },\n            error(xhr) {\n                ui_report.error($t_html({defaultMessage: \"Export failed\"}), xhr, $export_status);\n            },\n        });\n    });\n\n    // Do an initial population of the table\n    channel.get({\n        url: \"/json/export/realm\",\n        success(data) {\n            populate_exports_table(data.exports);\n        },\n    });\n\n    $(\".admin_exports_table\").on(\"click\", \".delete\", function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const $btn = $(this);\n        const url = \"/json/export/realm/\" + encodeURIComponent($btn.attr(\"data-export-id\"));\n        const html_body = render_confirm_delete_data_export();\n\n        confirm_dialog.launch({\n            html_heading: $t_html({defaultMessage: \"Delete data export?\"}),\n            html_body,\n            on_click: () => dialog_widget.submit_api_request(channel.del, url),\n            loading_spinner: true,\n        });\n    });\n}\n","import $ from \"jquery\";\n\nimport render_settings_resend_invite_modal from \"../templates/confirm_dialog/confirm_resend_invite.hbs\";\nimport render_settings_revoke_invite_modal from \"../templates/confirm_dialog/confirm_revoke_invite.hbs\";\nimport render_admin_invites_list from \"../templates/settings/admin_invites_list.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as ListWidget from \"./list_widget\";\nimport * as loading from \"./loading\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as settings_config from \"./settings_config\";\nimport * as timerender from \"./timerender\";\nimport * as ui_report from \"./ui_report\";\nimport * as util from \"./util\";\n\nconst meta = {\n    loaded: false,\n};\n\nexport function reset() {\n    meta.loaded = false;\n}\n\nfunction failed_listing_invites(xhr) {\n    loading.destroy_indicator($(\"#admin_page_invites_loading_indicator\"));\n    ui_report.error(\n        $t_html({defaultMessage: \"Error listing invites\"}),\n        xhr,\n        $(\"#invites-field-status\"),\n    );\n}\n\nfunction add_invited_as_text(invites) {\n    for (const data of invites) {\n        data.invited_as_text = settings_config.user_role_map.get(data.invited_as);\n    }\n}\n\nfunction sort_invitee(a, b) {\n    // multi-invite links don't have an email field,\n    // so we set them to empty strings to let them\n    // sort to the top\n    const str1 = (a.email || \"\").toUpperCase();\n    const str2 = (b.email || \"\").toUpperCase();\n\n    return util.strcmp(str1, str2);\n}\n\nfunction populate_invites(invites_data) {\n    if (!meta.loaded) {\n        return;\n    }\n\n    add_invited_as_text(invites_data.invites);\n\n    const $invites_table = $(\"#admin_invites_table\").expectOne();\n    ListWidget.create($invites_table, invites_data.invites, {\n        name: \"admin_invites_list\",\n        modifier(item) {\n            item.invited_absolute_time = timerender.absolute_time(item.invited * 1000);\n            if (item.expiry_date !== null) {\n                item.expiry_date_absolute_time = timerender.absolute_time(item.expiry_date * 1000);\n            }\n            item.is_admin = page_params.is_admin;\n            item.disable_buttons =\n                item.invited_as === settings_config.user_role_values.owner.code &&\n                !page_params.is_owner;\n            item.referrer_name = people.get_by_user_id(item.invited_by_user_id).full_name;\n            return render_admin_invites_list({invite: item});\n        },\n        filter: {\n            $element: $invites_table.closest(\".settings-section\").find(\".search\"),\n            predicate(item, value) {\n                const referrer = people.get_by_user_id(item.invited_by_user_id);\n                const referrer_email = referrer.email;\n                const referrer_name = referrer.full_name;\n                const referrer_name_matched = referrer_name.toLowerCase().includes(value);\n                const referrer_email_matched = referrer_email.toLowerCase().includes(value);\n                if (item.is_multiuse) {\n                    return referrer_name_matched || referrer_email_matched;\n                }\n                const invitee_email_matched = item.email.toLowerCase().includes(value);\n                return referrer_email_matched || referrer_name_matched || invitee_email_matched;\n            },\n        },\n        $parent_container: $(\"#admin-invites-list\").expectOne(),\n        init_sort: [sort_invitee],\n        sort_fields: {\n            invitee: sort_invitee,\n        },\n        $simplebar_container: $(\"#admin-invites-list .progressive-table-wrapper\"),\n    });\n\n    loading.destroy_indicator($(\"#admin_page_invites_loading_indicator\"));\n}\n\nfunction do_revoke_invite() {\n    const modal_invite_id = $(\".dialog_submit_button\").attr(\"data-invite-id\");\n    const modal_is_multiuse = $(\".dialog_submit_button\").attr(\"data-is-multiuse\");\n    const $revoke_button = meta.$current_revoke_invite_user_modal_row.find(\"button.revoke\");\n\n    if (modal_invite_id !== meta.invite_id || modal_is_multiuse !== meta.is_multiuse) {\n        blueslip.error(\"Invite revoking canceled due to non-matching fields.\");\n        ui_report.client_error(\n            $t_html({\n                defaultMessage: \"Resending encountered an error. Please reload and try again.\",\n            }),\n            $(\"#home-error\"),\n        );\n    }\n\n    $revoke_button.prop(\"disabled\", true).text($t({defaultMessage: \"Working…\"}));\n    let url = \"/json/invites/\" + meta.invite_id;\n\n    if (modal_is_multiuse === \"true\") {\n        url = \"/json/invites/multiuse/\" + meta.invite_id;\n    }\n    channel.del({\n        url,\n        error(xhr) {\n            ui_report.generic_row_button_error(xhr, $revoke_button);\n        },\n        success() {\n            meta.$current_revoke_invite_user_modal_row.remove();\n        },\n    });\n}\n\nfunction do_resend_invite() {\n    const modal_invite_id = $(\".dialog_submit_button\").attr(\"data-invite-id\");\n    const $resend_button = meta.$current_resend_invite_user_modal_row.find(\"button.resend\");\n\n    if (modal_invite_id !== meta.invite_id) {\n        blueslip.error(\"Invite resending canceled due to non-matching fields.\");\n        ui_report.client_error(\n            $t_html({\n                defaultMessage: \"Resending encountered an error. Please reload and try again.\",\n            }),\n            $(\"#home-error\"),\n        );\n    }\n\n    $resend_button.prop(\"disabled\", true).text($t({defaultMessage: \"Working…\"}));\n    channel.post({\n        url: \"/json/invites/\" + meta.invite_id + \"/resend\",\n        error(xhr) {\n            ui_report.generic_row_button_error(xhr, $resend_button);\n        },\n        success(data) {\n            $resend_button.text($t({defaultMessage: \"Sent!\"}));\n            $resend_button.removeClass(\"resend btn-warning\").addClass(\"sea-green\");\n            data.timestamp = timerender.absolute_time(data.timestamp * 1000);\n            meta.$current_resend_invite_user_modal_row.find(\".invited_at\").text(data.timestamp);\n        },\n    });\n}\n\nexport function set_up(initialize_event_handlers = true) {\n    meta.loaded = true;\n\n    // create loading indicators\n    loading.make_indicator($(\"#admin_page_invites_loading_indicator\"));\n\n    // Populate invites table\n    channel.get({\n        url: \"/json/invites\",\n        timeout: 10 * 1000,\n        success(data) {\n            on_load_success(data, initialize_event_handlers);\n        },\n        error: failed_listing_invites,\n    });\n}\n\nexport function on_load_success(invites_data, initialize_event_handlers) {\n    meta.loaded = true;\n    populate_invites(invites_data);\n    if (!initialize_event_handlers) {\n        return;\n    }\n    $(\".admin_invites_table\").on(\"click\", \".revoke\", (e) => {\n        // This click event must not get propagated to parent container otherwise the modal\n        // will not show up because of a call to `close_active_modal` in `settings.js`.\n        e.preventDefault();\n        e.stopPropagation();\n        const $row = $(e.target).closest(\".invite_row\");\n        const email = $row.find(\".email\").text();\n        const referred_by = $row.find(\".referred_by\").text();\n        meta.$current_revoke_invite_user_modal_row = $row;\n        meta.invite_id = $(e.currentTarget).attr(\"data-invite-id\");\n        meta.is_multiuse = $(e.currentTarget).attr(\"data-is-multiuse\");\n        const ctx = {\n            is_multiuse: meta.is_multiuse === \"true\",\n            email,\n            referred_by,\n        };\n        const html_body = render_settings_revoke_invite_modal(ctx);\n\n        confirm_dialog.launch({\n            html_heading: ctx.is_multiuse\n                ? $t_html({defaultMessage: \"Revoke invitation link\"})\n                : $t_html({defaultMessage: \"Revoke invitation to {email}\"}, {email}),\n            html_body,\n            on_click: do_revoke_invite,\n        });\n\n        $(\".dialog_submit_button\").attr(\"data-invite-id\", meta.invite_id);\n        $(\".dialog_submit_button\").attr(\"data-is-multiuse\", meta.is_multiuse);\n    });\n\n    $(\".admin_invites_table\").on(\"click\", \".resend\", (e) => {\n        // This click event must not get propagated to parent container otherwise the modal\n        // will not show up because of a call to `close_active_modal` in `settings.js`.\n        e.preventDefault();\n        e.stopPropagation();\n\n        const $row = $(e.target).closest(\".invite_row\");\n        const email = $row.find(\".email\").text();\n        meta.$current_resend_invite_user_modal_row = $row;\n        meta.invite_id = $(e.currentTarget).attr(\"data-invite-id\");\n        const html_body = render_settings_resend_invite_modal({email});\n\n        confirm_dialog.launch({\n            html_heading: $t_html({defaultMessage: \"Resend invitation\"}),\n            html_body,\n            on_click: do_resend_invite,\n        });\n\n        $(\".dialog_submit_button\").attr(\"data-invite-id\", meta.invite_id);\n    });\n}\n","import $ from \"jquery\";\n\nimport render_confirm_delete_linkifier from \"../templates/confirm_dialog/confirm_delete_linkifier.hbs\";\nimport render_admin_linkifier_edit_form from \"../templates/settings/admin_linkifier_edit_form.hbs\";\nimport render_admin_linkifier_list from \"../templates/settings/admin_linkifier_list.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport {$t_html} from \"./i18n\";\nimport * as ListWidget from \"./list_widget\";\nimport {page_params} from \"./page_params\";\nimport * as settings_ui from \"./settings_ui\";\nimport * as ui from \"./ui\";\nimport * as ui_report from \"./ui_report\";\n\nconst meta = {\n    loaded: false,\n};\n\nexport function reset() {\n    meta.loaded = false;\n}\n\nexport function maybe_disable_widgets() {\n    if (page_params.is_admin) {\n        return;\n    }\n}\n\nfunction compare_values(x, y) {\n    if (x > y) {\n        return 1;\n    } else if (x === y) {\n        return 0;\n    }\n    return -1;\n}\n\nfunction sort_pattern(a, b) {\n    return compare_values(a.pattern, b.pattern);\n}\n\nfunction sort_url(a, b) {\n    return compare_values(a.url_format, b.url_format);\n}\n\nfunction open_linkifier_edit_form(linkifier_id) {\n    const linkifiers_list = page_params.realm_linkifiers;\n    const linkifier = linkifiers_list.find((linkifier) => linkifier.id === linkifier_id);\n    const html_body = render_admin_linkifier_edit_form({\n        linkifier_id,\n        pattern: linkifier.pattern,\n        url_format_string: linkifier.url_format,\n    });\n\n    function submit_linkifier_form() {\n        const $change_linkifier_button = $(\".dialog_submit_button\");\n        $change_linkifier_button.prop(\"disabled\", true);\n\n        const $modal = $(\"#dialog_widget_modal\");\n        const url = \"/json/realm/filters/\" + encodeURIComponent(linkifier_id);\n        const pattern = $modal.find(\"#edit-linkifier-pattern\").val().trim();\n        const url_format_string = $modal.find(\"#edit-linkifier-url-format-string\").val().trim();\n        const data = {pattern, url_format_string};\n        const $pattern_status = $modal.find(\"#edit-linkifier-pattern-status\").expectOne();\n        const $format_status = $modal.find(\"#edit-linkifier-format-status\").expectOne();\n        const $dialog_error_element = $modal.find(\"#dialog_error\").expectOne();\n        const opts = {\n            success_continuation() {\n                $change_linkifier_button.prop(\"disabled\", false);\n                dialog_widget.close_modal();\n            },\n            error_continuation(xhr) {\n                $change_linkifier_button.prop(\"disabled\", false);\n                const response_text = JSON.parse(xhr.responseText);\n                if (response_text.errors !== undefined) {\n                    handle_linkifier_api_error(\n                        xhr,\n                        $pattern_status,\n                        $format_status,\n                        $dialog_error_element,\n                    );\n                } else {\n                    // This must be `Linkifier not found` error.\n                    ui_report.error(\n                        $t_html({defaultMessage: \"Failed\"}),\n                        xhr,\n                        $dialog_error_element,\n                    );\n                }\n            },\n            // Show the error message only on edit linkifier modal.\n            $error_msg_element: $(),\n        };\n        settings_ui.do_settings_change(\n            channel.patch,\n            url,\n            data,\n            $(\"#linkifier-field-status\"),\n            opts,\n        );\n    }\n\n    dialog_widget.launch({\n        html_heading: $t_html({defaultMessage: \"Edit linkfiers\"}),\n        html_body,\n        on_click: submit_linkifier_form,\n    });\n}\n\nfunction handle_linkifier_api_error(xhr, pattern_status, format_status, linkifier_status) {\n    // The endpoint uses the Django ValidationError system for error\n    // handling, which returns somewhat complicated error\n    // dictionaries. This logic parses them.\n    const errors = JSON.parse(xhr.responseText).errors;\n    if (errors.pattern !== undefined) {\n        xhr.responseText = JSON.stringify({msg: errors.pattern});\n        ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, pattern_status);\n    }\n    if (errors.url_format_string !== undefined) {\n        xhr.responseText = JSON.stringify({msg: errors.url_format_string});\n        ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, format_status);\n    }\n    if (errors.__all__ !== undefined) {\n        xhr.responseText = JSON.stringify({msg: errors.__all__});\n        ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, linkifier_status);\n    }\n}\n\nexport function populate_linkifiers(linkifiers_data) {\n    if (!meta.loaded) {\n        return;\n    }\n\n    const $linkifiers_table = $(\"#admin_linkifiers_table\").expectOne();\n    ListWidget.create($linkifiers_table, linkifiers_data, {\n        name: \"linkifiers_list\",\n        modifier(linkifier) {\n            return render_admin_linkifier_list({\n                linkifier: {\n                    pattern: linkifier.pattern,\n                    url_format_string: linkifier.url_format,\n                    id: linkifier.id,\n                },\n                can_modify: page_params.is_admin,\n            });\n        },\n        filter: {\n            $element: $linkifiers_table.closest(\".settings-section\").find(\".search\"),\n            predicate(item, value) {\n                return (\n                    item.pattern.toLowerCase().includes(value) ||\n                    item.url_format.toLowerCase().includes(value)\n                );\n            },\n            onupdate() {\n                ui.reset_scrollbar($linkifiers_table);\n            },\n        },\n        $parent_container: $(\"#linkifier-settings\").expectOne(),\n        init_sort: [sort_pattern],\n        sort_fields: {\n            pattern: sort_pattern,\n            url: sort_url,\n        },\n        $simplebar_container: $(\"#linkifier-settings .progressive-table-wrapper\"),\n    });\n}\n\nexport function set_up() {\n    build_page();\n    maybe_disable_widgets();\n}\n\nexport function build_page() {\n    meta.loaded = true;\n\n    // Populate linkifiers table\n    populate_linkifiers(page_params.realm_linkifiers);\n\n    $(\".admin_linkifiers_table\").on(\"click\", \".delete\", function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const $btn = $(this);\n        const html_body = render_confirm_delete_linkifier();\n        const url = \"/json/realm/filters/\" + encodeURIComponent($btn.attr(\"data-linkifier-id\"));\n\n        confirm_dialog.launch({\n            html_heading: $t_html({defaultMessage: \"Delete linkifier?\"}),\n            html_body,\n            id: \"confirm_delete_linkifiers_modal\",\n            on_click: () => dialog_widget.submit_api_request(channel.del, url),\n            loading_spinner: true,\n        });\n    });\n\n    $(\".admin_linkifiers_table\").on(\"click\", \".edit\", function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const $btn = $(this);\n        const linkifier_id = Number.parseInt($btn.attr(\"data-linkifier-id\"), 10);\n        open_linkifier_edit_form(linkifier_id);\n    });\n\n    $(\".organization form.admin-linkifier-form\")\n        .off(\"submit\")\n        .on(\"submit\", function (e) {\n            e.preventDefault();\n            e.stopPropagation();\n            const $linkifier_status = $(\"#admin-linkifier-status\");\n            const $pattern_status = $(\"#admin-linkifier-pattern-status\");\n            const $format_status = $(\"#admin-linkifier-format-status\");\n            const $add_linkifier_button = $(\".new-linkifier-form button\");\n            $add_linkifier_button.prop(\"disabled\", true);\n            $linkifier_status.hide();\n            $pattern_status.hide();\n            $format_status.hide();\n            const linkifier = {};\n\n            for (const obj of $(this).serializeArray()) {\n                linkifier[obj.name] = obj.value;\n            }\n\n            channel.post({\n                url: \"/json/realm/filters\",\n                data: $(this).serialize(),\n                success(data) {\n                    $(\"#linkifier_pattern\").val(\"\");\n                    $(\"#linkifier_format_string\").val(\"\");\n                    $add_linkifier_button.prop(\"disabled\", false);\n                    linkifier.id = data.id;\n                    ui_report.success(\n                        $t_html({defaultMessage: \"Custom linkifier added!\"}),\n                        $linkifier_status,\n                    );\n                },\n                error(xhr) {\n                    $add_linkifier_button.prop(\"disabled\", false);\n                    handle_linkifier_api_error(\n                        xhr,\n                        $pattern_status,\n                        $format_status,\n                        $linkifier_status,\n                    );\n                },\n            });\n        });\n}\n","import $ from \"jquery\";\n\nimport render_muted_topic_ui_row from \"../templates/muted_topic_ui_row.hbs\";\n\nimport * as ListWidget from \"./list_widget\";\nimport * as muted_topics_ui from \"./muted_topics_ui\";\nimport * as ui from \"./ui\";\nimport * as user_topics from \"./user_topics\";\n\nexport let loaded = false;\n\nexport function populate_list() {\n    const all_muted_topics = user_topics.get_muted_topics();\n    const $muted_topics_table = $(\"#muted_topics_table\");\n    const $search_input = $(\"#muted_topics_search\");\n\n    ListWidget.create($muted_topics_table, all_muted_topics, {\n        name: \"muted-topics-list\",\n        modifier(muted_topic) {\n            return render_muted_topic_ui_row({muted_topic});\n        },\n        filter: {\n            $element: $search_input,\n            predicate(item, value) {\n                return item.topic.toLocaleLowerCase().includes(value);\n            },\n            onupdate() {\n                ui.reset_scrollbar($muted_topics_table.closest(\".progressive-table-wrapper\"));\n            },\n        },\n        $parent_container: $(\"#muted-topic-settings\"),\n        $simplebar_container: $(\"#muted-topic-settings .progressive-table-wrapper\"),\n    });\n}\n\nexport function set_up() {\n    loaded = true;\n    $(\"body\").on(\"click\", \".settings-unmute-topic\", function (e) {\n        const $row = $(this).closest(\"tr\");\n        const stream_id = Number.parseInt($row.attr(\"data-stream-id\"), 10);\n        const topic = $row.attr(\"data-topic\");\n\n        e.stopPropagation();\n\n        muted_topics_ui.unmute_topic(stream_id, topic);\n    });\n\n    populate_list();\n}\n\nexport function reset() {\n    loaded = false;\n}\n","import $ from \"jquery\";\n\nimport render_muted_user_ui_row from \"../templates/muted_user_ui_row.hbs\";\n\nimport * as ListWidget from \"./list_widget\";\nimport * as muted_users from \"./muted_users\";\nimport * as muted_users_ui from \"./muted_users_ui\";\nimport * as people from \"./people\";\nimport * as ui from \"./ui\";\n\nexport let loaded = false;\n\nexport function populate_list() {\n    const all_muted_users = muted_users.get_muted_users().map((user) => ({\n        user_id: user.id,\n        user_name: people.get_full_name(user.id),\n        date_muted_str: user.date_muted_str,\n    }));\n    const $muted_users_table = $(\"#muted_users_table\");\n    const $search_input = $(\"#muted_users_search\");\n\n    ListWidget.create($muted_users_table, all_muted_users, {\n        name: \"muted-users-list\",\n        modifier(muted_user) {\n            return render_muted_user_ui_row({muted_user});\n        },\n        filter: {\n            $element: $search_input,\n            predicate(item, value) {\n                return item.user_name.toLocaleLowerCase().includes(value);\n            },\n            onupdate() {\n                ui.reset_scrollbar($muted_users_table.closest(\".progressive-table-wrapper\"));\n            },\n        },\n        $parent_container: $(\"#muted-user-settings\"),\n        $simplebar_container: $(\"#muted-user-settings .progressive-table-wrapper\"),\n    });\n}\n\nexport function set_up() {\n    loaded = true;\n    $(\"body\").on(\"click\", \".settings-unmute-user\", function (e) {\n        const $row = $(this).closest(\"tr\");\n        const user_id = Number.parseInt($row.attr(\"data-user-id\"), 10);\n\n        e.stopPropagation();\n        muted_users_ui.unmute_user(user_id);\n    });\n\n    populate_list();\n}\n\nexport function reset() {\n    loaded = false;\n}\n","import $ from \"jquery\";\n\nimport render_stream_specific_notification_row from \"../templates/settings/stream_specific_notification_row.hbs\";\n\nimport * as channel from \"./channel\";\nimport {$t} from \"./i18n\";\nimport * as notifications from \"./notifications\";\nimport {page_params} from \"./page_params\";\nimport * as settings_config from \"./settings_config\";\nimport * as settings_org from \"./settings_org\";\nimport * as settings_ui from \"./settings_ui\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_edit from \"./stream_edit\";\nimport * as stream_settings_data from \"./stream_settings_data\";\nimport * as stream_settings_ui from \"./stream_settings_ui\";\nimport * as sub_store from \"./sub_store\";\nimport * as unread_ui from \"./unread_ui\";\nimport {user_settings} from \"./user_settings\";\n\nexport const user_settings_panel = {};\n\nfunction rerender_ui() {\n    const $unmatched_streams_table = $(\"#stream-specific-notify-table\");\n    if ($unmatched_streams_table.length === 0) {\n        // If we haven't rendered \"notification settings\" yet, do nothing.\n        return;\n    }\n\n    const unmatched_streams =\n        stream_settings_data.get_unmatched_streams_for_notification_settings();\n\n    $unmatched_streams_table.find(\".stream-notifications-row\").remove();\n\n    const muted_stream_ids = stream_data.muted_stream_ids();\n\n    for (const stream of unmatched_streams) {\n        $unmatched_streams_table.append(\n            render_stream_specific_notification_row({\n                stream,\n                stream_specific_notification_settings:\n                    settings_config.stream_specific_notification_settings,\n                is_disabled:\n                    settings_config.all_notifications(user_settings)\n                        .show_push_notifications_tooltip,\n                muted: muted_stream_ids.includes(stream.stream_id),\n            }),\n        );\n    }\n\n    if (unmatched_streams.length === 0) {\n        $unmatched_streams_table.css(\"display\", \"none\");\n    } else {\n        $unmatched_streams_table.css(\"display\", \"table-row-group\");\n    }\n}\n\nfunction change_notification_setting(setting, value, status_element) {\n    const data = {};\n    data[setting] = value;\n    settings_ui.do_settings_change(channel.patch, \"/json/settings\", data, status_element);\n}\n\nfunction update_desktop_icon_count_display(settings_panel) {\n    const $container = $(settings_panel.container);\n    const settings_object = settings_panel.settings_object;\n    $container\n        .find(\".setting_desktop_icon_count_display\")\n        .val(settings_object.desktop_icon_count_display);\n    if (!settings_panel.for_realm_settings) {\n        unread_ui.update_unread_counts();\n    }\n}\n\nexport function set_notification_batching_ui($container, setting_seconds, force_custom) {\n    const $edit_elem = $container.find(\".email_notification_batching_period_edit_minutes\");\n    const valid_period_values = settings_config.email_notifications_batching_period_values.map(\n        (x) => x.value,\n    );\n\n    // We display the custom widget if either the user just selected\n    // custom_period, or the current value cannot be represented with\n    // the existing set of values.\n    const show_edit_elem = force_custom || !valid_period_values.includes(setting_seconds);\n    const select_elem_val = show_edit_elem ? \"custom_period\" : setting_seconds;\n\n    $container.find(\".setting_email_notifications_batching_period_seconds\").val(select_elem_val);\n    $edit_elem.val(setting_seconds / 60);\n    settings_org.change_element_block_display_property($edit_elem.attr(\"id\"), show_edit_elem);\n}\n\nexport function set_enable_digest_emails_visibility(settings_panel) {\n    const $container = $(settings_panel.container);\n    const for_realm_settings = settings_panel.for_realm_settings;\n    if (page_params.realm_digest_emails_enabled) {\n        if (for_realm_settings) {\n            $container.find(\".other_email_notifications\").show();\n            return;\n        }\n        $container.find(\".enable_digest_emails_label\").parent().show();\n    } else {\n        if (for_realm_settings) {\n            $container.find(\".other_email_notifications\").hide();\n            return;\n        }\n        $container.find(\".enable_digest_emails_label\").parent().hide();\n    }\n}\n\nexport function set_enable_marketing_emails_visibility() {\n    const $container = $(\"#user-notification-settings\");\n    if (page_params.corporate_enabled) {\n        $container.find(\".enable_marketing_emails_label\").parent().show();\n    } else {\n        $container.find(\".enable_marketing_emails_label\").parent().hide();\n    }\n}\n\nexport function set_up(settings_panel) {\n    const $container = $(settings_panel.container);\n    const settings_object = settings_panel.settings_object;\n    const $notification_sound_elem = $(settings_panel.notification_sound_elem);\n    const for_realm_settings = settings_panel.for_realm_settings;\n\n    $container.find(\".play_notification_sound\").on(\"click\", () => {\n        if (settings_object.notification_sound !== \"none\") {\n            $notification_sound_elem[0].play();\n        }\n    });\n\n    update_desktop_icon_count_display(settings_panel);\n\n    const $notification_sound_dropdown = $container.find(\".setting_notification_sound\");\n    $notification_sound_dropdown.val(settings_object.notification_sound);\n\n    $container.find(\".enable_sounds, .enable_stream_audible_notifications\").on(\"change\", () => {\n        if (\n            $container.find(\".enable_stream_audible_notifications\").prop(\"checked\") ||\n            $container.find(\".enable_sounds\").prop(\"checked\")\n        ) {\n            $notification_sound_dropdown.prop(\"disabled\", false);\n            $notification_sound_dropdown.parent().removeClass(\"control-label-disabled\");\n        } else {\n            $notification_sound_dropdown.prop(\"disabled\", true);\n            $notification_sound_dropdown.parent().addClass(\"control-label-disabled\");\n        }\n    });\n\n    set_notification_batching_ui(\n        $container,\n        settings_object.email_notifications_batching_period_seconds,\n    );\n\n    set_enable_digest_emails_visibility(settings_panel);\n\n    if (for_realm_settings) {\n        // For the realm-level defaults page, we use the common\n        // settings_org.js handlers, so we can return early here.\n        return;\n    }\n\n    // Common handler for sending requests to the server when an input\n    // element is changed.\n    $container.find(\".notification-settings-form\").on(\"change\", \"input, select\", function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const $input_elem = $(e.currentTarget);\n        if ($input_elem.parents(\"#stream-specific-notify-table\").length) {\n            stream_edit.stream_setting_changed(e, true);\n            return;\n        }\n        let setting_name = $input_elem.attr(\"name\");\n        let setting_value = settings_org.get_input_element_value(this);\n\n        if (setting_name === \"email_notifications_batching_period_seconds\") {\n            if ($input_elem.val() === \"custom_period\") {\n                set_notification_batching_ui(\n                    $container,\n                    settings_object.email_notifications_batching_period_seconds,\n                    true,\n                );\n                return;\n            }\n            set_notification_batching_ui($container, setting_value);\n        } else if (setting_name === \"email_notification_batching_period_edit_minutes\") {\n            // This field is in minutes, but the actual setting is seconds\n            setting_value = setting_value * 60;\n            set_notification_batching_ui($container, setting_value);\n            setting_name = \"email_notifications_batching_period_seconds\";\n        }\n\n        change_notification_setting(\n            setting_name,\n            setting_value,\n            $input_elem.closest(\".subsection-parent\").find(\".alert-notification\"),\n        );\n    });\n\n    // This final patch of settings are ones for which we\n    // intentionally don't let organization administrators set\n    // organization-level defaults.\n    $container.find(\".send_test_notification\").on(\"click\", () => {\n        notifications.send_test_notification(\n            $t({defaultMessage: \"This is what a Zulip notification looks like.\"}),\n        );\n    });\n\n    set_enable_marketing_emails_visibility();\n    rerender_ui();\n}\n\nexport function update_page(settings_panel) {\n    const $container = $(settings_panel.container);\n    const settings_object = settings_panel.settings_object;\n    for (const setting of settings_config.all_notification_settings) {\n        switch (setting) {\n            case \"enable_offline_push_notifications\": {\n                if (!page_params.realm_push_notifications_enabled) {\n                    // If push notifications are disabled at the realm level,\n                    // we should just leave the checkbox always off.\n                    break;\n                }\n                $container\n                    .find(`.${CSS.escape(setting)}`)\n                    .prop(\"checked\", settings_object[setting]);\n                break;\n            }\n            case \"desktop_icon_count_display\": {\n                update_desktop_icon_count_display(settings_panel);\n                break;\n            }\n            case \"email_notifications_batching_period_seconds\": {\n                set_notification_batching_ui($container, settings_object[setting]);\n                break;\n            }\n            case \"notification_sound\": {\n                $container.find(`.setting_${CSS.escape(setting)}`).val(settings_object[setting]);\n                break;\n            }\n            default: {\n                $container\n                    .find(`.${CSS.escape(setting)}`)\n                    .prop(\"checked\", settings_object[setting]);\n                break;\n            }\n        }\n    }\n    rerender_ui();\n}\n\nexport function update_muted_stream_state(sub) {\n    const $row = $(\n        `#stream-specific-notify-table .stream-notifications-row[data-stream-id='${CSS.escape(\n            sub.stream_id,\n        )}']`,\n    );\n\n    $row.toggleClass(\"control-label-disabled\", sub.is_muted);\n    if (sub.is_muted) {\n        $row.find(\".unmute_stream\").show();\n    } else {\n        $row.find(\".unmute_stream\").hide();\n    }\n    $row.find(\"input\").prop(\"disabled\", sub.is_muted);\n    $row.find('[name=\"push_notifications\"]').prop(\n        \"disabled\",\n        !page_params.realm_push_notifications_enabled || sub.is_muted,\n    );\n}\n\nexport function initialize() {\n    user_settings_panel.container = \"#user-notification-settings\";\n    user_settings_panel.settings_object = user_settings;\n    user_settings_panel.notification_sound_elem = \"#user-notification-sound-audio\";\n    user_settings_panel.for_realm_settings = false;\n\n    // Set up click handler for unmuting streams via this UI.\n    $(\"body\").on(\"click\", \"#stream-specific-notify-table .unmute_stream\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const $row = $(e.currentTarget).closest(\".stream-notifications-row\");\n        const stream_id = Number.parseInt($row.attr(\"data-stream-id\"), 10);\n        const sub = sub_store.get(stream_id);\n\n        stream_settings_ui.set_muted(\n            sub,\n            !sub.is_muted,\n            $row.closest(\".subsection-parent\").find(\".alert-notification\"),\n        );\n    });\n}\n","import $ from \"jquery\";\n\n// import pygments_data from \"../generated/pygments_data.json\";\nimport render_settings_deactivate_realm_modal from \"../templates/confirm_dialog/confirm_deactivate_realm.hbs\";\nimport render_settings_admin_auth_methods_list from \"../templates/settings/admin_auth_methods_list.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport {csrf_token} from \"./csrf\";\nimport {DropdownListWidget} from \"./dropdown_list_widget\";\nimport {$t, $t_html, get_language_name} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as loading from \"./loading\";\nimport {page_params} from \"./page_params\";\nimport * as realm_icon from \"./realm_icon\";\nimport * as realm_logo from \"./realm_logo\";\nimport {realm_user_settings_defaults} from \"./realm_user_settings_defaults\";\nimport * as settings_config from \"./settings_config\";\nimport * as settings_notifications from \"./settings_notifications\";\nimport * as settings_realm_domains from \"./settings_realm_domains\";\nimport * as settings_realm_user_settings_defaults from \"./settings_realm_user_settings_defaults\";\nimport * as settings_ui from \"./settings_ui\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_edit from \"./stream_edit\";\nimport * as stream_settings_data from \"./stream_settings_data\";\nimport * as ui_report from \"./ui_report\";\n\nconst meta = {\n    loaded: false,\n};\n\nexport function reset() {\n    meta.loaded = false;\n}\n\nexport function maybe_disable_widgets() {\n    if (page_params.is_owner) {\n        return;\n    }\n\n    $(\".organization-box [data-name='auth-methods']\")\n        .find(\"input, button, select, checked\")\n        .prop(\"disabled\", true);\n\n    if (page_params.is_admin) {\n        $(\"#deactivate_realm_button\").prop(\"disabled\", true);\n        $(\"#org-message-retention\").find(\"input, select\").prop(\"disabled\", true);\n        $(\"#org-join-settings\").find(\"input, select\").prop(\"disabled\", true);\n        $(\"#id_realm_invite_required_label\").parent().addClass(\"control-label-disabled\");\n        return;\n    }\n\n    $(\".organization-box [data-name='organization-profile']\")\n        .find(\"input, textarea, button, select\")\n        .prop(\"disabled\", true);\n\n    $(\".organization-box [data-name='organization-settings']\")\n        .find(\"input, textarea, button, select\")\n        .prop(\"disabled\", true);\n\n    $(\".organization-box [data-name='organization-settings']\")\n        .find(\".dropdown_list_reset_button\")\n        .hide();\n\n    $(\".organization-box [data-name='organization-settings']\")\n        .find(\".control-label-disabled\")\n        .addClass(\"enabled\");\n\n    $(\".organization-box [data-name='organization-permissions']\")\n        .find(\"input, textarea, button, select\")\n        .prop(\"disabled\", true);\n\n    $(\".organization-box [data-name='organization-permissions']\")\n        .find(\".control-label-disabled\")\n        .addClass(\"enabled\");\n}\n\nexport function get_sorted_options_list(option_values_object) {\n    const options_list = Object.keys(option_values_object).map((key) => ({\n        ...option_values_object[key],\n        key,\n    }));\n    let comparator = (x, y) => x.order - y.order;\n    if (!options_list[0].order) {\n        comparator = (x, y) => {\n            const key_x = x.key.toUpperCase();\n            const key_y = y.key.toUpperCase();\n            if (key_x < key_y) {\n                return -1;\n            }\n            if (key_x > key_y) {\n                return 1;\n            }\n            return 0;\n        };\n    }\n    options_list.sort(comparator);\n    return options_list;\n}\n\nexport function get_organization_settings_options() {\n    const options = {};\n    options.common_policy_values = get_sorted_options_list(settings_config.common_policy_values);\n    options.private_message_policy_values = get_sorted_options_list(\n        settings_config.private_message_policy_values,\n    );\n    options.wildcard_mention_policy_values = get_sorted_options_list(\n        settings_config.wildcard_mention_policy_values,\n    );\n    options.common_message_policy_values = get_sorted_options_list(\n        settings_config.common_message_policy_values,\n    );\n    options.invite_to_realm_policy_values = get_sorted_options_list(\n        settings_config.invite_to_realm_policy_values,\n    );\n    options.edit_topic_policy_values = get_sorted_options_list(\n        settings_config.edit_topic_policy_values,\n    );\n    options.move_messages_between_streams_policy_values = get_sorted_options_list(\n        settings_config.move_messages_between_streams_policy_values,\n    );\n    return options;\n}\n\nexport function get_org_type_dropdown_options() {\n    const current_org_type = page_params.realm_org_type;\n    if (current_org_type !== 0) {\n        return settings_config.defined_org_type_values;\n    }\n    return settings_config.all_org_type_values;\n}\n\nexport function get_realm_time_limits_in_minutes(property) {\n    if (page_params[property] === null) {\n        // This represents \"Anytime\" case.\n        return null;\n    }\n    let val = (page_params[property] / 60).toFixed(1);\n    if (Number.parseFloat(val, 10) === Number.parseInt(val, 10)) {\n        val = Number.parseInt(val, 10);\n    }\n    return val.toString();\n}\n\nfunction get_property_value(property_name, for_realm_default_settings, sub) {\n    if (for_realm_default_settings) {\n        // realm_user_default_settings are stored in a separate object.\n        if (property_name === \"twenty_four_hour_time\") {\n            return JSON.stringify(realm_user_settings_defaults.twenty_four_hour_time);\n        }\n        if (\n            property_name === \"email_notifications_batching_period_seconds\" ||\n            property_name === \"email_notification_batching_period_edit_minutes\"\n        ) {\n            return realm_user_settings_defaults.email_notifications_batching_period_seconds;\n        }\n        return realm_user_settings_defaults[property_name];\n    }\n\n    if (sub) {\n        if (property_name === \"stream_privacy\") {\n            return stream_data.get_stream_privacy_policy(sub.stream_id);\n        }\n\n        return sub[property_name];\n    }\n\n    if (property_name === \"realm_waiting_period_setting\") {\n        if (page_params.realm_waiting_period_threshold === 0) {\n            return \"none\";\n        }\n        if (page_params.realm_waiting_period_threshold === 3) {\n            return \"three_days\";\n        }\n        return \"custom_days\";\n    }\n\n    if (property_name === \"realm_org_join_restrictions\") {\n        if (page_params.realm_emails_restricted_to_domains) {\n            return \"only_selected_domain\";\n        }\n        if (page_params.realm_disallow_disposable_email_addresses) {\n            return \"no_disposable_email\";\n        }\n        return \"no_restriction\";\n    }\n\n    return page_params[property_name];\n}\n\nexport function extract_property_name($elem, for_realm_default_settings) {\n    if (for_realm_default_settings) {\n        // ID for realm_user_default_settings elements are of the form\n        // \"realm_{settings_name}}\" because both user and realm default\n        // settings use the same template and each element should have\n        // unique id.\n        return /^realm_(.*)$/.exec($elem.attr(\"id\").replace(/-/g, \"_\"))[1];\n    }\n\n    if ($elem.attr(\"id\").startsWith(\"id_authmethod\")) {\n        // Authentication Method component IDs include authentication method name\n        // for uniqueness, anchored to \"id_authmethod\" prefix, e.g. \"id_authmethodapple_<property_name>\".\n        // We need to strip that whole construct down to extract the actual property name.\n        // The [\\da-z]+ part of the regexp covers the auth method name itself.\n        // We assume it's not an empty string and can contain only digits and lowercase ASCII letters,\n        // this is ensured by a respective allowlist-based filter in populate_auth_methods().\n        return /^id_authmethod[\\da-z]+_(.*)$/.exec($elem.attr(\"id\"))[1];\n    }\n\n    return /^id_(.*)$/.exec($elem.attr(\"id\").replace(/-/g, \"_\"))[1];\n}\n\nexport function get_subsection_property_elements(subsection) {\n    return Array.from($(subsection).find(\".prop-element\"));\n}\n\nconst simple_dropdown_properties = [\n    \"realm_create_private_stream_policy\",\n    \"realm_create_public_stream_policy\",\n    \"realm_create_web_public_stream_policy\",\n    \"realm_invite_to_stream_policy\",\n    \"realm_user_group_edit_policy\",\n    \"realm_private_message_policy\",\n    \"realm_add_custom_emoji_policy\",\n    \"realm_invite_to_realm_policy\",\n    \"realm_wildcard_mention_policy\",\n    \"realm_move_messages_between_streams_policy\",\n    \"realm_edit_topic_policy\",\n    \"realm_org_type\",\n];\n\nfunction set_property_dropdown_value(property_name) {\n    $(`#id_${CSS.escape(property_name)}`).val(get_property_value(property_name));\n}\n\nexport function change_element_block_display_property(elem_id, show_element) {\n    const $elem = $(`#${CSS.escape(elem_id)}`);\n    if (show_element) {\n        $elem.parent().show();\n    } else {\n        $elem.parent().hide();\n    }\n}\n\nfunction set_realm_waiting_period_dropdown() {\n    const value = get_property_value(\"realm_waiting_period_setting\");\n    $(\"#id_realm_waiting_period_setting\").val(value);\n    change_element_block_display_property(\n        \"id_realm_waiting_period_threshold\",\n        value === \"custom_days\",\n    );\n}\n\nfunction set_video_chat_provider_dropdown() {\n    const chat_provider_id = page_params.realm_video_chat_provider;\n    $(\"#id_realm_video_chat_provider\").val(chat_provider_id);\n}\n\nfunction set_giphy_rating_dropdown() {\n    const rating_id = page_params.realm_giphy_rating;\n    $(\"#id_realm_giphy_rating\").val(rating_id);\n}\n\nfunction update_message_edit_sub_settings(is_checked) {\n    settings_ui.disable_sub_setting_onchange(\n        is_checked,\n        \"id_realm_message_content_edit_limit_seconds\",\n        true,\n    );\n    settings_ui.disable_sub_setting_onchange(\n        is_checked,\n        \"id_realm_message_content_edit_limit_minutes\",\n        true,\n    );\n}\n\nfunction update_custom_value_input(property_name) {\n    const $dropdown_elem = $(`#id_${CSS.escape(property_name)}`);\n    const custom_input_elem_id = $dropdown_elem\n        .parent()\n        .find(\".admin-realm-time-limit-input\")\n        .attr(\"id\");\n\n    const show_custom_limit_input = $dropdown_elem.val() === \"custom_period\";\n    change_element_block_display_property(custom_input_elem_id, show_custom_limit_input);\n    if (show_custom_limit_input) {\n        $(`#${CSS.escape(custom_input_elem_id)}`).val(\n            get_realm_time_limits_in_minutes(property_name),\n        );\n    }\n}\n\nfunction get_time_limit_dropdown_setting_value(property_name) {\n    if (page_params[property_name] === null) {\n        return \"any_time\";\n    }\n\n    const valid_limit_values = settings_config.time_limit_dropdown_values.map((x) => x.value);\n    if (valid_limit_values.includes(page_params[property_name])) {\n        return page_params[property_name].toString();\n    }\n\n    return \"custom_period\";\n}\n\nfunction set_time_limit_setting(property_name) {\n    const dropdown_elem_val = get_time_limit_dropdown_setting_value(property_name);\n    $(`#id_${CSS.escape(property_name)}`).val(dropdown_elem_val);\n\n    const $custom_input = $(`#id_${CSS.escape(property_name)}`)\n        .parent()\n        .find(\".admin-realm-time-limit-input\");\n    $custom_input.val(get_realm_time_limits_in_minutes(property_name));\n\n    change_element_block_display_property(\n        $custom_input.attr(\"id\"),\n        dropdown_elem_val === \"custom_period\",\n    );\n}\n\nfunction set_msg_edit_limit_dropdown() {\n    set_time_limit_setting(\"realm_message_content_edit_limit_seconds\");\n}\n\nfunction message_delete_limit_setting_enabled(setting_value) {\n    // This function is used to check whether the time-limit setting\n    // should be enabled. The setting is disabled when delete_own_message_policy\n    // is set to 'admins only' as admins can delete messages irrespective of\n    // time limit.\n    if (setting_value === settings_config.common_message_policy_values.by_admins_only.code) {\n        return false;\n    }\n    return true;\n}\n\nfunction set_delete_own_message_policy_dropdown(setting_value) {\n    $(\"#id_realm_delete_own_message_policy\").val(setting_value);\n    settings_ui.disable_sub_setting_onchange(\n        message_delete_limit_setting_enabled(setting_value),\n        \"id_realm_message_content_delete_limit_seconds\",\n        true,\n    );\n    const limit_setting_dropdown_value = get_time_limit_dropdown_setting_value(\n        \"realm_message_content_delete_limit_seconds\",\n    );\n    if (limit_setting_dropdown_value === \"custom_period\") {\n        settings_ui.disable_sub_setting_onchange(\n            message_delete_limit_setting_enabled(setting_value),\n            \"id_realm_message_content_delete_limit_minutes\",\n            true,\n        );\n    }\n}\n\nfunction set_msg_delete_limit_dropdown() {\n    set_time_limit_setting(\"realm_message_content_delete_limit_seconds\");\n}\n\nfunction get_message_retention_setting_value($input_elem, for_api_data = true) {\n    const select_elem_val = $input_elem.val();\n    if (select_elem_val === \"unlimited\") {\n        if (!for_api_data) {\n            return settings_config.retain_message_forever;\n        }\n        return JSON.stringify(\"unlimited\");\n    }\n\n    if (select_elem_val === \"realm_default\") {\n        if (!for_api_data) {\n            return null;\n        }\n        return JSON.stringify(\"realm_default\");\n    }\n\n    const $custom_input = $input_elem.parent().find(\".message-retention-setting-custom-input\");\n    if ($custom_input.val().length === 0) {\n        return settings_config.retain_message_forever;\n    }\n    return Number.parseInt($custom_input.val(), 10);\n}\n\nfunction get_dropdown_value_for_message_retention_setting(setting_value) {\n    if (setting_value === settings_config.retain_message_forever) {\n        return \"unlimited\";\n    }\n\n    if (setting_value === null) {\n        return \"realm_default\";\n    }\n\n    return \"custom_period\";\n}\n\nexport function set_message_retention_setting_dropdown(sub) {\n    let property_name = \"realm_message_retention_days\";\n    if (sub !== undefined) {\n        property_name = \"message_retention_days\";\n    }\n    const setting_value = get_property_value(property_name, false, sub);\n    const dropdown_val = get_dropdown_value_for_message_retention_setting(setting_value);\n\n    const $dropdown_elem = $(`#id_${CSS.escape(property_name)}`);\n    $dropdown_elem.val(dropdown_val);\n\n    const $custom_input_elem = $dropdown_elem\n        .parent()\n        .find(\".message-retention-setting-custom-input\")\n        .val(\"\");\n    if (dropdown_val === \"custom_period\") {\n        $custom_input_elem.val(setting_value);\n    }\n\n    change_element_block_display_property(\n        $custom_input_elem.attr(\"id\"),\n        dropdown_val === \"custom_period\",\n    );\n}\n\nfunction set_org_join_restrictions_dropdown() {\n    const value = get_property_value(\"realm_org_join_restrictions\");\n    $(\"#id_realm_org_join_restrictions\").val(value);\n    change_element_block_display_property(\n        \"allowed_domains_label\",\n        value === \"only_selected_domain\",\n    );\n}\n\nfunction set_message_content_in_email_notifications_visiblity() {\n    change_element_block_display_property(\n        \"message_content_in_email_notifications_label\",\n        page_params.realm_message_content_allowed_in_email_notifications,\n    );\n}\n\nfunction set_digest_emails_weekday_visibility() {\n    change_element_block_display_property(\n        \"id_realm_digest_weekday\",\n        page_params.realm_digest_emails_enabled,\n    );\n}\n\nfunction set_create_web_public_stream_dropdown_visibility() {\n    change_element_block_display_property(\n        \"id_realm_create_web_public_stream_policy\",\n        page_params.server_web_public_streams_enabled &&\n            page_params.zulip_plan_is_not_limited &&\n            page_params.realm_enable_spectator_access,\n    );\n}\n\nexport function populate_realm_domains_label(realm_domains) {\n    if (!meta.loaded) {\n        return;\n    }\n\n    const domains_list = realm_domains.map((realm_domain) =>\n        realm_domain.allow_subdomains ? \"*.\" + realm_domain.domain : realm_domain.domain,\n    );\n    let domains = domains_list.join(\", \");\n    if (domains.length === 0) {\n        domains = $t({defaultMessage: \"None\"});\n    }\n    $(\"#allowed_domains_label\").text($t({defaultMessage: \"Allowed domains: {domains}\"}, {domains}));\n}\n\nfunction sort_object_by_key(obj) {\n    const keys = Object.keys(obj).sort();\n    const new_obj = {};\n\n    for (const key of keys) {\n        new_obj[key] = obj[key];\n    }\n\n    return new_obj;\n}\n\nexport function populate_auth_methods(auth_methods) {\n    if (!meta.loaded) {\n        return;\n    }\n    const $auth_methods_list = $(\"#id_realm_authentication_methods\").expectOne();\n    auth_methods = sort_object_by_key(auth_methods);\n    let rendered_auth_method_rows = \"\";\n    for (const [auth_method, value] of Object.entries(auth_methods)) {\n        rendered_auth_method_rows += render_settings_admin_auth_methods_list({\n            method: auth_method,\n            enabled: value,\n            is_owner: page_params.is_owner,\n            // The negated character class regexp serves as an allowlist - the replace() will\n            // remove *all* symbols *but* digits (\\d) and lowecase letters (a-z),\n            // so that we can make assumptions on this string elsewhere in the code.\n            // As a result, the only two \"incoming\" assumptions on the auth method name are:\n            // 1) It contains at least one allowed symbol\n            // 2) No two auth method names are identical after this allowlist filtering\n            prefix: \"id_authmethod\" + auth_method.toLowerCase().replace(/[^\\da-z]/g, \"\") + \"_\",\n        });\n    }\n    $auth_methods_list.html(rendered_auth_method_rows);\n}\n\nfunction update_dependent_subsettings(property_name) {\n    if (simple_dropdown_properties.includes(property_name)) {\n        set_property_dropdown_value(property_name);\n        return;\n    }\n\n    switch (property_name) {\n        case \"realm_waiting_period_threshold\":\n            set_realm_waiting_period_dropdown();\n            break;\n        case \"realm_video_chat_provider\":\n            set_video_chat_provider_dropdown();\n            break;\n        case \"realm_allow_message_editing\":\n            update_message_edit_sub_settings(page_params.realm_allow_message_editing);\n            break;\n        case \"realm_delete_own_message_policy\":\n            set_delete_own_message_policy_dropdown(page_params.realm_delete_own_message_policy);\n            break;\n        case \"realm_org_join_restrictions\":\n            set_org_join_restrictions_dropdown();\n            break;\n        case \"realm_message_content_allowed_in_email_notifications\":\n            set_message_content_in_email_notifications_visiblity();\n            break;\n        case \"realm_digest_emails_enabled\":\n            settings_notifications.set_enable_digest_emails_visibility(\n                settings_notifications.user_settings_panel,\n            );\n            settings_notifications.set_enable_digest_emails_visibility(\n                settings_realm_user_settings_defaults.realm_default_settings_panel,\n            );\n            set_digest_emails_weekday_visibility();\n            break;\n        case \"realm_enable_spectator_access\":\n            set_create_web_public_stream_dropdown_visibility();\n            break;\n    }\n}\n\nexport let default_code_language_widget = null;\nexport let notifications_stream_widget = null;\nexport let signup_notifications_stream_widget = null;\n\nexport function discard_property_element_changes(elem, for_realm_default_settings, sub) {\n    const $elem = $(elem);\n    const property_name = extract_property_name($elem, for_realm_default_settings);\n    const property_value = get_property_value(property_name, for_realm_default_settings, sub);\n\n    switch (property_name) {\n        case \"realm_authentication_methods\":\n            populate_auth_methods(property_value);\n            break;\n        case \"realm_notifications_stream_id\":\n            notifications_stream_widget.render(property_value);\n            break;\n        case \"realm_signup_notifications_stream_id\":\n            signup_notifications_stream_widget.render(property_value);\n            break;\n        case \"realm_default_code_block_language\":\n            default_code_language_widget.render(property_value);\n            break;\n        case \"realm_default_language\":\n            $(\"#org-notifications .language_selection_widget .language_selection_button span\").attr(\n                \"data-language-code\",\n                property_value,\n            );\n            $(\"#org-notifications .language_selection_widget .language_selection_button span\").text(\n                get_language_name(property_value),\n            );\n            break;\n        case \"emojiset\":\n        case \"user_list_style\":\n        case \"stream_privacy\":\n            // Because this widget has a radio button structure, it\n            // needs custom reset code.\n            $elem.find(`input[value='${CSS.escape(property_value)}']`).prop(\"checked\", true);\n            break;\n        case \"email_notifications_batching_period_seconds\":\n        case \"email_notification_batching_period_edit_minutes\":\n            settings_notifications.set_notification_batching_ui(\n                $(\"#realm-user-default-settings\"),\n                realm_user_settings_defaults.email_notifications_batching_period_seconds,\n            );\n            break;\n        case \"realm_org_type\":\n            set_input_element_value($elem, property_value);\n            // Remove 'unspecified' option (value=0) from realm_org_type\n            // dropdown menu options whenever page_params.realm_org_type\n            // returns another value.\n            if (property_value !== 0) {\n                $(\"#id_realm_org_type option[value=0]\").remove();\n            }\n            break;\n        case \"realm_message_content_edit_limit_seconds\":\n        case \"realm_message_content_delete_limit_seconds\":\n            set_time_limit_setting(property_name);\n            break;\n        case \"realm_message_retention_days\":\n        case \"message_retention_days\":\n            set_message_retention_setting_dropdown(sub);\n            break;\n        default:\n            if (property_value !== undefined) {\n                set_input_element_value($elem, property_value);\n            } else {\n                blueslip.error(\"Element refers to unknown property \" + property_name);\n            }\n    }\n\n    update_dependent_subsettings(property_name);\n}\n\nexport function sync_realm_settings(property) {\n    if (!meta.loaded) {\n        return;\n    }\n\n    const value = page_params[`realm_${property}`];\n    switch (property) {\n        case \"notifications_stream_id\":\n            notifications_stream_widget.render(value);\n            break;\n        case \"signup_notifications_stream_id\":\n            signup_notifications_stream_widget.render(value);\n            break;\n        case \"default_code_block_language\":\n            default_code_language_widget.render(value);\n            break;\n    }\n\n    switch (property) {\n        case \"emails_restricted_to_domains\":\n        case \"disallow_disposable_email_addresses\":\n            property = \"org_join_restrictions\";\n            break;\n    }\n    const $element = $(`#id_realm_${CSS.escape(property)}`);\n    if ($element.length) {\n        discard_property_element_changes($element);\n    }\n}\n\nexport function change_save_button_state($element, state) {\n    function show_hide_element($element, show, fadeout_delay, fadeout_callback) {\n        if (show) {\n            $element.removeClass(\"hide\").addClass(\".show\").fadeIn(300);\n            return;\n        }\n        setTimeout(() => {\n            $element.fadeOut(300, fadeout_callback);\n        }, fadeout_delay);\n    }\n\n    const $saveBtn = $element.find(\".save-button\");\n    const $textEl = $saveBtn.find(\".save-discard-widget-button-text\");\n\n    if (state !== \"saving\") {\n        $saveBtn.removeClass(\"saving\");\n    }\n\n    if (state === \"discarded\") {\n        show_hide_element($element, false, 0, () =>\n            enable_or_disable_save_button($element.closest(\".settings-subsection-parent\")),\n        );\n        return;\n    }\n\n    let button_text;\n    let data_status;\n    let is_show;\n    switch (state) {\n        case \"unsaved\":\n            button_text = $t({defaultMessage: \"Save changes\"});\n            data_status = \"unsaved\";\n            is_show = true;\n\n            $element.find(\".discard-button\").show();\n            break;\n        case \"saved\":\n            button_text = $t({defaultMessage: \"Save changes\"});\n            data_status = \"\";\n            is_show = false;\n            break;\n        case \"saving\":\n            button_text = $t({defaultMessage: \"Saving\"});\n            data_status = \"saving\";\n            is_show = true;\n\n            $element.find(\".discard-button\").hide();\n            $saveBtn.addClass(\"saving\");\n            break;\n        case \"failed\":\n            button_text = $t({defaultMessage: \"Save changes\"});\n            data_status = \"failed\";\n            is_show = true;\n            break;\n        case \"succeeded\":\n            button_text = $t({defaultMessage: \"Saved\"});\n            data_status = \"saved\";\n            is_show = false;\n            break;\n    }\n\n    $textEl.text(button_text);\n    $saveBtn.attr(\"data-status\", data_status);\n    if (state === \"unsaved\") {\n        enable_or_disable_save_button($element.closest(\".settings-subsection-parent\"));\n    }\n    show_hide_element($element, is_show, 800);\n}\n\nexport function save_organization_settings(data, $save_button, patch_url) {\n    const $subsection_parent = $save_button.closest(\".settings-subsection-parent\");\n    const $save_btn_container = $subsection_parent.find(\".save-button-controls\");\n    const $failed_alert_elem = $subsection_parent.find(\".subsection-failed-status p\");\n    change_save_button_state($save_btn_container, \"saving\");\n    channel.patch({\n        url: patch_url,\n        data,\n        success() {\n            $failed_alert_elem.hide();\n            change_save_button_state($save_btn_container, \"succeeded\");\n        },\n        error(xhr) {\n            change_save_button_state($save_btn_container, \"failed\");\n            $save_button.hide();\n            ui_report.error($t_html({defaultMessage: \"Save failed\"}), xhr, $failed_alert_elem);\n        },\n    });\n}\n\nfunction get_input_type($input_elem, input_type) {\n    if ([\"boolean\", \"string\", \"number\"].includes(input_type)) {\n        return input_type;\n    }\n    return $input_elem.data(\"setting-widget-type\");\n}\n\nexport function get_input_element_value(input_elem, input_type) {\n    const $input_elem = $(input_elem);\n    input_type = get_input_type($input_elem, input_type);\n    switch (input_type) {\n        case \"boolean\":\n            return $input_elem.prop(\"checked\");\n        case \"string\":\n            return $input_elem.val().trim();\n        case \"number\":\n            return Number.parseInt($input_elem.val().trim(), 10);\n        case \"radio-group\": {\n            const selected_val = $input_elem.find(\"input:checked\").val();\n            if ($input_elem.data(\"setting-choice-type\") === \"number\") {\n                return Number.parseInt(selected_val, 10);\n            }\n            return selected_val.trim();\n        }\n        case \"time-limit\":\n            return get_time_limit_setting_value($input_elem);\n        case \"message-retention-setting\":\n            return get_message_retention_setting_value($input_elem);\n        default:\n            return undefined;\n    }\n}\n\nexport function set_input_element_value($input_elem, value) {\n    const input_type = get_input_type($input_elem, typeof value);\n    if (input_type) {\n        if (input_type === \"boolean\") {\n            return $input_elem.prop(\"checked\", value);\n        } else if (input_type === \"string\" || input_type === \"number\") {\n            return $input_elem.val(value);\n        }\n    }\n    blueslip.error(`Failed to set value of property ${extract_property_name($input_elem)}`);\n    return undefined;\n}\n\nexport function set_up() {\n    build_page();\n    maybe_disable_widgets();\n}\n\nfunction get_auth_method_list_data() {\n    const new_auth_methods = {};\n    const $auth_method_rows = $(\"#id_realm_authentication_methods\").find(\"div.method_row\");\n\n    for (const method_row of $auth_method_rows) {\n        new_auth_methods[$(method_row).data(\"method\")] = $(method_row)\n            .find(\"input\")\n            .prop(\"checked\");\n    }\n\n    return new_auth_methods;\n}\n\nexport function parse_time_limit($elem) {\n    return Math.floor(Number.parseFloat(Number($elem.val()), 10).toFixed(1) * 60);\n}\n\nfunction get_time_limit_setting_value($input_elem, for_api_data = true) {\n    const select_elem_val = $input_elem.val();\n\n    if (select_elem_val === \"any_time\") {\n        // \"unlimited\" is sent to API when a user wants to set the setting to\n        // \"Any time\" and the message_content_edit_limit_seconds field is \"null\"\n        // for that case.\n        if (!for_api_data) {\n            return null;\n        }\n        return JSON.stringify(\"unlimited\");\n    }\n\n    if (select_elem_val !== \"custom_period\") {\n        return Number.parseInt(select_elem_val, 10);\n    }\n\n    const $custom_input_elem = $input_elem.parent().find(\".admin-realm-time-limit-input\");\n    if ($custom_input_elem.val().length === 0) {\n        // This handles the case where the initial setting value is \"Any time\" and then\n        // dropdown is changed to \"Custom\" where the input box is empty initially and\n        // thus we do not show the save-discard widget until something is typed in the\n        // input box.\n        return null;\n    }\n    return parse_time_limit($custom_input_elem);\n}\n\nexport function check_property_changed(elem, for_realm_default_settings, sub) {\n    const $elem = $(elem);\n    const property_name = extract_property_name($elem, for_realm_default_settings);\n    let current_val = get_property_value(property_name, for_realm_default_settings, sub);\n    let proposed_val;\n\n    switch (property_name) {\n        case \"realm_authentication_methods\":\n            current_val = sort_object_by_key(current_val);\n            current_val = JSON.stringify(current_val);\n            proposed_val = get_auth_method_list_data();\n            proposed_val = JSON.stringify(proposed_val);\n            break;\n        case \"realm_notifications_stream_id\":\n            proposed_val = Number.parseInt(notifications_stream_widget.value(), 10);\n            break;\n        case \"realm_signup_notifications_stream_id\":\n            proposed_val = Number.parseInt(signup_notifications_stream_widget.value(), 10);\n            break;\n        case \"realm_default_code_block_language\":\n            proposed_val = default_code_language_widget.value();\n            if (proposed_val.length === 0) {\n                proposed_val = null;\n            }\n            break;\n        case \"email_notifications_batching_period_seconds\":\n            proposed_val = get_time_limit_setting_value($elem, false);\n            break;\n        case \"realm_message_content_edit_limit_seconds\":\n        case \"realm_message_content_delete_limit_seconds\":\n            proposed_val = get_time_limit_setting_value($elem, false);\n            break;\n        case \"realm_message_retention_days\":\n        case \"message_retention_days\":\n            proposed_val = get_message_retention_setting_value($elem, false);\n            break;\n        case \"realm_default_language\":\n            proposed_val = $(\n                \"#org-notifications .language_selection_widget .language_selection_button span\",\n            ).attr(\"data-language-code\");\n            break;\n        case \"emojiset\":\n        case \"user_list_style\":\n        case \"stream_privacy\":\n            proposed_val = get_input_element_value($elem, \"radio-group\");\n            break;\n        default:\n            if (current_val !== undefined) {\n                proposed_val = get_input_element_value($elem, typeof current_val);\n            } else {\n                blueslip.error(\"Element refers to unknown property \" + property_name);\n            }\n    }\n    return current_val !== proposed_val;\n}\n\nexport function save_discard_widget_status_handler($subsection, for_realm_default_settings, sub) {\n    $subsection.find(\".subsection-failed-status p\").hide();\n    $subsection.find(\".save-button\").show();\n    const properties_elements = get_subsection_property_elements($subsection);\n    const show_change_process_button = properties_elements.some((elem) =>\n        check_property_changed(elem, for_realm_default_settings, sub),\n    );\n\n    const $save_btn_controls = $subsection.find(\".subsection-header .save-button-controls\");\n    const button_state = show_change_process_button ? \"unsaved\" : \"discarded\";\n    change_save_button_state($save_btn_controls, button_state);\n}\n\nexport function init_dropdown_widgets() {\n    const streams = stream_settings_data.get_streams_for_settings_page();\n    const notification_stream_options = {\n        data: streams.map((x) => ({\n            name: x.name,\n            value: x.stream_id.toString(),\n        })),\n        on_update() {\n            save_discard_widget_status_handler($(\"#org-notifications\"));\n        },\n        default_text: $t({defaultMessage: \"Disabled\"}),\n        render_text: (x) => `#${x}`,\n        null_value: -1,\n    };\n    notifications_stream_widget = new DropdownListWidget({\n        widget_name: \"realm_notifications_stream_id\",\n        value: page_params.realm_notifications_stream_id,\n        ...notification_stream_options,\n    });\n    notifications_stream_widget.setup();\n    signup_notifications_stream_widget = new DropdownListWidget({\n        widget_name: \"realm_signup_notifications_stream_id\",\n        value: page_params.realm_signup_notifications_stream_id,\n        ...notification_stream_options,\n    });\n    signup_notifications_stream_widget.setup();\n    default_code_language_widget = new DropdownListWidget({\n        widget_name: \"realm_default_code_block_language\",\n        data: Object.keys(pygments_data.langs).map((x) => ({\n            name: x,\n            value: x,\n        })),\n        value: page_params.realm_default_code_block_language,\n        on_update() {\n            save_discard_widget_status_handler($(\"#org-other-settings\"));\n        },\n        default_text: $t({defaultMessage: \"No language set\"}),\n    });\n    default_code_language_widget.setup();\n}\n\nfunction enable_or_disable_save_button($subsection_elem) {\n    const time_limit_settings = Array.from($subsection_elem.find(\".time-limit-setting\"));\n    let disable_save_btn = false;\n    for (const setting_elem of time_limit_settings) {\n        const dropdown_elem_val = $(setting_elem).find(\"select\").val();\n        const custom_input_elem_val = Number.parseInt(\n            Number($(setting_elem).find(\".admin-realm-time-limit-input\").val()),\n            10,\n        );\n\n        disable_save_btn =\n            dropdown_elem_val === \"custom_period\" &&\n            (custom_input_elem_val <= 0 || Number.isNaN(custom_input_elem_val));\n        if (disable_save_btn) {\n            break;\n        }\n    }\n    $subsection_elem.find(\".subsection-changes-save button\").prop(\"disabled\", disable_save_btn);\n}\n\nexport function populate_data_for_request(subsection, for_realm_default_settings, sub) {\n    let data = {};\n    const properties_elements = get_subsection_property_elements(subsection);\n\n    for (const input_elem of properties_elements) {\n        const $input_elem = $(input_elem);\n        if (check_property_changed($input_elem, for_realm_default_settings, sub)) {\n            const input_value = get_input_element_value($input_elem);\n            if (input_value !== undefined) {\n                let property_name;\n                if (for_realm_default_settings || sub) {\n                    property_name = extract_property_name($input_elem, for_realm_default_settings);\n                } else if ($input_elem.attr(\"id\").startsWith(\"id_authmethod\")) {\n                    // Authentication Method component IDs include authentication method name\n                    // for uniqueness, anchored to \"id_authmethod\" prefix, e.g. \"id_authmethodapple_<property_name>\".\n                    // We need to strip that whole construct down to extract the actual property name.\n                    // The [\\da-z]+ part of the regexp covers the auth method name itself.\n                    // We assume it's not an empty string and can contain only digits and lowercase ASCII letters,\n                    // this is ensured by a respective allowlist-based filter in populate_auth_methods().\n                    [, property_name] = /^id_authmethod[\\da-z]+_(.*)$/.exec($input_elem.attr(\"id\"));\n                } else {\n                    [, property_name] = /^id_realm_(.*)$/.exec($input_elem.attr(\"id\"));\n                }\n\n                if (property_name === \"stream_privacy\") {\n                    data = {\n                        ...data,\n                        ...stream_edit.get_request_data_for_stream_privacy(input_value),\n                    };\n                    continue;\n                }\n                data[property_name] = input_value;\n            }\n        }\n    }\n\n    return data;\n}\n\nexport function register_save_discard_widget_handlers(\n    $container,\n    patch_url,\n    for_realm_default_settings,\n) {\n    $container.on(\"change input\", \"input, select, textarea\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        // This event handler detects whether after these input\n        // changes, any fields have different values from the current\n        // official values stored in the database and page_params.  If\n        // they do, we transition to the \"unsaved\" state showing the\n        // save/discard widget; otherwise, we hide that widget (the\n        // \"discarded\" state).\n\n        if ($(e.target).hasClass(\"no-input-change-detection\")) {\n            // This is to prevent input changes detection in elements\n            // within a subsection whose changes should not affect the\n            // visibility of the discard button\n            return false;\n        }\n\n        if ($(e.target).hasClass(\"setting_email_notifications_batching_period_seconds\")) {\n            const show_elem = $(e.target).val() === \"custom_period\";\n            change_element_block_display_property(\n                \"realm_email_notification_batching_period_edit_minutes\",\n                show_elem,\n            );\n        }\n\n        const $subsection = $(e.target).closest(\".settings-subsection-parent\");\n        save_discard_widget_status_handler($subsection, for_realm_default_settings);\n        return undefined;\n    });\n\n    $container.on(\"click\", \".subsection-header .subsection-changes-discard button\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const $subsection = $(e.target).closest(\".settings-subsection-parent\");\n        for (const elem of get_subsection_property_elements($subsection)) {\n            discard_property_element_changes(elem, for_realm_default_settings);\n        }\n        const $save_btn_controls = $(e.target).closest(\".save-button-controls\");\n        change_save_button_state($save_btn_controls, \"discarded\");\n    });\n\n    function get_complete_data_for_subsection(subsection) {\n        let data = {};\n\n        switch (subsection) {\n            case \"notifications\":\n                data.notifications_stream_id = Number.parseInt(\n                    notifications_stream_widget.value(),\n                    10,\n                );\n                data.signup_notifications_stream_id = Number.parseInt(\n                    signup_notifications_stream_widget.value(),\n                    10,\n                );\n                data.default_language = $(\n                    \"#org-notifications .language_selection_widget .language_selection_button span\",\n                ).attr(\"data-language-code\");\n                break;\n            case \"other_settings\": {\n                const code_block_language_value = default_code_language_widget.value();\n                // No need to JSON-encode, since this value is already a string.\n                data.default_code_block_language = code_block_language_value;\n                break;\n            }\n            case \"join_settings\": {\n                const org_join_restrictions = $(\"#id_realm_org_join_restrictions\").val();\n                switch (org_join_restrictions) {\n                    case \"only_selected_domain\":\n                        data.emails_restricted_to_domains = true;\n                        data.disallow_disposable_email_addresses = false;\n                        break;\n                    case \"no_disposable_email\":\n                        data.emails_restricted_to_domains = false;\n                        data.disallow_disposable_email_addresses = true;\n                        break;\n                    case \"no_restriction\":\n                        data.disallow_disposable_email_addresses = false;\n                        data.emails_restricted_to_domains = false;\n                        break;\n                }\n\n                const waiting_period_threshold = $(\"#id_realm_waiting_period_setting\").val();\n                switch (waiting_period_threshold) {\n                    case \"none\":\n                        data.waiting_period_threshold = 0;\n                        break;\n                    case \"three_days\":\n                        data.waiting_period_threshold = 3;\n                        break;\n                    case \"custom_days\":\n                        data.waiting_period_threshold = $(\n                            \"#id_realm_waiting_period_threshold\",\n                        ).val();\n                        break;\n                }\n                break;\n            }\n            case \"auth_settings\":\n                data = {};\n                data.authentication_methods = JSON.stringify(get_auth_method_list_data());\n                break;\n        }\n        return data;\n    }\n\n    $container.on(\"click\", \".subsection-header .subsection-changes-save button\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const $save_button = $(e.currentTarget);\n        const $subsection_elem = $save_button.closest(\".settings-subsection-parent\");\n        let extra_data = {};\n\n        if (!for_realm_default_settings) {\n            // The organization settings system has some coupled\n            // fields that must be submitted together, which is\n            // managed by the get_complete_data_for_subsection function.\n            const [, subsection_id] = /^org-(.*)$/.exec($subsection_elem.attr(\"id\"));\n            const subsection = subsection_id.replace(/-/g, \"_\");\n            extra_data = get_complete_data_for_subsection(subsection);\n        }\n\n        const data = {\n            ...populate_data_for_request($subsection_elem, for_realm_default_settings),\n            ...extra_data,\n        };\n        save_organization_settings(data, $save_button, patch_url);\n    });\n}\n\nexport function build_page() {\n    meta.loaded = true;\n\n    loading.make_indicator($(\"#admin_page_auth_methods_loading_indicator\"));\n\n    // Initialize all the dropdown list widgets.\n    init_dropdown_widgets();\n    // Populate realm domains\n    populate_realm_domains_label(page_params.realm_domains);\n\n    // Populate authentication methods table\n    populate_auth_methods(page_params.realm_authentication_methods);\n\n    for (const property_name of simple_dropdown_properties) {\n        set_property_dropdown_value(property_name);\n    }\n\n    set_realm_waiting_period_dropdown();\n    set_video_chat_provider_dropdown();\n    set_giphy_rating_dropdown();\n    set_msg_edit_limit_dropdown();\n    set_msg_delete_limit_dropdown();\n    set_delete_own_message_policy_dropdown(page_params.realm_delete_own_message_policy);\n    set_message_retention_setting_dropdown();\n    set_org_join_restrictions_dropdown();\n    set_message_content_in_email_notifications_visiblity();\n    set_digest_emails_weekday_visibility();\n    set_create_web_public_stream_dropdown_visibility();\n\n    register_save_discard_widget_handlers($(\".admin-realm-form\"), \"/json/realm\", false);\n\n    $(\".settings-subsection-parent\").on(\"keydown\", \"input\", (e) => {\n        e.stopPropagation();\n        if (keydown_util.is_enter_event(e)) {\n            e.preventDefault();\n            $(e.target)\n                .closest(\".settings-subsection-parent\")\n                .find(\".subsection-changes-save button\")\n                .trigger(\"click\");\n        }\n    });\n\n    $(\"#id_realm_message_content_edit_limit_seconds\").on(\"change\", () => {\n        update_custom_value_input(\"realm_message_content_edit_limit_seconds\");\n    });\n\n    $(\"#id_realm_message_content_delete_limit_seconds\").on(\"change\", () => {\n        update_custom_value_input(\"realm_message_content_delete_limit_seconds\");\n    });\n\n    $(\"#id_realm_message_retention_days\").on(\"change\", (e) => {\n        const message_retention_setting_dropdown_value = e.target.value;\n        change_element_block_display_property(\n            \"id_realm_message_retention_custom_input\",\n            message_retention_setting_dropdown_value === \"custom_period\",\n        );\n    });\n\n    $(\"#id_realm_waiting_period_setting\").on(\"change\", function () {\n        const waiting_period_threshold = this.value;\n        change_element_block_display_property(\n            \"id_realm_waiting_period_threshold\",\n            waiting_period_threshold === \"custom_days\",\n        );\n    });\n\n    $(\"#id_realm_digest_emails_enabled\").on(\"change\", (e) => {\n        const digest_emails_enabled = $(e.target).is(\":checked\");\n        change_element_block_display_property(\n            \"id_realm_digest_weekday\",\n            digest_emails_enabled === true,\n        );\n    });\n\n    $(\"#id_realm_org_join_restrictions\").on(\"change\", (e) => {\n        const org_join_restrictions = e.target.value;\n        const $node = $(\"#allowed_domains_label\").parent();\n        if (org_join_restrictions === \"only_selected_domain\") {\n            $node.show();\n            if (page_params.realm_domains.length === 0) {\n                settings_realm_domains.show_realm_domains_modal();\n            }\n        } else {\n            $node.hide();\n        }\n    });\n\n    $(\"#id_realm_allow_message_editing\").on(\"change\", (e) => {\n        const is_checked = $(e.target).prop(\"checked\");\n        update_message_edit_sub_settings(is_checked);\n    });\n\n    $(\"#id_realm_delete_own_message_policy\").on(\"change\", (e) => {\n        const setting_value = Number.parseInt($(e.target).val(), 10);\n        set_delete_own_message_policy_dropdown(setting_value);\n    });\n\n    $(\"#id_realm_org_join_restrictions\").on(\"click\", (e) => {\n        // This prevents the disappearance of modal when there are\n        // no allowed domains otherwise it gets closed due to\n        // the click event handler attached to `#settings_overlay_container`\n        e.stopPropagation();\n    });\n\n    $(\"#show_realm_domains_modal\").on(\"click\", (e) => {\n        e.stopPropagation();\n        settings_realm_domains.show_realm_domains_modal();\n    });\n\n    function realm_icon_logo_upload_complete($spinner, $upload_text, $delete_button) {\n        $spinner.css({visibility: \"hidden\"});\n        $upload_text.show();\n        $delete_button.show();\n    }\n\n    function realm_icon_logo_upload_start($spinner, $upload_text, $delete_button) {\n        $spinner.css({visibility: \"visible\"});\n        $upload_text.hide();\n        $delete_button.hide();\n    }\n\n    function upload_realm_logo_or_icon($file_input, night, icon) {\n        const form_data = new FormData();\n        let widget;\n        let url;\n\n        form_data.append(\"csrfmiddlewaretoken\", csrf_token);\n        for (const [i, file] of Array.prototype.entries.call($file_input[0].files)) {\n            form_data.append(\"file-\" + i, file);\n        }\n        if (icon) {\n            url = \"/json/realm/icon\";\n            widget = \"#realm-icon-upload-widget\";\n        } else {\n            if (night) {\n                widget = \"#realm-night-logo-upload-widget\";\n            } else {\n                widget = \"#realm-day-logo-upload-widget\";\n            }\n            url = \"/json/realm/logo\";\n            form_data.append(\"night\", JSON.stringify(night));\n        }\n        const $spinner = $(`${widget} .upload-spinner-background`).expectOne();\n        const $upload_text = $(`${widget}  .image-upload-text`).expectOne();\n        const $delete_button = $(`${widget}  .image-delete-button`).expectOne();\n        const $error_field = $(`${widget}  .image_file_input_error`).expectOne();\n        realm_icon_logo_upload_start($spinner, $upload_text, $delete_button);\n        $error_field.hide();\n        channel.post({\n            url,\n            data: form_data,\n            cache: false,\n            processData: false,\n            contentType: false,\n            success() {\n                realm_icon_logo_upload_complete($spinner, $upload_text, $delete_button);\n            },\n            error(xhr) {\n                realm_icon_logo_upload_complete($spinner, $upload_text, $delete_button);\n                ui_report.error(\"\", xhr, $error_field);\n            },\n        });\n    }\n\n    realm_icon.build_realm_icon_widget(upload_realm_logo_or_icon, null, true);\n    if (page_params.zulip_plan_is_not_limited) {\n        realm_logo.build_realm_logo_widget(upload_realm_logo_or_icon, false);\n        realm_logo.build_realm_logo_widget(upload_realm_logo_or_icon, true);\n    }\n\n    $(\"#deactivate_realm_button\").on(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        function do_deactivate_realm() {\n            channel.post({\n                url: \"/json/realm/deactivate\",\n                error(xhr) {\n                    ui_report.error(\n                        $t_html({defaultMessage: \"Failed\"}),\n                        xhr,\n                        $(\"#admin-realm-deactivation-status\").expectOne(),\n                    );\n                },\n            });\n        }\n\n        const html_body = render_settings_deactivate_realm_modal();\n\n        confirm_dialog.launch({\n            html_heading: $t_html({defaultMessage: \"Deactivate organization\"}),\n            help_link: \"/help/deactivate-your-organization\",\n            html_body,\n            on_click: do_deactivate_realm,\n        });\n    });\n}\n","import $ from \"jquery\";\n\nimport * as browser_history from \"./browser_history\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as popovers from \"./popovers\";\nimport * as settings from \"./settings\";\nimport * as settings_sections from \"./settings_sections\";\nimport * as ui from \"./ui\";\n\nexport let normal_settings;\nexport let org_settings;\n\nexport function mobile_deactivate_section() {\n    const $settings_overlay_container = $(\"#settings_overlay_container\");\n    $settings_overlay_container.find(\".right\").removeClass(\"show\");\n    $settings_overlay_container.find(\".settings-header.mobile\").removeClass(\"slide-left\");\n}\n\nfunction two_column_mode() {\n    return $(\"#settings_overlay_container\").css(\"--single-column\") === undefined;\n}\n\nexport class SettingsPanelMenu {\n    constructor(opts) {\n        this.$main_elem = opts.$main_elem;\n        this.hash_prefix = opts.hash_prefix;\n        this.$curr_li = this.$main_elem.children(\"li\").eq(0);\n\n        this.$main_elem.on(\"click\", \"li[data-section]\", (e) => {\n            const section = $(e.currentTarget).attr(\"data-section\");\n\n            this.activate_section_or_default(section);\n\n            // You generally want to add logic to activate_section,\n            // not to this click handler.\n\n            e.stopPropagation();\n        });\n    }\n\n    show() {\n        this.$main_elem.show();\n        const section = this.current_tab();\n        if (two_column_mode()) {\n            // In one column mode want to show the settings list, not the first settings section.\n            this.activate_section_or_default(section);\n        }\n        this.$curr_li.trigger(\"focus\");\n    }\n\n    hide() {\n        this.$main_elem.hide();\n    }\n\n    current_tab() {\n        return this.$curr_li.data(\"section\");\n    }\n\n    li_for_section(section) {\n        const $li = $(`#settings_overlay_container li[data-section='${CSS.escape(section)}']`);\n        return $li;\n    }\n\n    set_key_handlers(toggler) {\n        const {vim_left, vim_right, vim_up, vim_down} = keydown_util;\n        keydown_util.handle({\n            $elem: this.$main_elem,\n            handlers: {\n                ArrowLeft: toggler.maybe_go_left,\n                ArrowRight: toggler.maybe_go_right,\n                Enter: () => this.enter_panel(),\n                ArrowUp: () => this.prev(),\n                ArrowDown: () => this.next(),\n\n                // Binding vim keys as well\n                [vim_left]: toggler.maybe_go_left,\n                [vim_right]: toggler.maybe_go_right,\n                [vim_up]: () => this.prev(),\n                [vim_down]: () => this.next(),\n            },\n        });\n    }\n\n    prev() {\n        this.$curr_li.prevAll(\":visible\").first().trigger(\"focus\").trigger(\"click\");\n        return true;\n    }\n\n    next() {\n        this.$curr_li.nextAll(\":visible\").first().trigger(\"focus\").trigger(\"click\");\n        return true;\n    }\n\n    enter_panel() {\n        const $panel = this.get_panel();\n        const $panel_elem = $panel.find(\"input:visible,button:visible,select:visible\").first();\n\n        $panel_elem.trigger(\"focus\");\n        return true;\n    }\n\n    activate_section_or_default(section) {\n        popovers.hide_all();\n        if (!section) {\n            // No section is given so we display the default.\n\n            if (two_column_mode()) {\n                // In two column mode we resume to the last active section.\n                section = this.current_tab();\n            } else {\n                // In single column mode we close the active section\n                // so that you always start at the settings list.\n                mobile_deactivate_section();\n                return;\n            }\n        }\n\n        const $li_for_section = this.li_for_section(section);\n        if ($li_for_section.length === 0) {\n            // This happens when there is no such section or the user does not have\n            // permission to view that section.\n            section = this.current_tab();\n        } else {\n            this.$curr_li = $li_for_section;\n        }\n\n        this.$main_elem.children(\"li\").removeClass(\"active\");\n        this.$curr_li.addClass(\"active\");\n\n        const settings_section_hash = \"#\" + this.hash_prefix + section;\n\n        // It could be that the hash has already been set.\n        browser_history.update_hash_internally_if_required(settings_section_hash);\n\n        $(\".settings-section\").removeClass(\"show\");\n\n        settings_sections.load_settings_section(section);\n\n        this.get_panel().addClass(\"show\");\n\n        ui.reset_scrollbar($(\"#settings_content\"));\n\n        const $settings_overlay_container = $(\"#settings_overlay_container\");\n        $settings_overlay_container.find(\".right\").addClass(\"show\");\n        $settings_overlay_container.find(\".settings-header.mobile\").addClass(\"slide-left\");\n\n        settings.set_settings_header(section);\n    }\n\n    get_panel() {\n        const section = this.$curr_li.data(\"section\");\n        const sel = `[data-name='${CSS.escape(section)}']`;\n        const $panel = $(\".settings-section\" + sel);\n        return $panel;\n    }\n}\n\nexport function initialize() {\n    normal_settings = new SettingsPanelMenu({\n        $main_elem: $(\".normal-settings-list\"),\n        hash_prefix: \"settings/\",\n    });\n    org_settings = new SettingsPanelMenu({\n        $main_elem: $(\".org-settings-list\"),\n        hash_prefix: \"organization/\",\n    });\n}\n\nexport function show_normal_settings() {\n    org_settings.hide();\n    normal_settings.show();\n}\n\nexport function show_org_settings() {\n    normal_settings.hide();\n    org_settings.show();\n}\n\nexport function set_key_handlers(toggler) {\n    normal_settings.set_key_handlers(toggler);\n    org_settings.set_key_handlers(toggler);\n}\n","import $ from \"jquery\";\n\nimport render_confirm_delete_playground from \"../templates/confirm_dialog/confirm_delete_playground.hbs\";\nimport render_admin_playground_list from \"../templates/settings/admin_playground_list.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport {$t_html} from \"./i18n\";\nimport * as ListWidget from \"./list_widget\";\nimport {page_params} from \"./page_params\";\nimport * as realm_playground from \"./realm_playground\";\nimport * as ui from \"./ui\";\nimport * as ui_report from \"./ui_report\";\n\nconst meta = {\n    loaded: false,\n};\n\nexport function reset() {\n    meta.loaded = false;\n}\n\nfunction compare_by_index(a, b, i) {\n    if (a[i] > b[i]) {\n        return 1;\n    } else if (a[i] === b[i]) {\n        return 0;\n    }\n    return -1;\n}\n\nfunction sort_pygments_language(a, b) {\n    return compare_by_index(a, b, 0);\n}\n\nfunction sort_playground_name(a, b) {\n    return compare_by_index(a, b, 1);\n}\n\nexport function maybe_disable_widgets() {\n    if (page_params.is_admin) {\n        return;\n    }\n}\n\nexport function populate_playgrounds(playgrounds_data) {\n    if (!meta.loaded) {\n        return;\n    }\n\n    const $playgrounds_table = $(\"#admin_playgrounds_table\").expectOne();\n    ListWidget.create($playgrounds_table, playgrounds_data, {\n        name: \"playgrounds_list\",\n        modifier(playground) {\n            return render_admin_playground_list({\n                playground: {\n                    playground_name: playground.name,\n                    pygments_language: playground.pygments_language,\n                    url_prefix: playground.url_prefix,\n                    id: playground.id,\n                },\n                can_modify: page_params.is_admin,\n            });\n        },\n        filter: {\n            $element: $playgrounds_table.closest(\".settings-section\").find(\".search\"),\n            predicate(item, value) {\n                return (\n                    item.name.toLowerCase().includes(value) ||\n                    item.pygments_language.toLowerCase().includes(value)\n                );\n            },\n            onupdate() {\n                ui.reset_scrollbar($playgrounds_table);\n            },\n        },\n        $parent_container: $(\"#playground-settings\").expectOne(),\n        init_sort: [sort_pygments_language],\n        sort_fields: {\n            pygments_language: sort_pygments_language,\n            playground_name: sort_playground_name,\n        },\n        $simplebar_container: $(\"#playground-settings .progressive-table-wrapper\"),\n    });\n}\n\nexport function set_up() {\n    build_page();\n    maybe_disable_widgets();\n}\n\nfunction build_page() {\n    meta.loaded = true;\n    populate_playgrounds(page_params.realm_playgrounds);\n\n    $(\".admin_playgrounds_table\").on(\"click\", \".delete\", function (e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const $btn = $(this);\n        const url =\n            \"/json/realm/playgrounds/\" + encodeURIComponent($btn.attr(\"data-playground-id\"));\n        const html_body = render_confirm_delete_playground();\n\n        confirm_dialog.launch({\n            html_heading: $t_html({defaultMessage: \"Delete code playground?\"}),\n            html_body,\n            id: \"confirm_delete_code_playgrounds_modal\",\n            on_click: () => dialog_widget.submit_api_request(channel.del, url),\n            loading_spinner: true,\n        });\n    });\n\n    $(\".organization form.admin-playground-form\")\n        .off(\"submit\")\n        .on(\"submit\", (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            const $playground_status = $(\"#admin-playground-status\");\n            const $add_playground_button = $(\".new-playground-form button\");\n            $add_playground_button.prop(\"disabled\", true);\n            $playground_status.hide();\n            const data = {\n                name: $(\"#playground_name\").val(),\n                pygments_language: $(\"#playground_pygments_language\").val(),\n                url_prefix: $(\"#playground_url_prefix\").val(),\n            };\n            channel.post({\n                url: \"/json/realm/playgrounds\",\n                data,\n                success() {\n                    $(\"#playground_pygments_language\").val(\"\");\n                    $(\"#playground_name\").val(\"\");\n                    $(\"#playground_url_prefix\").val(\"\");\n                    $add_playground_button.prop(\"disabled\", false);\n                    ui_report.success(\n                        $t_html({defaultMessage: \"Custom playground added!\"}),\n                        $playground_status,\n                        3000,\n                    );\n                    // FIXME: One thing to note here is that the \"view code in playground\"\n                    // option for an already rendered code block (tagged with this newly added\n                    // language) would not be visible without a re-render. To fix this, we should\n                    // probably do some extraction in `rendered_markdown.js` which does a\n                    // live-update of the `data-code-language` parameter in code blocks. Or change\n                    // how we do the HTML in the frontend so that the icon labels/behavior are\n                    // computed dynamically when you hover over the message based on configured\n                    // playgrounds. Since this isn't high priority right now, we can probably\n                    // take this up later.\n                },\n                error(xhr) {\n                    $add_playground_button.prop(\"disabled\", false);\n                    ui_report.error(\n                        $t_html({defaultMessage: \"Failed\"}),\n                        xhr,\n                        $playground_status,\n                        3000,\n                    );\n                },\n            });\n        });\n\n    const $search_pygments_box = $(\"#playground_pygments_language\");\n    let language_labels = new Map();\n\n    $search_pygments_box.typeahead({\n        source(query) {\n            language_labels = realm_playground.get_pygments_typeahead_list(query);\n            return Array.from(language_labels.keys());\n        },\n        items: 5,\n        fixed: true,\n        helpOnEmptyStrings: true,\n        highlighter(item) {\n            return language_labels.get(item);\n        },\n        matcher(item) {\n            const q = this.query.trim().toLowerCase();\n            return item.toLowerCase().startsWith(q);\n        },\n    });\n\n    $search_pygments_box.on(\"click\", (e) => {\n        $search_pygments_box.typeahead(\"lookup\").trigger(\"select\");\n        e.preventDefault();\n        e.stopPropagation();\n    });\n}\n","import $ from \"jquery\";\nimport {Sortable} from \"sortablejs\";\n\nimport render_confirm_delete_profile_field from \"../templates/confirm_dialog/confirm_delete_profile_field.hbs\";\nimport render_confirm_delete_profile_field_option from \"../templates/confirm_dialog/confirm_delete_profile_field_option.hbs\";\nimport render_add_new_custom_profile_field_form from \"../templates/settings/add_new_custom_profile_field_form.hbs\";\nimport render_admin_profile_field_list from \"../templates/settings/admin_profile_field_list.hbs\";\nimport render_edit_custom_profile_field_form from \"../templates/settings/edit_custom_profile_field_form.hbs\";\nimport render_settings_profile_field_choice from \"../templates/settings/profile_field_choice.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as loading from \"./loading\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as settings_ui from \"./settings_ui\";\nimport * as ui_report from \"./ui_report\";\n\nconst meta = {\n    loaded: false,\n};\n\nfunction display_success_status() {\n    const $spinner = $(\"#admin-profile-field-status\").expectOne();\n    const success_msg_html = settings_ui.strings.success_html;\n    ui_report.success(success_msg_html, $spinner, 1000);\n    settings_ui.display_checkmark($spinner);\n}\n\nexport function maybe_disable_widgets() {\n    if (page_params.is_admin) {\n        return;\n    }\n\n    $(\".organization-box [data-name='profile-field-settings']\")\n        .find(\"input, button, select\")\n        .prop(\"disabled\", true);\n}\n\nlet display_in_profile_summary_fields_limit_reached = false;\nlet order = [];\nconst field_types = page_params.custom_profile_field_types;\n\nexport function field_type_id_to_string(type_id) {\n    for (const field_type of Object.values(field_types)) {\n        if (field_type.id === type_id) {\n            // Few necessary modifications in field-type-name for\n            // table-list view of custom fields UI in org settings\n            if (field_type.name === \"Date picker\") {\n                return \"Date\";\n            } else if (field_type.name === \"Person picker\") {\n                return \"Person\";\n            }\n            return field_type.name;\n        }\n    }\n    return undefined;\n}\n\n// Checking custom profile field type is valid for showing display on user card checkbox field.\nfunction is_valid_to_display_in_summary(field_type) {\n    if (field_type === field_types.LONG_TEXT.id || field_type === field_types.USER.id) {\n        return false;\n    }\n    return true;\n}\n\nfunction update_profile_fields_table_element() {\n    const $profile_fields_table = $(\"#admin_profile_fields_table\").expectOne();\n\n    // If there are no custom fields, hide the table headers at the top\n    if (page_params.custom_profile_fields.length < 1) {\n        $profile_fields_table.hide();\n    } else {\n        $profile_fields_table.show();\n    }\n}\n\nfunction delete_profile_field(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const profile_field_id = Number.parseInt($(e.currentTarget).attr(\"data-profile-field-id\"), 10);\n    const profile_field = get_profile_field(profile_field_id);\n    const active_user_ids = people.get_active_user_ids();\n    let users_using_deleting_profile_field = 0;\n\n    for (const user_id of active_user_ids) {\n        const user_profile_data = people.get_custom_profile_data(user_id, profile_field_id);\n        if (user_profile_data) {\n            users_using_deleting_profile_field += 1;\n        }\n    }\n\n    const html_body = render_confirm_delete_profile_field({\n        profile_field_name: profile_field.name,\n        count: users_using_deleting_profile_field,\n    });\n\n    function request_delete() {\n        const url = \"/json/realm/profile_fields/\" + profile_field_id;\n        const opts = {\n            success_continuation() {\n                display_success_status();\n                update_profile_fields_table_element();\n            },\n        };\n        dialog_widget.submit_api_request(channel.del, url, {}, opts);\n    }\n\n    confirm_dialog.launch({\n        html_body,\n        html_heading: $t_html({defaultMessage: \"Delete custom profile field?\"}),\n        on_click: request_delete,\n    });\n}\n\nfunction read_select_field_data_from_form($profile_field_form, old_field_data) {\n    const field_data = {};\n    let field_order = 1;\n\n    const old_option_value_map = new Map();\n    if (old_field_data !== undefined) {\n        for (const [value, choice] of Object.entries(old_field_data)) {\n            old_option_value_map.set(choice.text, value);\n        }\n    }\n\n    $profile_field_form.find(\"div.choice-row\").each(function () {\n        const text = $(this).find(\"input\")[0].value;\n        if (text) {\n            if (old_option_value_map.get(text) !== undefined) {\n                // Resetting the data-value in the form is\n                // important if the user removed an option string\n                // and then added it back again before saving\n                // changes.\n                $(this).attr(\"data-value\", old_option_value_map.get(text));\n            }\n            const value = $(this).attr(\"data-value\");\n            field_data[value] = {text, order: field_order.toString()};\n            field_order += 1;\n        }\n    });\n\n    return field_data;\n}\n\nfunction read_external_account_field_data($profile_field_form) {\n    const field_data = {};\n    field_data.subtype = $profile_field_form.find(\"select[name=external_acc_field_type]\").val();\n    if (field_data.subtype === \"custom\") {\n        field_data.url_pattern = $profile_field_form.find(\"input[name=url_pattern]\").val();\n    }\n    return field_data;\n}\n\nfunction update_choice_delete_btn($container, display_flag) {\n    const no_of_choice_row = $container.find(\".choice-row\").length;\n\n    // Disable delete button if there only one choice row\n    // Enable choice delete button more one than once choice\n    if (no_of_choice_row === 1) {\n        if (display_flag === true) {\n            $container.find(\".choice-row .delete-choice\").show();\n        } else {\n            $container.find(\".choice-row .delete-choice\").hide();\n        }\n    }\n}\n\nfunction get_value_for_new_option(container) {\n    const $choice_rows = $(container).find(\".choice-row\");\n    if ($choice_rows.length === 0) {\n        // Value for the first option is 0.\n        return 0;\n    }\n\n    const existing_option_values = [];\n    $choice_rows.each(function () {\n        existing_option_values.push(Number.parseInt($(this).attr(\"data-value\"), 10));\n    });\n    existing_option_values.sort();\n    return existing_option_values[existing_option_values.length - 1] + 1;\n}\n\nfunction create_choice_row(container) {\n    const context = {value: get_value_for_new_option(container)};\n    const row = render_settings_profile_field_choice(context);\n    $(container).append(row);\n}\n\nfunction clear_form_data() {\n    $(\"#profile_field_name\").val(\"\").closest(\".input-group\").show();\n    $(\"#profile_field_hint\").val(\"\").closest(\".input-group\").show();\n    // Set default type \"Short text\" in field type dropdown\n    $(\"#profile_field_type\").val(field_types.SHORT_TEXT.id);\n    // Clear data from select field form\n    $(\"#profile_field_choices\").empty();\n    create_choice_row($(\"#profile_field_choices\"));\n    update_choice_delete_btn($(\"#profile_field_choices\"), false);\n    $(\"#profile_field_choices_row\").hide();\n    // Clear external account field form\n    $(\"#custom_field_url_pattern\").val(\"\");\n    $(\"#custom_external_account_url_pattern\").hide();\n    $(\"#profile_field_external_accounts\").hide();\n    $(\"#profile_field_external_accounts_type\").val(\n        $(\"#profile_field_external_accounts_type option:first-child\").val(),\n    );\n}\n\nfunction set_up_create_field_form() {\n    // Hide error on field type change.\n    $(\"#dialog_error\").hide();\n    const $field_elem = $(\"#profile_field_external_accounts\");\n    const $field_url_pattern_elem = $(\"#custom_external_account_url_pattern\");\n    const profile_field_type = Number.parseInt($(\"#profile_field_type\").val(), 10);\n\n    $(\"#profile_field_name\").val(\"\").prop(\"disabled\", false);\n    $(\"#profile_field_hint\").val(\"\").prop(\"disabled\", false);\n    $field_url_pattern_elem.hide();\n    $field_elem.hide();\n\n    if (profile_field_type === field_types.EXTERNAL_ACCOUNT.id) {\n        $field_elem.show();\n        const $profile_field_external_account_type = $(\n            \"#profile_field_external_accounts_type\",\n        ).val();\n        if ($profile_field_external_account_type === \"custom\") {\n            $field_url_pattern_elem.show();\n        } else {\n            $field_url_pattern_elem.hide();\n            const profile_field_name =\n                page_params.realm_default_external_accounts[$profile_field_external_account_type]\n                    .name;\n            $(\"#profile_field_name\").val(profile_field_name).prop(\"disabled\", true);\n            $(\"#profile_field_hint\").val(\"\").prop(\"disabled\", true);\n        }\n    } else if (profile_field_type === field_types.PRONOUNS.id) {\n        const default_label = $t({defaultMessage: \"Pronouns\"});\n        const default_hint = $t({\n            defaultMessage: \"What pronouns should people use to refer to you?\",\n        });\n        $(\"#profile_field_name\").val(default_label);\n        $(\"#profile_field_hint\").val(default_hint);\n    }\n\n    // Not showing \"display on user card\" option for long text/user profile field.\n    if (is_valid_to_display_in_summary(profile_field_type)) {\n        $(\"#profile_field_display_in_profile_summary\").closest(\".input-group\").show();\n        const check_display_in_profile_summary_by_default =\n            profile_field_type === field_types.PRONOUNS.id &&\n            !display_in_profile_summary_fields_limit_reached;\n        $(\"#profile_field_display_in_profile_summary\").prop(\n            \"checked\",\n            check_display_in_profile_summary_by_default,\n        );\n    } else {\n        $(\"#profile_field_display_in_profile_summary\").closest(\".input-group\").hide();\n        $(\"#profile_field_display_in_profile_summary\").prop(\"checked\", false);\n    }\n}\n\nfunction read_field_data_from_form(field_type_id, $profile_field_form, old_field_data) {\n    // Only read field data if we are creating a select field\n    // or external account field.\n    if (field_type_id === field_types.SELECT.id) {\n        return read_select_field_data_from_form($profile_field_form, old_field_data);\n    } else if (field_type_id === field_types.EXTERNAL_ACCOUNT.id) {\n        return read_external_account_field_data($profile_field_form);\n    }\n    return undefined;\n}\n\nfunction open_custom_profile_field_form_modal() {\n    const html_body = render_add_new_custom_profile_field_form({\n        realm_default_external_accounts: page_params.realm_default_external_accounts,\n        custom_profile_field_types: page_params.custom_profile_field_types,\n    });\n\n    function create_profile_field() {\n        let field_data = {};\n        const field_type = $(\"#profile_field_type\").val();\n        field_data = read_field_data_from_form(\n            Number.parseInt(field_type, 10),\n            $(\".new-profile-field-form\"),\n        );\n        const data = {\n            name: $(\"#profile_field_name\").val(),\n            hint: $(\"#profile_field_hint\").val(),\n            field_type,\n            field_data: JSON.stringify(field_data),\n            display_in_profile_summary: $(\"#profile_field_display_in_profile_summary\").is(\n                \":checked\",\n            ),\n        };\n        const url = \"/json/realm/profile_fields\";\n        const opts = {\n            success_continuation() {\n                display_success_status();\n            },\n        };\n        dialog_widget.submit_api_request(channel.post, url, data, opts);\n    }\n\n    function set_up_form_fields() {\n        set_up_select_field();\n        set_up_external_account_field();\n        clear_form_data();\n\n        // If we already have 2 custom profile fields configured to be\n        // displayed on the user card, disable the input to change it.\n        $(\"#add-new-custom-profile-field-form #profile_field_display_in_profile_summary\").prop(\n            \"disabled\",\n            display_in_profile_summary_fields_limit_reached,\n        );\n        $(\"#add-new-custom-profile-field-form .profile_field_display_label\").toggleClass(\n            \"disabled_label\",\n            display_in_profile_summary_fields_limit_reached,\n        );\n        $(\"#add-new-custom-profile-field-form .checkbox\").toggleClass(\n            \"display_in_profile_summary_tooltip\",\n            display_in_profile_summary_fields_limit_reached,\n        );\n    }\n\n    dialog_widget.launch({\n        form_id: \"add-new-custom-profile-field-form\",\n        help_link: \"/help/custom-profile-fields#add-a-custom-profile-field\",\n        html_heading: $t_html({defaultMessage: \"Add a new custom profile field\"}),\n        html_body,\n        html_submit_button: $t_html({defaultMessage: \"Add\"}),\n        on_click: create_profile_field,\n        post_render: set_up_form_fields,\n        loading_spinner: true,\n    });\n}\n\nfunction add_choice_row(e) {\n    if ($(e.target).parent().next().hasClass(\"choice-row\")) {\n        return;\n    }\n    const choices_div = e.delegateTarget;\n    update_choice_delete_btn($(choices_div), true);\n    create_choice_row(choices_div);\n}\n\nfunction delete_choice_row(e) {\n    const $row = $(e.currentTarget).parent();\n    const $container = $row.parent();\n    $row.remove();\n    update_choice_delete_btn($container, false);\n}\n\nfunction show_modal_for_deleting_options(field, deleted_values, update_profile_field) {\n    const active_user_ids = people.get_active_user_ids();\n    let users_count_with_deleted_option_selected = 0;\n    for (const user_id of active_user_ids) {\n        const field_value = people.get_custom_profile_data(user_id, field.id);\n        if (field_value && deleted_values[field_value.value]) {\n            users_count_with_deleted_option_selected += 1;\n        }\n    }\n    const deleted_options_count = Object.keys(deleted_values).length;\n    const html_body = render_confirm_delete_profile_field_option({\n        count: users_count_with_deleted_option_selected,\n        field_name: field.name,\n        deleted_options_count,\n        deleted_values,\n    });\n\n    let modal_heading_text = \"Delete this option?\";\n    if (deleted_options_count !== 1) {\n        modal_heading_text = \"Delete these options?\";\n    }\n    confirm_dialog.launch({\n        html_heading: $t_html({defaultMessage: \"{modal_heading_text}\"}, {modal_heading_text}),\n        html_body,\n        on_click: update_profile_field,\n    });\n}\n\nfunction get_profile_field(id) {\n    return page_params.custom_profile_fields.find((field) => field.id === id);\n}\n\nexport function parse_field_choices_from_field_data(field_data) {\n    const choices = [];\n    for (const [value, choice] of Object.entries(field_data)) {\n        choices.push({\n            value,\n            text: choice.text,\n            order: choice.order,\n        });\n    }\n    choices.sort((a, b) => a.order - b.order);\n    return choices;\n}\n\nfunction set_up_external_account_field_edit_form($profile_field_form, url_pattern_val) {\n    if ($profile_field_form.find(\"select[name=external_acc_field_type]\").val() === \"custom\") {\n        $profile_field_form.find(\"input[name=url_pattern]\").val(url_pattern_val);\n        $profile_field_form.find(\".custom_external_account_detail\").show();\n        $profile_field_form.find(\"input[name=name]\").prop(\"disabled\", false);\n        $profile_field_form.find(\"input[name=hint]\").prop(\"disabled\", false);\n    } else {\n        $profile_field_form.find(\"input[name=name]\").prop(\"disabled\", true);\n        $profile_field_form.find(\"input[name=hint]\").prop(\"disabled\", true);\n        $profile_field_form.find(\".custom_external_account_detail\").hide();\n    }\n}\n\nfunction set_up_select_field_edit_form($profile_field_form, field_data) {\n    // Re-render field choices in edit form to load initial select data\n    const $choice_list = $profile_field_form.find(\".edit_profile_field_choices_container\");\n    $choice_list.off();\n    $choice_list.empty();\n\n    const choices_data = parse_field_choices_from_field_data(field_data);\n\n    for (const choice of choices_data) {\n        $choice_list.append(\n            render_settings_profile_field_choice({\n                text: choice.text,\n                value: choice.value,\n            }),\n        );\n    }\n\n    // Add blank choice at last\n    create_choice_row($choice_list);\n    update_choice_delete_btn($choice_list, false);\n    Sortable.create($choice_list[0], {\n        onUpdate() {},\n        filter: \"input\",\n        preventOnFilter: false,\n    });\n}\n\nfunction open_edit_form_modal(e) {\n    const field_id = Number.parseInt($(e.currentTarget).attr(\"data-profile-field-id\"), 10);\n    const field = get_profile_field(field_id);\n\n    let field_data = {};\n    if (field.field_data) {\n        field_data = JSON.parse(field.field_data);\n    }\n    let choices = [];\n    if (field.type === field_types.SELECT.id) {\n        choices = parse_field_choices_from_field_data(field_data);\n    }\n\n    const html_body = render_edit_custom_profile_field_form({\n        profile_field_info: {\n            id: field.id,\n            name: field.name,\n            hint: field.hint,\n            choices,\n            display_in_profile_summary: field.display_in_profile_summary === true,\n            is_select_field: field.type === field_types.SELECT.id,\n            is_external_account_field: field.type === field_types.EXTERNAL_ACCOUNT.id,\n            valid_to_display_in_summary: is_valid_to_display_in_summary(field.type),\n        },\n        realm_default_external_accounts: page_params.realm_default_external_accounts,\n    });\n\n    function set_initial_values_of_profile_field() {\n        const $profile_field_form = $(\"#edit-custom-profile-field-form-\" + field_id);\n\n        // If it exceeds or equals the max limit, we are disabling option for display custom\n        // profile field on user card and adding tooptip, unless the field is already checked.\n        if (display_in_profile_summary_fields_limit_reached && !field.display_in_profile_summary) {\n            $profile_field_form\n                .find(\"input[name=display_in_profile_summary]\")\n                .prop(\"disabled\", true);\n            $profile_field_form\n                .find(\".checkbox\")\n                .addClass(\"display_in_profile_summary_tooltip disabled_label\");\n        }\n\n        if (Number.parseInt(field.type, 10) === field_types.SELECT.id) {\n            set_up_select_field_edit_form($profile_field_form, field_data);\n        }\n\n        if (Number.parseInt(field.type, 10) === field_types.EXTERNAL_ACCOUNT.id) {\n            $profile_field_form\n                .find(\"select[name=external_acc_field_type]\")\n                .val(field_data.subtype);\n            set_up_external_account_field_edit_form($profile_field_form, field_data.url_pattern);\n        }\n\n        // Set initial value in edit form\n        $profile_field_form.find(\"input[name=name]\").val(field.name);\n        $profile_field_form.find(\"input[name=hint]\").val(field.hint);\n\n        $profile_field_form\n            .find(\".edit_profile_field_choices_container\")\n            .on(\"input\", \".choice-row input\", add_choice_row);\n        $profile_field_form\n            .find(\".edit_profile_field_choices_container\")\n            .on(\"click\", \"button.delete-choice\", delete_choice_row);\n    }\n\n    function submit_form() {\n        const $profile_field_form = $(\"#edit-custom-profile-field-form-\" + field_id);\n\n        // For some reason jQuery's serialize() is not working with\n        // channel.patch even though it is supported by $.ajax.\n        const data = {};\n\n        data.name = $profile_field_form.find(\"input[name=name]\").val();\n        data.hint = $profile_field_form.find(\"input[name=hint]\").val();\n        data.display_in_profile_summary = $profile_field_form\n            .find(\"input[name=display_in_profile_summary]\")\n            .is(\":checked\");\n\n        const new_field_data = read_field_data_from_form(\n            Number.parseInt(field.type, 10),\n            $profile_field_form,\n            field_data,\n        );\n        data.field_data = JSON.stringify(new_field_data);\n\n        function update_profile_field() {\n            const url = \"/json/realm/profile_fields/\" + field_id;\n            const opts = {\n                success_continuation() {\n                    display_success_status();\n                },\n            };\n            dialog_widget.submit_api_request(channel.patch, url, data, opts);\n        }\n\n        if (field.type === field_types.SELECT.id) {\n            const new_values = new Set(Object.keys(new_field_data));\n            const deleted_values = {};\n            for (const [value, option] of Object.entries(field_data)) {\n                if (!new_values.has(value)) {\n                    deleted_values[value] = option.text;\n                }\n            }\n\n            if (Object.keys(deleted_values).length !== 0) {\n                const edit_select_field_modal_callback = () =>\n                    show_modal_for_deleting_options(field, deleted_values, update_profile_field);\n                dialog_widget.close_modal(edit_select_field_modal_callback);\n                return;\n            }\n        }\n\n        update_profile_field();\n    }\n\n    const edit_custom_profile_field_form_id = \"edit-custom-profile-field-form-\" + field_id;\n    dialog_widget.launch({\n        form_id: edit_custom_profile_field_form_id,\n        html_heading: $t_html({defaultMessage: \"Edit custom profile field\"}),\n        html_body,\n        id: \"edit-custom-profile-field-form-modal\",\n        on_click: submit_form,\n        post_render: set_initial_values_of_profile_field,\n        loading_spinner: true,\n    });\n}\n\n// If exceeds or equals the max limit, we are disabling option for\n// display custom profile field on user card and adding tooltip.\nfunction update_profile_fields_checkboxes() {\n    // Disabling only uncheck checkboxes in table, so user should able uncheck checked checkboxes.\n    $(\"#admin_profile_fields_table .display_in_profile_summary_checkbox_false\").prop(\n        \"disabled\",\n        display_in_profile_summary_fields_limit_reached,\n    );\n    $(\"#admin_profile_fields_table .display_in_profile_summary_false\").toggleClass(\n        \"display_in_profile_summary_tooltip\",\n        display_in_profile_summary_fields_limit_reached,\n    );\n}\n\nfunction toggle_display_in_profile_summary_profile_field(e) {\n    const field_id = Number.parseInt($(e.currentTarget).attr(\"data-profile-field-id\"), 10);\n    const field = get_profile_field(field_id);\n\n    let field_data;\n    if (field.field_data) {\n        field_data = field.field_data;\n    }\n\n    const data = {\n        name: field.name,\n        hint: field.hint,\n        field_data,\n        display_in_profile_summary: !field.display_in_profile_summary,\n    };\n    const $profile_field_status = $(\"#admin-profile-field-status\").expectOne();\n\n    settings_ui.do_settings_change(\n        channel.patch,\n        \"/json/realm/profile_fields/\" + field_id,\n        data,\n        $profile_field_status,\n    );\n}\n\nexport function reset() {\n    meta.loaded = false;\n}\n\nfunction update_field_order() {\n    order = [];\n    $(\".profile-field-row\").each(function () {\n        order.push(Number.parseInt($(this).attr(\"data-profile-field-id\"), 10));\n    });\n    settings_ui.do_settings_change(\n        channel.patch,\n        \"/json/realm/profile_fields\",\n        {order: JSON.stringify(order)},\n        $(\"#admin-profile-field-status\").expectOne(),\n    );\n}\n\nexport function populate_profile_fields(profile_fields_data) {\n    if (!meta.loaded) {\n        // If outside callers call us when we're not loaded, just\n        // exit and we'll draw the widgets again during set_up().\n        return;\n    }\n    do_populate_profile_fields(profile_fields_data);\n}\n\nexport function do_populate_profile_fields(profile_fields_data) {\n    // We should only call this internally or from tests.\n    const $profile_fields_table = $(\"#admin_profile_fields_table\").expectOne();\n\n    $profile_fields_table.find(\"tr.profile-field-row\").remove(); // Clear all rows.\n    $profile_fields_table.find(\"tr.profile-field-form\").remove(); // Clear all rows.\n    order = [];\n\n    let display_in_profile_summary_fields_count = 0;\n    for (const profile_field of profile_fields_data) {\n        order.push(profile_field.id);\n        let field_data = {};\n        if (profile_field.field_data) {\n            field_data = JSON.parse(profile_field.field_data);\n        }\n        let choices = [];\n        if (profile_field.type === field_types.SELECT.id) {\n            choices = parse_field_choices_from_field_data(field_data);\n        }\n\n        const display_in_profile_summary = profile_field.display_in_profile_summary === true;\n        $profile_fields_table.append(\n            render_admin_profile_field_list({\n                profile_field: {\n                    id: profile_field.id,\n                    name: profile_field.name,\n                    hint: profile_field.hint,\n                    type: field_type_id_to_string(profile_field.type),\n                    choices,\n                    is_select_field: profile_field.type === field_types.SELECT.id,\n                    is_external_account_field:\n                        profile_field.type === field_types.EXTERNAL_ACCOUNT.id,\n                    display_in_profile_summary,\n                    valid_to_display_in_summary: is_valid_to_display_in_summary(profile_field.type),\n                },\n                can_modify: page_params.is_admin,\n                realm_default_external_accounts: page_params.realm_default_external_accounts,\n            }),\n        );\n\n        // Keeping counts of all display_in_profile_summary profile fields, to keep track.\n        if (display_in_profile_summary) {\n            display_in_profile_summary_fields_count += 1;\n        }\n    }\n\n    // Update whether we're at the limit for display_in_profile_summary.\n    display_in_profile_summary_fields_limit_reached = display_in_profile_summary_fields_count >= 2;\n\n    if (page_params.is_admin) {\n        const field_list = $(\"#admin_profile_fields_table\")[0];\n        Sortable.create(field_list, {\n            onUpdate: update_field_order,\n            filter: \"input\",\n            preventOnFilter: false,\n        });\n    }\n\n    update_profile_fields_checkboxes();\n    update_profile_fields_table_element();\n    loading.destroy_indicator($(\"#admin_page_profile_fields_loading_indicator\"));\n}\n\nfunction set_up_select_field() {\n    create_choice_row(\"#profile_field_choices\");\n    update_choice_delete_btn($(\"#profile_field_choices\"), false);\n\n    if (page_params.is_admin) {\n        const choice_list = $(\"#profile_field_choices\")[0];\n        Sortable.create(choice_list, {\n            onUpdate() {},\n            filter: \"input\",\n            preventOnFilter: false,\n        });\n    }\n\n    const field_type = $(\"#profile_field_type\").val();\n\n    if (Number.parseInt(field_type, 10) !== field_types.SELECT.id) {\n        // If 'Select' type is already selected, show choice row.\n        $(\"#profile_field_choices_row\").hide();\n    }\n\n    $(\"#profile_field_type\").on(\"change\", (e) => {\n        // Hide error on field type change.\n        $(\"#dialog_error\").hide();\n        const selected_field_id = Number.parseInt($(e.target).val(), 10);\n        if (selected_field_id === field_types.SELECT.id) {\n            $(\"#profile_field_choices_row\").show();\n        } else {\n            $(\"#profile_field_choices_row\").hide();\n        }\n    });\n\n    $(\"#profile_field_choices\").on(\"input\", \".choice-row input\", add_choice_row);\n    $(\"#profile_field_choices\").on(\"click\", \"button.delete-choice\", delete_choice_row);\n}\n\nfunction set_up_external_account_field() {\n    $(\"#profile_field_type\").on(\"change\", () => {\n        set_up_create_field_form();\n    });\n\n    $(\"#profile_field_external_accounts_type\").on(\"change\", () => {\n        set_up_create_field_form();\n    });\n}\n\nexport function get_external_account_link(field) {\n    const field_subtype = field.field_data.subtype;\n    let field_url_pattern;\n\n    if (field_subtype === \"custom\") {\n        field_url_pattern = field.field_data.url_pattern;\n    } else {\n        field_url_pattern = page_params.realm_default_external_accounts[field_subtype].url_pattern;\n    }\n    return field_url_pattern.replace(\"%(username)s\", field.value);\n}\n\nexport function set_up() {\n    build_page();\n    maybe_disable_widgets();\n}\n\nexport function build_page() {\n    // create loading indicators\n    loading.make_indicator($(\"#admin_page_profile_fields_loading_indicator\"));\n    // Populate profile_fields table\n    do_populate_profile_fields(page_params.custom_profile_fields);\n    meta.loaded = true;\n\n    $(\"#admin_profile_fields_table\").on(\"click\", \".delete\", delete_profile_field);\n    $(\"#add-custom-profile-field-btn\").on(\"click\", open_custom_profile_field_form_modal);\n    $(\"#admin_profile_fields_table\").on(\"click\", \".open-edit-form-modal\", open_edit_form_modal);\n    $(\"#admin_profile_fields_table\").on(\n        \"click\",\n        \".display_in_profile_summary\",\n        toggle_display_in_profile_summary_profile_field,\n    );\n}\n","import $ from \"jquery\";\n\nimport render_settings_admin_realm_domains_list from \"../templates/settings/admin_realm_domains_list.hbs\";\nimport render_realm_domains_modal from \"../templates/settings/realm_domains_modal.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport {$t_html} from \"./i18n\";\nimport {page_params} from \"./page_params\";\nimport * as ui_report from \"./ui_report\";\n\nexport function populate_realm_domains_table(realm_domains) {\n    // Don't populate the table if the realm domains modal isn't open.\n    if ($(\"#realm_domains_modal\").length === 0) {\n        return;\n    }\n\n    const $realm_domains_table_body = $(\"#realm_domains_table tbody\").expectOne();\n    $realm_domains_table_body.find(\"tr\").remove();\n\n    for (const realm_domain of realm_domains) {\n        $realm_domains_table_body.append(\n            render_settings_admin_realm_domains_list({\n                realm_domain,\n            }),\n        );\n    }\n}\n\nfunction fade_status_element($elem) {\n    setTimeout(() => {\n        $elem.fadeOut(500);\n    }, 3000);\n}\n\nexport function setup_realm_domains_modal_handlers() {\n    $(\"#realm_domains_table\").on(\"click\", \".delete_realm_domain\", function () {\n        const domain = $(this).parents(\"tr\").find(\".domain\").text();\n        const url = \"/json/realm/domains/\" + domain;\n        const $realm_domains_info = $(\".realm_domains_info\");\n\n        channel.del({\n            url,\n            success() {\n                ui_report.success(\n                    $t_html({defaultMessage: \"Deleted successfully!\"}),\n                    $realm_domains_info,\n                );\n                fade_status_element($realm_domains_info);\n            },\n            error(xhr) {\n                ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, $realm_domains_info);\n                fade_status_element($realm_domains_info);\n            },\n        });\n    });\n\n    $(\"#realm_domains_table\").on(\"change\", \".allow-subdomains\", function (e) {\n        e.stopPropagation();\n        const $realm_domains_info = $(\".realm_domains_info\");\n        const domain = $(this).parents(\"tr\").find(\".domain\").text();\n        const allow_subdomains = $(this).prop(\"checked\");\n        const url = \"/json/realm/domains/\" + domain;\n        const data = {\n            allow_subdomains: JSON.stringify(allow_subdomains),\n        };\n\n        channel.patch({\n            url,\n            data,\n            success() {\n                if (allow_subdomains) {\n                    ui_report.success(\n                        $t_html(\n                            {\n                                defaultMessage:\n                                    \"Update successful: Subdomains allowed for {domain}\",\n                            },\n                            {domain},\n                        ),\n                        $realm_domains_info,\n                    );\n                } else {\n                    ui_report.success(\n                        $t_html(\n                            {\n                                defaultMessage:\n                                    \"Update successful: Subdomains no longer allowed for {domain}\",\n                            },\n                            {domain},\n                        ),\n                        $realm_domains_info,\n                    );\n                }\n                fade_status_element($realm_domains_info);\n            },\n            error(xhr) {\n                ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, $realm_domains_info);\n                fade_status_element($realm_domains_info);\n            },\n        });\n    });\n\n    $(\"#submit-add-realm-domain\").on(\"click\", () => {\n        const $realm_domains_info = $(\".realm_domains_info\");\n        const $widget = $(\"#add-realm-domain-widget\");\n        const domain = $widget.find(\".new-realm-domain\").val();\n        const allow_subdomains = $widget.find(\".new-realm-domain-allow-subdomains\").prop(\"checked\");\n        const data = {\n            domain,\n            allow_subdomains: JSON.stringify(allow_subdomains),\n        };\n\n        channel.post({\n            url: \"/json/realm/domains\",\n            data,\n            success() {\n                $(\"#add-realm-domain-widget .new-realm-domain\").val(\"\");\n                $(\"#add-realm-domain-widget .new-realm-domain-allow-subdomains\").prop(\n                    \"checked\",\n                    false,\n                );\n                ui_report.success(\n                    $t_html({defaultMessage: \"Added successfully!\"}),\n                    $realm_domains_info,\n                );\n                fade_status_element($realm_domains_info);\n            },\n            error(xhr) {\n                ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, $realm_domains_info);\n                fade_status_element($realm_domains_info);\n            },\n        });\n    });\n}\n\nexport function show_realm_domains_modal() {\n    const realm_domains_table_body = render_realm_domains_modal();\n\n    dialog_widget.launch({\n        html_heading: $t_html({defaultMessage: \"Allowed domains\"}),\n        html_body: realm_domains_table_body,\n        html_submit_button: $t_html({defaultMessage: \"Close\"}),\n        id: \"realm_domains_modal\",\n        on_click() {},\n        close_on_submit: true,\n        focus_submit_on_open: true,\n        single_footer_button: true,\n        post_render() {\n            setup_realm_domains_modal_handlers();\n            populate_realm_domains_table(page_params.realm_domains);\n        },\n    });\n}\n","import $ from \"jquery\";\n\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\nimport {realm_user_settings_defaults} from \"./realm_user_settings_defaults\";\nimport * as settings_display from \"./settings_display\";\nimport * as settings_notifications from \"./settings_notifications\";\nimport * as settings_org from \"./settings_org\";\n\nexport const realm_default_settings_panel = {};\n\nexport function maybe_disable_widgets() {\n    if (!page_params.is_admin) {\n        $(\".organization-box [data-name='organization-level-user-defaults']\")\n            .find(\"input, select\")\n            .prop(\"disabled\", true);\n\n        $(\".organization-box [data-name='organization-level-user-defaults']\")\n            .find(\".play_notification_sound\")\n            .addClass(\"control-label-disabled\");\n    }\n}\n\nexport function update_page(property) {\n    if (!overlays.settings_open()) {\n        return;\n    }\n    const $container = $(realm_default_settings_panel.container);\n    let value = realm_user_settings_defaults[property];\n\n    // settings_org.set_input_element_value doesn't support radio\n    // button widgets like these.\n    if (property === \"emojiset\" || property === \"user_list_style\") {\n        $container.find(`input[value=${CSS.escape(value)}]`).prop(\"checked\", true);\n        return;\n    }\n\n    if (property === \"email_notifications_batching_period_seconds\") {\n        settings_notifications.set_notification_batching_ui($container, value);\n        return;\n    }\n\n    // The twenty_four_hour_time setting is represented as a boolean\n    // in the API, but a dropdown with \"true\"/\"false\" as strings in\n    // the UI, so we need to convert its format here.\n    if (property === \"twenty_four_hour_time\") {\n        value = value.toString();\n    }\n\n    const $input_elem = $container.find(`[name=${CSS.escape(property)}]`);\n    settings_org.set_input_element_value($input_elem, value);\n}\n\nexport function set_up() {\n    const $container = $(realm_default_settings_panel.container);\n    settings_display.set_up(realm_default_settings_panel);\n    settings_notifications.set_up(realm_default_settings_panel);\n\n    settings_org.register_save_discard_widget_handlers(\n        $container,\n        \"/json/realm/user_settings_defaults\",\n        true,\n    );\n\n    maybe_disable_widgets();\n}\n\nexport function initialize() {\n    realm_default_settings_panel.container = \"#realm-user-default-settings\";\n    realm_default_settings_panel.settings_object = realm_user_settings_defaults;\n    realm_default_settings_panel.notification_sound_elem =\n        \"#realm-default-notification-sound-audio\";\n    realm_default_settings_panel.for_realm_settings = true;\n}\n","import * as alert_words_ui from \"./alert_words_ui\";\nimport * as attachments_ui from \"./attachments_ui\";\nimport * as blueslip from \"./blueslip\";\nimport * as settings_account from \"./settings_account\";\nimport * as settings_bots from \"./settings_bots\";\nimport * as settings_display from \"./settings_display\";\nimport * as settings_emoji from \"./settings_emoji\";\nimport * as settings_exports from \"./settings_exports\";\nimport * as settings_invites from \"./settings_invites\";\nimport * as settings_linkifiers from \"./settings_linkifiers\";\nimport * as settings_muted_topics from \"./settings_muted_topics\";\nimport * as settings_muted_users from \"./settings_muted_users\";\nimport * as settings_notifications from \"./settings_notifications\";\nimport * as settings_org from \"./settings_org\";\nimport * as settings_playgrounds from \"./settings_playgrounds\";\nimport * as settings_profile_fields from \"./settings_profile_fields\";\nimport * as settings_realm_user_settings_defaults from \"./settings_realm_user_settings_defaults\";\nimport * as settings_streams from \"./settings_streams\";\nimport * as settings_user_groups from \"./settings_user_groups_legacy\";\nimport * as settings_users from \"./settings_users\";\n\nconst load_func_dict = new Map(); // group -> function\nconst loaded_groups = new Set();\n\nexport function get_group(section) {\n    // Sometimes several sections all share the same code.\n\n    switch (section) {\n        case \"organization-profile\":\n        case \"organization-settings\":\n        case \"organization-permissions\":\n        case \"auth-methods\":\n            return \"org_misc\";\n\n        case \"bot-list-admin\":\n            return \"org_bots\";\n\n        case \"user-list-admin\":\n        case \"deactivated-users-admin\":\n            return \"org_users\";\n\n        case \"profile\":\n        case \"account-and-privacy\":\n            return \"your-account\";\n\n        default:\n            return section;\n    }\n}\n\nexport function initialize() {\n    // personal\n    load_func_dict.set(\"your-account\", settings_account.set_up);\n    load_func_dict.set(\"display-settings\", () => {\n        settings_display.set_up(settings_display.user_settings_panel);\n    });\n    load_func_dict.set(\"notifications\", () => {\n        settings_notifications.set_up(settings_notifications.user_settings_panel);\n    });\n    load_func_dict.set(\"your-bots\", settings_bots.set_up);\n    load_func_dict.set(\"alert-words\", alert_words_ui.set_up_alert_words);\n    load_func_dict.set(\"uploaded-files\", attachments_ui.set_up_attachments);\n    load_func_dict.set(\"muted-topics\", settings_muted_topics.set_up);\n    load_func_dict.set(\"muted-users\", settings_muted_users.set_up);\n\n    // org\n    load_func_dict.set(\"org_misc\", settings_org.set_up);\n    load_func_dict.set(\"org_bots\", settings_users.set_up_bots);\n    load_func_dict.set(\"org_users\", settings_users.set_up_humans);\n    load_func_dict.set(\"emoji-settings\", settings_emoji.set_up);\n    load_func_dict.set(\"default-streams-list\", settings_streams.set_up);\n    load_func_dict.set(\"linkifier-settings\", settings_linkifiers.set_up);\n    load_func_dict.set(\"playground-settings\", settings_playgrounds.set_up);\n    load_func_dict.set(\"invites-list-admin\", settings_invites.set_up);\n    load_func_dict.set(\"user-groups-admin\", settings_user_groups.set_up);\n    load_func_dict.set(\"profile-field-settings\", settings_profile_fields.set_up);\n    load_func_dict.set(\"data-exports-admin\", settings_exports.set_up);\n    load_func_dict.set(\n        \"organization-level-user-defaults\",\n        settings_realm_user_settings_defaults.set_up,\n    );\n}\n\nexport function load_settings_section(section) {\n    const group = get_group(section);\n\n    if (!load_func_dict.has(group)) {\n        blueslip.error(\"Unknown section \" + section);\n        return;\n    }\n\n    if (loaded_groups.has(group)) {\n        // We only load groups once (unless somebody calls\n        // reset_sections).\n        return;\n    }\n\n    const load_func = load_func_dict.get(group);\n\n    // Do the real work here!\n    load_func();\n    loaded_groups.add(group);\n}\n\nexport function reset_sections() {\n    loaded_groups.clear();\n    settings_emoji.reset();\n    settings_exports.reset();\n    settings_linkifiers.reset();\n    settings_playgrounds.reset();\n    settings_invites.reset();\n    settings_org.reset();\n    settings_profile_fields.reset();\n    settings_streams.reset();\n    settings_user_groups.reset();\n    settings_muted_topics.reset();\n    settings_muted_users.reset();\n    alert_words_ui.reset();\n    // settings_users doesn't need a reset()\n}\n","import $ from \"jquery\";\n\nimport render_admin_default_streams_list from \"../templates/settings/admin_default_streams_list.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as hash_util from \"./hash_util\";\nimport {$t_html} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as ListWidget from \"./list_widget\";\nimport * as loading from \"./loading\";\nimport {page_params} from \"./page_params\";\nimport * as stream_data from \"./stream_data\";\nimport * as sub_store from \"./sub_store\";\nimport * as typeahead_helper from \"./typeahead_helper\";\nimport * as ui from \"./ui\";\nimport * as ui_report from \"./ui_report\";\n\nconst meta = {\n    loaded: false,\n};\n\nexport function reset() {\n    meta.loaded = false;\n}\n\nexport function maybe_disable_widgets() {\n    if (page_params.is_admin) {\n        return;\n    }\n\n    $(\".organization-box [data-name='default-streams-list']\")\n        .find(\"input:not(.search), button, select\")\n        .prop(\"disabled\", true);\n}\n\nexport function build_default_stream_table() {\n    const $table = $(\"#admin_default_streams_table\").expectOne();\n\n    const stream_ids = stream_data.get_default_stream_ids();\n    const subs = stream_ids.map((stream_id) => sub_store.get(stream_id));\n\n    ListWidget.create($table, subs, {\n        name: \"default_streams_list\",\n        modifier(item) {\n            return render_admin_default_streams_list({\n                stream: item,\n                can_modify: page_params.is_admin,\n            });\n        },\n        filter: {\n            $element: $table.closest(\".settings-section\").find(\".search\"),\n            predicate(item, query) {\n                return item.name.toLowerCase().includes(query.toLowerCase());\n            },\n            onupdate() {\n                ui.reset_scrollbar($table);\n            },\n        },\n        $parent_container: $(\"#admin-default-streams-list\").expectOne(),\n        init_sort: [\"alphabetic\", \"name\"],\n        $simplebar_container: $(\"#admin-default-streams-list .progressive-table-wrapper\"),\n    });\n\n    loading.destroy_indicator($(\"#admin_page_default_streams_loading_indicator\"));\n}\n\nexport function update_default_streams_table() {\n    if ([\"organization\", \"settings\"].includes(hash_util.get_current_hash_category())) {\n        $(\"#admin_default_streams_table\").expectOne().find(\"tr.default_stream_row\").remove();\n        build_default_stream_table();\n    }\n}\n\nfunction make_stream_default(stream_id) {\n    const data = {\n        stream_id,\n    };\n    const $default_stream_status = $(\"#admin-default-stream-status\");\n    $default_stream_status.hide();\n\n    channel.post({\n        url: \"/json/default_streams\",\n        data,\n        error(xhr) {\n            ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, $default_stream_status);\n            $default_stream_status.show();\n        },\n    });\n}\n\nexport function delete_default_stream(stream_id, $default_stream_row, $alert_element) {\n    channel.del({\n        url: \"/json/default_streams?\" + $.param({stream_id}),\n        error(xhr) {\n            ui_report.generic_row_button_error(xhr, $alert_element);\n        },\n        success() {\n            $default_stream_row.remove();\n        },\n    });\n}\n\nexport function set_up() {\n    build_page();\n    maybe_disable_widgets();\n}\n\nexport function build_page() {\n    meta.loaded = true;\n\n    update_default_streams_table();\n\n    $(\".create_default_stream\").on(\"keypress\", (e) => {\n        if (keydown_util.is_enter_event(e)) {\n            e.preventDefault();\n            e.stopPropagation();\n            const $default_stream_input = $(\".create_default_stream\");\n            make_stream_default(stream_data.get_stream_id($default_stream_input.val()));\n            $default_stream_input[0].value = \"\";\n        }\n    });\n\n    $(\".create_default_stream\").typeahead({\n        items: 5,\n        fixed: true,\n        source() {\n            return stream_data.get_non_default_stream_names();\n        },\n        highlighter(item) {\n            return typeahead_helper.render_typeahead_item({primary: item});\n        },\n    });\n\n    $(\".default-stream-form\").on(\"click\", \"#do_submit_stream\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const $default_stream_input = $(\".create_default_stream\");\n        make_stream_default(stream_data.get_stream_id($default_stream_input.val()));\n        // Clear value inside input box\n        $default_stream_input[0].value = \"\";\n    });\n\n    $(\"body\").on(\"click\", \".default_stream_row .remove-default-stream\", function (e) {\n        const $row = $(this).closest(\".default_stream_row\");\n        const stream_id = Number.parseInt($row.attr(\"data-stream-id\"), 10);\n        delete_default_stream(stream_id, $row, $(e.target));\n    });\n}\n","import $ from \"jquery\";\n\nimport * as components from \"./components\";\nimport {$t} from \"./i18n\";\nimport * as settings_panel_menu from \"./settings_panel_menu\";\n\nlet toggler;\n\nexport function highlight_toggle(tab_name) {\n    if (toggler) {\n        toggler.goto(tab_name);\n    }\n}\n\nexport function initialize() {\n    toggler = components.toggle({\n        child_wants_focus: true,\n        values: [\n            {label: $t({defaultMessage: \"Personal\"}), key: \"settings\"},\n            {label: $t({defaultMessage: \"Organization\"}), key: \"organization\"},\n        ],\n        callback(name, key) {\n            if (key === \"organization\") {\n                settings_panel_menu.show_org_settings();\n            } else {\n                settings_panel_menu.show_normal_settings();\n            }\n        },\n    });\n\n    settings_panel_menu.set_key_handlers(toggler);\n\n    $(\"#settings_overlay_container .tab-container\").append(toggler.get());\n}\n\n// Handles the collapse/reveal of some tabs in the org settings for non-admins.\nexport function toggle_org_setting_collapse() {\n    const is_collapsed = $(\".collapse-org-settings\").hasClass(\"hide-org-settings\");\n    const show_fewer_settings_text = $t({defaultMessage: \"Show fewer\"});\n    const show_more_settings_text = $t({defaultMessage: \"Show more\"});\n\n    if (is_collapsed) {\n        for (const elem of $(\".collapse-org-settings\")) {\n            $(elem).removeClass(\"hide-org-settings\");\n        }\n\n        $(\"#toggle_collapse_chevron\").removeClass(\"fa-angle-double-down\");\n        $(\"#toggle_collapse_chevron\").addClass(\"fa-angle-double-up\");\n\n        $(\"#toggle_collapse\").text(show_fewer_settings_text);\n    } else {\n        for (const elem of $(\".collapse-org-settings\")) {\n            $(elem).addClass(\"hide-org-settings\");\n        }\n\n        $(\"#toggle_collapse_chevron\").removeClass(\"fa-angle-double-up\");\n        $(\"#toggle_collapse_chevron\").addClass(\"fa-angle-double-down\");\n\n        $(\"#toggle_collapse\").text(show_more_settings_text);\n    }\n\n    // If current tab is about to be collapsed, go to default tab.\n    const $current_tab = $(\".org-settings-list .active\");\n    if ($current_tab.hasClass(\"hide-org-settings\")) {\n        $(location).attr(\"href\", \"/#organization/organization-profile\");\n    }\n}\n","import $ from \"jquery\";\n\nimport {$t, $t_html} from \"./i18n\";\nimport * as loading from \"./loading\";\nimport * as ui_report from \"./ui_report\";\n\nexport function display_checkmark($elem) {\n    const check_mark = document.createElement(\"img\");\n    check_mark.src = \"/static/images/checkbox-green.svg\";\n    $elem.prepend(check_mark);\n    $(check_mark).css(\"width\", \"13px\");\n}\n\nexport const strings = {\n    success_html: $t_html({defaultMessage: \"Saved\"}),\n    failure_html: $t_html({defaultMessage: \"Save failed\"}),\n    saving: $t({defaultMessage: \"Saving\"}),\n};\n\n// Generic function for informing users about changes to the settings\n// UI.  Intended to replace the old system that was built around\n// direct calls to `ui_report`.\nexport function do_settings_change(\n    request_method,\n    url,\n    data,\n    status_element,\n    {\n        success_msg_html = strings.success_html,\n        failure_msg_html = strings.failure_html,\n        success_continuation,\n        error_continuation,\n        sticky = false,\n        $error_msg_element,\n    } = {},\n) {\n    const $spinner = $(status_element).expectOne();\n    $spinner.fadeTo(0, 1);\n    loading.make_indicator($spinner, {text: strings.saving});\n    const remove_after = sticky ? undefined : 1000;\n    const appear_after = 500;\n\n    request_method({\n        url,\n        data,\n        success(reponse_data) {\n            setTimeout(() => {\n                ui_report.success(success_msg_html, $spinner, remove_after);\n                display_checkmark($spinner);\n            }, appear_after);\n            if (success_continuation !== undefined) {\n                success_continuation(reponse_data);\n            }\n        },\n        error(xhr) {\n            if ($error_msg_element) {\n                loading.destroy_indicator($spinner);\n                ui_report.error(failure_msg_html, xhr, $error_msg_element);\n            } else {\n                ui_report.error(failure_msg_html, xhr, $spinner);\n            }\n            if (error_continuation !== undefined) {\n                error_continuation(xhr);\n            }\n        },\n    });\n}\n\n// This function is used to disable sub-setting when main setting is checked or unchecked\n// or two settings are inter-dependent on their values.\n// * is_checked is boolean, shows if the main setting is checked or not.\n// * sub_setting_id is sub setting or setting which depend on main setting,\n//   string id of setting.\n// * disable_on_uncheck is boolean, true if sub setting should be disabled\n//   when main setting unchecked.\nexport function disable_sub_setting_onchange(\n    is_checked,\n    sub_setting_id,\n    disable_on_uncheck,\n    include_label,\n) {\n    if ((is_checked && disable_on_uncheck) || (!is_checked && !disable_on_uncheck)) {\n        $(`#${CSS.escape(sub_setting_id)}`).prop(\"disabled\", false);\n        if (include_label) {\n            $(`#${CSS.escape(sub_setting_id)}_label`)\n                .parent()\n                .removeClass(\"control-label-disabled\");\n        }\n    } else if ((is_checked && !disable_on_uncheck) || (!is_checked && disable_on_uncheck)) {\n        $(`#${CSS.escape(sub_setting_id)}`).prop(\"disabled\", true);\n        if (include_label) {\n            $(`#${CSS.escape(sub_setting_id)}_label`)\n                .parent()\n                .addClass(\"control-label-disabled\");\n        }\n    }\n}\n","import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport render_confirm_delete_user from \"../templates/confirm_dialog/confirm_delete_user.hbs\";\nimport render_add_user_group_modal from \"../templates/settings/add_user_group_modal.hbs\";\nimport render_admin_user_group_list from \"../templates/settings/admin_user_group_list.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as pill_typeahead from \"./pill_typeahead\";\nimport * as settings_data from \"./settings_data\";\nimport * as ui_report from \"./ui_report\";\nimport * as user_groups from \"./user_groups\";\nimport * as user_pill from \"./user_pill\";\n\nconst meta = {\n    loaded: false,\n};\n\nexport function reset() {\n    meta.loaded = false;\n}\n\nexport function reload() {\n    if (!meta.loaded) {\n        return;\n    }\n\n    const $user_groups_section = $(\"#user-groups\").expectOne();\n    $user_groups_section.empty();\n    populate_user_groups();\n}\n\nexport function can_edit(group_id) {\n    if (!settings_data.user_can_edit_user_groups()) {\n        return false;\n    }\n\n    // Admins and moderators are allowed to edit user groups even if they\n    // are not a member of that user group. Members can edit user groups\n    // only if they belong to that group.\n    if (page_params.is_admin || page_params.is_moderator) {\n        return true;\n    }\n\n    return user_groups.is_direct_member_of(people.my_current_user_id(), group_id);\n}\n\nexport function populate_user_groups() {\n    const $user_groups_section = $(\"#user-groups\").expectOne();\n    const user_groups_array = user_groups.get_realm_user_groups();\n\n    for (const data of user_groups_array) {\n        $user_groups_section.append(\n            render_admin_user_group_list({\n                user_group: {\n                    name: data.name,\n                    id: data.id,\n                    description: data.description,\n                },\n            }),\n        );\n\n        const pill_config = {\n            show_user_status_emoji: false,\n        };\n\n        const $pill_container = $(`.pill-container[data-group-pills=\"${CSS.escape(data.id)}\"]`);\n        const pills = user_pill.create_pills($pill_container, pill_config);\n\n        function get_pill_user_ids() {\n            return user_pill.get_user_ids(pills);\n        }\n\n        const $userg = $(`div.user-group[id=\"${CSS.escape(data.id)}\"]`);\n        for (const user_id of data.members) {\n            const user = people.get_by_user_id(user_id);\n            user_pill.append_user(user, pills);\n        }\n\n        function update_membership(group_id) {\n            if (can_edit(group_id)) {\n                return;\n            }\n            $userg.find(\".name\").attr(\"contenteditable\", \"false\");\n            $userg.find(\".description\").attr(\"contenteditable\", \"false\");\n            $userg.addClass(\"ntm\");\n            $pill_container.find(\".input\").attr(\"contenteditable\", \"false\");\n            $pill_container.find(\".input\").css(\"display\", \"none\");\n            $pill_container.addClass(\"not-editable\");\n            $pill_container.off(\"keydown\", \".pill\");\n            $pill_container.off(\"keydown\", \".input\");\n            $pill_container.off(\"click\");\n            $pill_container.on(\"click\", (e) => {\n                e.stopPropagation();\n            });\n            $pill_container.find(\".pill\").on(\"mouseenter\", () => {\n                $pill_container.find(\".pill\").find(\".exit\").css(\"opacity\", \"0.5\");\n            });\n        }\n        update_membership(data.id);\n\n        function is_user_group_changed() {\n            const draft_group = get_pill_user_ids();\n            const group_data = user_groups.get_user_group_from_id(data.id);\n            const original_group = Array.from(group_data.members);\n            const same_groups = _.isEqual(_.sortBy(draft_group), _.sortBy(original_group));\n            const description = $(`#user-groups #${CSS.escape(data.id)} .description`)\n                .text()\n                .trim();\n            const name = $(`#user-groups #${CSS.escape(data.id)} .name`)\n                .text()\n                .trim();\n            const $user_group_status = $(`#user-groups #${CSS.escape(data.id)} .user-group-status`);\n\n            if ($user_group_status.is(\":visible\")) {\n                return false;\n            }\n\n            if (\n                group_data.description === description &&\n                group_data.name === name &&\n                (!draft_group.length || same_groups)\n            ) {\n                return false;\n            }\n            return true;\n        }\n\n        function update_cancel_button() {\n            if (!can_edit(data.id)) {\n                return;\n            }\n            const $cancel_button = $(\n                `#user-groups #${CSS.escape(data.id)} .save-status.btn-danger`,\n            );\n            const $saved_button = $(`#user-groups #${CSS.escape(data.id)} .save-status.sea-green`);\n            const $save_instructions = $(`#user-groups #${CSS.escape(data.id)} .save-instructions`);\n\n            if (is_user_group_changed() && !$cancel_button.is(\":visible\")) {\n                $saved_button.fadeOut(0);\n                $cancel_button.css({display: \"inline-block\", opacity: \"0\"}).fadeTo(400, 1);\n                $save_instructions.css({display: \"block\", opacity: \"0\"}).fadeTo(400, 1);\n            } else if (!is_user_group_changed() && $cancel_button.is(\":visible\")) {\n                $cancel_button.fadeOut();\n                $save_instructions.fadeOut();\n            }\n        }\n\n        function show_saved_button() {\n            const $cancel_button = $(\n                `#user-groups #${CSS.escape(data.id)} .save-status.btn-danger`,\n            );\n            const $saved_button = $(`#user-groups #${CSS.escape(data.id)} .save-status.sea-green`);\n            const $save_instructions = $(`#user-groups #${CSS.escape(data.id)} .save-instructions`);\n            if (!$saved_button.is(\":visible\")) {\n                $cancel_button.fadeOut(0);\n                $save_instructions.fadeOut(0);\n                $saved_button\n                    .css({display: \"inline-block\", opacity: \"0\"})\n                    .fadeTo(400, 1)\n                    .delay(2000)\n                    .fadeTo(400, 0);\n            }\n        }\n\n        function save_members() {\n            const draft_group = get_pill_user_ids();\n            const group_data = user_groups.get_user_group_from_id(data.id);\n            const original_group = Array.from(group_data.members);\n            const same_groups = _.isEqual(_.sortBy(draft_group), _.sortBy(original_group));\n            if (!draft_group.length || same_groups) {\n                return;\n            }\n            const added = _.difference(draft_group, original_group);\n            const removed = _.difference(original_group, draft_group);\n            channel.post({\n                url: \"/json/user_groups/\" + data.id + \"/members\",\n                data: {\n                    add: JSON.stringify(added),\n                    delete: JSON.stringify(removed),\n                },\n                success() {\n                    setTimeout(show_saved_button, 200);\n                },\n            });\n        }\n\n        function save_name_desc() {\n            const $user_group_status = $(`#user-groups #${CSS.escape(data.id)} .user-group-status`);\n            const group_data = user_groups.get_user_group_from_id(data.id);\n            const description = $(`#user-groups #${CSS.escape(data.id)} .description`)\n                .text()\n                .trim();\n            const name = $(`#user-groups #${CSS.escape(data.id)} .name`)\n                .text()\n                .trim();\n\n            if (group_data.description === description && group_data.name === name) {\n                return;\n            }\n\n            channel.patch({\n                url: \"/json/user_groups/\" + data.id,\n                data: {\n                    name,\n                    description,\n                },\n                success() {\n                    $user_group_status.hide();\n                    setTimeout(show_saved_button, 200);\n                },\n                error(xhr) {\n                    const errors = JSON.parse(xhr.responseText).msg;\n                    xhr.responseText = JSON.stringify({msg: errors});\n                    ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, $user_group_status);\n                    update_cancel_button();\n                    $(`#user-groups #${CSS.escape(data.id)} .name`).text(group_data.name);\n                    $(`#user-groups #${CSS.escape(data.id)} .description`).text(\n                        group_data.description,\n                    );\n                },\n            });\n        }\n\n        function do_not_blur(except_class, event) {\n            // Event generated from or inside the typeahead.\n            if ($(event.relatedTarget).closest(\".typeahead\").length) {\n                return true;\n            }\n\n            if ($(event.relatedTarget).closest(`#user-groups #${CSS.escape(data.id)}`).length) {\n                return [\".pill-container\", \".name\", \".description\", \".input\", \".delete\"].some(\n                    (class_name) =>\n                        class_name !== except_class &&\n                        $(event.relatedTarget).closest(class_name).length,\n                );\n            }\n            return false;\n        }\n\n        function auto_save(class_name, event) {\n            if (!can_edit(data.id)) {\n                return;\n            }\n\n            if (do_not_blur(class_name, event)) {\n                return;\n            }\n            if (\n                $(event.relatedTarget).closest(`#user-groups #${CSS.escape(data.id)}`) &&\n                $(event.relatedTarget).closest(\".save-status.btn-danger\").length\n            ) {\n                reload();\n                return;\n            }\n            save_name_desc();\n            save_members();\n        }\n\n        $(`#user-groups #${CSS.escape(data.id)}`).on(\"blur\", \".input\", (event) => {\n            auto_save(\".input\", event);\n        });\n\n        $(`#user-groups #${CSS.escape(data.id)}`).on(\"blur\", \".name\", (event) => {\n            auto_save(\".name\", event);\n        });\n        $(`#user-groups #${CSS.escape(data.id)}`).on(\"input\", \".name\", () => {\n            update_cancel_button();\n        });\n\n        $(`#user-groups #${CSS.escape(data.id)}`).on(\"blur\", \".description\", (event) => {\n            auto_save(\".description\", event);\n        });\n        $(`#user-groups #${CSS.escape(data.id)}`).on(\"input\", \".description\", () => {\n            update_cancel_button();\n        });\n\n        const $input = $pill_container.children(\".input\");\n        if (can_edit(data.id)) {\n            const opts = {update_func: update_cancel_button, user: true};\n            pill_typeahead.set_up($input, pills, opts);\n        }\n\n        if (can_edit(data.id)) {\n            pills.onPillRemove(() => {\n                // onPillRemove is fired before the pill is removed from\n                // the DOM.\n                update_cancel_button();\n                setTimeout(() => {\n                    $input.trigger(\"focus\");\n                }, 100);\n            });\n        }\n    }\n}\n\nexport function add_user_group(e) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    const $user_group_status = $(\"#dialog_error\");\n\n    const group = {\n        members: JSON.stringify([people.my_current_user_id()]),\n    };\n\n    for (const obj of $(\"#add-user-group-form\").serializeArray()) {\n        if (obj.value.trim() === \"\") {\n            continue;\n        }\n        group[obj.name] = obj.value;\n    }\n\n    channel.post({\n        url: \"/json/user_groups/create\",\n        data: group,\n        success() {\n            $user_group_status.hide();\n            ui_report.success($t_html({defaultMessage: \"User group added!\"}), $user_group_status);\n            dialog_widget.close_modal();\n        },\n        error(xhr) {\n            $user_group_status.hide();\n            const errors = JSON.parse(xhr.responseText).msg;\n            xhr.responseText = JSON.stringify({msg: errors});\n            ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, $user_group_status);\n        },\n    });\n}\n\nfunction show_add_user_group_modal() {\n    const html_body = render_add_user_group_modal();\n\n    function add_user_group_post_render() {\n        const $add_user_group_input_element = $(\"#user_group_name\");\n        const $add_user_group_submit_button = $(\"#add-user-group-modal .dialog_submit_button\");\n        $add_user_group_submit_button.prop(\"disabled\", true);\n\n        $add_user_group_input_element.on(\"input\", () => {\n            $add_user_group_submit_button.prop(\n                \"disabled\",\n                $add_user_group_input_element.val() === \"\",\n            );\n        });\n    }\n\n    dialog_widget.launch({\n        html_heading: $t_html({defaultMessage: \"Add new user group\"}),\n        html_body,\n        html_submit_button: $t_html({defaultMessage: \"Save\"}),\n        help_link: \"/help/user-groups\",\n        form_id: \"add-user-group-form\",\n        id: \"add-user-group-modal\",\n        on_click: add_user_group,\n        on_shown: () => $(\"#user_group_name\").trigger(\"focus\"),\n        post_render: add_user_group_post_render,\n    });\n}\n\nexport function set_up() {\n    meta.loaded = true;\n    populate_user_groups();\n\n    $(\"#show-add-user-group-modal\").on(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        show_add_user_group_modal();\n    });\n\n    $(\"#user-groups\").on(\"click\", \".delete\", function () {\n        const group_id = Number.parseInt($(this).parents(\".user-group\").attr(\"id\"), 10);\n        if (!can_edit(group_id)) {\n            return;\n        }\n        const user_group = user_groups.get_user_group_from_id(group_id);\n        const $btn = $(this);\n\n        function delete_user_group() {\n            channel.del({\n                url: \"/json/user_groups/\" + group_id,\n                data: {\n                    id: group_id,\n                },\n                error() {\n                    $btn.text($t({defaultMessage: \"Failed!\"}));\n                },\n            });\n        }\n\n        const html_body = render_confirm_delete_user({\n            group_name: user_group.name,\n        });\n\n        const user_group_name = user_group.name;\n\n        confirm_dialog.launch({\n            html_heading: $t_html({defaultMessage: \"Delete {user_group_name}?\"}, {user_group_name}),\n            html_body,\n            on_click: delete_user_group,\n        });\n    });\n\n    $(\"#user-groups\").on(\"keypress\", \".user-group h4 > span\", (e) => {\n        if (keydown_util.is_enter_event(e)) {\n            e.preventDefault();\n        }\n    });\n}\n","import $ from \"jquery\";\n\nimport render_settings_deactivation_user_modal from \"../templates/confirm_dialog/confirm_deactivate_user.hbs\";\nimport render_settings_reactivation_bot_modal from \"../templates/confirm_dialog/confirm_reactivate_bot.hbs\";\nimport render_settings_reactivation_user_modal from \"../templates/confirm_dialog/confirm_reactivate_user.hbs\";\nimport render_admin_human_form from \"../templates/settings/admin_human_form.hbs\";\nimport render_admin_user_list from \"../templates/settings/admin_user_list.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as bot_data from \"./bot_data\";\nimport * as channel from \"./channel\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as ListWidget from \"./list_widget\";\nimport * as loading from \"./loading\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as presence from \"./presence\";\nimport * as settings_account from \"./settings_account\";\nimport * as settings_bots from \"./settings_bots\";\nimport * as settings_config from \"./settings_config\";\nimport * as settings_data from \"./settings_data\";\nimport * as settings_panel_menu from \"./settings_panel_menu\";\nimport * as timerender from \"./timerender\";\nimport * as ui from \"./ui\";\nimport * as user_pill from \"./user_pill\";\n\nconst section = {\n    active: {},\n    deactivated: {},\n    bots: {},\n};\n\nfunction compare_a_b(a, b) {\n    if (a > b) {\n        return 1;\n    } else if (a === b) {\n        return 0;\n    }\n    return -1;\n}\n\nfunction sort_email(a, b) {\n    const email_a = settings_data.email_for_user_settings(a) || \"\";\n    const email_b = settings_data.email_for_user_settings(b) || \"\";\n    return compare_a_b(email_a.toLowerCase(), email_b.toLowerCase());\n}\n\nfunction sort_bot_email(a, b) {\n    function email(bot) {\n        return (bot.display_email || \"\").toLowerCase();\n    }\n\n    return compare_a_b(email(a), email(b));\n}\n\nfunction sort_role(a, b) {\n    return compare_a_b(a.role, b.role);\n}\n\nfunction sort_bot_owner(a, b) {\n    function owner_name(bot) {\n        return (bot.bot_owner_full_name || \"\").toLowerCase();\n    }\n\n    return compare_a_b(owner_name(a), owner_name(b));\n}\n\nfunction sort_last_active(a, b) {\n    return compare_a_b(\n        presence.last_active_date(a.user_id) || 0,\n        presence.last_active_date(b.user_id) || 0,\n    );\n}\n\nfunction sort_user_id(a, b) {\n    return compare_a_b(a.user_id, b.user_id);\n}\n\nfunction get_user_info_row(user_id) {\n    return $(`tr.user_row[data-user-id='${CSS.escape(user_id)}']`);\n}\n\nexport function update_view_on_deactivate(user_id) {\n    const $row = get_user_info_row(user_id);\n    if ($row.length === 0) {\n        return;\n    }\n\n    const $button = $row.find(\"button.deactivate\");\n    const $user_role = $row.find(\".user_role\");\n    $button.prop(\"disabled\", false);\n    $row.find(\"button.open-user-form\").hide();\n    $row.find(\"i.deactivated-user-icon\").show();\n    $button.addClass(\"btn-warning reactivate\");\n    $button.removeClass(\"deactivate btn-danger\");\n    $button.empty().append($(\"<i>\").addClass([\"fa\", \"fa-user-plus\"]).attr(\"aria-hidden\", \"true\"));\n    $button.attr(\"title\", \"Reactivate\");\n    $row.addClass(\"deactivated_user\");\n\n    if ($user_role) {\n        const user_id = $row.data(\"user-id\");\n        $user_role.text(\n            `${$t({defaultMessage: \"Deactivated\"})} (${people.get_user_type(user_id)})`,\n        );\n    }\n}\n\nfunction update_view_on_reactivate($row) {\n    const $button = $row.find(\"button.reactivate\");\n    const $user_role = $row.find(\".user_role\");\n    $row.find(\"button.open-user-form\").show();\n    $row.find(\"i.deactivated-user-icon\").hide();\n    $button.addClass(\"btn-danger deactivate\");\n    $button.removeClass(\"btn-warning reactivate\");\n    $button.attr(\"title\", \"Deactivate\");\n    $button.empty().append($(\"<i>\").addClass([\"fa\", \"fa-user-times\"]).attr(\"aria-hidden\", \"true\"));\n    $row.removeClass(\"deactivated_user\");\n\n    if ($user_role) {\n        const user_id = $row.data(\"user-id\");\n        $user_role.text(people.get_user_type(user_id));\n    }\n}\n\nfunction get_status_field() {\n    const current_tab = settings_panel_menu.org_settings.current_tab();\n    switch (current_tab) {\n        case \"deactivated-users-admin\":\n            return $(\"#deactivated-user-field-status\").expectOne();\n        case \"user-list-admin\":\n            return $(\"#user-field-status\").expectOne();\n        case \"bot-list-admin\":\n            return $(\"#bot-field-status\").expectOne();\n        default:\n            throw new Error(\"Invalid admin settings page\");\n    }\n}\n\nfunction failed_listing_users() {\n    loading.destroy_indicator($(\"#subs_page_loading_indicator\"));\n    const status = get_status_field();\n    const user_id = people.my_current_user_id();\n    blueslip.error(\"Error while listing users for user_id \" + user_id, status);\n}\n\nfunction populate_users() {\n    const active_user_ids = people.get_active_human_ids();\n    const deactivated_user_ids = people.get_non_active_human_ids();\n\n    if (active_user_ids.length === 0 && deactivated_user_ids.length === 0) {\n        failed_listing_users();\n    }\n\n    section.active.create_table(active_user_ids);\n    section.deactivated.create_table(deactivated_user_ids);\n}\n\nfunction reset_scrollbar($sel) {\n    return function () {\n        ui.reset_scrollbar($sel);\n    };\n}\n\nfunction bot_owner_full_name(owner_id) {\n    if (!owner_id) {\n        return undefined;\n    }\n\n    const bot_owner = people.get_by_user_id(owner_id);\n    if (!bot_owner) {\n        return undefined;\n    }\n\n    return bot_owner.full_name;\n}\n\nfunction bot_info(bot_user_id) {\n    const bot_user = bot_data.get(bot_user_id);\n\n    if (!bot_user) {\n        return undefined;\n    }\n\n    const owner_id = bot_user.owner_id;\n\n    const info = {};\n\n    info.is_bot = true;\n    info.role = people.get_by_user_id(bot_user_id).role;\n    info.is_active = bot_user.is_active;\n    info.user_id = bot_user.user_id;\n    info.full_name = bot_user.full_name;\n    info.bot_owner_id = owner_id;\n    info.user_role_text = people.get_user_type(bot_user_id);\n\n    // Convert bot type id to string for viewing to the users.\n    info.bot_type = settings_bots.type_id_to_string(bot_user.bot_type);\n\n    info.bot_owner_full_name = bot_owner_full_name(owner_id);\n\n    if (!info.bot_owner_full_name) {\n        info.no_owner = true;\n        info.bot_owner_full_name = $t({defaultMessage: \"No owner\"});\n    }\n\n    info.is_current_user = false;\n    info.can_modify = page_params.is_admin;\n\n    // It's always safe to show the real email addresses for bot users\n    info.display_email = bot_user.email;\n\n    return info;\n}\n\nfunction get_last_active(user) {\n    const last_active_date = presence.last_active_date(user.user_id);\n\n    if (!last_active_date) {\n        return $t({defaultMessage: \"Unknown\"});\n    }\n    return timerender.render_now(last_active_date).time_str;\n}\n\nfunction human_info(person) {\n    const info = {};\n\n    info.is_bot = false;\n    info.user_role_text = people.get_user_type(person.user_id);\n    info.is_active = people.is_person_active(person.user_id);\n    info.user_id = person.user_id;\n    info.full_name = person.full_name;\n    info.bot_owner_id = person.bot_owner_id;\n\n    info.can_modify = page_params.is_admin;\n    info.is_current_user = people.is_my_user_id(person.user_id);\n    info.cannot_deactivate = info.is_current_user || (person.is_owner && !page_params.is_owner);\n    info.display_email = settings_data.email_for_user_settings(person);\n\n    if (info.is_active) {\n        // TODO: We might just want to show this\n        // for deactivated users, too, even though\n        // it might usually just be undefined.\n        info.last_active_date = get_last_active(person);\n    }\n\n    return info;\n}\n\nlet bot_list_widget;\n\nsection.bots.create_table = () => {\n    loading.make_indicator($(\"#admin_page_bots_loading_indicator\"), {text: \"Loading...\"});\n    const $bots_table = $(\"#admin_bots_table\");\n    $bots_table.hide();\n    const bot_user_ids = bot_data.all_user_ids();\n\n    bot_list_widget = ListWidget.create($bots_table, bot_user_ids, {\n        name: \"admin_bot_list\",\n        get_item: bot_info,\n        modifier: render_admin_user_list,\n        html_selector: (item) => `tr[data-user-id='${CSS.escape(item)}']`,\n        filter: {\n            $element: $bots_table.closest(\".settings-section\").find(\".search\"),\n            predicate(item, value) {\n                if (!item) {\n                    return false;\n                }\n                return (\n                    item.full_name.toLowerCase().includes(value) ||\n                    item.display_email.toLowerCase().includes(value)\n                );\n            },\n            onupdate: reset_scrollbar($bots_table),\n        },\n        $parent_container: $(\"#admin-bot-list\").expectOne(),\n        init_sort: [\"alphabetic\", \"full_name\"],\n        sort_fields: {\n            email: sort_bot_email,\n            bot_owner: sort_bot_owner,\n            role: sort_role,\n        },\n        $simplebar_container: $(\"#admin-bot-list .progressive-table-wrapper\"),\n    });\n\n    loading.destroy_indicator($(\"#admin_page_bots_loading_indicator\"));\n    $bots_table.show();\n};\n\nsection.active.create_table = (active_users) => {\n    const $users_table = $(\"#admin_users_table\");\n    ListWidget.create($users_table, active_users, {\n        name: \"users_table_list\",\n        get_item: people.get_by_user_id,\n        modifier(item) {\n            const info = human_info(item);\n            return render_admin_user_list(info);\n        },\n        filter: {\n            $element: $users_table.closest(\".settings-section\").find(\".search\"),\n            filterer: people.filter_for_user_settings_search,\n            onupdate: reset_scrollbar($users_table),\n        },\n        $parent_container: $(\"#admin-user-list\").expectOne(),\n        init_sort: [\"alphabetic\", \"full_name\"],\n        sort_fields: {\n            email: sort_email,\n            last_active: sort_last_active,\n            role: sort_role,\n            id: sort_user_id,\n        },\n        $simplebar_container: $(\"#admin-user-list .progressive-table-wrapper\"),\n    });\n\n    loading.destroy_indicator($(\"#admin_page_users_loading_indicator\"));\n    $(\"#admin_users_table\").show();\n};\n\nsection.deactivated.create_table = (deactivated_users) => {\n    const $deactivated_users_table = $(\"#admin_deactivated_users_table\");\n    ListWidget.create($deactivated_users_table, deactivated_users, {\n        name: \"deactivated_users_table_list\",\n        get_item: people.get_by_user_id,\n        modifier(item) {\n            const info = human_info(item);\n            return render_admin_user_list(info);\n        },\n        filter: {\n            $element: $deactivated_users_table.closest(\".settings-section\").find(\".search\"),\n            filterer: people.filter_for_user_settings_search,\n            onupdate: reset_scrollbar($deactivated_users_table),\n        },\n        $parent_container: $(\"#admin-deactivated-users-list\").expectOne(),\n        init_sort: [\"alphabetic\", \"full_name\"],\n        sort_fields: {\n            email: sort_email,\n            role: sort_role,\n            id: sort_user_id,\n        },\n        $simplebar_container: $(\"#admin-deactivated-users-list .progressive-table-wrapper\"),\n    });\n\n    loading.destroy_indicator($(\"#admin_page_deactivated_users_loading_indicator\"));\n    $(\"#admin_deactivated_users_table\").show();\n};\n\nexport function update_bot_data(bot_user_id) {\n    if (!bot_list_widget) {\n        return;\n    }\n\n    bot_list_widget.render_item(bot_user_id);\n}\n\nexport function update_user_data(user_id, new_data) {\n    const $user_row = get_user_info_row(user_id);\n\n    if ($user_row.length === 0) {\n        return;\n    }\n\n    if (new_data.full_name !== undefined) {\n        // Update the full name in the table\n        $user_row.find(\".user_name\").text(new_data.full_name);\n    }\n\n    if (new_data.role !== undefined) {\n        $user_row.find(\".user_role\").text(people.get_user_type(user_id));\n    }\n}\n\nexport function redraw_bots_list() {\n    if (!bot_list_widget) {\n        return;\n    }\n\n    // In order to properly redraw after a user may have been added,\n    // we need to update the bot_list_widget with the new set of bot\n    // user IDs to display.\n    const bot_user_ids = bot_data.all_user_ids();\n    bot_list_widget.replace_list_data(bot_user_ids);\n    bot_list_widget.hard_redraw();\n}\n\nfunction start_data_load() {\n    loading.make_indicator($(\"#admin_page_users_loading_indicator\"), {text: \"Loading...\"});\n    loading.make_indicator($(\"#admin_page_deactivated_users_loading_indicator\"), {\n        text: \"Loading...\",\n    });\n    $(\"#admin_deactivated_users_table\").hide();\n    $(\"#admin_users_table\").hide();\n\n    populate_users();\n}\n\nfunction get_human_profile_data(fields_user_pills) {\n    /*\n        This formats custom profile field data to send to the server.\n        See render_admin_human_form and open_human_form\n        to see how the form is built.\n\n        TODO: Ideally, this logic would be cleaned up or deduplicated with\n        the settings_account.js logic.\n    */\n    const new_profile_data = [];\n    $(\"#edit-user-form .custom_user_field_value\").each(function () {\n        // Remove duplicate datepicker input element generated flatpickr library\n        if (!$(this).hasClass(\"form-control\")) {\n            new_profile_data.push({\n                id: Number.parseInt(\n                    $(this).closest(\".custom_user_field\").attr(\"data-field-id\"),\n                    10,\n                ),\n                value: $(this).val(),\n            });\n        }\n    });\n    // Append user type field values also\n    for (const [field_id, field_pills] of fields_user_pills) {\n        if (field_pills) {\n            const user_ids = user_pill.get_user_ids(field_pills);\n            new_profile_data.push({\n                id: field_id,\n                value: user_ids,\n            });\n        }\n    }\n\n    return new_profile_data;\n}\n\nexport function confirm_deactivation(user_id, handle_confirm, loading_spinner) {\n    // Knowing the number of invites requires making this request. If the request fails,\n    // we won't have the accurate number of invites. So, we don't show the modal if the\n    // request fails.\n    channel.get({\n        url: \"/json/invites\",\n        timeout: 10 * 1000,\n        success(data) {\n            let number_of_invites_by_user = 0;\n            for (const invite of data.invites) {\n                if (invite.invited_by_user_id === user_id) {\n                    number_of_invites_by_user = number_of_invites_by_user + 1;\n                }\n            }\n\n            const bots_owned_by_user = bot_data.get_all_bots_owned_by_user(user_id);\n            const user = people.get_by_user_id(user_id);\n            const realm_uri = page_params.realm_uri;\n            const realm_name = page_params.realm_name;\n            const opts = {\n                username: user.full_name,\n                email: settings_data.email_for_user_settings(user),\n                bots_owned_by_user,\n                number_of_invites_by_user,\n                admin_email: people.my_current_email(),\n                realm_uri,\n                realm_name,\n            };\n            const html_body = render_settings_deactivation_user_modal(opts);\n\n            dialog_widget.launch({\n                html_heading: $t_html(\n                    {defaultMessage: \"Deactivate {name}?\"},\n                    {name: user.full_name},\n                ),\n                help_link: \"/help/deactivate-or-reactivate-a-user#deactivating-a-user\",\n                html_body,\n                html_submit_button: $t_html({defaultMessage: \"Deactivate\"}),\n                id: \"deactivate-user-modal\",\n                on_click: handle_confirm,\n                loading_spinner,\n            });\n        },\n    });\n}\n\nfunction handle_deactivation($tbody) {\n    $tbody.on(\"click\", \".deactivate\", (e) => {\n        // This click event must not get propagated to parent container otherwise the modal\n        // will not show up because of a call to `close_active_modal` in `settings.js`.\n        e.preventDefault();\n        e.stopPropagation();\n\n        const $row = $(e.target).closest(\".user_row\");\n        const user_id = $row.data(\"user-id\");\n\n        function handle_confirm() {\n            const url = \"/json/users/\" + encodeURIComponent(user_id);\n            let data = {};\n            if ($(\".send_email\").is(\":checked\")) {\n                data = {\n                    deactivation_notification_comment: $(\".email_field_textarea\").val(),\n                };\n            }\n\n            dialog_widget.submit_api_request(channel.del, url, data);\n        }\n\n        confirm_deactivation(user_id, handle_confirm, true);\n    });\n}\n\nfunction handle_bot_deactivation($tbody) {\n    $tbody.on(\"click\", \".deactivate\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const $button_elem = $(e.target);\n        const $row = $button_elem.closest(\".user_row\");\n        const bot_id = Number.parseInt($row.attr(\"data-user-id\"), 10);\n\n        function handle_confirm() {\n            const url = \"/json/bots/\" + encodeURIComponent(bot_id);\n            dialog_widget.submit_api_request(channel.del, url);\n        }\n\n        settings_bots.confirm_bot_deactivation(bot_id, handle_confirm, true);\n    });\n}\n\nexport function confirm_reactivation(user_id, handle_confirm, loading_spinner) {\n    const user = people.get_by_user_id(user_id);\n    const opts = {\n        username: user.full_name,\n    };\n\n    let html_body;\n    // check if bot or human\n    if (user.is_bot) {\n        html_body = render_settings_reactivation_bot_modal(opts);\n    } else {\n        html_body = render_settings_reactivation_user_modal(opts);\n    }\n\n    confirm_dialog.launch({\n        html_heading: $t_html({defaultMessage: \"Reactivate {name}\"}, {name: user.full_name}),\n        help_link: \"/help/deactivate-or-reactivate-a-user#reactivating-a-user\",\n        html_body,\n        on_click: handle_confirm,\n        loading_spinner,\n    });\n}\n\nfunction handle_reactivation($tbody) {\n    $tbody.on(\"click\", \".reactivate\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        // Go up the tree until we find the user row, then grab the email element\n        const $button_elem = $(e.target);\n        const $row = $button_elem.closest(\".user_row\");\n        const user_id = Number.parseInt($row.attr(\"data-user-id\"), 10);\n\n        function handle_confirm() {\n            const $row = get_user_info_row(user_id);\n            const url = \"/json/users/\" + encodeURIComponent(user_id) + \"/reactivate\";\n            const opts = {\n                success_continuation() {\n                    update_view_on_reactivate($row);\n                },\n            };\n            dialog_widget.submit_api_request(channel.post, url, {}, opts);\n        }\n\n        confirm_reactivation(user_id, handle_confirm, true);\n    });\n}\n\nexport function show_edit_user_info_modal(user_id, from_user_info_popover) {\n    const person = people.get_by_user_id(user_id);\n\n    if (!person) {\n        return;\n    }\n\n    const user_email = settings_data.email_for_user_settings(person);\n\n    const html_body = render_admin_human_form({\n        user_id,\n        email: user_email,\n        full_name: person.full_name,\n        user_role_values: settings_config.user_role_values,\n        disable_role_dropdown: person.is_owner && !page_params.is_owner,\n    });\n\n    let fields_user_pills;\n\n    function set_role_dropdown_and_fields_user_pills() {\n        $(\"#user-role-select\").val(person.role);\n        if (!page_params.is_owner) {\n            $(\"#user-role-select\")\n                .find(`option[value=\"${CSS.escape(settings_config.user_role_values.owner.code)}\"]`)\n                .hide();\n        }\n\n        const element = \"#edit-user-form .custom-profile-field-form\";\n        $(element).empty();\n        settings_account.append_custom_profile_fields(element, user_id);\n        settings_account.initialize_custom_date_type_fields(element);\n        fields_user_pills = settings_account.initialize_custom_user_type_fields(\n            element,\n            user_id,\n            true,\n            false,\n        );\n        settings_account.initialize_custom_pronouns_type_fields(element);\n\n        $(\"#edit-user-form\").on(\"click\", \".deactivate_user_button\", (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            const user_id = $(\"#edit-user-form\").data(\"user-id\");\n            function handle_confirm() {\n                const url = \"/json/users/\" + encodeURIComponent(user_id);\n                dialog_widget.submit_api_request(channel.del, url);\n            }\n            const open_deactivate_modal_callback = () =>\n                confirm_deactivation(user_id, handle_confirm, true);\n            dialog_widget.close_modal(open_deactivate_modal_callback);\n        });\n    }\n\n    function submit_user_details() {\n        const role = Number.parseInt($(\"#user-role-select\").val().trim(), 10);\n        const $full_name = $(\"#edit-user-form\").find(\"input[name='full_name']\");\n        const profile_data = get_human_profile_data(fields_user_pills);\n\n        const url = \"/json/users/\" + encodeURIComponent(user_id);\n        const data = {\n            full_name: $full_name.val(),\n            role: JSON.stringify(role),\n            profile_data: JSON.stringify(profile_data),\n        };\n        const opts = {\n            error_continuation() {\n                // Scrolling modal to top, to make error visible to user.\n                $(\"#edit-user-form\")\n                    .closest(\".simplebar-content-wrapper\")\n                    .animate({scrollTop: 0}, \"fast\");\n            },\n        };\n        dialog_widget.submit_api_request(channel.patch, url, data, opts);\n    }\n\n    dialog_widget.launch({\n        html_heading: $t_html({defaultMessage: \"Manage user\"}),\n        html_body,\n        on_click: submit_user_details,\n        post_render: set_role_dropdown_and_fields_user_pills,\n        loading_spinner: from_user_info_popover,\n    });\n}\n\nfunction handle_human_form($tbody) {\n    $tbody.on(\"click\", \".open-user-form\", (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        const user_id = Number.parseInt($(e.currentTarget).attr(\"data-user-id\"), 10);\n        show_edit_user_info_modal(user_id, false);\n    });\n}\n\nfunction handle_bot_form($tbody) {\n    $tbody.on(\"click\", \".open-user-form\", (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        const user_id = Number.parseInt($(e.currentTarget).attr(\"data-user-id\"), 10);\n        settings_bots.show_edit_bot_info_modal(user_id, false);\n    });\n}\n\nsection.active.handle_events = () => {\n    const $tbody = $(\"#admin_users_table\").expectOne();\n\n    handle_deactivation($tbody);\n    handle_reactivation($tbody);\n    handle_human_form($tbody);\n};\n\nsection.deactivated.handle_events = () => {\n    const $tbody = $(\"#admin_deactivated_users_table\").expectOne();\n\n    handle_deactivation($tbody);\n    handle_reactivation($tbody);\n    handle_human_form($tbody);\n};\n\nsection.bots.handle_events = () => {\n    const $tbody = $(\"#admin_bots_table\").expectOne();\n\n    handle_bot_deactivation($tbody);\n    handle_reactivation($tbody);\n    handle_bot_form($tbody);\n};\n\nexport function set_up_humans() {\n    start_data_load();\n    section.active.handle_events();\n    section.deactivated.handle_events();\n}\n\nexport function set_up_bots() {\n    section.bots.handle_events();\n    section.bots.create_table();\n\n    $(\"#admin-bot-list .add-a-new-bot\").on(\"click\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        settings_bots.add_a_new_bot();\n    });\n}\n","// Module for displaying the modal asking spectators to log in when\n// attempting to do things that are not possible as a spectator (like\n// add an emoji reaction, star a message, etc.).  While in many cases,\n// we will prefer to hide menu options that don't make sense for\n// spectators, this modal is useful for everything that doesn't make\n// sense to remove from a design perspective.\n\nimport $ from \"jquery\";\n\nimport render_login_to_access_modal from \"../templates/login_to_access.hbs\";\n\nimport * as browser_history from \"./browser_history\";\nimport * as hash_util from \"./hash_util\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\n\nexport function login_to_access(empty_narrow) {\n    // Hide all overlays, popover and go back to the previous hash if the\n    // hash has changed.\n    const login_link = hash_util.build_login_link();\n    const realm_name = page_params.realm_name;\n\n    $(\"body\").append(\n        render_login_to_access_modal({\n            signup_link: \"/register\",\n            login_link,\n            empty_narrow,\n            realm_name,\n        }),\n    );\n\n    overlays.open_modal(\"login_to_access_modal\", {\n        autoremove: true,\n        on_hide() {\n            browser_history.return_to_web_public_hash();\n        },\n    });\n}\n","import * as message_store from \"./message_store\";\nimport {page_params} from \"./page_params\";\nimport * as stream_popover from \"./stream_popover\";\nimport * as top_left_corner from \"./top_left_corner\";\nimport {user_settings} from \"./user_settings\";\n\nexport const starred_ids = new Set();\n\nexport function initialize() {\n    starred_ids.clear();\n\n    for (const id of page_params.starred_messages) {\n        starred_ids.add(id);\n    }\n\n    rerender_ui();\n}\n\nexport function add(ids) {\n    for (const id of ids) {\n        starred_ids.add(id);\n    }\n\n    rerender_ui();\n}\n\nexport function remove(ids) {\n    for (const id of ids) {\n        starred_ids.delete(id);\n    }\n\n    rerender_ui();\n}\n\nexport function get_count() {\n    return starred_ids.size;\n}\n\nexport function get_starred_msg_ids() {\n    return Array.from(starred_ids);\n}\n\nexport function get_count_in_topic(stream_id, topic) {\n    if (stream_id === undefined || topic === undefined) {\n        return 0;\n    }\n\n    const messages = Array.from(starred_ids).filter((id) => {\n        const message = message_store.get(id);\n\n        if (message === undefined) {\n            // We know the `id` from the initial data fetch from page_params,\n            // but the message itself hasn't been fetched from the server yet.\n            // We ignore this message, since we can't check if it belongs to\n            // the topic, but it could, meaning this implementation isn't\n            // completely correct.\n            // Since this function is used only when opening the topic popover,\n            // and not for actually unstarring messages, this discrepancy is\n            // probably acceptable. The worst it could manifest as is the topic\n            // popover not having the \"Unstar all messages in topic\" option, when\n            // it should have had.\n            return false;\n        }\n\n        return (\n            message.type === \"stream\" &&\n            message.stream_id === stream_id &&\n            message.topic.toLowerCase() === topic.toLowerCase()\n        );\n    });\n\n    return messages.length;\n}\n\nexport function rerender_ui() {\n    let count = get_count();\n\n    if (!user_settings.starred_message_counts) {\n        // This essentially hides the count\n        count = 0;\n    }\n\n    stream_popover.hide_topic_popover();\n    top_left_corner.update_starred_count(count);\n    stream_popover.hide_starred_messages_popover();\n}\n","import render_confirm_unstar_all_messages from \"../templates/confirm_dialog/confirm_unstar_all_messages.hbs\";\nimport render_confirm_unstar_all_messages_in_topic from \"../templates/confirm_dialog/confirm_unstar_all_messages_in_topic.hbs\";\n\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport {$t_html} from \"./i18n\";\nimport * as message_flags from \"./message_flags\";\nimport * as stream_data from \"./stream_data\";\n\nexport function confirm_unstar_all_messages() {\n    const html_body = render_confirm_unstar_all_messages();\n\n    confirm_dialog.launch({\n        html_heading: $t_html({defaultMessage: \"Unstar all messages\"}),\n        html_body,\n        on_click: message_flags.unstar_all_messages,\n    });\n}\n\nexport function confirm_unstar_all_messages_in_topic(stream_id, topic) {\n    function on_click() {\n        message_flags.unstar_all_messages_in_topic(stream_id, topic);\n    }\n\n    const stream_name = stream_data.maybe_get_stream_name(stream_id);\n    if (stream_name === undefined) {\n        return;\n    }\n\n    const html_body = render_confirm_unstar_all_messages_in_topic({\n        stream_name,\n        topic,\n    });\n\n    confirm_dialog.launch({\n        html_heading: $t_html({defaultMessage: \"Unstar messages in topic\"}),\n        html_body,\n        on_click,\n    });\n}\n","import $ from \"jquery\";\n\nimport * as color_class from \"./color_class\";\nimport * as stream_data from \"./stream_data\";\n\nfunction update_compose_stream_icon(stream_name) {\n    const $streamfield = $(\"#stream_message_recipient_stream\");\n    const $globe_icon = $(\"#compose-globe-icon\");\n    const $lock_icon = $(\"#compose-lock-icon\");\n\n    // Reset state\n    $globe_icon.hide();\n    $lock_icon.hide();\n    $streamfield.removeClass(\"lock-padding\");\n\n    if (stream_data.is_invite_only_by_stream_name(stream_name)) {\n        $lock_icon.show();\n        $streamfield.addClass(\"lock-padding\");\n    } else if (stream_data.is_web_public_by_stream_name(stream_name)) {\n        $globe_icon.show();\n        $streamfield.addClass(\"lock-padding\");\n    }\n}\n\n// In an attempt to decrease mixing, set stream bar\n// color look like the stream being used.\n// (In particular, if there's a color associated with it,\n//  have that color be reflected here too.)\nexport function decorate(stream_name, $element, is_compose) {\n    if (stream_name === undefined) {\n        return;\n    }\n    const color = stream_data.get_color(stream_name);\n    if (is_compose) {\n        update_compose_stream_icon(stream_name);\n    }\n    $element\n        .css(\"background-color\", color)\n        .removeClass(\"dark_background\")\n        .addClass(color_class.get_css_class(color));\n}\n","import $ from \"jquery\";\n\nimport * as color_class from \"./color_class\";\nimport {$t} from \"./i18n\";\nimport * as message_view_header from \"./message_view_header\";\nimport * as stream_settings_ui from \"./stream_settings_ui\";\n\nfunction update_table_stream_color(table, stream_name, color) {\n    // This is ugly, but temporary, as the new design will make it\n    // so that we only have color in the headers.\n    const style = color;\n\n    const $stream_labels = $(\"#floating_recipient_bar\").add(table).find(\".stream_label\");\n\n    for (const label of $stream_labels) {\n        const $label = $(label);\n        if ($label.text().trim() === stream_name) {\n            const $messages = $label.closest(\".recipient_row\").children(\".message_row\");\n            $messages\n                .children(\".messagebox\")\n                .css(\n                    \"box-shadow\",\n                    \"inset 2px 0px 0px 0px \" + style + \", -1px 0px 0px 0px \" + style,\n                );\n            $messages\n                .children(\".date_row\")\n                .css(\n                    \"box-shadow\",\n                    \"inset 2px 0px 0px 0px \" + style + \", -1px 0px 0px 0px \" + style,\n                );\n            $label.css({background: style, \"border-left-color\": style});\n            $label.removeClass(\"dark_background\");\n            $label.addClass(color_class.get_css_class(color));\n        }\n    }\n}\n\nfunction update_stream_sidebar_swatch_color(id, color) {\n    $(`#stream_sidebar_swatch_${CSS.escape(id)}`).css(\"background-color\", color);\n    $(`#stream_sidebar_privacy_swatch_${CSS.escape(id)}`).css(\"color\", color);\n}\n\nfunction update_historical_message_color(stream_name, color) {\n    update_table_stream_color($(\".focused_table\"), stream_name, color);\n    if ($(\".focused_table\").attr(\"id\") !== \"#zhome\") {\n        update_table_stream_color($(\"#zhome\"), stream_name, color);\n    }\n}\n\nconst stream_color_palette = [\n    [\"a47462\", \"c2726a\", \"e4523d\", \"e7664d\", \"ee7e4a\", \"f4ae55\"],\n    [\"76ce90\", \"53a063\", \"94c849\", \"bfd56f\", \"fae589\", \"f5ce6e\"],\n    [\"a6dcbf\", \"addfe5\", \"a6c7e5\", \"4f8de4\", \"95a5fd\", \"b0a5fd\"],\n    [\"c2c2c2\", \"c8bebf\", \"c6a8ad\", \"e79ab5\", \"bd86e5\", \"9987e1\"],\n];\n\nconst subscriptions_table_colorpicker_options = {\n    clickoutFiresChange: true,\n    showPalette: true,\n    showInput: true,\n    palette: stream_color_palette,\n};\n\nexport function set_colorpicker_color(colorpicker, color) {\n    colorpicker.spectrum({\n        ...subscriptions_table_colorpicker_options,\n        color,\n        container: \"#subscription_overlay .subscription_settings.show\",\n    });\n}\n\nexport function update_stream_color(sub, color, {update_historical = false} = {}) {\n    sub.color = color;\n    const stream_id = sub.stream_id;\n    // The swatch in the subscription row header.\n    $(`.stream-row[data-stream-id='${CSS.escape(stream_id)}'] .icon`).css(\n        \"background-color\",\n        color,\n    );\n    // The swatch in the color picker.\n    set_colorpicker_color(\n        $(\n            `#subscription_overlay .subscription_settings[data-stream-id='${CSS.escape(\n                stream_id,\n            )}'] .colorpicker`,\n        ),\n        color,\n    );\n    $(\n        `#subscription_overlay .subscription_settings[data-stream-id='${CSS.escape(\n            stream_id,\n        )}'] .large-icon`,\n    ).css(\"color\", color);\n\n    if (update_historical) {\n        update_historical_message_color(sub.name, color);\n    }\n    update_stream_sidebar_swatch_color(stream_id, color);\n    message_view_header.colorize_message_view_header();\n}\n\nexport const sidebar_popover_colorpicker_options_full = {\n    clickoutFiresChange: false,\n    showPalette: true,\n    showInput: true,\n    flat: true,\n    cancelText: \"\",\n    chooseText: $t({defaultMessage: \"Confirm\"}),\n    palette: stream_color_palette,\n    change: picker_do_change_color,\n};\n\nfunction picker_do_change_color(color) {\n    $(\".colorpicker\").spectrum(\"destroy\");\n    $(\".colorpicker\").spectrum(sidebar_popover_colorpicker_options_full);\n    const stream_id = Number.parseInt($(this).attr(\"stream_id\"), 10);\n    const hex_color = color.toHexString();\n    stream_settings_ui.set_color(stream_id, hex_color);\n}\nsubscriptions_table_colorpicker_options.change = picker_do_change_color;\n\nexport const sidebar_popover_colorpicker_options = {\n    clickoutFiresChange: true,\n    showPaletteOnly: true,\n    showPalette: true,\n    showInput: true,\n    flat: true,\n    palette: stream_color_palette,\n    change: picker_do_change_color,\n};\n","import $ from \"jquery\";\nimport tippy from \"tippy.js\";\n\nimport render_announce_stream_docs from \"../templates/announce_stream_docs.hbs\";\nimport render_subscription_invites_warning_modal from \"../templates/confirm_dialog/confirm_subscription_invites_warning.hbs\";\n\nimport * as channel from \"./channel\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as loading from \"./loading\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as settings_data from \"./settings_data\";\nimport * as stream_create_subscribers from \"./stream_create_subscribers\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_settings_ui from \"./stream_settings_ui\";\nimport * as ui_report from \"./ui_report\";\nimport {parse_html} from \"./ui_util\";\n\nlet created_stream;\n\nexport function reset_created_stream() {\n    created_stream = undefined;\n}\n\nexport function set_name(stream) {\n    created_stream = stream;\n}\n\nexport function get_name() {\n    return created_stream;\n}\n\nclass StreamSubscriptionError {\n    report_no_subs_to_stream() {\n        $(\"#stream_subscription_error\").text(\n            $t({defaultMessage: \"You cannot create a stream with no subscribers!\"}),\n        );\n        $(\"#stream_subscription_error\").show();\n    }\n\n    cant_create_stream_without_subscribing() {\n        $(\"#stream_subscription_error\").text(\n            $t({\n                defaultMessage:\n                    \"You must be an organization administrator to create a stream without subscribing.\",\n            }),\n        );\n        $(\"#stream_subscription_error\").show();\n    }\n\n    clear_errors() {\n        $(\"#stream_subscription_error\").hide();\n    }\n}\nconst stream_subscription_error = new StreamSubscriptionError();\n\nclass StreamNameError {\n    report_already_exists() {\n        $(\"#stream_name_error\").text(\n            $t({defaultMessage: \"A stream with this name already exists\"}),\n        );\n        $(\"#stream_name_error\").show();\n    }\n\n    clear_errors() {\n        $(\"#stream_name_error\").hide();\n    }\n\n    report_empty_stream() {\n        $(\"#stream_name_error\").text($t({defaultMessage: \"A stream needs to have a name\"}));\n        $(\"#stream_name_error\").show();\n    }\n\n    select() {\n        $(\"#create_stream_name\").trigger(\"focus\").trigger(\"select\");\n    }\n\n    pre_validate(stream_name) {\n        // Don't worry about empty strings...we just want to call this\n        // to warn users early before they start doing too much work\n        // after they make the effort to type in a stream name.  (The\n        // use case here is that I go to create a stream, only to find\n        // out it already exists, and I was just too lazy to look at\n        // the public streams that I'm not subscribed to yet.  Once I\n        // realize the stream already exists, I may want to cancel.)\n        if (stream_name && stream_data.get_sub(stream_name)) {\n            this.report_already_exists();\n            return;\n        }\n\n        this.clear_errors();\n    }\n\n    validate_for_submit(stream_name) {\n        if (!stream_name) {\n            this.report_empty_stream();\n            this.select();\n            return false;\n        }\n\n        if (stream_data.get_sub(stream_name)) {\n            this.report_already_exists();\n            this.select();\n            return false;\n        }\n\n        // If we got this far, then we think we have a new unique stream\n        // name, so we'll submit to the server.  (It's still plausible,\n        // however, that there's some invite-only stream that we don't\n        // know about locally that will cause a name collision.)\n        return true;\n    }\n}\nconst stream_name_error = new StreamNameError();\n\n// Stores the previous state of the stream creation checkbox.\nlet stream_announce_previous_value =\n    settings_data.user_can_create_public_streams() ||\n    settings_data.user_can_create_web_public_streams();\n\n// Within the new stream modal...\nfunction update_announce_stream_state() {\n    // If there is no notifications_stream, we simply hide the widget.\n    if (!stream_data.realm_has_notifications_stream()) {\n        $(\"#announce-new-stream\").hide();\n        return;\n    }\n\n    // If the stream is invite only, disable the \"Announce stream\" option.\n    // Otherwise enable it.\n    const $announce_stream_checkbox = $(\"#announce-new-stream input\");\n    const $announce_stream_label = $(\"#announce-new-stream\");\n    let disable_it = false;\n    const privacy_type = $(\"input:radio[name=privacy]:checked\").val();\n    const is_invite_only =\n        privacy_type === \"invite-only\" || privacy_type === \"invite-only-public-history\";\n    $announce_stream_label.removeClass(\"control-label-disabled\");\n\n    // Here, we arrange to save the state of the announce checkbox\n    // when switching to creating a private stream; we will restore it\n    // when switching back to a public stream. This input-disabled\n    // check prevents overwriting stream_announce_previous_value with\n    // the false when switching between private stream types.\n    if (!$announce_stream_checkbox.prop(\"disabled\")) {\n        stream_announce_previous_value = $announce_stream_checkbox.prop(\"checked\");\n    }\n\n    if (is_invite_only) {\n        disable_it = true;\n        $announce_stream_checkbox.prop(\"checked\", false);\n        $announce_stream_label.addClass(\"control-label-disabled\");\n    } else {\n        // If the stream was already public, this will be a noop.\n        $announce_stream_checkbox.prop(\"checked\", stream_announce_previous_value);\n    }\n\n    $announce_stream_checkbox.prop(\"disabled\", disable_it);\n    $(\"#announce-new-stream\").show();\n}\n\nfunction create_stream() {\n    const data = {};\n    const stream_name = $(\"#create_stream_name\").val().trim();\n    const description = $(\"#create_stream_description\").val().trim();\n    created_stream = stream_name;\n\n    // Even though we already check to make sure that while typing the user cannot enter\n    // newline characters (by pressing the Enter key) it would still be possible to copy\n    // and paste over a description with newline characters in it. Prevent that.\n    if (description.includes(\"\\n\")) {\n        ui_report.client_error(\n            $t_html({defaultMessage: \"The stream description cannot contain newline characters.\"}),\n            $(\".stream_create_info\"),\n        );\n        return undefined;\n    }\n    data.subscriptions = JSON.stringify([{name: stream_name, description}]);\n\n    let invite_only;\n    let history_public_to_subscribers;\n    let is_web_public;\n    const privacy_setting = $(\"#stream_creation_form input[name=privacy]:checked\").val();\n\n    switch (privacy_setting) {\n        case \"invite-only\": {\n            invite_only = true;\n            history_public_to_subscribers = false;\n            is_web_public = false;\n\n            break;\n        }\n        case \"invite-only-public-history\": {\n            invite_only = true;\n            history_public_to_subscribers = true;\n            is_web_public = false;\n\n            break;\n        }\n        case \"web-public\": {\n            invite_only = false;\n            history_public_to_subscribers = true;\n            is_web_public = true;\n\n            break;\n        }\n        default: {\n            invite_only = false;\n            history_public_to_subscribers = true;\n            is_web_public = false;\n        }\n    }\n\n    data.is_web_public = JSON.stringify(is_web_public);\n    data.invite_only = JSON.stringify(invite_only);\n    data.history_public_to_subscribers = JSON.stringify(history_public_to_subscribers);\n\n    const stream_post_policy = Number.parseInt(\n        $(\"#stream_creation_form select[name=stream-post-policy]\").val(),\n        10,\n    );\n\n    data.stream_post_policy = JSON.stringify(stream_post_policy);\n\n    let message_retention_selection = $(\n        \"#stream_creation_form select[name=stream_message_retention_setting]\",\n    ).val();\n    if (message_retention_selection === \"custom_period\") {\n        message_retention_selection = Number.parseInt(\n            $(\"#stream_creation_form input[name=stream-message-retention-days]\").val(),\n            10,\n        );\n    }\n\n    data.message_retention_days = JSON.stringify(message_retention_selection);\n\n    const announce =\n        stream_data.realm_has_notifications_stream() &&\n        $(\"#announce-new-stream input\").prop(\"checked\");\n    data.announce = JSON.stringify(announce);\n\n    // TODO: We can eliminate the user_ids -> principals conversion\n    //       once we upgrade the backend to accept user_ids.\n    const user_ids = stream_create_subscribers.get_principals();\n    data.principals = JSON.stringify(user_ids);\n\n    loading.make_indicator($(\"#stream_creating_indicator\"), {\n        text: $t({defaultMessage: \"Creating stream...\"}),\n    });\n\n    // Subscribe yourself and possible other people to a new stream.\n    return channel.post({\n        url: \"/json/users/me/subscriptions\",\n        data,\n        success() {\n            $(\"#create_stream_name\").val(\"\");\n            $(\"#create_stream_description\").val(\"\");\n            ui_report.success(\n                $t_html({defaultMessage: \"Stream successfully created!\"}),\n                $(\".stream_create_info\"),\n            );\n            loading.destroy_indicator($(\"#stream_creating_indicator\"));\n            // The rest of the work is done via the subscribe event we will get\n        },\n        error(xhr) {\n            const msg = JSON.parse(xhr.responseText).msg;\n            if (msg.includes(\"access\")) {\n                // If we can't access the stream, we can safely assume it's\n                // a duplicate stream that we are not invited to.\n                //\n                // BUG: This check should be using error codes, not\n                // parsing the error string, so it works correctly\n                // with i18n.  And likely we should be reporting the\n                // error text directly rather than turning it into\n                // \"Error creating stream\"?\n                stream_name_error.report_already_exists(stream_name);\n                stream_name_error.select();\n            }\n\n            ui_report.error(\n                $t_html({defaultMessage: \"Error creating stream\"}),\n                xhr,\n                $(\".stream_create_info\"),\n            );\n            loading.destroy_indicator($(\"#stream_creating_indicator\"));\n        },\n    });\n}\n\nexport function new_stream_clicked(stream_name) {\n    // this changes the tab switcher (settings/preview) which isn't necessary\n    // to a add new stream title.\n    stream_settings_ui.show_subs_pane.create_stream();\n    $(\".stream-row.active\").removeClass(\"active\");\n\n    if (stream_name !== \"\") {\n        $(\"#create_stream_name\").val(stream_name);\n    }\n    show_new_stream_modal();\n    $(\"#create_stream_name\").trigger(\"focus\");\n}\n\nfunction clear_error_display() {\n    stream_name_error.clear_errors();\n    $(\".stream_create_info\").hide();\n    stream_subscription_error.clear_errors();\n}\n\nexport function show_new_stream_modal() {\n    $(\"#stream-creation\").removeClass(\"hide\");\n    $(\".right .settings\").hide();\n    stream_settings_ui.hide_or_disable_stream_privacy_options_if_required($(\"#stream-creation\"));\n\n    stream_create_subscribers.build_widgets();\n\n    // Select the first visible and enabled choice for stream privacy.\n    $(\"#make-invite-only input:visible:not([disabled])\").first().prop(\"checked\", true);\n    // Make the options default to the same each time:\n    // \"announce stream\" on.\n    $(\"#stream_creation_form .stream-message-retention-days-input\").hide();\n    $(\"#stream_creation_form select[name=stream_message_retention_setting]\").val(\"realm_default\");\n\n    // Add listener to .show stream-message-retention-days-input that we've hidden above\n    $(\"#stream_creation_form .stream_message_retention_setting\").on(\"change\", (e) => {\n        if (e.target.value === \"custom_period\") {\n            $(\"#stream_creation_form .stream-message-retention-days-input\").show();\n        } else {\n            $(\"#stream_creation_form .stream-message-retention-days-input\").hide();\n        }\n    });\n\n    update_announce_stream_state();\n    clear_error_display();\n}\n\nexport function set_up_handlers() {\n    const $people_to_add_holder = $(\"#people_to_add\").expectOne();\n    stream_create_subscribers.create_handlers($people_to_add_holder);\n\n    const $container = $(\"#stream-creation\").expectOne();\n\n    $container.on(\"change\", \".stream-privacy-values input\", update_announce_stream_state);\n\n    $container.on(\"click\", \".finalize_create_stream\", (e) => {\n        e.preventDefault();\n        clear_error_display();\n\n        const stream_name = $(\"#create_stream_name\").val().trim();\n        const name_ok = stream_name_error.validate_for_submit(stream_name);\n\n        if (!name_ok) {\n            return;\n        }\n\n        const principals = stream_create_subscribers.get_principals();\n        if (principals.length === 0) {\n            stream_subscription_error.report_no_subs_to_stream();\n            return;\n        }\n        if (!principals.includes(people.my_current_user_id()) && !page_params.is_admin) {\n            stream_subscription_error.cant_create_stream_without_subscribing();\n            return;\n        }\n\n        if (principals.length >= 50) {\n            const html_body = render_subscription_invites_warning_modal({\n                stream_name,\n                count: principals.length,\n            });\n\n            confirm_dialog.launch({\n                html_heading: $t_html({defaultMessage: \"Large number of subscribers\"}),\n                html_body,\n                on_click() {\n                    create_stream();\n                },\n            });\n        } else {\n            create_stream();\n        }\n    });\n\n    $container.on(\"input\", \"#create_stream_name\", () => {\n        const stream_name = $(\"#create_stream_name\").val().trim();\n\n        // This is an inexpensive check.\n        stream_name_error.pre_validate(stream_name);\n    });\n\n    tippy(\"#announce-stream-docs\", {\n        content: () =>\n            parse_html(\n                render_announce_stream_docs({\n                    notifications_stream: stream_data.get_notifications_stream(),\n                }),\n            ),\n    });\n\n    // Do not allow the user to enter newline characters while typing out the\n    // stream's description during it's creation.\n    $container.on(\"keydown\", \"#create_stream_description\", (e) => {\n        if (keydown_util.is_enter_event(e)) {\n            e.preventDefault();\n        }\n    });\n}\n","import $ from \"jquery\";\n\nimport render_new_stream_user from \"../templates/stream_settings/new_stream_user.hbs\";\nimport render_new_stream_users from \"../templates/stream_settings/new_stream_users.hbs\";\n\nimport * as add_subscribers_pill from \"./add_subscribers_pill\";\nimport * as ListWidget from \"./list_widget\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as settings_data from \"./settings_data\";\nimport * as stream_create_subscribers_data from \"./stream_create_subscribers_data\";\n\nlet pill_widget;\nlet all_users_list_widget;\n\nexport function get_principals() {\n    return stream_create_subscribers_data.get_principals();\n}\n\nfunction redraw_subscriber_list() {\n    all_users_list_widget.replace_list_data(stream_create_subscribers_data.sorted_user_ids());\n}\n\nfunction add_user_ids(user_ids) {\n    stream_create_subscribers_data.add_user_ids(user_ids);\n    redraw_subscriber_list();\n}\n\nfunction add_all_users() {\n    const user_ids = stream_create_subscribers_data.get_all_user_ids();\n    add_user_ids(user_ids);\n}\n\nfunction remove_user_ids(user_ids) {\n    stream_create_subscribers_data.remove_user_ids(user_ids);\n    redraw_subscriber_list();\n}\n\nfunction build_pill_widget({$parent_container}) {\n    const $pill_container = $parent_container.find(\".pill-container\");\n    const get_potential_subscribers = stream_create_subscribers_data.get_potential_subscribers;\n\n    pill_widget = add_subscribers_pill.create({$pill_container, get_potential_subscribers});\n}\n\nexport function create_handlers($container) {\n    $container.on(\"click\", \".add_all_users_to_stream\", (e) => {\n        e.preventDefault();\n        add_all_users();\n        $(\".add-user-list-filter\").trigger(\"focus\");\n    });\n\n    $container.on(\"click\", \".remove_potential_subscriber\", (e) => {\n        e.preventDefault();\n        const $elem = $(e.target);\n        const user_id = Number.parseInt($elem.attr(\"data-user-id\"), 10);\n        remove_user_ids([user_id]);\n    });\n\n    function add_users({pill_user_ids}) {\n        add_user_ids(pill_user_ids);\n        pill_widget.clear();\n    }\n\n    add_subscribers_pill.set_up_handlers({\n        get_pill_widget: () => pill_widget,\n        $parent_container: $container,\n        pill_selector: \".add_subscribers_container .input\",\n        button_selector: \".add_subscribers_container button.add-subscriber-button\",\n        action: add_users,\n    });\n}\n\nexport function build_widgets() {\n    const $add_people_container = $(\"#people_to_add\");\n    $add_people_container.html(render_new_stream_users({}));\n\n    const $simplebar_container = $add_people_container.find(\".subscriber_list_container\");\n\n    build_pill_widget({$parent_container: $add_people_container});\n\n    stream_create_subscribers_data.initialize_with_current_user();\n    const current_user_id = page_params.user_id;\n\n    all_users_list_widget = ListWidget.create($(\"#create_stream_subscribers\"), [current_user_id], {\n        name: \"new_stream_add_users\",\n        $parent_container: $add_people_container,\n        modifier(user_id) {\n            const user = people.get_by_user_id(user_id);\n            const item = {\n                show_email: settings_data.show_email(),\n                email: people.get_visible_email(user),\n                user_id,\n                full_name: user.full_name,\n                is_current_user: user_id === current_user_id,\n                disabled: stream_create_subscribers_data.must_be_subscribed(user_id),\n            };\n            return render_new_stream_user(item);\n        },\n        filter: {\n            $element: $(\"#people_to_add .add-user-list-filter\"),\n            predicate(user_id, search_term) {\n                const user = people.get_by_user_id(user_id);\n                return people.build_person_matcher(search_term)(user);\n            },\n        },\n        $simplebar_container,\n        html_selector(user_id) {\n            const user = people.get_by_user_id(user_id);\n            return $(`#${CSS.escape(\"user_checkbox_\" + user.user_id)}`);\n        },\n    });\n}\n\nexport function add_user_id_to_new_stream(user_id) {\n    // This is only used by puppeteer tests.\n    add_user_ids([user_id]);\n}\n","import {page_params} from \"./page_params\";\nimport * as people from \"./people\";\n\nlet user_id_set;\n\nexport function initialize_with_current_user() {\n    const current_user_id = page_params.user_id;\n    user_id_set = new Set();\n    user_id_set.add(current_user_id);\n}\n\nexport function sorted_user_ids() {\n    const users = people.get_users_from_ids(Array.from(user_id_set));\n    people.sort_but_pin_current_user_on_top(users);\n    return users.map((user) => user.user_id);\n}\n\nexport function get_all_user_ids() {\n    const potential_subscribers = people.get_realm_users();\n    const user_ids = potential_subscribers.map((user) => user.user_id);\n    // sort for determinism\n    user_ids.sort((a, b) => a - b);\n    return user_ids;\n}\n\nexport function get_principals() {\n    // Return list of user ids which were selected by user.\n    return Array.from(user_id_set);\n}\n\nexport function get_potential_subscribers() {\n    const potential_subscribers = people.get_realm_users();\n    return potential_subscribers.filter((user) => !user_id_set.has(user.user_id));\n}\n\nexport function must_be_subscribed(user_id) {\n    return !page_params.is_admin && user_id === page_params.user_id;\n}\n\nexport function add_user_ids(user_ids) {\n    for (const user_id of user_ids) {\n        if (!user_id_set.has(user_id)) {\n            const user = people.get_by_user_id(user_id);\n            if (user) {\n                user_id_set.add(user_id);\n            }\n        }\n    }\n}\n\nexport function remove_user_ids(user_ids) {\n    for (const user_id of user_ids) {\n        user_id_set.delete(user_id);\n    }\n}\n","import * as blueslip from \"./blueslip\";\nimport * as color_data from \"./color_data\";\nimport {FoldDict} from \"./fold_dict\";\nimport {$t} from \"./i18n\";\nimport {page_params} from \"./page_params\";\nimport * as peer_data from \"./peer_data\";\nimport * as people from \"./people\";\nimport * as settings_config from \"./settings_config\";\nimport * as stream_topic_history from \"./stream_topic_history\";\nimport * as sub_store from \"./sub_store\";\nimport {user_settings} from \"./user_settings\";\nimport * as util from \"./util\";\n\nconst DEFAULT_COLOR = \"#c2c2c2\";\n\n// Expose get_subscriber_count for our automated puppeteer tests.\nexport const get_subscriber_count = peer_data.get_subscriber_count;\n\nclass BinaryDict {\n    /*\n      A dictionary that keeps track of which objects had the predicate\n      return true or false for efficient lookups and iteration.\n\n      This class is an optimization for managing subscriptions.\n      Typically you only subscribe to a small minority of streams, and\n      most common operations want to efficiently iterate through only\n      streams where the current user is subscribed:\n\n            - search bar search\n            - build left sidebar\n            - autocomplete #stream_links\n            - autocomplete stream in compose\n    */\n\n    trues = new FoldDict();\n    falses = new FoldDict();\n\n    constructor(pred) {\n        this.pred = pred;\n    }\n\n    true_values() {\n        return this.trues.values();\n    }\n\n    num_true_items() {\n        return this.trues.size;\n    }\n\n    false_values() {\n        return this.falses.values();\n    }\n\n    *values() {\n        for (const value of this.trues.values()) {\n            yield value;\n        }\n        for (const value of this.falses.values()) {\n            yield value;\n        }\n    }\n\n    get(k) {\n        const res = this.trues.get(k);\n\n        if (res !== undefined) {\n            return res;\n        }\n\n        return this.falses.get(k);\n    }\n\n    set(k, v) {\n        if (this.pred(v)) {\n            this.set_true(k, v);\n        } else {\n            this.set_false(k, v);\n        }\n    }\n\n    set_true(k, v) {\n        this.falses.delete(k);\n        this.trues.set(k, v);\n    }\n\n    set_false(k, v) {\n        this.trues.delete(k);\n        this.falses.set(k, v);\n    }\n\n    delete(k) {\n        this.trues.delete(k);\n        this.falses.delete(k);\n    }\n}\n\n// The stream_info variable maps stream names to stream properties objects\n// Call clear_subscriptions() to initialize it.\nlet stream_info;\nlet filter_out_inactives = false;\n\nconst stream_ids_by_name = new FoldDict();\nconst default_stream_ids = new Set();\n\nexport const stream_privacy_policy_values = {\n    web_public: {\n        code: \"web-public\",\n        name: $t({defaultMessage: \"Web-public\"}),\n        description: $t({\n            defaultMessage:\n                \"Organization members can join (guests must be invited by a subscriber); anyone on the Internet can view complete message history without creating an account\",\n        }),\n    },\n    public: {\n        code: \"public\",\n        name: $t({defaultMessage: \"Public\"}),\n        description: $t({\n            defaultMessage:\n                \"Organization members can join (guests must be invited by a subscriber); organization members can view complete message history without joining\",\n        }),\n    },\n    private_with_public_history: {\n        code: \"invite-only-public-history\",\n        name: $t({defaultMessage: \"Private, shared history\"}),\n        description: $t({\n            defaultMessage:\n                \"Must be invited by a subscriber; new subscribers can view complete message history; hidden from non-administrator users\",\n        }),\n    },\n    private: {\n        code: \"invite-only\",\n        name: $t({defaultMessage: \"Private, protected history\"}),\n        description: $t({\n            defaultMessage:\n                \"Must be invited by a subscriber; new subscribers can only see messages sent after they join; hidden from non-administrator users\",\n        }),\n    },\n};\n\nexport const stream_post_policy_values = {\n    // These strings should match the strings in the\n    // Stream.POST_POLICIES object in zerver/models.py.\n    everyone: {\n        code: 1,\n        description: $t({defaultMessage: \"Everyone\"}),\n    },\n    non_new_members: {\n        code: 3,\n        description: $t({defaultMessage: \"Admins, moderators and full members\"}),\n    },\n    moderators: {\n        code: 4,\n        description: $t({\n            defaultMessage: \"Admins and moderators\",\n        }),\n    },\n    admins: {\n        code: 2,\n        description: $t({defaultMessage: \"Admins only\"}),\n    },\n};\n\nexport function clear_subscriptions() {\n    // This function is only used once at page load, and then\n    // it should only be used in tests.\n    stream_info = new BinaryDict((sub) => sub.subscribed);\n    sub_store.clear();\n}\n\nclear_subscriptions();\n\nexport function set_filter_out_inactives() {\n    if (\n        user_settings.demote_inactive_streams ===\n        settings_config.demote_inactive_streams_values.automatic.code\n    ) {\n        filter_out_inactives = num_subscribed_subs() >= 30;\n    } else if (\n        user_settings.demote_inactive_streams ===\n        settings_config.demote_inactive_streams_values.always.code\n    ) {\n        filter_out_inactives = true;\n    } else {\n        filter_out_inactives = false;\n    }\n}\n\n// for testing:\nexport function is_filtering_inactives() {\n    return filter_out_inactives;\n}\n\nexport function is_active(sub) {\n    if (!filter_out_inactives || sub.pin_to_top) {\n        // If users don't want to filter inactive streams\n        // to the bottom, we respect that setting and don't\n        // treat any streams as dormant.\n        //\n        // Currently this setting is automatically determined\n        // by the number of streams.  See the callers\n        // to set_filter_out_inactives.\n        return true;\n    }\n    return stream_topic_history.stream_has_topics(sub.stream_id) || sub.newly_subscribed;\n}\n\nexport function is_muted_active(sub) {\n    return sub.is_muted && is_active(sub);\n}\n\nexport function rename_sub(sub, new_name) {\n    const old_name = sub.name;\n\n    stream_ids_by_name.set(old_name, sub.stream_id);\n\n    sub.name = new_name;\n    stream_info.delete(old_name);\n    stream_info.set(new_name, sub);\n}\n\nexport function subscribe_myself(sub) {\n    const user_id = people.my_current_user_id();\n    peer_data.add_subscriber(sub.stream_id, user_id);\n    sub.subscribed = true;\n    sub.newly_subscribed = true;\n    stream_info.set_true(sub.name, sub);\n}\n\nexport function unsubscribe_myself(sub) {\n    // Remove user from subscriber's list\n    const user_id = people.my_current_user_id();\n    peer_data.remove_subscriber(sub.stream_id, user_id);\n    sub.subscribed = false;\n    sub.newly_subscribed = false;\n    stream_info.set_false(sub.name, sub);\n}\n\nexport function add_sub(sub) {\n    // This function is currently used only by tests.\n    // We use create_sub_from_server_data at page load.\n    // We use create_streams for new streams in live-update events.\n    stream_info.set(sub.name, sub);\n    sub_store.add_hydrated_sub(sub.stream_id, sub);\n}\n\nexport function get_sub(stream_name) {\n    return stream_info.get(stream_name);\n}\n\nexport function get_stream_id(name) {\n    // Note: Only use this function for situations where\n    // you are comfortable with a user dealing with an\n    // old name of a stream (from prior to a rename).\n    const sub = stream_info.get(name);\n\n    if (sub) {\n        return sub.stream_id;\n    }\n\n    const stream_id = stream_ids_by_name.get(name);\n    return stream_id;\n}\n\nexport function get_sub_by_name(name) {\n    // Note: Only use this function for situations where\n    // you are comfortable with a user dealing with an\n    // old name of a stream (from prior to a rename).\n\n    const sub = stream_info.get(name);\n\n    if (sub) {\n        return sub;\n    }\n\n    const stream_id = stream_ids_by_name.get(name);\n\n    if (!stream_id) {\n        return undefined;\n    }\n\n    return sub_store.get(stream_id);\n}\n\nexport function name_to_slug(name) {\n    const stream_id = get_stream_id(name);\n\n    if (!stream_id) {\n        return name;\n    }\n\n    // The name part of the URL doesn't really matter, so we try to\n    // make it pretty.\n    name = name.replaceAll(\" \", \"-\");\n\n    return stream_id + \"-\" + name;\n}\n\nexport function slug_to_name(slug) {\n    /*\n    Modern stream slugs look like this, where 42\n    is a stream id:\n\n        42\n        42-stream-name\n\n    We have legacy slugs that are just the name\n    of the stream:\n\n        stream-name\n\n    And it's plausible that old stream slugs will have\n    be based on stream names that collide with modern\n    slugs:\n\n        4-horseman\n        411\n        2016-election\n\n    If there is any ambiguity about whether a stream slug\n    is old or modern, we prefer modern, as long as the integer\n    prefix matches a real stream id.  Eventually we will\n    stop supporting the legacy slugs, which only matter now\n    because people have linked to Zulip threads in things like\n    GitHub conversations.  We migrated to modern slugs in\n    early 2018.\n    */\n    const m = /^(\\d+)(-.*)?$/.exec(slug);\n    if (m) {\n        const stream_id = Number.parseInt(m[1], 10);\n        const sub = sub_store.get(stream_id);\n        if (sub) {\n            return sub.name;\n        }\n        // if nothing was found above, we try to match on the stream\n        // name in the somewhat unlikely event they had a historical\n        // link to a stream like 4-horsemen\n    }\n\n    /*\n    We are dealing with a pre-2018 slug that doesn't have the\n    stream id as a prefix.\n    */\n    return slug;\n}\n\nexport function delete_sub(stream_id) {\n    const sub = sub_store.get(stream_id);\n    if (!sub) {\n        blueslip.warn(\"Failed to archive stream \" + stream_id);\n        return;\n    }\n    sub_store.delete_sub(stream_id);\n    stream_info.delete(sub.name);\n}\n\nexport function get_non_default_stream_names() {\n    let subs = Array.from(stream_info.values());\n    subs = subs.filter((sub) => !is_default_stream_id(sub.stream_id) && !sub.invite_only);\n    const names = subs.map((sub) => sub.name);\n    return names;\n}\n\nexport function get_unsorted_subs() {\n    return Array.from(stream_info.values());\n}\n\nexport function num_subscribed_subs() {\n    return stream_info.num_true_items();\n}\n\nexport function subscribed_subs() {\n    return Array.from(stream_info.true_values());\n}\n\nexport function unsubscribed_subs() {\n    return Array.from(stream_info.false_values());\n}\n\nexport function subscribed_streams() {\n    return subscribed_subs().map((sub) => sub.name);\n}\n\nexport function subscribed_stream_ids() {\n    return subscribed_subs().map((sub) => sub.stream_id);\n}\n\nexport function muted_stream_ids() {\n    return subscribed_subs()\n        .filter((sub) => sub.is_muted)\n        .map((sub) => sub.stream_id);\n}\n\nexport function get_subscribed_streams_for_user(user_id) {\n    // Note that we only have access to subscribers of some streams\n    // depending on our role.\n    const all_subs = get_unsorted_subs();\n    const subscribed_subs = [];\n    for (const sub of all_subs) {\n        if (!can_view_subscribers(sub)) {\n            // Private streams that we have been removed from appear\n            // in get_unsorted_subs; we don't attempt to check their\n            // subscribers (which would trigger a warning).\n            continue;\n        }\n        if (is_user_subscribed(sub.stream_id, user_id)) {\n            subscribed_subs.push(sub);\n        }\n    }\n\n    return subscribed_subs;\n}\n\nexport function get_invite_stream_data() {\n    function get_data(sub) {\n        return {\n            name: sub.name,\n            stream_id: sub.stream_id,\n            invite_only: sub.invite_only,\n            is_web_public: sub.is_web_public,\n            default_stream: default_stream_ids.has(sub.stream_id),\n        };\n    }\n\n    const streams = [];\n\n    // Invite users to all default streams...\n    for (const stream_id of default_stream_ids) {\n        const sub = sub_store.get(stream_id);\n        streams.push(get_data(sub));\n    }\n\n    // ...plus all your subscribed streams (avoiding repeats).\n    for (const sub of subscribed_subs()) {\n        if (!default_stream_ids.has(sub.stream_id)) {\n            streams.push(get_data(sub));\n        }\n    }\n\n    return streams;\n}\n\nexport function get_colors() {\n    return subscribed_subs().map((sub) => sub.color);\n}\n\nexport function update_stream_email_address(sub, email) {\n    sub.email_address = email;\n}\n\nexport function update_stream_post_policy(sub, stream_post_policy) {\n    sub.stream_post_policy = stream_post_policy;\n}\n\nexport function update_stream_privacy(sub, values) {\n    sub.invite_only = values.invite_only;\n    sub.history_public_to_subscribers = values.history_public_to_subscribers;\n    sub.is_web_public = values.is_web_public;\n}\n\nexport function update_message_retention_setting(sub, message_retention_days) {\n    sub.message_retention_days = message_retention_days;\n}\n\nexport function receives_notifications(stream_id, notification_name) {\n    const sub = sub_store.get(stream_id);\n    if (sub === undefined) {\n        return false;\n    }\n    if (sub[notification_name] !== null) {\n        return sub[notification_name];\n    }\n    return user_settings[settings_config.generalize_stream_notification_setting[notification_name]];\n}\n\nexport function all_subscribed_streams_are_in_home_view() {\n    return subscribed_subs().every((sub) => !sub.is_muted);\n}\n\nexport function home_view_stream_names() {\n    const home_view_subs = subscribed_subs().filter((sub) => !sub.is_muted);\n    return home_view_subs.map((sub) => sub.name);\n}\n\nexport function canonicalized_name(stream_name) {\n    return stream_name.toString().toLowerCase();\n}\n\nexport function get_color(stream_name) {\n    const sub = get_sub(stream_name);\n    if (sub === undefined) {\n        return DEFAULT_COLOR;\n    }\n    return sub.color;\n}\n\nexport function is_muted(stream_id) {\n    const sub = sub_store.get(stream_id);\n    // Return true for undefined streams\n    if (sub === undefined) {\n        return true;\n    }\n    return sub.is_muted;\n}\n\nexport function is_stream_muted_by_name(stream_name) {\n    const sub = get_sub(stream_name);\n    // Return true for undefined streams\n    if (sub === undefined) {\n        return true;\n    }\n    return sub.is_muted;\n}\n\nexport function is_notifications_stream_muted() {\n    return is_muted(page_params.realm_notifications_stream_id);\n}\n\nexport function can_toggle_subscription(sub) {\n    // You can always remove your subscription if you're subscribed.\n    //\n    // One can only join a stream if it is public (!invite_only) and\n    // your role is Member or above (!is_guest).\n    // Spectators cannot subscribe to any streams.\n    //\n    // Note that the correctness of this logic relies on the fact that\n    // one cannot be subscribed to a deactivated stream, and\n    // deactivated streams are automatically made private during the\n    // archive stream process.\n    return (\n        (sub.subscribed || (!page_params.is_guest && !sub.invite_only)) && !page_params.is_spectator\n    );\n}\n\nexport function can_access_topic_history(sub) {\n    // Anyone can access topic history for web-public streams and\n    // subscriptions; additionally, members can access history for\n    // public streams.\n    return sub.is_web_public || can_toggle_subscription(sub);\n}\n\nexport function can_preview(sub) {\n    return sub.subscribed || !sub.invite_only || sub.previously_subscribed;\n}\n\nexport function can_change_permissions(sub) {\n    return page_params.is_admin && (!sub.invite_only || sub.subscribed);\n}\n\nexport function can_view_subscribers(sub) {\n    // Guest users can't access subscribers of any(public or private) non-subscribed streams.\n    return page_params.is_admin || sub.subscribed || (!page_params.is_guest && !sub.invite_only);\n}\n\nexport function can_subscribe_others(sub) {\n    // User can add other users to stream if stream is public or user is subscribed to stream.\n    return !page_params.is_guest && (!sub.invite_only || sub.subscribed);\n}\n\nexport function can_post_messages_in_stream(stream) {\n    if (page_params.is_spectator) {\n        return false;\n    }\n\n    if (page_params.is_admin) {\n        return true;\n    }\n\n    if (stream.stream_post_policy === stream_post_policy_values.admins.code) {\n        return false;\n    }\n\n    if (page_params.is_moderator) {\n        return true;\n    }\n\n    if (stream.stream_post_policy === stream_post_policy_values.moderators.code) {\n        return false;\n    }\n\n    if (\n        page_params.is_guest &&\n        stream.stream_post_policy !== stream_post_policy_values.everyone.code\n    ) {\n        return false;\n    }\n\n    const person = people.get_by_user_id(people.my_current_user_id());\n    const current_datetime = new Date(Date.now());\n    const person_date_joined = new Date(person.date_joined);\n    const days = (current_datetime - person_date_joined) / 1000 / 86400;\n    if (\n        stream.stream_post_policy === stream_post_policy_values.non_new_members.code &&\n        days < page_params.realm_waiting_period_threshold\n    ) {\n        return false;\n    }\n    return true;\n}\n\nexport function is_subscribed_by_name(stream_name) {\n    const sub = get_sub(stream_name);\n    return sub !== undefined && sub.subscribed;\n}\n\nexport function is_subscribed(stream_id) {\n    const sub = sub_store.get(stream_id);\n    return sub !== undefined && sub.subscribed;\n}\n\nexport function get_stream_privacy_policy(stream_id) {\n    const sub = sub_store.get(stream_id);\n\n    if (sub.is_web_public) {\n        return stream_privacy_policy_values.web_public.code;\n    }\n    if (!sub.invite_only) {\n        return stream_privacy_policy_values.public.code;\n    }\n    if (sub.invite_only && !sub.history_public_to_subscribers) {\n        return stream_privacy_policy_values.private.code;\n    }\n    return stream_privacy_policy_values.private_with_public_history.code;\n}\n\nexport function is_web_public(stream_id) {\n    const sub = sub_store.get(stream_id);\n    return sub !== undefined && sub.is_web_public;\n}\n\nexport function is_invite_only_by_stream_name(stream_name) {\n    const sub = get_sub(stream_name);\n    if (sub === undefined) {\n        return false;\n    }\n    return sub.invite_only;\n}\n\nexport function is_web_public_by_stream_name(stream_name) {\n    const sub = get_sub(stream_name);\n    if (sub === undefined) {\n        return false;\n    }\n    return sub.is_web_public;\n}\n\nexport function set_realm_default_streams(realm_default_streams) {\n    default_stream_ids.clear();\n\n    for (const stream of realm_default_streams) {\n        default_stream_ids.add(stream.stream_id);\n    }\n}\n\nexport function get_default_stream_ids() {\n    return Array.from(default_stream_ids);\n}\n\nexport function is_default_stream_id(stream_id) {\n    return default_stream_ids.has(stream_id);\n}\n\nexport function get_name(stream_name) {\n    // This returns the actual name of a stream if we are subscribed to\n    // it (i.e \"Denmark\" vs. \"denmark\"), while falling thru to\n    // stream_name if we don't have a subscription.  (Stream names\n    // are case-insensitive, but we try to display the actual name\n    // when we know it.)\n    //\n    // This function will also do the right thing if we have\n    // an old stream name in memory for a recently renamed stream.\n    const sub = get_sub_by_name(stream_name);\n    if (sub === undefined) {\n        return stream_name;\n    }\n    return sub.name;\n}\n\nexport function maybe_get_stream_name(stream_id) {\n    if (!stream_id) {\n        return undefined;\n    }\n    const stream = sub_store.get(stream_id);\n\n    if (!stream) {\n        return undefined;\n    }\n\n    return stream.name;\n}\n\nexport function is_user_subscribed(stream_id, user_id) {\n    const sub = sub_store.get(stream_id);\n    if (sub === undefined || !can_view_subscribers(sub)) {\n        // If we don't know about the stream, or we ourselves cannot access subscriber list,\n        // so we return undefined (treated as falsy if not explicitly handled).\n        blueslip.warn(\n            \"We got a is_user_subscribed call for a non-existent or inaccessible stream.\",\n        );\n        return undefined;\n    }\n    if (user_id === undefined) {\n        blueslip.warn(\"Undefined user_id passed to function is_user_subscribed\");\n        return undefined;\n    }\n\n    return peer_data.is_user_subscribed(stream_id, user_id);\n}\n\nexport function create_streams(streams) {\n    for (const stream of streams) {\n        // We handle subscriber stuff in other events.\n\n        const attrs = {\n            subscribers: [],\n            subscribed: false,\n            ...stream,\n        };\n        create_sub_from_server_data(attrs);\n    }\n}\n\nexport function clean_up_description(sub) {\n    if (sub.rendered_description !== undefined) {\n        sub.rendered_description = sub.rendered_description.replace(\"<p>\", \"\").replace(\"</p>\", \"\");\n    }\n}\n\nexport function create_sub_from_server_data(attrs) {\n    if (!attrs.stream_id) {\n        // fail fast\n        throw new Error(\"We cannot create a sub without a stream_id\");\n    }\n\n    let sub = sub_store.get(attrs.stream_id);\n    if (sub !== undefined) {\n        // We've already created this subscription, no need to continue.\n        return sub;\n    }\n\n    // Our internal data structure for subscriptions is mostly plain dictionaries,\n    // so we just reuse the attrs that are passed in to us, but we encapsulate how\n    // we handle subscribers.  We defensively remove the `subscribers` field from\n    // the original `attrs` object, which will get thrown away.  (We used to make\n    // a copy of the object with `_.omit(attrs, 'subscribers')`, but `_.omit` is\n    // slow enough to show up in timings when you have 1000s of streams.\n\n    const subscriber_user_ids = attrs.subscribers;\n\n    delete attrs.subscribers;\n\n    sub = {\n        name: attrs.name,\n        render_subscribers: !page_params.realm_is_zephyr_mirror_realm || attrs.invite_only === true,\n        subscribed: true,\n        newly_subscribed: false,\n        is_muted: false,\n        invite_only: false,\n        desktop_notifications: null,\n        audible_notifications: null,\n        push_notifications: null,\n        email_notifications: null,\n        wildcard_mentions_notify: null,\n        description: \"\",\n        rendered_description: \"\",\n        first_message_id: attrs.first_message_id,\n        ...attrs,\n    };\n\n    peer_data.set_subscribers(sub.stream_id, subscriber_user_ids);\n\n    if (!sub.color) {\n        sub.color = color_data.pick_color();\n    }\n\n    clean_up_description(sub);\n\n    stream_info.set(sub.name, sub);\n    sub_store.add_hydrated_sub(sub.stream_id, sub);\n\n    return sub;\n}\n\nexport function get_streams_for_admin() {\n    // Sort and combine all our streams.\n    function by_name(a, b) {\n        return util.strcmp(a.name, b.name);\n    }\n\n    const subs = Array.from(stream_info.values());\n\n    subs.sort(by_name);\n\n    return subs;\n}\n\n/*\n  This module provides a common helper for finding the notification\n  stream, but we don't own the data.  The `page_params` structure\n  is the authoritative source of this data, and it will be updated by\n  server_events_dispatch in case of changes.\n*/\nexport function realm_has_notifications_stream() {\n    return page_params.realm_notifications_stream_id !== -1;\n}\n\nexport function get_notifications_stream() {\n    const stream_id = page_params.realm_notifications_stream_id;\n    if (stream_id !== -1) {\n        const stream_obj = sub_store.get(stream_id);\n        if (stream_obj) {\n            return stream_obj.name;\n        }\n        // We reach here when the notifications stream is a private\n        // stream the current user is not subscribed to.\n    }\n    return \"\";\n}\n\nexport function initialize(params) {\n    /*\n        We get `params` data, which is data that we \"own\"\n        and which has already been removed from `page_params`.\n        We only use it in this function to populate other\n        data structures.\n    */\n\n    const subscriptions = params.subscriptions;\n    const unsubscribed = params.unsubscribed;\n    const never_subscribed = params.never_subscribed;\n    const realm_default_streams = params.realm_default_streams;\n\n    /*\n        We also consume some data directly from `page_params`.\n        This data can be accessed by any other module,\n        and we consider the authoritative source to be\n        `page_params`.  Some of this data should eventually\n        be fully handled by stream_data.\n    */\n\n    color_data.claim_colors(subscriptions);\n\n    function populate_subscriptions(subs, subscribed, previously_subscribed) {\n        for (const sub of subs) {\n            sub.subscribed = subscribed;\n            sub.previously_subscribed = previously_subscribed;\n\n            create_sub_from_server_data(sub);\n        }\n    }\n\n    set_realm_default_streams(realm_default_streams);\n\n    populate_subscriptions(subscriptions, true, true);\n    populate_subscriptions(unsubscribed, false, true);\n    populate_subscriptions(never_subscribed, false, false);\n\n    set_filter_out_inactives();\n}\n\nexport function remove_default_stream(stream_id) {\n    default_stream_ids.delete(stream_id);\n}\n","import ClipboardJS from \"clipboard\";\nimport $ from \"jquery\";\n\nimport render_settings_deactivation_stream_modal from \"../templates/confirm_dialog/confirm_deactivate_stream.hbs\";\nimport render_stream_privacy from \"../templates/stream_privacy.hbs\";\nimport render_change_stream_info_modal from \"../templates/stream_settings/change_stream_info_modal.hbs\";\nimport render_copy_email_address_modal from \"../templates/stream_settings/copy_email_address_modal.hbs\";\nimport render_stream_description from \"../templates/stream_settings/stream_description.hbs\";\nimport render_stream_settings from \"../templates/stream_settings/stream_settings.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as browser_history from \"./browser_history\";\nimport * as channel from \"./channel\";\nimport * as components from \"./components\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport * as hash_util from \"./hash_util\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as narrow_state from \"./narrow_state\";\nimport {page_params} from \"./page_params\";\nimport * as settings_config from \"./settings_config\";\nimport * as settings_org from \"./settings_org\";\nimport * as settings_ui from \"./settings_ui\";\nimport * as stream_color from \"./stream_color\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_edit_subscribers from \"./stream_edit_subscribers\";\nimport * as stream_settings_containers from \"./stream_settings_containers\";\nimport * as stream_settings_data from \"./stream_settings_data\";\nimport * as stream_settings_ui from \"./stream_settings_ui\";\nimport * as stream_ui_updates from \"./stream_ui_updates\";\nimport * as sub_store from \"./sub_store\";\nimport * as ui from \"./ui\";\nimport * as ui_report from \"./ui_report\";\nimport {user_settings} from \"./user_settings\";\nimport * as util from \"./util\";\n\nexport let toggler;\nexport let select_tab = \"personal_settings\";\n\nfunction setup_subscriptions_stream_hash(sub) {\n    const hash = hash_util.stream_edit_url(sub);\n    browser_history.update(hash);\n}\n\nexport function setup_subscriptions_tab_hash(tab_key_value) {\n    if (tab_key_value === \"all-streams\") {\n        browser_history.update(\"#streams/all\");\n    } else if (tab_key_value === \"subscribed\") {\n        browser_history.update(\"#streams/subscribed\");\n    } else {\n        blueslip.debug(\"Unknown tab_key_value: \" + tab_key_value);\n    }\n}\n\nexport function get_display_text_for_realm_message_retention_setting() {\n    const realm_message_retention_days = page_params.realm_message_retention_days;\n    if (realm_message_retention_days === settings_config.retain_message_forever) {\n        return $t({defaultMessage: \"(forever)\"});\n    }\n    return $t(\n        {defaultMessage: \"({message_retention_days} days)\"},\n        {message_retention_days: realm_message_retention_days},\n    );\n}\n\nfunction get_stream_id(target) {\n    const $row = $(target).closest(\n        \".stream-row, .stream_settings_header, .subscription_settings, .save-button\",\n    );\n    return Number.parseInt($row.attr(\"data-stream-id\"), 10);\n}\n\nfunction get_sub_for_target(target) {\n    const stream_id = get_stream_id(target);\n    if (!stream_id) {\n        blueslip.error(\"Cannot find stream id for target\");\n        return undefined;\n    }\n\n    const sub = sub_store.get(stream_id);\n    if (!sub) {\n        blueslip.error(\"get_sub_for_target() failed id lookup: \" + stream_id);\n        return undefined;\n    }\n    return sub;\n}\n\nexport function open_edit_panel_for_row(stream_row) {\n    const sub = get_sub_for_target(stream_row);\n\n    $(\".stream-row.active\").removeClass(\"active\");\n    stream_settings_ui.show_subs_pane.settings(sub);\n    $(stream_row).addClass(\"active\");\n    setup_subscriptions_stream_hash(sub);\n    setup_stream_settings(stream_row);\n}\n\nexport function open_edit_panel_empty() {\n    const tab_key = stream_settings_ui.get_active_data().$tabs.first().attr(\"data-tab-key\");\n    $(\".stream-row.active\").removeClass(\"active\");\n    stream_settings_ui.show_subs_pane.nothing_selected();\n    setup_subscriptions_tab_hash(tab_key);\n}\n\nexport function update_stream_name(sub, new_name) {\n    const $edit_container = stream_settings_containers.get_edit_container(sub);\n    $edit_container.find(\".email-address\").text(sub.email_address);\n    $edit_container.find(\".sub-stream-name\").text(new_name);\n\n    const active_data = stream_settings_ui.get_active_data();\n    if (active_data.id === sub.stream_id) {\n        stream_settings_ui.set_right_panel_title(sub);\n    }\n}\n\nexport function update_stream_description(sub) {\n    const $edit_container = stream_settings_containers.get_edit_container(sub);\n    $edit_container.find(\"input.description\").val(sub.description);\n    const html = render_stream_description({\n        rendered_description: util.clean_user_content_links(sub.rendered_description),\n    });\n    $edit_container.find(\".stream-description\").html(html);\n}\n\nfunction show_subscription_settings(sub) {\n    const $edit_container = stream_settings_containers.get_edit_container(sub);\n\n    const $colorpicker = $edit_container.find(\".colorpicker\");\n    const color = stream_data.get_color(sub.name);\n    stream_color.set_colorpicker_color($colorpicker, color);\n    stream_ui_updates.update_add_subscriptions_elements(sub);\n\n    if (!sub.render_subscribers) {\n        return;\n    }\n\n    if (!stream_data.can_toggle_subscription(sub)) {\n        stream_ui_updates.initialize_cant_subscribe_popover(sub);\n    }\n\n    const $subscriber_container = $edit_container.find(\".edit_subscribers_for_stream\");\n    stream_edit_subscribers.enable_subscriber_management({\n        sub,\n        $parent_container: $subscriber_container,\n    });\n}\n\nexport function is_notification_setting(setting_label) {\n    if (setting_label.includes(\"_notifications\")) {\n        return true;\n    } else if (setting_label.includes(\"_notify\")) {\n        return true;\n    }\n    return false;\n}\n\nexport function stream_settings(sub) {\n    const settings_labels = settings_config.general_notifications_table_labels.stream;\n    const check_realm_setting =\n        settings_config.all_notifications(user_settings).show_push_notifications_tooltip;\n\n    const settings = Object.keys(settings_labels).map((setting) => {\n        const ret = {\n            name: setting,\n            label: settings_labels[setting],\n            disabled_realm_setting: check_realm_setting[setting],\n            is_disabled: check_realm_setting[setting],\n            is_notification_setting: is_notification_setting(setting),\n        };\n        if (is_notification_setting(setting)) {\n            // This block ensures we correctly display to users the\n            // current state of stream-level notification settings\n            // with a value of `null`, which inherit the user's global\n            // notification settings for streams.\n            ret.is_checked =\n                stream_data.receives_notifications(sub.stream_id, setting) &&\n                !check_realm_setting[setting];\n            ret.is_disabled = ret.is_disabled || sub.is_muted;\n            return ret;\n        }\n        ret.is_checked = sub[setting] && !check_realm_setting[setting];\n        return ret;\n    });\n    return settings;\n}\n\nexport function show_settings_for(node) {\n    const stream_id = get_stream_id(node);\n    const slim_sub = sub_store.get(stream_id);\n    stream_data.clean_up_description(slim_sub);\n    const sub = stream_settings_data.get_sub_for_settings(slim_sub);\n    const all_settings = stream_settings(sub);\n\n    const other_settings = [];\n    const notification_settings = all_settings.filter((setting) => {\n        if (setting.is_notification_setting) {\n            return true;\n        }\n        other_settings.push(setting);\n        return false;\n    });\n\n    const html = render_stream_settings({\n        sub,\n        notification_settings,\n        other_settings,\n        stream_post_policy_values: stream_data.stream_post_policy_values,\n        stream_privacy_policy_values: stream_data.stream_privacy_policy_values,\n        stream_privacy_policy: stream_data.get_stream_privacy_policy(stream_id),\n        zulip_plan_is_not_limited: page_params.zulip_plan_is_not_limited,\n        upgrade_text_for_wide_organization_logo:\n            page_params.upgrade_text_for_wide_organization_logo,\n        is_admin: page_params.is_admin,\n        org_level_message_retention_setting: get_display_text_for_realm_message_retention_setting(),\n    });\n    ui.get_content_element($(\"#stream_settings\")).html(html);\n\n    $(\"#stream_settings .tab-container\").prepend(toggler.get());\n    stream_ui_updates.update_toggler_for_sub(sub);\n\n    const $edit_container = stream_settings_containers.get_edit_container(sub);\n\n    $(\".nothing-selected\").hide();\n    $(\"#subscription_overlay .stream_change_property_info\").hide();\n\n    $edit_container.addClass(\"show\");\n\n    show_subscription_settings(sub);\n    settings_org.set_message_retention_setting_dropdown(sub);\n    stream_ui_updates.enable_or_disable_permission_settings_in_edit_panel(sub);\n}\n\nexport function setup_stream_settings(node) {\n    toggler = components.toggle({\n        child_wants_focus: true,\n        values: [\n            {label: $t({defaultMessage: \"General\"}), key: \"general_settings\"},\n            {label: $t({defaultMessage: \"Personal\"}), key: \"personal_settings\"},\n            {label: $t({defaultMessage: \"Subscribers\"}), key: \"subscriber_settings\"},\n        ],\n        callback(name, key) {\n            $(\".stream_section\").hide();\n            $(\".\" + key).show();\n            select_tab = key;\n        },\n    });\n\n    show_settings_for(node);\n}\n\nexport function update_muting_rendering(sub) {\n    const $edit_container = stream_settings_containers.get_edit_container(sub);\n    const $notification_checkboxes = $edit_container.find(\".sub_notification_setting\");\n    const $is_muted_checkbox = $edit_container.find(\"#sub_is_muted_setting .sub_setting_control\");\n\n    $is_muted_checkbox.prop(\"checked\", sub.is_muted);\n    $edit_container.find(\".mute-note\").toggleClass(\"hide-mute-note\", !sub.is_muted);\n    $notification_checkboxes.toggleClass(\"muted-sub\", sub.is_muted);\n    $notification_checkboxes.find(\"input[type='checkbox']\").prop(\"disabled\", sub.is_muted);\n}\n\nfunction stream_is_muted_changed(e) {\n    const sub = get_sub_for_target(e.target);\n    if (!sub) {\n        blueslip.error(\"stream_is_muted_changed() fails\");\n        return;\n    }\n\n    stream_settings_ui.set_muted(\n        sub,\n        e.target.checked,\n        `#stream_change_property_status${CSS.escape(sub.stream_id)}`,\n    );\n}\n\nexport function stream_setting_changed(e, from_notification_settings) {\n    if (e.target.name === \"is_muted\") {\n        return;\n    }\n\n    const sub = get_sub_for_target(e.target);\n    const status_element = from_notification_settings\n        ? $(e.target).closest(\".subsection-parent\").find(\".alert-notification\")\n        : $(`#stream_change_property_status${CSS.escape(sub.stream_id)}`);\n    const setting = e.target.name;\n    if (!sub) {\n        blueslip.error(\"undefined sub in stream_setting_changed()\");\n        return;\n    }\n    if (is_notification_setting(setting) && sub[setting] === null) {\n        sub[setting] =\n            user_settings[settings_config.generalize_stream_notification_setting[setting]];\n    }\n    set_stream_property(sub, setting, e.target.checked, status_element);\n}\n\nexport function bulk_set_stream_property(sub_data, status_element) {\n    const url = \"/json/users/me/subscriptions/properties\";\n    const data = {subscription_data: JSON.stringify(sub_data)};\n    if (!status_element) {\n        return channel.post({\n            url,\n            data,\n            timeout: 10 * 1000,\n        });\n    }\n\n    settings_ui.do_settings_change(channel.post, url, data, status_element);\n    return undefined;\n}\n\nexport function set_stream_property(sub, property, value, status_element) {\n    const sub_data = {stream_id: sub.stream_id, property, value};\n    bulk_set_stream_property([sub_data], status_element);\n}\n\nexport function get_request_data_for_stream_privacy(selected_val) {\n    switch (selected_val) {\n        case stream_data.stream_privacy_policy_values.public.code: {\n            return {\n                is_private: false,\n                history_public_to_subscribers: true,\n                is_web_public: false,\n            };\n        }\n        case stream_data.stream_privacy_policy_values.private.code: {\n            return {\n                is_private: true,\n                history_public_to_subscribers: false,\n                is_web_public: false,\n            };\n        }\n        case stream_data.stream_privacy_policy_values.web_public.code: {\n            return {\n                is_private: false,\n                history_public_to_subscribers: true,\n                is_web_public: true,\n            };\n        }\n        default: {\n            return {\n                is_private: true,\n                history_public_to_subscribers: true,\n                is_web_public: false,\n            };\n        }\n    }\n}\n\nexport function archive_stream(stream_id, $alert_element, $stream_row) {\n    channel.del({\n        url: \"/json/streams/\" + stream_id,\n        error(xhr) {\n            ui_report.error($t_html({defaultMessage: \"Failed\"}), xhr, $alert_element);\n        },\n        success() {\n            $stream_row.remove();\n        },\n    });\n}\n\nexport function get_stream_email_address(flags, address) {\n    const clean_address = address\n        .replace(\".show-sender\", \"\")\n        .replace(\".include-footer\", \"\")\n        .replace(\".include-quotes\", \"\")\n        .replace(\".prefer-html\", \"\");\n\n    const flag_string = flags.map((flag) => \".\" + flag).join(\"\");\n\n    return clean_address.replace(\"@\", flag_string + \"@\");\n}\n\nexport function initialize() {\n    $(\"#main_div\").on(\"click\", \".stream_sub_unsub_button\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const sub = narrow_state.stream_sub();\n        if (sub === undefined) {\n            return;\n        }\n\n        stream_settings_ui.sub_or_unsub(sub);\n    });\n\n    $(\"#manage_streams_container\").on(\"click\", \"#open_stream_info_modal\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const stream_id = get_stream_id(e.target);\n        const stream = sub_store.get(stream_id);\n        const template_data = {\n            stream_name: stream.name,\n            stream_description: stream.description,\n            max_stream_name_length: page_params.max_stream_name_length,\n            max_stream_description_length: page_params.max_stream_description_length,\n        };\n        const change_stream_info_modal = render_change_stream_info_modal(template_data);\n        dialog_widget.launch({\n            html_heading: $t_html(\n                {defaultMessage: \"Edit #{stream_name}\"},\n                {stream_name: stream.name},\n            ),\n            html_body: change_stream_info_modal,\n            id: \"change_stream_info_modal\",\n            on_click: save_stream_info,\n            post_render() {\n                $(\"#change_stream_info_modal .dialog_submit_button\")\n                    .addClass(\"save-button\")\n                    .attr(\"data-stream-id\", stream_id);\n            },\n        });\n    });\n\n    $(\"#manage_streams_container\").on(\"keypress\", \"#change_stream_description\", (e) => {\n        // Stream descriptions can not be multiline, so disable enter key\n        // to prevent new line\n        if (keydown_util.is_enter_event(e)) {\n            return false;\n        }\n        return true;\n    });\n\n    function save_stream_info(e) {\n        e.preventDefault();\n        e.stopPropagation();\n        const sub = get_sub_for_target(e.currentTarget);\n\n        const url = `/json/streams/${sub.stream_id}`;\n        const data = {};\n        const new_name = $(\"#change_stream_name\").val().trim();\n        const new_description = $(\"#change_stream_description\").val().trim();\n\n        if (new_name === sub.name && new_description === sub.description) {\n            return;\n        }\n        if (new_name !== sub.name) {\n            data.new_name = new_name;\n        }\n        if (new_description !== sub.description) {\n            data.description = new_description;\n        }\n\n        const $status_element = $(\".stream_change_property_info\");\n        dialog_widget.close_modal();\n        settings_ui.do_settings_change(channel.patch, url, data, $status_element);\n    }\n\n    $(\"#manage_streams_container\").on(\"click\", \".copy_email_button\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const stream_id = get_stream_id(e.target);\n        const stream = sub_store.get(stream_id);\n        let address = stream.email_address;\n\n        const copy_email_address = render_copy_email_address_modal({\n            email_address: address,\n            tags: [\n                {\n                    name: \"show-sender\",\n                    description: $t({\n                        defaultMessage: \"The sender's email address\",\n                    }),\n                },\n                {\n                    name: \"include-footer\",\n                    description: $t({defaultMessage: \"Email footers (e.g., signature)\"}),\n                },\n                {\n                    name: \"include-quotes\",\n                    description: $t({defaultMessage: \"Quoted original email (in replies)\"}),\n                },\n                {\n                    name: \"prefer-html\",\n                    description: $t({\n                        defaultMessage: \"Use html encoding (not recommended)\",\n                    }),\n                },\n            ],\n        });\n\n        dialog_widget.launch({\n            html_heading: $t_html({defaultMessage: \"Generate stream email address\"}),\n            html_body: copy_email_address,\n            id: \"copy_email_address_modal\",\n            html_submit_button: $t_html({defaultMessage: \"Copy address\"}),\n            help_link: \"/help/message-a-stream-by-email#configuration-options\",\n            on_click() {},\n            close_on_submit: true,\n        });\n        $(\"#show-sender\").prop(\"checked\", true);\n\n        new ClipboardJS(\"#copy_email_address_modal .dialog_submit_button\", {\n            text() {\n                return address;\n            },\n        });\n\n        $(\"#copy_email_address_modal .tag-checkbox\").on(\"change\", () => {\n            const $checked_checkboxes = $(\".copy-email-modal\").find(\"input:checked\");\n\n            const flags = [];\n\n            $($checked_checkboxes).each(function () {\n                flags.push($(this).attr(\"id\"));\n            });\n\n            address = get_stream_email_address(flags, address);\n\n            $(\".email-address\").text(address);\n        });\n    });\n\n    $(\"#manage_streams_container\").on(\n        \"change\",\n        \"#sub_is_muted_setting .sub_setting_control\",\n        stream_is_muted_changed,\n    );\n\n    $(\"#manage_streams_container\").on(\n        \"change\",\n        \".sub_setting_checkbox .sub_setting_control\",\n        stream_setting_changed,\n    );\n\n    // This handler isn't part of the normal edit interface; it's the convenient\n    // checkmark in the subscriber list.\n    $(\"#manage_streams_container\").on(\"click\", \".sub_unsub_button\", (e) => {\n        const sub = get_sub_for_target(e.target);\n        // Makes sure we take the correct stream_row.\n        const $stream_row = $(\n            `#manage_streams_container div.stream-row[data-stream-id='${CSS.escape(\n                sub.stream_id,\n            )}']`,\n        );\n        stream_settings_ui.sub_or_unsub(sub, $stream_row);\n\n        if (!sub.subscribed) {\n            open_edit_panel_for_row($stream_row);\n        }\n        stream_ui_updates.update_regular_sub_settings(sub);\n\n        e.preventDefault();\n        e.stopPropagation();\n    });\n\n    $(\"#manage_streams_container\").on(\"click\", \".deactivate\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const stream_id = get_stream_id(e.target);\n        if (!stream_id) {\n            ui_report.client_error(\n                $t_html({defaultMessage: \"Invalid stream ID\"}),\n                $(\".stream_change_property_info\"),\n            );\n            return;\n        }\n\n        function do_archive_stream() {\n            const stream_id = $(\".dialog_submit_button\").data(\"stream-id\");\n            if (!stream_id) {\n                ui_report.client_error(\n                    $t_html({defaultMessage: \"Invalid stream ID\"}),\n                    $(\".stream_change_property_info\"),\n                );\n                return;\n            }\n            const $row = $(\".stream-row.active\");\n            archive_stream(stream_id, $(\".stream_change_property_info\"), $row);\n        }\n\n        const stream = sub_store.get(stream_id);\n        const stream_privacy_symbol_html = render_stream_privacy({\n            invite_only: stream.invite_only,\n            is_web_public: stream.is_web_public,\n        });\n        const stream_name = stream_data.maybe_get_stream_name(stream_id);\n        const html_body = render_settings_deactivation_stream_modal({\n            stream_name,\n            stream_privacy_symbol_html,\n        });\n\n        confirm_dialog.launch({\n            html_heading: $t_html(\n                {defaultMessage: \"Archive <z-link></z-link>{stream}?\"},\n                {stream: stream_name, \"z-link\": () => stream_privacy_symbol_html},\n            ),\n            id: \"archive-stream-modal\",\n            help_link: \"/help/archive-a-stream\",\n            html_body,\n            on_click: do_archive_stream,\n        });\n\n        $(\".dialog_submit_button\").attr(\"data-stream-id\", stream_id);\n    });\n\n    $(\"#manage_streams_container\").on(\"click\", \".stream-row\", function (e) {\n        if ($(e.target).closest(\".check, .subscription_settings\").length === 0) {\n            open_edit_panel_for_row(this);\n        }\n    });\n\n    $(\"#manage_streams_container\").on(\"change\", \".stream_message_retention_setting\", (e) => {\n        const message_retention_setting_dropdown_value = e.target.value;\n        settings_org.change_element_block_display_property(\n            \"stream_message_retention_custom_input\",\n            message_retention_setting_dropdown_value === \"custom_period\",\n        );\n    });\n\n    $(\"#manage_streams_container\").on(\"change input\", \"input, select, textarea\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        const stream_id = get_stream_id(e.target);\n        const sub = sub_store.get(stream_id);\n        const $subsection = $(e.target).closest(\".settings-subsection-parent\");\n        settings_org.save_discard_widget_status_handler($subsection, false, sub);\n    });\n\n    $(\"#manage_streams_container\").on(\n        \"click\",\n        \".subsection-header .subsection-changes-save button\",\n        (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n            const $save_button = $(e.currentTarget);\n            const $subsection_elem = $save_button.closest(\".settings-subsection-parent\");\n\n            const stream_id = $save_button.closest(\".subscription_settings.show\").data(\"stream-id\");\n            const sub = sub_store.get(stream_id);\n            const data = settings_org.populate_data_for_request($subsection_elem, false, sub);\n\n            const url = \"/json/streams/\" + stream_id;\n            settings_org.save_organization_settings(data, $save_button, url);\n        },\n    );\n\n    $(\"#manage_streams_container\").on(\n        \"click\",\n        \".subsection-header .subsection-changes-discard button\",\n        (e) => {\n            e.preventDefault();\n            e.stopPropagation();\n\n            const stream_id = $(e.target).closest(\".subscription_settings.show\").data(\"stream-id\");\n            const sub = sub_store.get(stream_id);\n\n            const $subsection = $(e.target).closest(\".settings-subsection-parent\");\n            for (const elem of settings_org.get_subsection_property_elements($subsection)) {\n                settings_org.discard_property_element_changes(elem, false, sub);\n            }\n            const $save_btn_controls = $(e.target).closest(\".save-button-controls\");\n            settings_org.change_save_button_state($save_btn_controls, \"discarded\");\n        },\n    );\n}\n","import $ from \"jquery\";\n\nimport render_unsubscribe_private_stream_modal from \"../templates/confirm_dialog/confirm_unsubscribe_private_stream.hbs\";\nimport render_stream_member_list_entry from \"../templates/stream_settings/stream_member_list_entry.hbs\";\nimport render_stream_subscription_request_result from \"../templates/stream_settings/stream_subscription_request_result.hbs\";\n\nimport * as add_subscribers_pill from \"./add_subscribers_pill\";\nimport * as blueslip from \"./blueslip\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport * as hash_util from \"./hash_util\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as ListWidget from \"./list_widget\";\nimport {page_params} from \"./page_params\";\nimport * as peer_data from \"./peer_data\";\nimport * as people from \"./people\";\nimport * as settings_data from \"./settings_data\";\nimport * as stream_data from \"./stream_data\";\nimport * as sub_store from \"./sub_store\";\nimport * as subscriber_api from \"./subscriber_api\";\nimport * as ui from \"./ui\";\n\nexport let pill_widget;\nlet current_stream_id;\nlet subscribers_list_widget;\n\nfunction format_member_list_elem(person) {\n    return render_stream_member_list_entry({\n        name: person.full_name,\n        user_id: person.user_id,\n        is_current_user: person.user_id === page_params.user_id,\n        email: settings_data.email_for_user_settings(person),\n        can_edit_subscribers: page_params.is_admin,\n        show_email: settings_data.show_email(),\n    });\n}\n\nfunction get_sub(stream_id) {\n    const sub = sub_store.get(stream_id);\n    if (!sub) {\n        blueslip.error(\"get_sub() failed id lookup: \" + stream_id);\n        return undefined;\n    }\n    return sub;\n}\n\nfunction show_stream_subscription_request_result({\n    message,\n    add_class,\n    remove_class,\n    subscribed_users,\n    already_subscribed_users,\n    ignored_deactivated_users,\n}) {\n    const $stream_subscription_req_result_elem = $(\n        \".stream_subscription_request_result\",\n    ).expectOne();\n    const html = render_stream_subscription_request_result({\n        message,\n        subscribed_users,\n        already_subscribed_users,\n        ignored_deactivated_users,\n    });\n    ui.get_content_element($stream_subscription_req_result_elem).html(html);\n    if (add_class) {\n        $stream_subscription_req_result_elem.addClass(add_class);\n    }\n    if (remove_class) {\n        $stream_subscription_req_result_elem.removeClass(remove_class);\n    }\n}\n\nexport function enable_subscriber_management({sub, $parent_container}) {\n    const stream_id = sub.stream_id;\n\n    const $pill_container = $parent_container.find(\".pill-container\");\n\n    // current_stream_id and pill_widget are module-level variables\n    current_stream_id = stream_id;\n\n    function get_potential_subscribers() {\n        return peer_data.potential_subscribers(stream_id);\n    }\n\n    pill_widget = add_subscribers_pill.create({\n        $pill_container,\n        get_potential_subscribers,\n    });\n\n    const user_ids = peer_data.get_subscribers(stream_id);\n\n    // We track a single subscribers_list_widget for this module, since we\n    // only ever have one list of subscribers visible at a time.\n    subscribers_list_widget = make_list_widget({\n        $parent_container,\n        name: \"stream_subscribers\",\n        user_ids,\n    });\n}\n\nfunction make_list_widget({$parent_container, name, user_ids}) {\n    const users = people.get_users_from_ids(user_ids);\n    people.sort_but_pin_current_user_on_top(users);\n\n    const $list_container = $parent_container.find(\".subscriber_table\");\n    $list_container.empty();\n\n    const $simplebar_container = $parent_container.find(\".subscriber_list_container\");\n\n    return ListWidget.create($list_container, users, {\n        name,\n        modifier(item) {\n            return format_member_list_elem(item);\n        },\n        filter: {\n            $element: $parent_container.find(\".search\"),\n            predicate(person, value) {\n                const matcher = people.build_person_matcher(value);\n                const match = matcher(person);\n\n                return match;\n            },\n        },\n        $simplebar_container,\n    });\n}\n\nfunction subscribe_new_users({pill_user_ids}) {\n    const sub = get_sub(current_stream_id);\n    if (!sub) {\n        return;\n    }\n\n    const deactivated_users = new Set();\n    const active_user_ids = pill_user_ids.filter((user_id) => {\n        if (!people.is_person_active(user_id)) {\n            deactivated_users.add(user_id);\n            return false;\n        }\n        return true;\n    });\n\n    const user_id_set = new Set(active_user_ids);\n\n    if (user_id_set.has(page_params.user_id) && sub.subscribed) {\n        // We don't want to send a request to subscribe ourselves\n        // if we are already subscribed to this stream. This\n        // case occurs when creating user pills from a stream.\n        user_id_set.delete(page_params.user_id);\n    }\n    let ignored_deactivated_users;\n    if (deactivated_users.size > 0) {\n        ignored_deactivated_users = Array.from(deactivated_users);\n        ignored_deactivated_users = ignored_deactivated_users.map((user_id) =>\n            people.get_by_user_id(user_id),\n        );\n    }\n    if (user_id_set.size === 0) {\n        show_stream_subscription_request_result({\n            message: $t({defaultMessage: \"No user to subscribe.\"}),\n            add_class: \"text-error\",\n            remove_class: \"text-success\",\n            ignored_deactivated_users,\n        });\n        return;\n    }\n\n    const user_ids = Array.from(user_id_set);\n\n    function invite_success(data) {\n        pill_widget.clear();\n        const subscribed_users = Object.keys(data.subscribed).map((email) =>\n            people.get_by_email(email),\n        );\n        const already_subscribed_users = Object.keys(data.already_subscribed).map((email) =>\n            people.get_by_email(email),\n        );\n\n        show_stream_subscription_request_result({\n            add_class: \"text-success\",\n            remove_class: \"text-error\",\n            subscribed_users,\n            already_subscribed_users,\n            ignored_deactivated_users,\n        });\n    }\n\n    function invite_failure(xhr) {\n        const error = JSON.parse(xhr.responseText);\n        show_stream_subscription_request_result({\n            message: error.msg,\n            add_class: \"text-error\",\n            remove_class: \"text-success\",\n        });\n    }\n\n    subscriber_api.add_user_ids_to_stream(user_ids, sub, invite_success, invite_failure);\n}\n\nfunction remove_subscriber({stream_id, target_user_id, $list_entry}) {\n    const sub = get_sub(stream_id);\n    if (!sub) {\n        return;\n    }\n\n    function removal_success(data) {\n        let message;\n\n        if (stream_id !== current_stream_id) {\n            blueslip.info(\"Response for subscription removal came too late.\");\n            return;\n        }\n\n        if (data.removed.length > 0) {\n            // Remove the user from the subscriber list.\n            $list_entry.remove();\n            message = $t({defaultMessage: \"Unsubscribed successfully!\"});\n            // The rest of the work is done via the subscription -> remove event we will get\n        } else {\n            message = $t({defaultMessage: \"User is already not subscribed.\"});\n        }\n        show_stream_subscription_request_result({\n            message,\n            add_class: \"text-success\",\n            remove_class: \"text-remove\",\n        });\n    }\n\n    function removal_failure() {\n        show_stream_subscription_request_result({\n            message: $t({defaultMessage: \"Error removing user from this stream.\"}),\n            add_class: \"text-error\",\n            remove_class: \"text-success\",\n        });\n    }\n\n    function remove_user_from_private_stream() {\n        subscriber_api.remove_user_id_from_stream(\n            target_user_id,\n            sub,\n            removal_success,\n            removal_failure,\n        );\n    }\n\n    if (sub.invite_only && people.is_my_user_id(target_user_id)) {\n        const html_body = render_unsubscribe_private_stream_modal({\n            message: $t({\n                defaultMessage: \"Once you leave this stream, you will not be able to rejoin.\",\n            }),\n        });\n\n        confirm_dialog.launch({\n            html_heading: $t_html(\n                {defaultMessage: \"Unsubscribe from {stream_name}\"},\n                {stream_name: sub.name},\n            ),\n            html_body,\n            on_click: remove_user_from_private_stream,\n        });\n        return;\n    }\n\n    subscriber_api.remove_user_id_from_stream(\n        target_user_id,\n        sub,\n        removal_success,\n        removal_failure,\n    );\n}\n\nexport function update_subscribers_list(sub) {\n    // This is for the \"Subscribers\" tab of the right panel.\n    // Render subscriptions only if stream settings is open\n    if (!hash_util.is_editing_stream(sub.stream_id)) {\n        blueslip.info(\"ignoring subscription for stream that is no longer being edited\");\n        return;\n    }\n\n    if (sub.stream_id !== current_stream_id) {\n        // This should never happen if the prior check works correctly.\n        blueslip.error(\"current_stream_id does not match sub.stream_id for some reason\");\n        return;\n    }\n\n    if (!stream_data.can_view_subscribers(sub)) {\n        $(\".subscriber_list_settings_container\").hide();\n    } else {\n        // Re-render the whole list when we add new users.  This is\n        // inefficient for the single-user case, but using the big-hammer\n        // approach is superior when you do things like add subscribers\n        // from an existing stream or a user group.\n        const subscriber_ids = peer_data.get_subscribers(sub.stream_id);\n        update_subscribers_list_widget(subscriber_ids);\n        $(\".subscriber_list_settings_container\").show();\n    }\n}\n\nfunction update_subscribers_list_widget(subscriber_ids) {\n    // This re-renders the subscribers_list_widget with a new\n    // list of subscriber_ids.\n    const users = people.get_users_from_ids(subscriber_ids);\n    people.sort_but_pin_current_user_on_top(users);\n    subscribers_list_widget.replace_list_data(users);\n}\n\nexport function initialize() {\n    add_subscribers_pill.set_up_handlers({\n        get_pill_widget: () => pill_widget,\n        $parent_container: $(\"#manage_streams_container\"),\n        pill_selector: \".edit_subscribers_for_stream .pill-container\",\n        button_selector: \".edit_subscribers_for_stream .add-subscriber-button\",\n        action: subscribe_new_users,\n    });\n\n    $(\"#manage_streams_container\").on(\n        \"submit\",\n        \".edit_subscribers_for_stream .subscriber_list_remove form\",\n        (e) => {\n            e.preventDefault();\n\n            const $list_entry = $(e.target).closest(\"tr\");\n            const target_user_id = Number.parseInt($list_entry.attr(\"data-subscriber-id\"), 10);\n            const stream_id = current_stream_id;\n\n            remove_subscriber({stream_id, target_user_id, $list_entry});\n        },\n    );\n}\n","import $ from \"jquery\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as color_data from \"./color_data\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_view_header from \"./message_view_header\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as overlays from \"./overlays\";\nimport * as peer_data from \"./peer_data\";\nimport * as recent_topics_ui from \"./recent_topics_ui\";\nimport * as settings_notifications from \"./settings_notifications\";\nimport * as stream_color from \"./stream_color\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_list from \"./stream_list\";\nimport * as stream_muting from \"./stream_muting\";\nimport * as stream_settings_ui from \"./stream_settings_ui\";\nimport * as sub_store from \"./sub_store\";\nimport * as unread_ui from \"./unread_ui\";\n\n// In theory, this function should apply the account-level defaults,\n// however, they are only called after a manual override, so\n// doing so is unnecessary with the current code.  Ideally, we'd do a\n// refactor to address that, however.\nfunction update_stream_setting(sub, value, setting) {\n    const $setting_checkbox = $(`#${CSS.escape(setting)}_${CSS.escape(sub.stream_id)}`);\n    $setting_checkbox.prop(\"checked\", value);\n    sub[setting] = value;\n}\n\nexport function update_property(stream_id, property, value, other_values) {\n    const sub = sub_store.get(stream_id);\n    if (sub === undefined) {\n        // This isn't a stream we know about, so ignore it.\n        blueslip.warn(\"Update for an unknown subscription\", {\n            stream_id,\n            property,\n            value,\n        });\n        return;\n    }\n\n    switch (property) {\n        case \"color\":\n            stream_color.update_stream_color(sub, value, {update_historical: true});\n            break;\n        case \"in_home_view\":\n            // Legacy in_home_view events are only sent as duplicates of\n            // modern is_muted events, which we handle below.\n            break;\n        case \"is_muted\":\n            stream_muting.update_is_muted(sub, value);\n            stream_list.refresh_muted_or_unmuted_stream(sub);\n            recent_topics_ui.complete_rerender();\n            break;\n        case \"desktop_notifications\":\n        case \"audible_notifications\":\n        case \"push_notifications\":\n        case \"email_notifications\":\n        case \"wildcard_mentions_notify\":\n            update_stream_setting(sub, value, property);\n            settings_notifications.update_page(settings_notifications.user_settings_panel);\n            break;\n        case \"name\":\n            stream_settings_ui.update_stream_name(sub, value);\n            break;\n        case \"description\":\n            stream_settings_ui.update_stream_description(\n                sub,\n                value,\n                other_values.rendered_description,\n            );\n            break;\n        case \"email_address\":\n            sub.email_address = value;\n            break;\n        case \"pin_to_top\":\n            update_stream_setting(sub, value, property);\n            stream_list.refresh_pinned_or_unpinned_stream(sub);\n            break;\n        case \"invite_only\":\n            stream_settings_ui.update_stream_privacy(sub, {\n                invite_only: value,\n                history_public_to_subscribers: other_values.history_public_to_subscribers,\n                is_web_public: other_values.is_web_public,\n            });\n            break;\n        case \"stream_post_policy\":\n            stream_settings_ui.update_stream_post_policy(sub, value);\n            break;\n        case \"message_retention_days\":\n            stream_settings_ui.update_message_retention_setting(sub, value);\n            break;\n        default:\n            blueslip.warn(\"Unexpected subscription property type\", {\n                property,\n                value,\n            });\n    }\n}\n\n// Add yourself to a stream we already know about client-side.\n// It's likely we should be passing in the full sub object from the caller/backend,\n// but for now we just pass in the subscribers and color (things likely to be different).\nexport function mark_subscribed(sub, subscribers, color) {\n    if (sub === undefined) {\n        blueslip.error(\"Undefined sub passed to mark_subscribed\");\n        return;\n    }\n\n    if (sub.subscribed) {\n        return;\n    }\n\n    // If the backend sent us a color, use that\n    if (color !== undefined && sub.color !== color) {\n        sub.color = color;\n        stream_color.update_stream_color(sub, color, {update_historical: true});\n    } else if (sub.color === undefined) {\n        // If the backend didn't, and we have a color already, send\n        // the backend that color.  It's not clear this code path is\n        // needed.\n        blueslip.warn(\"Frontend needed to pick a color in mark_subscribed\");\n        color = color_data.pick_color();\n        stream_settings_ui.set_color(sub.stream_id, color);\n    }\n    stream_data.subscribe_myself(sub);\n    if (subscribers) {\n        peer_data.set_subscribers(sub.stream_id, subscribers);\n    }\n\n    if (overlays.streams_open()) {\n        stream_settings_ui.update_settings_for_subscribed(sub);\n    }\n\n    // update navbar if necessary\n    message_view_header.maybe_rerender_title_area_for_stream(sub);\n\n    if (narrow_state.is_for_stream_id(sub.stream_id)) {\n        message_lists.current.update_trailing_bookend();\n    }\n\n    // The new stream in sidebar might need its unread counts\n    // re-calculated.\n    unread_ui.update_unread_counts();\n\n    stream_list.add_sidebar_row(sub);\n    stream_list.update_subscribe_to_more_streams_link();\n}\n\nexport function mark_unsubscribed(sub) {\n    if (sub === undefined) {\n        // We don't know about this stream\n        return;\n    } else if (sub.subscribed) {\n        stream_data.unsubscribe_myself(sub);\n        if (overlays.streams_open()) {\n            stream_settings_ui.update_settings_for_unsubscribed(sub);\n        }\n        // update navbar if necessary\n        message_view_header.maybe_rerender_title_area_for_stream(sub);\n    } else {\n        // Already unsubscribed\n        return;\n    }\n\n    if (narrow_state.is_for_stream_id(sub.stream_id)) {\n        message_lists.current.update_trailing_bookend();\n    }\n\n    // Unread messages in the now-unsubscribe stream need to be\n    // removed from global count totals.\n    unread_ui.update_unread_counts();\n\n    stream_list.remove_sidebar_row(sub.stream_id);\n    stream_list.update_subscribe_to_more_streams_link();\n}\n\nexport function remove_deactivated_user_from_all_streams(user_id) {\n    const all_subs = stream_data.get_unsorted_subs();\n\n    for (const sub of all_subs) {\n        if (stream_data.is_user_subscribed(sub.stream_id, user_id)) {\n            peer_data.remove_subscriber(sub.stream_id, user_id);\n            stream_settings_ui.update_subscribers_ui(sub);\n        }\n    }\n}\n","import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport render_filter_topics from \"../templates/filter_topics.hbs\";\nimport render_stream_privacy from \"../templates/stream_privacy.hbs\";\nimport render_stream_sidebar_row from \"../templates/stream_sidebar_row.hbs\";\nimport render_stream_subheader from \"../templates/streams_subheader.hbs\";\nimport render_subscribe_to_more_streams from \"../templates/subscribe_to_more_streams.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as color_class from \"./color_class\";\nimport * as hash_util from \"./hash_util\";\nimport {$t} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport {ListCursor} from \"./list_cursor\";\nimport * as narrow from \"./narrow\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as pm_list from \"./pm_list\";\nimport * as popovers from \"./popovers\";\nimport * as resize from \"./resize\";\nimport * as scroll_util from \"./scroll_util\";\nimport * as settings_data from \"./settings_data\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_popover from \"./stream_popover\";\nimport * as stream_sort from \"./stream_sort\";\nimport * as sub_store from \"./sub_store\";\nimport * as topic_list from \"./topic_list\";\nimport * as topic_zoom from \"./topic_zoom\";\nimport * as ui from \"./ui\";\nimport * as ui_util from \"./ui_util\";\nimport * as unread from \"./unread\";\n\nexport let stream_cursor;\n\nlet has_scrolled = false;\n\nexport function update_count_in_dom($stream_li, count, stream_has_any_unread_mention_messages) {\n    // The subscription_block properly excludes the topic list,\n    // and it also has sensitive margins related to whether the\n    // count is there or not.\n    const $subscription_block = $stream_li.find(\".subscription_block\");\n\n    ui_util.update_unread_count_in_dom($subscription_block, count);\n    ui_util.update_unread_mention_info_in_dom(\n        $subscription_block,\n        stream_has_any_unread_mention_messages,\n    );\n\n    if (count === 0) {\n        $subscription_block.removeClass(\"stream-with-count\");\n    } else {\n        $subscription_block.addClass(\"stream-with-count\");\n    }\n}\n\nclass StreamSidebar {\n    rows = new Map(); // stream id -> row widget\n\n    set_row(stream_id, widget) {\n        this.rows.set(stream_id, widget);\n    }\n\n    get_row(stream_id) {\n        return this.rows.get(stream_id);\n    }\n\n    has_row_for(stream_id) {\n        return this.rows.has(stream_id);\n    }\n\n    remove_row(stream_id) {\n        // This only removes the row from our data structure.\n        // Our caller should use build_stream_list() to re-draw\n        // the sidebar, so that we don't have to deal with edge\n        // cases like removing the last pinned stream (and removing\n        // the divider).\n\n        this.rows.delete(stream_id);\n    }\n}\nexport const stream_sidebar = new StreamSidebar();\n\nfunction get_search_term() {\n    const $search_box = $(\".stream-list-filter\");\n    const search_term = $search_box.expectOne().val().trim();\n    return search_term;\n}\n\nexport function add_sidebar_row(sub) {\n    create_sidebar_row(sub);\n    build_stream_list();\n    stream_cursor.redraw();\n}\n\nexport function remove_sidebar_row(stream_id) {\n    stream_sidebar.remove_row(stream_id);\n    build_stream_list();\n    stream_cursor.redraw();\n}\n\nexport function create_initial_sidebar_rows() {\n    // This code is slightly opaque, but it ends up building\n    // up list items and attaching them to the \"sub\" data\n    // structures that are kept in stream_data.js.\n    const subs = stream_data.subscribed_subs();\n\n    for (const sub of subs) {\n        create_sidebar_row(sub);\n    }\n}\n\nexport function build_stream_list(force_rerender) {\n    // The stream list in the left sidebar contains 3 sections:\n    // pinned, normal, and dormant streams, with headings above them\n    // as appropriate.\n    //\n    // Within the first two sections, muted streams are sorted to the\n    // bottom; we skip that for dormant streams to simplify discovery.\n    const streams = stream_data.subscribed_stream_ids();\n    const $parent = $(\"#stream_filters\");\n    if (streams.length === 0) {\n        $parent.empty();\n        return;\n    }\n\n    // The main logic to build the list is in stream_sort.js, and\n    // we get five lists of streams (pinned/normal/muted_pinned/muted_normal/dormant).\n    const stream_groups = stream_sort.sort_groups(streams, get_search_term());\n\n    if (stream_groups.same_as_before && !force_rerender) {\n        return;\n    }\n\n    const elems = [];\n\n    function add_sidebar_li(stream_id) {\n        const sidebar_row = stream_sidebar.get_row(stream_id);\n        sidebar_row.update_whether_active();\n        elems.push(sidebar_row.get_li());\n    }\n\n    topic_list.clear();\n    $parent.empty();\n\n    const any_pinned_streams =\n        stream_groups.pinned_streams.length > 0 || stream_groups.muted_pinned_streams.length > 0;\n    const any_normal_streams =\n        stream_groups.normal_streams.length > 0 || stream_groups.muted_active_streams.length > 0;\n    const any_dormant_streams = stream_groups.dormant_streams.length > 0;\n\n    const need_section_subheaders =\n        (any_pinned_streams ? 1 : 0) +\n            (any_normal_streams ? 1 : 0) +\n            (any_dormant_streams ? 1 : 0) >=\n        2;\n\n    if (any_pinned_streams && need_section_subheaders) {\n        elems.push(\n            render_stream_subheader({\n                subheader_name: $t({\n                    defaultMessage: \"Pinned\",\n                }),\n            }),\n        );\n    }\n\n    for (const stream_id of stream_groups.pinned_streams) {\n        add_sidebar_li(stream_id);\n    }\n\n    for (const stream_id of stream_groups.muted_pinned_streams) {\n        add_sidebar_li(stream_id);\n    }\n\n    if (any_normal_streams && need_section_subheaders) {\n        elems.push(\n            render_stream_subheader({\n                subheader_name: $t({\n                    defaultMessage: \"Active\",\n                }),\n            }),\n        );\n    }\n\n    for (const stream_id of stream_groups.normal_streams) {\n        add_sidebar_li(stream_id);\n    }\n\n    for (const stream_id of stream_groups.muted_active_streams) {\n        add_sidebar_li(stream_id);\n    }\n\n    if (any_dormant_streams && need_section_subheaders) {\n        elems.push(\n            render_stream_subheader({\n                subheader_name: $t({\n                    defaultMessage: \"Inactive\",\n                }),\n            }),\n        );\n    }\n\n    for (const stream_id of stream_groups.dormant_streams) {\n        add_sidebar_li(stream_id);\n    }\n\n    $parent.append(elems);\n}\n\nexport function get_stream_li(stream_id) {\n    const row = stream_sidebar.get_row(stream_id);\n    if (!row) {\n        // Not all streams are in the sidebar, so we don't report\n        // an error here, and it's up for the caller to error if\n        // they expected otherwise.\n        return undefined;\n    }\n\n    const $li = row.get_li();\n    if (!$li) {\n        blueslip.error(\"Cannot find li for id \" + stream_id);\n        return undefined;\n    }\n\n    if ($li.length > 1) {\n        blueslip.error(\"stream_li has too many elements for \" + stream_id);\n        return undefined;\n    }\n\n    return $li;\n}\n\nexport function update_subscribe_to_more_streams_link() {\n    const can_subscribe_stream_count = stream_data\n        .unsubscribed_subs()\n        .filter((sub) => stream_data.can_toggle_subscription(sub)).length;\n\n    const can_create_streams =\n        settings_data.user_can_create_private_streams() ||\n        settings_data.user_can_create_public_streams() ||\n        settings_data.user_can_create_web_public_streams();\n\n    $(\"#subscribe-to-more-streams\").html(\n        render_subscribe_to_more_streams({\n            can_subscribe_stream_count,\n            can_create_streams,\n            exactly_one_unsubscribed_stream: can_subscribe_stream_count === 1,\n        }),\n    );\n}\n\nfunction stream_id_for_elt($elt) {\n    return Number.parseInt($elt.attr(\"data-stream-id\"), 10);\n}\n\nexport function zoom_in_topics(options) {\n    // This only does stream-related tasks related to zooming\n    // in to more topics, which is basically hiding all the\n    // other streams.\n\n    $(\"#streams_list\").expectOne().removeClass(\"zoom-out\").addClass(\"zoom-in\");\n\n    // Hide stream list titles and pinned stream splitter\n    $(\".stream-filters-label\").each(function () {\n        $(this).hide();\n    });\n    $(\".streams_subheader\").each(function () {\n        $(this).hide();\n    });\n\n    $(\"#stream_filters li.narrow-filter\").each(function () {\n        const $elt = $(this);\n        const stream_id = options.stream_id;\n\n        if (stream_id_for_elt($elt) === stream_id) {\n            $elt.show();\n            // Add search box for topics list.\n            $elt.children(\"div.bottom_left_row\").append(render_filter_topics());\n            $(\"#filter-topic-input\").trigger(\"focus\");\n            $(\"#clear_search_topic_button\").hide();\n        } else {\n            $elt.hide();\n        }\n    });\n}\n\nexport function zoom_out_topics() {\n    // Show stream list titles and pinned stream splitter\n    $(\".stream-filters-label\").each(function () {\n        $(this).show();\n    });\n    $(\".streams_subheader\").each(function () {\n        $(this).show();\n    });\n\n    $(\"#streams_list\").expectOne().removeClass(\"zoom-in\").addClass(\"zoom-out\");\n    $(\"#stream_filters li.narrow-filter\").show();\n    // Remove search box for topics list from DOM.\n    $(\".filter-topics\").remove();\n}\n\nexport function set_in_home_view(stream_id, in_home) {\n    const $li = get_stream_li(stream_id);\n    if (!$li) {\n        blueslip.error(\"passed in bad stream id \" + stream_id);\n        return;\n    }\n\n    if (in_home) {\n        $li.removeClass(\"out_of_home_view\");\n    } else {\n        $li.addClass(\"out_of_home_view\");\n    }\n}\n\nfunction build_stream_sidebar_li(sub) {\n    const name = sub.name;\n    const args = {\n        name,\n        id: sub.stream_id,\n        uri: hash_util.by_stream_url(sub.stream_id),\n        is_muted: stream_data.is_muted(sub.stream_id) === true,\n        invite_only: sub.invite_only,\n        is_web_public: sub.is_web_public,\n        color: sub.color,\n        pin_to_top: sub.pin_to_top,\n    };\n    args.dark_background = color_class.get_css_class(args.color);\n    const $list_item = $(render_stream_sidebar_row(args));\n    return $list_item;\n}\n\nclass StreamSidebarRow {\n    constructor(sub) {\n        this.sub = sub;\n        this.$list_item = build_stream_sidebar_li(sub);\n        this.update_unread_count();\n    }\n\n    update_whether_active() {\n        if (stream_data.is_active(this.sub) || this.sub.pin_to_top === true) {\n            this.$list_item.removeClass(\"inactive_stream\");\n        } else {\n            this.$list_item.addClass(\"inactive_stream\");\n        }\n    }\n\n    get_li() {\n        return this.$list_item;\n    }\n\n    remove() {\n        this.$list_item.remove();\n    }\n\n    update_unread_count() {\n        const count = unread.num_unread_for_stream(this.sub.stream_id);\n        const stream_has_any_unread_mention_messages = unread.stream_has_any_unread_mentions(\n            this.sub.stream_id,\n        );\n        update_count_in_dom(this.$list_item, count, stream_has_any_unread_mention_messages);\n    }\n}\n\nfunction build_stream_sidebar_row(sub) {\n    stream_sidebar.set_row(sub.stream_id, new StreamSidebarRow(sub));\n}\n\nexport function create_sidebar_row(sub) {\n    if (stream_sidebar.has_row_for(sub.stream_id)) {\n        // already exists\n        blueslip.warn(\"Dup try to build sidebar row for stream \" + sub.stream_id);\n        return;\n    }\n    build_stream_sidebar_row(sub);\n}\n\nexport function redraw_stream_privacy(sub) {\n    const $li = get_stream_li(sub.stream_id);\n    if (!$li) {\n        // We don't want to raise error here, if we can't find stream in subscription\n        // stream list. Cause we allow org admin to update stream privacy\n        // even if they don't subscribe to public stream.\n        return;\n    }\n\n    const $div = $li.find(\".stream-privacy\");\n    const dark_background = color_class.get_css_class(sub.color);\n\n    const args = {\n        invite_only: sub.invite_only,\n        is_web_public: sub.is_web_public,\n        dark_background,\n    };\n\n    const html = render_stream_privacy(args);\n    $div.html(html);\n}\n\nfunction set_stream_unread_count(stream_id, count, stream_has_any_unread_mention_messages) {\n    const $stream_li = get_stream_li(stream_id);\n    if (!$stream_li) {\n        // This can happen for legitimate reasons, but we warn\n        // just in case.\n        blueslip.warn(\"stream id no longer in sidebar: \" + stream_id);\n        return;\n    }\n    update_count_in_dom($stream_li, count, stream_has_any_unread_mention_messages);\n}\n\nexport function update_streams_sidebar(force_rerender) {\n    build_stream_list(force_rerender);\n\n    stream_cursor.redraw();\n\n    if (!narrow_state.active()) {\n        return;\n    }\n\n    const filter = narrow_state.filter();\n\n    update_stream_sidebar_for_narrow(filter);\n}\n\nexport function update_dom_with_unread_counts(counts) {\n    // counts.stream_count maps streams to counts\n    for (const [stream_id, count] of counts.stream_count) {\n        const stream_has_any_unread_mention_messages =\n            counts.streams_with_mentions.includes(stream_id);\n        set_stream_unread_count(stream_id, count, stream_has_any_unread_mention_messages);\n    }\n}\n\nexport function rename_stream(sub) {\n    // The sub object is expected to already have the updated name\n    build_stream_sidebar_row(sub);\n    update_streams_sidebar(true); // big hammer\n}\n\nexport function refresh_pinned_or_unpinned_stream(sub) {\n    // Pinned/unpinned streams require re-ordering.\n    // We use kind of brute force now, which is probably fine.\n    build_stream_sidebar_row(sub);\n    update_streams_sidebar();\n\n    // Only scroll pinned topics into view.  If we're unpinning\n    // a topic, we may be literally trying to get it out of\n    // our sight.\n    if (sub.pin_to_top) {\n        const $stream_li = get_stream_li(sub.stream_id);\n        if (!$stream_li) {\n            blueslip.error(\"passed in bad stream id \" + sub.stream_id);\n            return;\n        }\n        scroll_stream_into_view($stream_li);\n    }\n}\n\nexport function refresh_muted_or_unmuted_stream(sub) {\n    build_stream_sidebar_row(sub);\n    update_streams_sidebar();\n}\n\nexport function get_sidebar_stream_topic_info(filter) {\n    const result = {\n        stream_id: undefined,\n        topic_selected: false,\n    };\n\n    const op_stream = filter.operands(\"stream\");\n    if (op_stream.length === 0) {\n        return result;\n    }\n\n    const stream_name = op_stream[0];\n    const stream_id = stream_data.get_stream_id(stream_name);\n\n    if (!stream_id) {\n        return result;\n    }\n\n    if (!stream_data.is_subscribed(stream_id)) {\n        return result;\n    }\n\n    result.stream_id = stream_id;\n\n    const op_topic = filter.operands(\"topic\");\n    result.topic_selected = op_topic.length === 1;\n\n    return result;\n}\n\nfunction deselect_stream_items() {\n    $(\"ul#stream_filters li\").removeClass(\"active-filter\");\n}\n\nexport function update_stream_sidebar_for_narrow(filter) {\n    const info = get_sidebar_stream_topic_info(filter);\n\n    deselect_stream_items();\n\n    const stream_id = info.stream_id;\n\n    if (!stream_id) {\n        topic_zoom.clear_topics();\n        return undefined;\n    }\n\n    const $stream_li = get_stream_li(stream_id);\n\n    if (!$stream_li) {\n        // This is a sanity check.  When we narrow to a subscribed\n        // stream, there will always be a stream list item\n        // corresponding to that stream in our sidebar.  This error\n        // stopped appearing from March 2018 until at least\n        // April 2020, so if it appears again, something regressed.\n        blueslip.error(\"No stream_li for subscribed stream \" + stream_id);\n        topic_zoom.clear_topics();\n        return undefined;\n    }\n\n    if (!info.topic_selected) {\n        $stream_li.addClass(\"active-filter\");\n    }\n\n    if (stream_id !== topic_list.active_stream_id()) {\n        topic_zoom.clear_topics();\n    }\n\n    topic_list.rebuild($stream_li, stream_id);\n\n    return $stream_li;\n}\n\nexport function handle_narrow_activated(filter) {\n    const $stream_li = update_stream_sidebar_for_narrow(filter);\n    if ($stream_li) {\n        scroll_stream_into_view($stream_li);\n    }\n}\n\nexport function handle_narrow_deactivated() {\n    deselect_stream_items();\n    topic_zoom.clear_topics();\n}\n\nfunction focus_stream_filter(e) {\n    stream_cursor.reset();\n    e.stopPropagation();\n}\n\nfunction keydown_enter_key() {\n    const stream_id = stream_cursor.get_key();\n\n    if (stream_id === undefined) {\n        // This can happen for empty searches, no need to warn.\n        return;\n    }\n\n    const sub = sub_store.get(stream_id);\n\n    if (sub === undefined) {\n        blueslip.error(\"Unknown stream_id for search/enter: \" + stream_id);\n        return;\n    }\n\n    clear_and_hide_search();\n    narrow.by(\"stream\", sub.name, {trigger: \"sidebar enter key\"});\n}\n\nfunction actually_update_streams_for_search() {\n    update_streams_sidebar();\n    resize.resize_page_components();\n    stream_cursor.reset();\n}\n\nconst update_streams_for_search = _.throttle(actually_update_streams_for_search, 50);\n\nexport function initialize() {\n    create_initial_sidebar_rows();\n\n    // We build the stream_list now.  It may get re-built again very shortly\n    // when new messages come in, but it's fairly quick.\n    build_stream_list();\n    update_subscribe_to_more_streams_link();\n    set_event_handlers();\n}\n\nexport function set_event_handlers() {\n    $(\"#stream_filters\").on(\"click\", \"li .subscription_block\", (e) => {\n        if (e.metaKey || e.ctrlKey) {\n            return;\n        }\n        const stream_id = stream_id_for_elt($(e.target).parents(\"li\"));\n        const sub = sub_store.get(stream_id);\n        popovers.hide_all();\n        narrow.by(\"stream\", sub.name, {trigger: \"sidebar\"});\n\n        clear_and_hide_search();\n\n        e.preventDefault();\n        e.stopPropagation();\n    });\n\n    $(\"#clear_search_stream_button\").on(\"click\", clear_search);\n\n    $(\"#streams_header\")\n        .expectOne()\n        .on(\"click\", (e) => {\n            e.preventDefault();\n            if (e.target.id === \"streams_inline_icon\") {\n                return;\n            }\n            toggle_filter_displayed(e);\n        });\n\n    function toggle_pm_header_icon() {\n        if (pm_list.is_private_messages_collapsed()) {\n            return;\n        }\n\n        const scroll_position = $(\n            \"#left_sidebar_scroll_container .simplebar-content-wrapper\",\n        ).scrollTop();\n        const pm_list_height = $(\"#private_messages_list\").height();\n        if (scroll_position > pm_list_height) {\n            $(\"#toggle_private_messages_section_icon\").addClass(\"fa-caret-right\");\n            $(\"#toggle_private_messages_section_icon\").removeClass(\"fa-caret-down\");\n        } else {\n            $(\"#toggle_private_messages_section_icon\").addClass(\"fa-caret-down\");\n            $(\"#toggle_private_messages_section_icon\").removeClass(\"fa-caret-right\");\n        }\n    }\n\n    // check for user scrolls on streams list for first time\n    ui.get_scroll_element($(\"#left_sidebar_scroll_container\")).on(\"scroll\", () => {\n        has_scrolled = true;\n        toggle_pm_header_icon();\n    });\n\n    stream_cursor = new ListCursor({\n        list: {\n            scroll_container_sel: \"#left_sidebar_scroll_container\",\n            find_li(opts) {\n                const stream_id = opts.key;\n                const li = get_stream_li(stream_id);\n                return li;\n            },\n            first_key: stream_sort.first_stream_id,\n            prev_key: stream_sort.prev_stream_id,\n            next_key: stream_sort.next_stream_id,\n        },\n        highlight_class: \"highlighted_stream\",\n    });\n\n    const $search_input = $(\".stream-list-filter\").expectOne();\n\n    keydown_util.handle({\n        $elem: $search_input,\n        handlers: {\n            Enter() {\n                keydown_enter_key();\n                return true;\n            },\n            ArrowUp() {\n                stream_cursor.prev();\n                return true;\n            },\n            ArrowDown() {\n                stream_cursor.next();\n                return true;\n            },\n        },\n    });\n\n    $search_input.on(\"click\", focus_stream_filter);\n    $search_input.on(\"focusout\", () => stream_cursor.clear());\n    $search_input.on(\"input\", update_streams_for_search);\n}\n\nexport function searching() {\n    return $(\".stream-list-filter\").expectOne().is(\":focus\");\n}\n\nexport function escape_search() {\n    const $filter = $(\".stream-list-filter\").expectOne();\n    if ($filter.val() === \"\") {\n        clear_and_hide_search();\n        return;\n    }\n    $filter.val(\"\");\n    update_streams_for_search();\n}\n\nexport function clear_search(e) {\n    e.stopPropagation();\n    const $filter = $(\".stream-list-filter\").expectOne();\n    if ($filter.val() === \"\") {\n        clear_and_hide_search();\n        return;\n    }\n    $filter.val(\"\");\n    $filter.trigger(\"blur\");\n    update_streams_for_search();\n}\n\nexport function show_search_section() {\n    $(\".stream_search_section\").expectOne().removeClass(\"notdisplayed\");\n    resize.resize_stream_filters_container();\n}\n\nexport function hide_search_section() {\n    $(\".stream_search_section\").expectOne().addClass(\"notdisplayed\");\n    resize.resize_stream_filters_container();\n}\n\nexport function initiate_search() {\n    show_search_section();\n\n    const $filter = $(\".stream-list-filter\").expectOne();\n\n    if (\n        // Check if left column is a popover and is not visible.\n        $(\"#streamlist-toggle\").is(\":visible\") &&\n        !$(\".app-main .column-left\").hasClass(\"expanded\")\n    ) {\n        popovers.hide_all();\n        stream_popover.show_streamlist_sidebar();\n    }\n    $filter.trigger(\"focus\");\n\n    stream_cursor.reset();\n}\n\nexport function clear_and_hide_search() {\n    const $filter = $(\".stream-list-filter\");\n    if ($filter.val() !== \"\") {\n        $filter.val(\"\");\n        update_streams_for_search();\n    }\n    stream_cursor.clear();\n    $filter.trigger(\"blur\");\n\n    hide_search_section();\n}\n\nexport function toggle_filter_displayed(e) {\n    if ($(\".stream_search_section.notdisplayed\").length === 0) {\n        clear_and_hide_search();\n    } else {\n        initiate_search();\n    }\n    e.preventDefault();\n}\n\nexport function scroll_stream_into_view($stream_li) {\n    const $container = $(\"#left_sidebar_scroll_container\");\n\n    if ($stream_li.length !== 1) {\n        blueslip.error(\"Invalid stream_li was passed in\");\n        return;\n    }\n    const stream_header_height = $(\"#streams_header\").outerHeight();\n    scroll_util.scroll_element_into_container($stream_li, $container, stream_header_height);\n}\n\nexport function maybe_scroll_narrow_into_view() {\n    // we don't want to interfere with user scrolling once the page loads\n    if (has_scrolled) {\n        return;\n    }\n\n    const $stream_li = get_current_stream_li();\n    if ($stream_li) {\n        scroll_stream_into_view($stream_li);\n    }\n}\n\nexport function get_current_stream_li() {\n    const stream_id = topic_list.active_stream_id();\n\n    if (!stream_id) {\n        // stream_id is undefined in non-stream narrows\n        return undefined;\n    }\n\n    const $stream_li = get_stream_li(stream_id);\n\n    if (!$stream_li) {\n        // This code path shouldn't ever be reached.\n        blueslip.warn(\"No active stream_li found for defined id \" + stream_id);\n        return undefined;\n    }\n\n    return $stream_li;\n}\n","import {all_messages_data} from \"./all_messages_data\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_scroll from \"./message_scroll\";\nimport * as message_util from \"./message_util\";\nimport * as message_viewport from \"./message_viewport\";\nimport * as navigate from \"./navigate\";\nimport * as overlays from \"./overlays\";\nimport * as settings_notifications from \"./settings_notifications\";\nimport * as stream_edit from \"./stream_edit\";\nimport * as stream_list from \"./stream_list\";\nimport * as unread_ui from \"./unread_ui\";\n\nexport function update_is_muted(sub, value) {\n    sub.is_muted = value;\n\n    setTimeout(() => {\n        let msg_offset;\n        let saved_ypos;\n        // Save our current scroll position\n        if (overlays.is_active() || overlays.is_modal_open()) {\n            saved_ypos = message_viewport.scrollTop();\n        } else if (\n            message_lists.home === message_lists.current &&\n            message_lists.current.selected_row().offset() !== null\n        ) {\n            msg_offset = message_lists.current.selected_row().offset().top;\n        }\n\n        message_lists.home.clear({clear_selected_id: false});\n\n        // Recreate the message_lists.home with the newly filtered all_messages_data\n        message_util.add_old_messages(all_messages_data.all_messages(), message_lists.home);\n\n        // Ensure we're still at the same scroll position\n        if (overlays.is_overlay_or_modal_open()) {\n            message_viewport.scrollTop(saved_ypos);\n        } else if (message_lists.home === message_lists.current) {\n            // We pass use_closest to handle the case where the\n            // currently selected message is being hidden from the\n            // home view\n            message_lists.home.select_id(message_lists.home.selected_id(), {\n                use_closest: true,\n                empty_ok: true,\n            });\n            if (message_lists.current.selected_id() !== -1) {\n                message_lists.current.view.set_message_offset(msg_offset);\n            }\n        }\n\n        // In case we added messages to what's visible in the home\n        // view, we need to re-scroll to make sure the pointer is\n        // still visible. We don't want the auto-scroll handler to\n        // move our pointer to the old scroll location before we have\n        // a chance to update it.\n        navigate.plan_scroll_to_selected();\n        message_scroll.suppress_selection_update_on_next_scroll();\n\n        // Since muted streams aren't counted in visible unread\n        // counts, we need to update the rendering of them.\n        unread_ui.update_unread_counts();\n    }, 0);\n\n    settings_notifications.update_muted_stream_state(sub);\n    stream_edit.update_muting_rendering(sub);\n    stream_list.set_in_home_view(sub.stream_id, !sub.is_muted);\n}\n","import * as peer_data from \"./peer_data\";\nimport * as stream_data from \"./stream_data\";\n\nfunction display_pill(sub) {\n    const sub_count = peer_data.get_subscriber_count(sub.stream_id);\n    return \"#\" + sub.name + \": \" + sub_count + \" users\";\n}\n\nexport function create_item_from_stream_name(stream_name, current_items) {\n    stream_name = stream_name.trim();\n    if (!stream_name.startsWith(\"#\")) {\n        return undefined;\n    }\n    stream_name = stream_name.slice(1);\n\n    const sub = stream_data.get_sub(stream_name);\n    if (!sub) {\n        return undefined;\n    }\n\n    const existing_ids = current_items.map((item) => item.stream_id);\n    if (existing_ids.includes(sub.stream_id)) {\n        return undefined;\n    }\n\n    const item = {\n        type: \"stream\",\n        display_value: display_pill(sub),\n        stream_id: sub.stream_id,\n        stream_name: sub.name,\n    };\n\n    return item;\n}\n\nexport function get_stream_name_from_item(item) {\n    return item.stream_name;\n}\n\nfunction get_user_ids_from_subs(items) {\n    let user_ids = [];\n    for (const item of items) {\n        // only some of our items have streams (for copy-from-stream)\n        if (item.stream_id !== undefined) {\n            user_ids = user_ids.concat(peer_data.get_subscribers(item.stream_id));\n        }\n    }\n    return user_ids;\n}\n\nexport function get_user_ids(pill_widget) {\n    const items = pill_widget.items();\n    let user_ids = get_user_ids_from_subs(items);\n    user_ids = Array.from(new Set(user_ids));\n\n    user_ids = user_ids.filter(Boolean);\n    user_ids.sort((a, b) => a - b);\n    return user_ids;\n}\n\nexport function append_stream(stream, pill_widget) {\n    pill_widget.appendValidatedData({\n        type: \"stream\",\n        display_value: display_pill(stream),\n        stream_id: stream.stream_id,\n        stream_name: stream.name,\n    });\n    pill_widget.clear_text();\n}\n\nexport function get_stream_ids(pill_widget) {\n    const items = pill_widget.items();\n    let stream_ids = items.map((item) => item.stream_id);\n    stream_ids = stream_ids.filter(Boolean);\n\n    return stream_ids;\n}\n\nexport function filter_taken_streams(items, pill_widget) {\n    const taken_stream_ids = get_stream_ids(pill_widget);\n    items = items.filter((item) => !taken_stream_ids.includes(item.stream_id));\n    return items;\n}\n\nexport function typeahead_source(pill_widget) {\n    const potential_streams = stream_data.get_unsorted_subs();\n    return filter_taken_streams(potential_streams, pill_widget);\n}\n","import ClipboardJS from \"clipboard\";\nimport $ from \"jquery\";\n\nimport * as resolved_topic from \"../shared/js/resolved_topic\";\nimport render_all_messages_sidebar_actions from \"../templates/all_messages_sidebar_actions.hbs\";\nimport render_delete_topic_modal from \"../templates/confirm_dialog/confirm_delete_topic.hbs\";\nimport render_drafts_sidebar_actions from \"../templates/drafts_sidebar_action.hbs\";\nimport render_move_topic_to_stream from \"../templates/move_topic_to_stream.hbs\";\nimport render_starred_messages_sidebar_actions from \"../templates/starred_messages_sidebar_actions.hbs\";\nimport render_stream_sidebar_actions from \"../templates/stream_sidebar_actions.hbs\";\nimport render_topic_sidebar_actions from \"../templates/topic_sidebar_actions.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as browser_history from \"./browser_history\";\nimport * as channel from \"./channel\";\nimport * as compose_actions from \"./compose_actions\";\nimport * as composebox_typeahead from \"./composebox_typeahead\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport * as dialog_widget from \"./dialog_widget\";\nimport * as drafts from \"./drafts\";\nimport {DropdownListWidget} from \"./dropdown_list_widget\";\nimport * as hash_util from \"./hash_util\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as message_edit from \"./message_edit\";\nimport * as muted_topics_ui from \"./muted_topics_ui\";\nimport {page_params} from \"./page_params\";\nimport * as popovers from \"./popovers\";\nimport * as resize from \"./resize\";\nimport * as settings_data from \"./settings_data\";\nimport * as starred_messages from \"./starred_messages\";\nimport * as starred_messages_ui from \"./starred_messages_ui\";\nimport * as stream_bar from \"./stream_bar\";\nimport * as stream_color from \"./stream_color\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_settings_ui from \"./stream_settings_ui\";\nimport * as sub_store from \"./sub_store\";\nimport * as ui_report from \"./ui_report\";\nimport * as unread_ops from \"./unread_ops\";\nimport {user_settings} from \"./user_settings\";\nimport * as user_topics from \"./user_topics\";\n\n// We handle stream popovers and topic popovers in this\n// module.  Both are popped up from the left sidebar.\nlet current_stream_sidebar_elem;\nlet current_topic_sidebar_elem;\nlet all_messages_sidebar_elem;\nlet starred_messages_sidebar_elem;\nlet drafts_sidebar_elem;\nlet stream_widget;\nlet $stream_header_colorblock;\n\n// Keep the menu icon over which the popover is based off visible.\nfunction show_left_sidebar_menu_icon(element) {\n    $(element).closest(\"[class*='-sidebar-menu-icon']\").addClass(\"left_sidebar_menu_icon_visible\");\n}\n\n// Remove the class from element when popover is closed\nfunction hide_left_sidebar_menu_icon() {\n    $(\".left_sidebar_menu_icon_visible\").removeClass(\"left_sidebar_menu_icon_visible\");\n}\n\nfunction get_popover_menu_items(sidebar_elem) {\n    if (!sidebar_elem) {\n        blueslip.error(\"Trying to get menu items when action popover is closed.\");\n        return undefined;\n    }\n\n    const popover_data = $(sidebar_elem).data(\"popover\");\n    if (!popover_data) {\n        blueslip.error(\"Cannot find popover data for stream sidebar menu.\");\n        return undefined;\n    }\n    return $(\"li:not(.divider):visible > a\", popover_data.$tip);\n}\n\nexport function stream_sidebar_menu_handle_keyboard(key) {\n    const items = get_popover_menu_items(current_stream_sidebar_elem);\n    popovers.popover_items_handle_keyboard(key, items);\n}\n\nexport function topic_sidebar_menu_handle_keyboard(key) {\n    const items = get_popover_menu_items(current_topic_sidebar_elem);\n    popovers.popover_items_handle_keyboard(key, items);\n}\n\nexport function all_messages_sidebar_menu_handle_keyboard(key) {\n    const items = get_popover_menu_items(all_messages_sidebar_elem);\n    popovers.popover_items_handle_keyboard(key, items);\n}\n\nexport function starred_messages_sidebar_menu_handle_keyboard(key) {\n    const items = get_popover_menu_items(starred_messages_sidebar_elem);\n    popovers.popover_items_handle_keyboard(key, items);\n}\n\nfunction elem_to_stream_id($elem) {\n    const stream_id = Number.parseInt($elem.attr(\"data-stream-id\"), 10);\n\n    if (stream_id === undefined) {\n        blueslip.error(\"could not find stream id\");\n    }\n\n    return stream_id;\n}\n\nfunction topic_popover_stream_id(e) {\n    return elem_to_stream_id($(e.currentTarget));\n}\n\nexport function stream_popped() {\n    return current_stream_sidebar_elem !== undefined;\n}\n\nexport function topic_popped() {\n    return current_topic_sidebar_elem !== undefined;\n}\n\nexport function all_messages_popped() {\n    return all_messages_sidebar_elem !== undefined;\n}\n\nexport function starred_messages_popped() {\n    return starred_messages_sidebar_elem !== undefined;\n}\n\nexport function drafts_popped() {\n    return drafts_sidebar_elem !== undefined;\n}\n\nexport function hide_stream_popover() {\n    if (stream_popped()) {\n        $(current_stream_sidebar_elem).popover(\"destroy\");\n        hide_left_sidebar_menu_icon();\n        current_stream_sidebar_elem = undefined;\n    }\n}\n\nexport function hide_topic_popover() {\n    if (topic_popped()) {\n        $(current_topic_sidebar_elem).popover(\"destroy\");\n        hide_left_sidebar_menu_icon();\n        current_topic_sidebar_elem = undefined;\n    }\n}\n\nexport function hide_all_messages_popover() {\n    if (all_messages_popped()) {\n        $(all_messages_sidebar_elem).popover(\"destroy\");\n        hide_left_sidebar_menu_icon();\n        all_messages_sidebar_elem = undefined;\n    }\n}\n\nexport function hide_starred_messages_popover() {\n    if (starred_messages_popped()) {\n        $(starred_messages_sidebar_elem).popover(\"destroy\");\n        hide_left_sidebar_menu_icon();\n        starred_messages_sidebar_elem = undefined;\n    }\n}\n\nexport function hide_drafts_popover() {\n    if (drafts_popped()) {\n        $(drafts_sidebar_elem).popover(\"destroy\");\n        hide_left_sidebar_menu_icon();\n        drafts_sidebar_elem = undefined;\n    }\n}\n\nexport function show_streamlist_sidebar() {\n    $(\".app-main .column-left\").addClass(\"expanded\");\n    resize.resize_stream_filters_container();\n}\n\nexport function hide_streamlist_sidebar() {\n    $(\".app-main .column-left\").removeClass(\"expanded\");\n}\n\nfunction stream_popover_sub(e) {\n    const $elem = $(e.currentTarget).parents(\"ul\");\n    const stream_id = elem_to_stream_id($elem);\n    const sub = sub_store.get(stream_id);\n    if (!sub) {\n        blueslip.error(\"Unknown stream: \" + stream_id);\n        return undefined;\n    }\n    return sub;\n}\n\n// This little function is a workaround for the fact that\n// Bootstrap popovers don't properly handle being resized --\n// so after resizing our popover to add in the spectrum color\n// picker, we need to adjust its height accordingly.\nfunction update_spectrum($popover, update_func) {\n    const initial_height = $popover[0].offsetHeight;\n\n    const $colorpicker = $popover.find(\".colorpicker-container\").find(\".colorpicker\");\n    update_func($colorpicker);\n    const after_height = $popover[0].offsetHeight;\n\n    const $popover_root = $popover.closest(\".popover\");\n    const current_top_px = Number.parseFloat($popover_root.css(\"top\").replace(\"px\", \"\"));\n    const height_delta = after_height - initial_height;\n    let top = current_top_px - height_delta / 2;\n\n    if (top < 0) {\n        top = 0;\n        $popover_root.find(\"div.arrow\").hide();\n    } else if (top + after_height > $(window).height() - 20) {\n        top = $(window).height() - after_height - 20;\n        if (top < 0) {\n            top = 0;\n        }\n        $popover_root.find(\"div.arrow\").hide();\n    }\n\n    $popover_root.css(\"top\", top + \"px\");\n}\n\n// Builds the `Copy link to topic` topic action.\nfunction build_topic_link_clipboard(url) {\n    if (!url) {\n        return;\n    }\n\n    const copy_event = new ClipboardJS(\".sidebar-popover-copy-link-to-topic\", {\n        text() {\n            return url;\n        },\n    });\n\n    // Hide the topic popover once the url is successfully\n    // copied to clipboard.\n    copy_event.on(\"success\", () => {\n        hide_topic_popover();\n    });\n}\n\nfunction build_stream_popover(opts) {\n    const elt = opts.elt;\n    const stream_id = opts.stream_id;\n\n    if (stream_popped() && current_stream_sidebar_elem === elt) {\n        // If the popover is already shown, clicking again should toggle it.\n        hide_stream_popover();\n        return;\n    }\n\n    popovers.hide_all_except_sidebars();\n\n    const content = render_stream_sidebar_actions({\n        stream: sub_store.get(stream_id),\n    });\n\n    $(elt).popover({\n        content,\n        html: true,\n        trigger: \"manual\",\n        fixed: true,\n        fix_positions: true,\n    });\n\n    $(elt).popover(\"show\");\n    const $popover = $(`.streams_popover[data-stream-id=\"${CSS.escape(stream_id)}\"]`);\n\n    update_spectrum($popover, ($colorpicker) => {\n        $colorpicker.spectrum(stream_color.sidebar_popover_colorpicker_options);\n    });\n\n    current_stream_sidebar_elem = elt;\n    show_left_sidebar_menu_icon(elt);\n}\n\nfunction build_topic_popover(opts) {\n    const elt = opts.elt;\n    const stream_id = opts.stream_id;\n    const topic_name = opts.topic_name;\n\n    if (topic_popped() && current_topic_sidebar_elem === elt) {\n        // If the popover is already shown, clicking again should toggle it.\n        hide_topic_popover();\n        return;\n    }\n\n    const sub = sub_store.get(stream_id);\n    if (!sub) {\n        blueslip.error(\"cannot build topic popover for stream: \" + stream_id);\n        return;\n    }\n\n    popovers.hide_all_except_sidebars();\n\n    const topic_muted = user_topics.is_topic_muted(sub.stream_id, topic_name);\n    const has_starred_messages = starred_messages.get_count_in_topic(sub.stream_id, topic_name) > 0;\n    // Arguably, we could offer the \"Move topic\" option even if users\n    // can only edit the name within a stream.\n    const can_move_topic = settings_data.user_can_move_messages_between_streams();\n\n    const content = render_topic_sidebar_actions({\n        stream_name: sub.name,\n        stream_id: sub.stream_id,\n        topic_name,\n        topic_muted,\n        can_move_topic,\n        is_realm_admin: page_params.is_admin,\n        topic_is_resolved: resolved_topic.is_resolved(topic_name),\n        color: sub.color,\n        has_starred_messages,\n    });\n\n    $(elt).popover({\n        content,\n        html: true,\n        trigger: \"manual\",\n        fixed: true,\n    });\n\n    $(elt).popover(\"show\");\n\n    current_topic_sidebar_elem = elt;\n    show_left_sidebar_menu_icon(elt);\n}\n\nfunction build_all_messages_popover(e) {\n    const elt = e.target;\n\n    if (all_messages_popped() && all_messages_sidebar_elem === elt) {\n        hide_all_messages_popover();\n        e.stopPropagation();\n        return;\n    }\n\n    popovers.hide_all_except_sidebars();\n\n    const content = render_all_messages_sidebar_actions();\n\n    $(elt).popover({\n        content,\n        html: true,\n        trigger: \"manual\",\n        fixed: true,\n    });\n\n    $(elt).popover(\"show\");\n    all_messages_sidebar_elem = elt;\n    show_left_sidebar_menu_icon(elt);\n    e.stopPropagation();\n}\n\nfunction build_starred_messages_popover(e) {\n    const elt = e.target;\n\n    if (starred_messages_popped() && starred_messages_sidebar_elem === elt) {\n        hide_starred_messages_popover();\n        e.stopPropagation();\n        return;\n    }\n\n    popovers.hide_all_except_sidebars();\n\n    const show_unstar_all_button = starred_messages.get_count() > 0;\n    const content = render_starred_messages_sidebar_actions({\n        show_unstar_all_button,\n        starred_message_counts: user_settings.starred_message_counts,\n    });\n\n    $(elt).popover({\n        content,\n        html: true,\n        trigger: \"manual\",\n        fixed: true,\n    });\n\n    $(elt).popover(\"show\");\n    starred_messages_sidebar_elem = elt;\n    show_left_sidebar_menu_icon(elt);\n    e.stopPropagation();\n}\n\nfunction build_drafts_popover(e) {\n    const elt = e.target;\n\n    if (drafts_popped() && drafts_sidebar_elem === elt) {\n        hide_drafts_popover();\n        e.stopPropagation();\n        return;\n    }\n\n    popovers.hide_all_except_sidebars();\n    const content = render_drafts_sidebar_actions({});\n    $(elt).popover({\n        content,\n        html: true,\n        trigger: \"manual\",\n        fixed: true,\n    });\n\n    $(elt).popover(\"show\");\n    drafts_sidebar_elem = elt;\n    show_left_sidebar_menu_icon(elt);\n    e.stopPropagation();\n}\n\nexport function build_move_topic_to_stream_popover(current_stream_id, topic_name, message) {\n    const current_stream_name = stream_data.maybe_get_stream_name(current_stream_id);\n    const args = {\n        topic_name,\n        current_stream_id,\n        notify_new_thread: message_edit.notify_new_thread_default,\n        notify_old_thread: message_edit.notify_old_thread_default,\n        from_message_actions_popover: message !== undefined,\n    };\n\n    let modal_heading = $t_html({defaultMessage: \"Move topic\"});\n    if (message !== undefined) {\n        modal_heading = $t_html({defaultMessage: \"Move messages\"});\n        // We disable topic input only for modal is opened from the message actions\n        // popover and not when moving the whole topic from left sidebar. This is\n        // because topic editing permission depend on message and we do not have\n        // any message object when opening the modal and the first message of\n        // topic is fetched from the server after clicking submit.\n        // Though, this will be changed soon as we are going to make topic\n        // edit permission independent of message.\n        args.disable_topic_input = !message_edit.is_topic_editable(message);\n    }\n\n    function get_params_from_form() {\n        return Object.fromEntries(\n            $(\"#move_topic_form\")\n                .serializeArray()\n                .map(({name, value}) => [name, value]),\n        );\n    }\n\n    function update_submit_button_disabled_state(select_stream_id) {\n        const {current_stream_id, new_topic_name, old_topic_name} = get_params_from_form();\n\n        // Unlike most topic comparisons in Zulip, we intentionally do\n        // a case-sensitive comparison, since adjusting the\n        // capitalization of a topic is a valid operation.\n        // new_topic_name can be undefined when the new topic input is\n        // disabled in case when user does not have permission to edit\n        // topic and thus submit button is disabled if stream is also\n        // not changed.\n        $(\"#move_topic_modal .dialog_submit_button\")[0].disabled =\n            Number.parseInt(current_stream_id, 10) === Number.parseInt(select_stream_id, 10) &&\n            (new_topic_name === undefined || new_topic_name.trim() === old_topic_name.trim());\n    }\n\n    function move_topic() {\n        const params = get_params_from_form();\n\n        const {old_topic_name} = params;\n        let select_stream_id = stream_widget.value();\n\n        let {\n            current_stream_id,\n            new_topic_name,\n            send_notification_to_new_thread,\n            send_notification_to_old_thread,\n        } = params;\n        send_notification_to_new_thread = send_notification_to_new_thread === \"on\";\n        send_notification_to_old_thread = send_notification_to_old_thread === \"on\";\n        current_stream_id = Number.parseInt(current_stream_id, 10);\n\n        if (new_topic_name !== undefined) {\n            // new_topic_name can be undefined when the new topic input is disabled when\n            // user does not have permission to edit topic.\n            new_topic_name = new_topic_name.trim();\n        }\n        if (old_topic_name.trim() === new_topic_name) {\n            // We use `undefined` to tell the server that\n            // there has been no change in the topic name.\n            new_topic_name = undefined;\n        }\n\n        let propagate_mode = \"change_all\";\n        if (message !== undefined) {\n            if (select_stream_id === current_stream_id) {\n                // We use `undefined` to tell the server that\n                // there has been no change in stream. This is\n                // important for cases when changing stream is\n                // not allowed.\n                select_stream_id = undefined;\n            }\n            // We already have the message_id here which means that modal is opened using\n            // message popover.\n            propagate_mode = $(\"#move_topic_modal select.message_edit_topic_propagate\").val();\n            message_edit.move_topic_containing_message_to_stream(\n                message.id,\n                select_stream_id,\n                new_topic_name,\n                send_notification_to_new_thread,\n                send_notification_to_old_thread,\n                propagate_mode,\n            );\n            return;\n        }\n\n        dialog_widget.show_dialog_spinner();\n        message_edit.with_first_message_id(\n            current_stream_id,\n            old_topic_name,\n            (message_id) => {\n                if (old_topic_name && select_stream_id) {\n                    message_edit.move_topic_containing_message_to_stream(\n                        message_id,\n                        select_stream_id,\n                        new_topic_name,\n                        send_notification_to_new_thread,\n                        send_notification_to_old_thread,\n                        propagate_mode,\n                    );\n                }\n            },\n            (xhr) => {\n                dialog_widget.hide_dialog_spinner();\n                ui_report.error(\n                    $t_html({defaultMessage: \"Error moving topic\"}),\n                    xhr,\n                    $(\"#move_topic_modal #dialog_error\"),\n                );\n            },\n        );\n    }\n\n    function set_stream_topic_typeahead() {\n        const $topic_input = $(\"#move_topic_form .inline_topic_edit\");\n        const new_stream_id = Number(stream_widget.value(), 10);\n        const new_stream_name = sub_store.get(new_stream_id).name;\n        $topic_input.data(\"typeahead\").unlisten();\n        composebox_typeahead.initialize_topic_edit_typeahead($topic_input, new_stream_name, false);\n    }\n\n    function move_topic_on_update() {\n        update_submit_button_disabled_state();\n        set_stream_topic_typeahead();\n    }\n\n    function move_topic_post_render() {\n        const $topic_input = $(\"#move_topic_form .inline_topic_edit\");\n        $stream_header_colorblock = $(\"#dialog_widget_modal .topic_stream_edit_header\").find(\n            \".stream_header_colorblock\",\n        );\n        stream_bar.decorate(current_stream_name, $stream_header_colorblock, false);\n        const streams_list =\n            message_edit.get_available_streams_for_moving_messages(current_stream_id);\n        const opts = {\n            widget_name: \"select_stream\",\n            data: streams_list,\n            default_text: $t({defaultMessage: \"No streams\"}),\n            include_current_item: false,\n            value: current_stream_id,\n            on_update: move_topic_on_update,\n        };\n        stream_widget = new DropdownListWidget(opts);\n\n        composebox_typeahead.initialize_topic_edit_typeahead(\n            $topic_input,\n            current_stream_name,\n            false,\n        );\n\n        stream_widget.setup();\n\n        $(\"#select_stream_widget .dropdown-toggle\").prop(\n            \"disabled\",\n            !settings_data.user_can_move_messages_between_streams(),\n        );\n        update_submit_button_disabled_state(stream_widget.value());\n        $(\"#move_topic_modal .inline_topic_edit\").on(\"input\", () => {\n            update_submit_button_disabled_state(stream_widget.value());\n        });\n    }\n\n    dialog_widget.launch({\n        html_heading: modal_heading,\n        html_body: render_move_topic_to_stream(args),\n        html_submit_button: $t_html({defaultMessage: \"Confirm\"}),\n        id: \"move_topic_modal\",\n        on_click: move_topic,\n        loading_spinner: true,\n        post_render: move_topic_post_render,\n    });\n}\n\nexport function register_click_handlers() {\n    $(\"#stream_filters\").on(\"click\", \".stream-sidebar-menu-icon\", (e) => {\n        e.stopPropagation();\n\n        const elt = e.target;\n        const $stream_li = $(elt).parents(\"li\");\n        const stream_id = elem_to_stream_id($stream_li);\n\n        build_stream_popover({\n            elt,\n            stream_id,\n        });\n    });\n\n    $(\"#stream_filters\").on(\"click\", \".topic-sidebar-menu-icon\", (e) => {\n        e.stopPropagation();\n\n        const elt = $(e.target).closest(\".topic-sidebar-menu-icon\").expectOne()[0];\n        const $stream_li = $(elt).closest(\".narrow-filter\").expectOne();\n        const stream_id = elem_to_stream_id($stream_li);\n        const topic_name = $(elt).closest(\"li\").expectOne().attr(\"data-topic-name\");\n        const url = $(elt).closest(\"li\").find(\".topic-name\").expectOne().prop(\"href\");\n\n        build_topic_popover({\n            elt,\n            stream_id,\n            topic_name,\n        });\n\n        build_topic_link_clipboard(url);\n    });\n\n    $(\"#global_filters\").on(\"click\", \".all-messages-sidebar-menu-icon\", build_all_messages_popover);\n\n    $(\"#global_filters\").on(\n        \"click\",\n        \".starred-messages-sidebar-menu-icon\",\n        build_starred_messages_popover,\n    );\n\n    $(\"#global_filters\").on(\"click\", \".drafts-sidebar-menu-icon\", build_drafts_popover);\n\n    $(\"body\").on(\"click keypress\", \".move-topic-dropdown .list_item\", (e) => {\n        // We want the dropdown to collapse once any of the list item is pressed\n        // and thus don't want to kill the natural bubbling of event.\n        e.preventDefault();\n\n        if (e.type === \"keypress\" && !keydown_util.is_enter_event(e)) {\n            return;\n        }\n        const stream_name = stream_data.maybe_get_stream_name(\n            Number.parseInt(stream_widget.value(), 10),\n        );\n\n        stream_bar.decorate(stream_name, $stream_header_colorblock, false);\n    });\n\n    register_stream_handlers();\n    register_topic_handlers();\n}\n\nexport function register_stream_handlers() {\n    // Stream settings\n    $(\"body\").on(\"click\", \".open_stream_settings\", (e) => {\n        const sub = stream_popover_sub(e);\n        hide_stream_popover();\n\n        const stream_edit_hash = hash_util.stream_edit_url(sub);\n        browser_history.go_to_location(stream_edit_hash);\n    });\n\n    // Pin/unpin\n    $(\"body\").on(\"click\", \".pin_to_top\", (e) => {\n        const sub = stream_popover_sub(e);\n        hide_stream_popover();\n        stream_settings_ui.toggle_pin_to_top_stream(sub);\n        e.stopPropagation();\n    });\n\n    // Mark all messages in stream as read\n    $(\"body\").on(\"click\", \".mark_stream_as_read\", (e) => {\n        const sub = stream_popover_sub(e);\n        hide_stream_popover();\n        unread_ops.mark_stream_as_read(sub.stream_id);\n        e.stopPropagation();\n    });\n\n    // Mark all messages as read\n    $(\"body\").on(\"click\", \"#mark_all_messages_as_read\", (e) => {\n        hide_all_messages_popover();\n        unread_ops.mark_all_as_read();\n        e.stopPropagation();\n    });\n\n    // Unstar all messages\n    $(\"body\").on(\"click\", \"#unstar_all_messages\", (e) => {\n        hide_starred_messages_popover();\n        e.preventDefault();\n        e.stopPropagation();\n        starred_messages_ui.confirm_unstar_all_messages();\n    });\n\n    $(\"body\").on(\"click\", \"#delete_all_drafts_sidebar\", (e) => {\n        hide_drafts_popover();\n        e.stopPropagation();\n        drafts.confirm_delete_all_drafts();\n    });\n\n    // Unstar all messages in topic\n    $(\"body\").on(\"click\", \".sidebar-popover-unstar-all-in-topic\", (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        const topic_name = $(\".sidebar-popover-unstar-all-in-topic\").attr(\"data-topic-name\");\n        const stream_id = $(\".sidebar-popover-unstar-all-in-topic\").attr(\"data-stream-id\");\n        hide_topic_popover();\n        starred_messages_ui.confirm_unstar_all_messages_in_topic(\n            Number.parseInt(stream_id, 10),\n            topic_name,\n        );\n    });\n\n    // Toggle displaying starred message count\n    $(\"body\").on(\"click\", \"#toggle_display_starred_msg_count\", (e) => {\n        hide_starred_messages_popover();\n        e.preventDefault();\n        e.stopPropagation();\n        const starred_msg_counts = user_settings.starred_message_counts;\n        const data = {};\n        data.starred_message_counts = JSON.stringify(!starred_msg_counts);\n        channel.patch({\n            url: \"/json/settings\",\n            data,\n        });\n    });\n    // Mute/unmute\n    $(\"body\").on(\"click\", \".toggle_stream_muted\", (e) => {\n        const sub = stream_popover_sub(e);\n        hide_stream_popover();\n        stream_settings_ui.set_muted(sub, !sub.is_muted);\n        e.stopPropagation();\n    });\n\n    // New topic in stream menu\n    $(\"body\").on(\"click\", \".popover_new_topic_button\", (e) => {\n        const sub = stream_popover_sub(e);\n        hide_stream_popover();\n\n        compose_actions.start(\"stream\", {\n            trigger: \"popover new topic button\",\n            stream: sub.name,\n            topic: \"\",\n        });\n        e.preventDefault();\n        e.stopPropagation();\n    });\n\n    // Unsubscribe\n    $(\"body\").on(\"click\", \".popover_sub_unsub_button\", function (e) {\n        $(this).toggleClass(\"unsub\");\n        $(this).closest(\".popover\").fadeOut(500).delay(500).remove();\n\n        const sub = stream_popover_sub(e);\n        stream_settings_ui.sub_or_unsub(sub);\n        e.preventDefault();\n        e.stopPropagation();\n    });\n\n    // Choose a different color.\n    $(\"body\").on(\"click\", \".choose_stream_color\", (e) => {\n        update_spectrum($(e.target).closest(\".streams_popover\"), ($colorpicker) => {\n            $(\".colorpicker-container\").show();\n            $colorpicker.spectrum(\"destroy\");\n            $colorpicker.spectrum(stream_color.sidebar_popover_colorpicker_options_full);\n            // In theory this should clean up the old color picker,\n            // but this seems a bit flaky -- the new colorpicker\n            // doesn't fire until you click a button, but the buttons\n            // have been hidden.  We work around this by just manually\n            // fixing it up here.\n            $colorpicker.parent().find(\".sp-container\").removeClass(\"sp-buttons-disabled\");\n            $(e.target).hide();\n        });\n\n        $(\".streams_popover\").on(\"click\", \"a.sp-cancel\", () => {\n            hide_stream_popover();\n        });\n        if ($(window).width() <= 768) {\n            $(\".popover-inner\").hide().fadeIn(300);\n            $(\".popover\").addClass(\"colorpicker-popover\");\n        }\n    });\n}\n\nexport function register_topic_handlers() {\n    // Mute the topic\n    $(\"body\").on(\"click\", \".sidebar-popover-mute-topic\", (e) => {\n        const stream_id = topic_popover_stream_id(e);\n        if (!stream_id) {\n            return;\n        }\n\n        const topic = $(e.currentTarget).attr(\"data-topic-name\");\n        muted_topics_ui.mute_topic(stream_id, topic);\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    // Unmute the topic\n    $(\"body\").on(\"click\", \".sidebar-popover-unmute-topic\", (e) => {\n        const stream_id = topic_popover_stream_id(e);\n        if (!stream_id) {\n            return;\n        }\n\n        const topic = $(e.currentTarget).attr(\"data-topic-name\");\n        muted_topics_ui.unmute_topic(stream_id, topic);\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    // Mark all messages as read\n    $(\"body\").on(\"click\", \".sidebar-popover-mark-topic-read\", (e) => {\n        const stream_id = topic_popover_stream_id(e);\n        if (!stream_id) {\n            return;\n        }\n\n        const topic = $(e.currentTarget).attr(\"data-topic-name\");\n        hide_topic_popover();\n        unread_ops.mark_topic_as_read(stream_id, topic);\n        e.stopPropagation();\n    });\n\n    // Deleting all message in a topic\n    $(\"body\").on(\"click\", \".sidebar-popover-delete-topic-messages\", (e) => {\n        const stream_id = topic_popover_stream_id(e);\n        if (!stream_id) {\n            return;\n        }\n\n        const topic = $(e.currentTarget).attr(\"data-topic-name\");\n        const args = {\n            topic_name: topic,\n        };\n\n        hide_topic_popover();\n\n        const html_body = render_delete_topic_modal(args);\n\n        confirm_dialog.launch({\n            html_heading: $t_html({defaultMessage: \"Delete topic\"}),\n            help_link: \"/help/delete-a-topic\",\n            html_body,\n            on_click() {\n                message_edit.delete_topic(stream_id, topic);\n            },\n        });\n\n        e.stopPropagation();\n    });\n\n    $(\"body\").on(\"click\", \".sidebar-popover-toggle-resolved\", (e) => {\n        const $topic_row = $(e.currentTarget);\n        const stream_id = Number.parseInt($topic_row.attr(\"data-stream-id\"), 10);\n        const topic_name = $topic_row.attr(\"data-topic-name\");\n        message_edit.with_first_message_id(stream_id, topic_name, (message_id) => {\n            message_edit.toggle_resolve_topic(message_id, topic_name);\n        });\n\n        hide_topic_popover();\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    $(\"body\").on(\"click\", \".sidebar-popover-move-topic-messages\", (e) => {\n        const $topic_row = $(e.currentTarget);\n        const stream_id = Number.parseInt($topic_row.attr(\"data-stream-id\"), 10);\n        const topic_name = $topic_row.attr(\"data-topic-name\");\n        hide_topic_popover();\n        build_move_topic_to_stream_popover(stream_id, topic_name);\n        e.stopPropagation();\n        e.preventDefault();\n    });\n}\n","import $ from \"jquery\";\n\nexport function get_edit_container(sub) {\n    return $(\n        `#subscription_overlay .subscription_settings[data-stream-id='${CSS.escape(\n            sub.stream_id,\n        )}']`,\n    );\n}\n","import * as hash_util from \"./hash_util\";\nimport {page_params} from \"./page_params\";\nimport * as peer_data from \"./peer_data\";\nimport * as settings_config from \"./settings_config\";\nimport * as stream_data from \"./stream_data\";\nimport * as sub_store from \"./sub_store\";\nimport {user_settings} from \"./user_settings\";\nimport * as util from \"./util\";\n\nexport function get_sub_for_settings(sub) {\n    const settings_sub = {...sub};\n    add_settings_fields(settings_sub);\n    settings_sub.subscriber_count = peer_data.get_subscriber_count(sub.stream_id);\n    return settings_sub;\n}\n\nfunction get_subs_for_settings(subs) {\n    // We may eventually add subscribers to the subs here, rather than\n    // delegating, so that we can more efficiently compute subscriber counts\n    // (in bulk).  If that plan appears to have been aborted, feel free to\n    // inline this.\n    return subs.map((sub) => get_sub_for_settings(sub));\n}\n\nexport function get_updated_unsorted_subs() {\n    let all_subs = stream_data.get_unsorted_subs();\n\n    // We don't display unsubscribed streams to guest users.\n    if (page_params.is_guest) {\n        all_subs = all_subs.filter((sub) => sub.subscribed);\n    }\n\n    return get_subs_for_settings(all_subs);\n}\n\nexport function add_settings_fields(sub) {\n    // Note that we don't calculate subscriber counts here.\n\n    sub.is_realm_admin = page_params.is_admin;\n    // Admin can change any stream's name & description either stream is public or\n    // private, subscribed or unsubscribed.\n    sub.can_change_name_description = page_params.is_admin;\n\n    sub.should_display_subscription_button = stream_data.can_toggle_subscription(sub);\n    sub.should_display_preview_button = stream_data.can_preview(sub);\n    sub.can_change_stream_permissions = stream_data.can_change_permissions(sub);\n    sub.can_access_subscribers = stream_data.can_view_subscribers(sub);\n    sub.can_add_subscribers = stream_data.can_subscribe_others(sub);\n\n    sub.preview_url = hash_util.by_stream_url(sub.stream_id);\n    sub.is_old_stream = sub.stream_weekly_traffic !== null;\n}\n\nexport function get_unmatched_streams_for_notification_settings() {\n    const subscribed_rows = stream_data.subscribed_subs();\n    subscribed_rows.sort((a, b) => util.strcmp(a.name, b.name));\n\n    const notification_settings = [];\n    for (const row of subscribed_rows) {\n        const settings_values = {};\n        let make_table_row = false;\n        for (const notification_name of settings_config.stream_specific_notification_settings) {\n            const default_setting =\n                user_settings[\n                    settings_config.generalize_stream_notification_setting[notification_name]\n                ];\n            const stream_setting = stream_data.receives_notifications(\n                row.stream_id,\n                notification_name,\n            );\n\n            settings_values[notification_name] = stream_setting;\n            if (stream_setting !== default_setting) {\n                make_table_row = true;\n            }\n        }\n        // We do not need to display the streams whose settings\n        // match with the global settings defined by the user.\n        if (make_table_row) {\n            settings_values.stream_name = row.name;\n            settings_values.stream_id = row.stream_id;\n            settings_values.invite_only = row.invite_only;\n            settings_values.is_web_public = row.is_web_public;\n\n            notification_settings.push(settings_values);\n        }\n    }\n    return notification_settings;\n}\n\nexport function get_streams_for_settings_page() {\n    // TODO: This function is only used for copy-from-stream, so\n    //       the current name is slightly misleading now, plus\n    //       it's not entirely clear we need unsubscribed streams\n    //       for that.  Also we may be revisiting that UI.\n\n    // Build up our list of subscribed streams from the data we already have.\n    const subscribed_rows = stream_data.subscribed_subs();\n    const unsubscribed_rows = stream_data.unsubscribed_subs();\n\n    // Sort and combine all our streams.\n    function by_name(a, b) {\n        return util.strcmp(a.name, b.name);\n    }\n    subscribed_rows.sort(by_name);\n    unsubscribed_rows.sort(by_name);\n    const all_subs = unsubscribed_rows.concat(subscribed_rows);\n\n    return get_subs_for_settings(all_subs);\n}\n\nexport function sort_for_stream_settings(stream_ids, order) {\n    function name(stream_id) {\n        const sub = sub_store.get(stream_id);\n        if (!sub) {\n            return \"\";\n        }\n        return sub.name;\n    }\n\n    function weekly_traffic(stream_id) {\n        const sub = sub_store.get(stream_id);\n        if (sub && sub.stream_weekly_traffic !== null) {\n            return sub.stream_weekly_traffic;\n        }\n        // don't intersperse new streams with zero-traffic existing streams\n        return -1;\n    }\n\n    function by_stream_name(id_a, id_b) {\n        const stream_a_name = name(id_a);\n        const stream_b_name = name(id_b);\n        return util.strcmp(stream_a_name, stream_b_name);\n    }\n\n    function by_subscriber_count(id_a, id_b) {\n        const out = peer_data.get_subscriber_count(id_b) - peer_data.get_subscriber_count(id_a);\n        if (out === 0) {\n            return by_stream_name(id_a, id_b);\n        }\n        return out;\n    }\n\n    function by_weekly_traffic(id_a, id_b) {\n        const out = weekly_traffic(id_b) - weekly_traffic(id_a);\n        if (out === 0) {\n            return by_stream_name(id_a, id_b);\n        }\n        return out;\n    }\n\n    const orders = new Map([\n        [\"by-stream-name\", by_stream_name],\n        [\"by-subscriber-count\", by_subscriber_count],\n        [\"by-weekly-traffic\", by_weekly_traffic],\n    ]);\n\n    if (order === undefined || !orders.has(order)) {\n        order = \"by-stream-name\";\n    }\n\n    stream_ids.sort(orders.get(order));\n}\n","import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport render_unsubscribe_private_stream_modal from \"../templates/confirm_dialog/confirm_unsubscribe_private_stream.hbs\";\nimport render_browse_streams_list from \"../templates/stream_settings/browse_streams_list.hbs\";\nimport render_browse_streams_list_item from \"../templates/stream_settings/browse_streams_list_item.hbs\";\nimport render_selected_stream_title from \"../templates/stream_settings/selected_stream_title.hbs\";\nimport render_stream_settings from \"../templates/stream_settings/stream_settings.hbs\";\nimport render_stream_settings_overlay from \"../templates/stream_settings/stream_settings_overlay.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as browser_history from \"./browser_history\";\nimport * as channel from \"./channel\";\nimport * as components from \"./components\";\nimport * as compose_state from \"./compose_state\";\nimport * as confirm_dialog from \"./confirm_dialog\";\nimport * as hash_util from \"./hash_util\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as loading from \"./loading\";\nimport * as message_live_update from \"./message_live_update\";\nimport * as message_view_header from \"./message_view_header\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as scroll_util from \"./scroll_util\";\nimport * as search_util from \"./search_util\";\nimport * as settings_config from \"./settings_config\";\nimport * as settings_data from \"./settings_data\";\nimport * as stream_create from \"./stream_create\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_edit from \"./stream_edit\";\nimport * as stream_edit_subscribers from \"./stream_edit_subscribers\";\nimport * as stream_list from \"./stream_list\";\nimport * as stream_muting from \"./stream_muting\";\nimport * as stream_settings_data from \"./stream_settings_data\";\nimport * as stream_ui_updates from \"./stream_ui_updates\";\nimport * as sub_store from \"./sub_store\";\nimport * as ui from \"./ui\";\nimport * as ui_report from \"./ui_report\";\nimport * as util from \"./util\";\n\nexport function set_right_panel_title(sub) {\n    let title_icon_color = \"#333333\";\n    if (settings_data.using_dark_theme()) {\n        title_icon_color = \"#dddeee\";\n    }\n    $(\"#subscription_overlay .stream-info-title\").html(\n        render_selected_stream_title({sub, title_icon_color}),\n    );\n}\n\nexport const show_subs_pane = {\n    nothing_selected() {\n        $(\".settings, #stream-creation\").hide();\n        $(\".nothing-selected\").show();\n        $(\"#subscription_overlay .stream-info-title\").text($t({defaultMessage: \"Stream settings\"}));\n    },\n    settings(sub) {\n        $(\".settings, #stream-creation\").hide();\n        $(\".settings\").show();\n        set_right_panel_title(sub);\n    },\n    create_stream() {\n        $(\".nothing-selected, .settings, #stream-creation\").hide();\n        $(\"#stream-creation\").show();\n        $(\"#subscription_overlay .stream-info-title\").text($t({defaultMessage: \"Create stream\"}));\n    },\n};\n\nexport function row_for_stream_id(stream_id) {\n    return $(`.stream-row[data-stream-id='${CSS.escape(stream_id)}']`);\n}\n\nexport function is_sub_already_present(sub) {\n    return row_for_stream_id(sub.stream_id).length > 0;\n}\n\nexport function update_left_panel_row(sub) {\n    const $row = row_for_stream_id(sub.stream_id);\n\n    if ($row.length === 0) {\n        return;\n    }\n\n    blueslip.debug(`Updating row in left panel of stream settings for: ${sub.name}`);\n    const setting_sub = stream_settings_data.get_sub_for_settings(sub);\n    const html = render_browse_streams_list_item(setting_sub);\n    const $new_row = $(html);\n\n    // TODO: Clean up this hack when we eliminate `notdisplayed`\n    if ($row.hasClass(\"notdisplayed\")) {\n        $new_row.addClass(\"notdisplayed\");\n    }\n\n    // TODO: Remove this if/when we just handle \"active\" when rendering templates.\n    if ($row.hasClass(\"active\")) {\n        $new_row.addClass(\"active\");\n    }\n\n    $row.replaceWith($new_row);\n}\n\nexport function settings_button_for_sub(sub) {\n    // We don't do expectOne() here, because this button is only\n    // visible if the user has that stream selected in the streams UI.\n    return $(\n        `.stream_settings_header[data-stream-id='${CSS.escape(sub.stream_id)}'] .subscribe-button`,\n    );\n}\n\nfunction get_row_data($row) {\n    const row_id = Number.parseInt($row.attr(\"data-stream-id\"), 10);\n    if (row_id) {\n        const row_object = sub_store.get(row_id);\n        return {\n            id: row_id,\n            object: row_object,\n        };\n    }\n    return undefined;\n}\n\nexport function get_active_data() {\n    const $active_row = $(\"div.stream-row.active\");\n    const valid_active_id = Number.parseInt($active_row.attr(\"data-stream-id\"), 10);\n    const $active_tabs = $(\".subscriptions-container\").find(\"div.ind-tab.selected\");\n    return {\n        $row: $active_row,\n        id: valid_active_id,\n        $tabs: $active_tabs,\n    };\n}\n\nfunction selectText(element) {\n    const sel = window.getSelection();\n    const range = document.createRange();\n    range.selectNodeContents(element);\n\n    sel.removeAllRanges();\n    sel.addRange(range);\n}\n\nfunction should_list_all_streams() {\n    return !page_params.realm_is_zephyr_mirror_realm;\n}\n\nexport function set_muted(sub, is_muted, status_element) {\n    stream_muting.update_is_muted(sub, is_muted);\n    stream_edit.set_stream_property(sub, \"is_muted\", sub.is_muted, status_element);\n}\n\nexport function toggle_pin_to_top_stream(sub) {\n    stream_edit.set_stream_property(sub, \"pin_to_top\", !sub.pin_to_top);\n}\n\nlet subscribed_only = true;\n\nexport function is_subscribed_stream_tab_active() {\n    // Returns true if \"Subscribed\" tab in stream settings is open\n    // otherwise false.\n    return subscribed_only;\n}\n\nexport function update_stream_name(sub, new_name) {\n    const old_name = sub.name;\n\n    // Rename the stream internally.\n    stream_data.rename_sub(sub, new_name);\n    const stream_id = sub.stream_id;\n\n    // Update the left sidebar.\n    stream_list.rename_stream(sub, new_name);\n\n    // Update the stream settings\n    stream_edit.update_stream_name(sub, new_name);\n\n    // Update the subscriptions page\n    const $sub_row = row_for_stream_id(stream_id);\n    $sub_row.find(\".stream-name\").text(new_name);\n\n    // Update the message feed.\n    message_live_update.update_stream_name(stream_id, new_name);\n\n    // Update compose_state if needed\n    if (compose_state.stream_name() === old_name) {\n        compose_state.set_stream_name(new_name);\n    }\n\n    // Update navbar if needed\n    message_view_header.maybe_rerender_title_area_for_stream(sub);\n}\n\nexport function update_stream_description(sub, description, rendered_description) {\n    sub.description = description;\n    sub.rendered_description = rendered_description;\n    stream_data.clean_up_description(sub);\n\n    // Update stream row\n    const $sub_row = row_for_stream_id(sub.stream_id);\n    $sub_row.find(\".description\").html(util.clean_user_content_links(sub.rendered_description));\n\n    // Update stream settings\n    stream_edit.update_stream_description(sub);\n\n    // Update navbar if needed\n    message_view_header.maybe_rerender_title_area_for_stream(sub);\n}\n\nexport function update_stream_privacy(slim_sub, values) {\n    stream_data.update_stream_privacy(slim_sub, values);\n    const sub = stream_settings_data.get_sub_for_settings(slim_sub);\n\n    // Update UI elements\n    update_left_panel_row(sub);\n    stream_ui_updates.update_setting_element(sub, \"stream_privacy\");\n    stream_ui_updates.enable_or_disable_permission_settings_in_edit_panel(sub);\n    stream_ui_updates.update_stream_privacy_icon_in_settings(sub);\n    stream_ui_updates.update_settings_button_for_sub(sub);\n    stream_ui_updates.update_add_subscriptions_elements(sub);\n    stream_ui_updates.enable_or_disable_subscribers_tab(sub);\n    stream_list.redraw_stream_privacy(sub);\n\n    const active_data = get_active_data();\n    if (active_data.id === sub.stream_id) {\n        set_right_panel_title(sub);\n    }\n\n    // Update navbar if needed\n    message_view_header.maybe_rerender_title_area_for_stream(sub);\n}\n\nexport function update_stream_post_policy(sub, new_value) {\n    stream_data.update_stream_post_policy(sub, new_value);\n    stream_ui_updates.update_setting_element(sub, \"stream_post_policy\");\n}\n\nexport function update_message_retention_setting(sub, new_value) {\n    stream_data.update_message_retention_setting(sub, new_value);\n    stream_ui_updates.update_setting_element(sub, \"message_retention_days\");\n}\n\nexport function set_color(stream_id, color) {\n    const sub = sub_store.get(stream_id);\n    stream_edit.set_stream_property(sub, \"color\", color);\n}\n\nexport function update_subscribers_ui(sub) {\n    update_left_panel_row(sub);\n    stream_edit_subscribers.update_subscribers_list(sub);\n    message_view_header.maybe_rerender_title_area_for_stream(sub);\n}\n\nexport function add_sub_to_table(sub) {\n    if (is_sub_already_present(sub)) {\n        // If a stream is already listed/added in subscription modal,\n        // display stream in `Subscribed` tab and return.\n        // This can happen in some corner cases (which might\n        // be backend bugs) where a realm administrator is subscribed\n        // to a private stream, in which case they might get two\n        // stream-create events.\n        stream_ui_updates.update_stream_row_in_settings_tab(sub);\n        return;\n    }\n\n    const setting_sub = stream_settings_data.get_sub_for_settings(sub);\n    const html = render_browse_streams_list_item(setting_sub);\n    const $new_row = $(html);\n\n    if (stream_create.get_name() === sub.name) {\n        ui.get_content_element($(\".streams-list\")).prepend($new_row);\n        ui.reset_scrollbar($(\".streams-list\"));\n    } else {\n        ui.get_content_element($(\".streams-list\")).append($new_row);\n    }\n\n    const settings_html = render_stream_settings(sub);\n    ui.get_content_element($(\"#manage_streams_container .settings\")).append($(settings_html));\n\n    if (stream_create.get_name() === sub.name) {\n        // This `stream_create.get_name()` check tells us whether the\n        // stream was just created in this browser window; it's a hack\n        // to work around the server_events code flow not having a\n        // good way to associate with this request because the stream\n        // ID isn't known yet.  These are appended to the top of the\n        // list, so they are more visible.\n        row_for_stream_id(sub.stream_id).trigger(\"click\");\n        stream_create.reset_created_stream();\n    }\n}\n\nexport function remove_stream(stream_id) {\n    // It is possible that row is empty when we deactivate a\n    // stream, but we let jQuery silently handle that.\n    const $row = row_for_stream_id(stream_id);\n    $row.remove();\n    if (hash_util.is_editing_stream(stream_id)) {\n        stream_edit.open_edit_panel_empty();\n    }\n}\n\nexport function update_settings_for_subscribed(slim_sub) {\n    const sub = stream_settings_data.get_sub_for_settings(slim_sub);\n    stream_ui_updates.update_add_subscriptions_elements(sub);\n    $(\n        `.stream_settings_header[data-stream-id='${CSS.escape(\n            sub.stream_id,\n        )}'] #preview-stream-button`,\n    ).show();\n\n    if (is_sub_already_present(sub)) {\n        update_left_panel_row(sub);\n        stream_ui_updates.update_toggler_for_sub(sub);\n        stream_ui_updates.update_stream_row_in_settings_tab(sub);\n        stream_ui_updates.update_settings_button_for_sub(sub);\n        stream_ui_updates.enable_or_disable_permission_settings_in_edit_panel(sub);\n    } else {\n        add_sub_to_table(sub);\n    }\n\n    stream_edit_subscribers.update_subscribers_list(sub);\n\n    // Display the swatch and subscription stream_settings\n    stream_ui_updates.update_regular_sub_settings(sub);\n    stream_ui_updates.update_permissions_banner(sub);\n}\n\nexport function show_active_stream_in_left_panel() {\n    const selected_row = hash_util.get_current_hash_section();\n\n    if (Number.parseFloat(selected_row)) {\n        const $sub_row = row_for_stream_id(selected_row);\n        $sub_row.addClass(\"active\");\n    }\n}\n\nexport function update_settings_for_unsubscribed(slim_sub) {\n    const sub = stream_settings_data.get_sub_for_settings(slim_sub);\n    update_left_panel_row(sub);\n    stream_edit_subscribers.update_subscribers_list(sub);\n    stream_ui_updates.update_toggler_for_sub(sub);\n    stream_ui_updates.update_settings_button_for_sub(sub);\n    stream_ui_updates.update_regular_sub_settings(sub);\n    stream_ui_updates.enable_or_disable_permission_settings_in_edit_panel(sub);\n\n    // If user unsubscribed from private stream then user cannot subscribe to\n    // stream without invitation and cannot add subscribers to stream.\n    if (!stream_data.can_toggle_subscription(sub)) {\n        stream_ui_updates.update_add_subscriptions_elements(sub);\n    }\n    if (page_params.is_guest) {\n        stream_edit.open_edit_panel_empty();\n    }\n\n    // Remove private streams from subscribed streams list.\n    stream_ui_updates.update_stream_row_in_settings_tab(sub);\n    stream_ui_updates.update_permissions_banner(sub);\n}\n\nfunction triage_stream(left_panel_params, sub) {\n    if (left_panel_params.subscribed_only && !sub.subscribed) {\n        // reject non-subscribed streams\n        return \"rejected\";\n    }\n\n    const search_terms = search_util.get_search_terms(left_panel_params.input);\n\n    function match(attr) {\n        const val = sub[attr];\n\n        return search_util.vanilla_match({\n            val,\n            search_terms,\n        });\n    }\n\n    if (match(\"name\")) {\n        return \"name_match\";\n    }\n\n    if (match(\"description\")) {\n        return \"desc_match\";\n    }\n\n    return \"rejected\";\n}\n\nfunction get_stream_id_buckets(stream_ids, left_panel_params) {\n    // When we simplify the settings UI, we can get\n    // rid of the \"others\" bucket.\n\n    const buckets = {\n        name: [],\n        desc: [],\n        other: [],\n    };\n\n    for (const stream_id of stream_ids) {\n        const sub = sub_store.get(stream_id);\n        const match_status = triage_stream(left_panel_params, sub);\n\n        if (match_status === \"name_match\") {\n            buckets.name.push(stream_id);\n        } else if (match_status === \"desc_match\") {\n            buckets.desc.push(stream_id);\n        } else {\n            buckets.other.push(stream_id);\n        }\n    }\n\n    stream_settings_data.sort_for_stream_settings(buckets.name, left_panel_params.sort_order);\n    stream_settings_data.sort_for_stream_settings(buckets.desc, left_panel_params.sort_order);\n\n    return buckets;\n}\n\nexport function render_left_panel_superset() {\n    // For annoying legacy reasons we render all the subs we are\n    // allowed to know about and put them in the DOM, then we do\n    // a second pass where we filter/sort them.\n    const html = blueslip.measure_time(\"render left panel\", () => {\n        const sub_rows = stream_settings_data.get_updated_unsorted_subs();\n\n        const template_data = {\n            subscriptions: sub_rows,\n        };\n\n        return render_browse_streams_list(template_data);\n    });\n\n    ui.get_content_element($(\"#manage_streams_container .streams-list\")).html(html);\n}\n\n// LeftPanelParams { input: String, subscribed_only: Boolean, sort_order: String }\nexport function redraw_left_panel(left_panel_params = get_left_panel_params()) {\n    // We only get left_panel_params passed in from tests.  Real\n    // code calls get_left_panel_params().\n    show_active_stream_in_left_panel();\n\n    function stream_id_for_row(row) {\n        return Number.parseInt($(row).attr(\"data-stream-id\"), 10);\n    }\n\n    const widgets = new Map();\n\n    const stream_ids = [];\n\n    for (const row of $(\"#manage_streams_container .stream-row\")) {\n        const stream_id = stream_id_for_row(row);\n        stream_ids.push(stream_id);\n    }\n\n    const buckets = get_stream_id_buckets(stream_ids, left_panel_params);\n\n    // If we just re-built the DOM from scratch we wouldn't need\n    // all this hidden/notdisplayed logic.\n    const hidden_ids = new Set();\n\n    for (const stream_id of buckets.other) {\n        hidden_ids.add(stream_id);\n    }\n\n    for (const row of $(\"#manage_streams_container .stream-row\")) {\n        const stream_id = stream_id_for_row(row);\n\n        // Below code goes away if we don't do sort-DOM-in-place.\n        if (hidden_ids.has(stream_id)) {\n            $(row).addClass(\"notdisplayed\");\n        } else {\n            $(row).removeClass(\"notdisplayed\");\n        }\n\n        widgets.set(stream_id, $(row).detach());\n    }\n\n    ui.reset_scrollbar($(\"#subscription_overlay .streams-list\"));\n\n    const all_stream_ids = [...buckets.name, ...buckets.desc, ...buckets.other];\n\n    for (const stream_id of all_stream_ids) {\n        ui.get_content_element($(\"#manage_streams_container .streams-list\")).append(\n            widgets.get(stream_id),\n        );\n    }\n    maybe_reset_right_panel();\n\n    // return this for test convenience\n    return [...buckets.name, ...buckets.desc];\n}\n\nlet sort_order = \"by-stream-name\";\n\nexport function get_left_panel_params() {\n    const $search_box = $(\"#stream_filter input[type='text']\");\n    const input = $search_box.expectOne().val().trim();\n    const params = {\n        input,\n        subscribed_only,\n        sort_order,\n    };\n    return params;\n}\n\nexport function maybe_reset_right_panel() {\n    if ($(\".stream-row.active\").hasClass(\"notdisplayed\")) {\n        $(\".right .settings\").hide();\n        $(\".nothing-selected\").show();\n        $(\".stream-row.active\").removeClass(\"active\");\n    }\n}\n\n// Make it explicit that our toggler is not created right away.\nexport let toggler;\n\nexport function switch_stream_tab(tab_name) {\n    /*\n        This switches the stream tab, but it doesn't update\n        the toggler widget.  You may instead want to\n        use `toggler.goto`.\n    */\n\n    if (tab_name === \"all-streams\") {\n        subscribed_only = false;\n    } else if (tab_name === \"subscribed\") {\n        subscribed_only = true;\n    }\n\n    redraw_left_panel();\n    stream_edit.setup_subscriptions_tab_hash(tab_name);\n}\n\nexport function switch_stream_sort(tab_name) {\n    if (\n        tab_name === \"by-stream-name\" ||\n        tab_name === \"by-subscriber-count\" ||\n        tab_name === \"by-weekly-traffic\"\n    ) {\n        sort_order = tab_name;\n    } else {\n        sort_order = \"by-stream-name\";\n    }\n    redraw_left_panel();\n}\n\nexport function setup_page(callback) {\n    // We should strongly consider only setting up the page once,\n    // but I am writing these comments write before a big release,\n    // so it's too risky a change for now.\n    //\n    // The history behind setting up the page from scratch every\n    // time we go into \"Manage streams\" is that we used to have\n    // some live-update issues, so being able to re-launch the\n    // streams page is kind of a workaround for those bugs, since\n    // we will re-populate the widget.\n    //\n    // For now, every time we go back into the widget we'll\n    // continue the strategy that we re-render everything from scratch.\n    // Also, we'll always go back to the \"Subscribed\" tab.\n    function initialize_components() {\n        // Sort by name by default when opening \"Manage streams\".\n        sort_order = \"by-stream-name\";\n        const sort_toggler = components.toggle({\n            values: [\n                {\n                    label_html: `<i class=\"fa fa-sort-alpha-asc\" data-tippy-content=\"${$t({\n                        defaultMessage: \"Sort by name\",\n                    })}\"></i>`,\n                    key: \"by-stream-name\",\n                },\n                {\n                    label_html: `<i class=\"fa fa-user-o\" data-tippy-content=\"${$t({\n                        defaultMessage: \"Sort by number of subscribers\",\n                    })}\"></i>`,\n                    key: \"by-subscriber-count\",\n                },\n                {\n                    label_html: `<i class=\"fa fa-bar-chart\" data-tippy-content=\"${$t({\n                        defaultMessage: \"Sort by estimated weekly traffic\",\n                    })}\"></i>`,\n                    key: \"by-weekly-traffic\",\n                },\n            ],\n            html_class: \"stream_sorter_toggle\",\n            callback(value, key) {\n                switch_stream_sort(key);\n            },\n        });\n\n        $(\"#manage_streams_container .search-container\").prepend(sort_toggler.get());\n\n        // Reset our internal state to reflect that we're initially in\n        // the \"Subscribed\" tab if we're reopening \"Manage streams\".\n        subscribed_only = true;\n        toggler = components.toggle({\n            child_wants_focus: true,\n            values: [\n                {label: $t({defaultMessage: \"Subscribed\"}), key: \"subscribed\"},\n                {label: $t({defaultMessage: \"All streams\"}), key: \"all-streams\"},\n            ],\n            callback(value, key) {\n                switch_stream_tab(key);\n            },\n        });\n\n        if (should_list_all_streams()) {\n            const toggler_elem = toggler.get();\n            $(\"#manage_streams_container .search-container\").prepend(toggler_elem);\n        }\n        if (page_params.is_guest) {\n            toggler.disable_tab(\"all-streams\");\n        }\n\n        // show the \"Stream settings\" header by default.\n        $(\".display-type #stream_settings_title\").show();\n    }\n\n    function populate_and_fill() {\n        $(\"#manage_streams_container\").empty();\n\n        // TODO: Ideally we'd indicate in some way what stream types\n        // the user can create, by showing other options as disabled.\n        const stream_privacy_policy = stream_data.stream_privacy_policy_values.public.code;\n        const template_data = {\n            ask_to_announce_stream: true,\n            can_create_streams:\n                settings_data.user_can_create_private_streams() ||\n                settings_data.user_can_create_public_streams() ||\n                settings_data.user_can_create_web_public_streams(),\n            hide_all_streams: !should_list_all_streams(),\n            max_stream_name_length: page_params.max_stream_name_length,\n            max_stream_description_length: page_params.max_stream_description_length,\n            is_owner: page_params.is_owner,\n            stream_privacy_policy_values: stream_data.stream_privacy_policy_values,\n            stream_privacy_policy,\n            stream_post_policy_values: stream_data.stream_post_policy_values,\n            zulip_plan_is_not_limited: page_params.zulip_plan_is_not_limited,\n            org_level_message_retention_setting:\n                stream_edit.get_display_text_for_realm_message_retention_setting(),\n            upgrade_text_for_wide_organization_logo:\n                page_params.upgrade_text_for_wide_organization_logo,\n            is_business_type_org:\n                page_params.realm_org_type === settings_config.all_org_type_values.business.code,\n            disable_message_retention_setting:\n                !page_params.zulip_plan_is_not_limited || !page_params.is_owner,\n        };\n\n        const rendered = render_stream_settings_overlay(template_data);\n        $(\"#manage_streams_container\").append(rendered);\n\n        render_left_panel_superset();\n        initialize_components();\n        redraw_left_panel();\n        stream_create.set_up_handlers();\n\n        const throttled_redraw_left_panel = _.throttle(redraw_left_panel, 50);\n        $(\"#stream_filter input[type='text']\").on(\"input\", () => {\n            // Debounce filtering in case a user is typing quickly\n            throttled_redraw_left_panel();\n        });\n\n        // When hitting Enter in the stream creation box, we open the\n        // \"create stream\" UI with the stream name prepopulated.  This\n        // is only useful if the user has permission to create\n        // streams, either explicitly via user_can_create_streams, or\n        // implicitly because page_params.realm_is_zephyr_mirror_realm.\n        $(\"#stream_filter input[type='text']\").on(\"keypress\", (e) => {\n            if (!keydown_util.is_enter_event(e)) {\n                return;\n            }\n\n            if (\n                settings_data.user_can_create_private_streams() ||\n                settings_data.user_can_create_public_streams() ||\n                settings_data.user_can_create_web_public_streams() ||\n                page_params.realm_is_zephyr_mirror_realm\n            ) {\n                open_create_stream();\n                e.preventDefault();\n                e.stopPropagation();\n                return;\n            }\n        });\n\n        $(\"#clear_search_stream_name\").on(\"click\", () => {\n            $(\"#stream_filter input[type='text']\").val(\"\");\n            redraw_left_panel();\n        });\n\n        if (callback) {\n            callback();\n        }\n    }\n\n    populate_and_fill();\n\n    if (!should_list_all_streams()) {\n        $(\".create_stream_button\").val($t({defaultMessage: \"Subscribe\"}));\n    }\n}\n\nexport function switch_to_stream_row(stream_id) {\n    const $stream_row = row_for_stream_id(stream_id);\n    const $container = $(\".streams-list\");\n\n    get_active_data().$row.removeClass(\"active\");\n    $stream_row.addClass(\"active\");\n\n    scroll_util.scroll_element_into_container($stream_row, $container);\n\n    // It's dubious that we need this timeout any more.\n    setTimeout(() => {\n        if (stream_id === get_active_data().id) {\n            $stream_row.trigger(\"click\");\n        }\n    }, 100);\n}\n\nfunction show_right_section() {\n    $(\".right\").addClass(\"show\");\n    $(\".subscriptions-header\").addClass(\"slide-left\");\n}\n\nexport function change_state(section) {\n    // if in #streams/new form.\n    if (section === \"new\") {\n        if (!page_params.is_guest) {\n            do_open_create_stream();\n            show_right_section();\n        } else {\n            toggler.goto(\"subscribed\");\n        }\n        return;\n    }\n\n    if (section === \"all\") {\n        toggler.goto(\"all-streams\");\n        return;\n    }\n\n    if (section === \"subscribed\") {\n        toggler.goto(\"subscribed\");\n        return;\n    }\n\n    // if the section is a valid number.\n    if (/\\d+/.test(section)) {\n        const stream_id = Number.parseInt(section, 10);\n        // Guest users can not access unsubscribed streams\n        // So redirect guest users to 'subscribed' tab\n        // for any unsubscribed stream settings hash\n        if (page_params.is_guest && !stream_data.is_subscribed(stream_id)) {\n            toggler.goto(\"subscribed\");\n        } else {\n            show_right_section();\n            switch_to_stream_row(stream_id);\n        }\n        return;\n    }\n\n    blueslip.warn(\"invalid section for streams: \" + section);\n    toggler.goto(\"subscribed\");\n}\n\nexport function launch(section) {\n    setup_page(() => {\n        overlays.open_overlay({\n            name: \"subscriptions\",\n            $overlay: $(\"#subscription_overlay\"),\n            on_close() {\n                browser_history.exit_overlay();\n                $(\".colorpicker\").spectrum(\"destroy\");\n            },\n        });\n        change_state(section);\n    });\n    if (!get_active_data().id) {\n        if (section === \"new\") {\n            $(\"#create_stream_name\").trigger(\"focus\");\n        } else {\n            $(\"#search_stream_name\").trigger(\"focus\");\n        }\n    }\n}\n\nexport function switch_rows(event) {\n    const active_data = get_active_data();\n    let $switch_row;\n    if (hash_util.is_create_new_stream_narrow()) {\n        // Prevent switching stream rows when creating a new stream\n        return false;\n    } else if (!active_data.id || active_data.$row.hasClass(\"notdisplayed\")) {\n        $switch_row = $(\"div.stream-row:not(.notdisplayed)\").first();\n        if ($(\"#search_stream_name\").is(\":focus\")) {\n            $(\"#search_stream_name\").trigger(\"blur\");\n        }\n    } else {\n        if (event === \"up_arrow\") {\n            $switch_row = active_data.$row.prevAll().not(\".notdisplayed\").first();\n        } else if (event === \"down_arrow\") {\n            $switch_row = active_data.$row.nextAll().not(\".notdisplayed\").first();\n        }\n        if ($(\"#search_stream_name\").is(\":focus\")) {\n            // remove focus from Filter streams input instead of switching rows\n            // if Filter streams input is focused\n            return $(\"#search_stream_name\").trigger(\"blur\");\n        }\n    }\n\n    const row_data = get_row_data($switch_row);\n    if (row_data) {\n        const stream_id = row_data.id;\n        switch_to_stream_row(stream_id);\n    } else if (event === \"up_arrow\" && !row_data) {\n        $(\"#search_stream_name\").trigger(\"focus\");\n    }\n    return true;\n}\n\nexport function keyboard_sub() {\n    const active_data = get_active_data();\n    const row_data = get_row_data(active_data.$row);\n    if (row_data) {\n        sub_or_unsub(row_data.object);\n    }\n}\n\nexport function toggle_view(event) {\n    const active_data = get_active_data();\n    const stream_filter_tab = active_data.$tabs.first().text();\n\n    if (event === \"right_arrow\" && stream_filter_tab === \"Subscribed\") {\n        toggler.goto(\"all-streams\");\n    } else if (event === \"left_arrow\" && stream_filter_tab === \"All streams\") {\n        toggler.goto(\"subscribed\");\n    }\n}\n\nexport function view_stream() {\n    const active_data = get_active_data();\n    const row_data = get_row_data(active_data.$row);\n    if (row_data) {\n        const stream_narrow_hash =\n            \"#narrow/stream/\" + hash_util.encode_stream_name(row_data.object.name);\n        browser_history.go_to_location(stream_narrow_hash);\n    }\n}\n\n/* For the given stream_row, remove the tick and replace by a spinner. */\nfunction display_subscribe_toggle_spinner(stream_row) {\n    /* Prevent sending multiple requests by removing the button class. */\n    $(stream_row).find(\".check\").removeClass(\"sub_unsub_button\");\n\n    /* Hide the tick. */\n    const $tick = $(stream_row).find(\"svg\");\n    $tick.addClass(\"hide\");\n\n    /* Add a spinner to show the request is in process. */\n    const $spinner = $(stream_row).find(\".sub_unsub_status\").expectOne();\n    $spinner.show();\n    loading.make_indicator($spinner);\n}\n\n/* For the given stream_row, add the tick and delete the spinner. */\nfunction hide_subscribe_toggle_spinner(stream_row) {\n    /* Re-enable the button to handle requests. */\n    $(stream_row).find(\".check\").addClass(\"sub_unsub_button\");\n\n    /* Show the tick. */\n    const $tick = $(stream_row).find(\"svg\");\n    $tick.removeClass(\"hide\");\n\n    /* Destroy the spinner. */\n    const $spinner = $(stream_row).find(\".sub_unsub_status\").expectOne();\n    loading.destroy_indicator($spinner);\n}\n\nfunction ajaxSubscribe(stream, color, $stream_row) {\n    // Subscribe yourself to a single stream.\n    let true_stream_name;\n\n    if ($stream_row !== undefined) {\n        display_subscribe_toggle_spinner($stream_row);\n    }\n    return channel.post({\n        url: \"/json/users/me/subscriptions\",\n        data: {subscriptions: JSON.stringify([{name: stream, color}])},\n        success(resp, statusText, xhr) {\n            if (overlays.streams_open()) {\n                $(\"#create_stream_name\").val(\"\");\n            }\n\n            const res = JSON.parse(xhr.responseText);\n            if (!$.isEmptyObject(res.already_subscribed)) {\n                // Display the canonical stream capitalization.\n                true_stream_name = res.already_subscribed[people.my_current_email()][0];\n                ui_report.success(\n                    $t_html(\n                        {defaultMessage: \"Already subscribed to {stream}\"},\n                        {stream: true_stream_name},\n                    ),\n                    $(\".stream_change_property_info\"),\n                );\n            }\n            // The rest of the work is done via the subscribe event we will get\n\n            if ($stream_row !== undefined) {\n                hide_subscribe_toggle_spinner($stream_row);\n            }\n        },\n        error(xhr) {\n            if ($stream_row !== undefined) {\n                hide_subscribe_toggle_spinner($stream_row);\n            }\n            ui_report.error(\n                $t_html({defaultMessage: \"Error adding subscription\"}),\n                xhr,\n                $(\".stream_change_property_info\"),\n            );\n        },\n    });\n}\n\nfunction ajaxUnsubscribe(sub, $stream_row) {\n    // TODO: use stream_id when backend supports it\n    if ($stream_row !== undefined) {\n        display_subscribe_toggle_spinner($stream_row);\n    }\n    return channel.del({\n        url: \"/json/users/me/subscriptions\",\n        data: {subscriptions: JSON.stringify([sub.name])},\n        success() {\n            $(\".stream_change_property_info\").hide();\n            // The rest of the work is done via the unsubscribe event we will get\n\n            if ($stream_row !== undefined) {\n                hide_subscribe_toggle_spinner($stream_row);\n            }\n        },\n        error(xhr) {\n            if ($stream_row !== undefined) {\n                hide_subscribe_toggle_spinner($stream_row);\n            }\n            ui_report.error(\n                $t_html({defaultMessage: \"Error removing subscription\"}),\n                xhr,\n                $(\".stream_change_property_info\"),\n            );\n        },\n    });\n}\n\nexport function do_open_create_stream() {\n    // Only call this directly for hash changes.\n    // Prefer open_create_stream().\n\n    const stream = $(\"#search_stream_name\").val().trim();\n\n    if (!should_list_all_streams()) {\n        // Realms that don't allow listing streams should simply be subscribed to.\n        stream_create.set_name(stream);\n        ajaxSubscribe($(\"#search_stream_name\").val());\n        return;\n    }\n\n    stream_create.new_stream_clicked(stream);\n}\n\nexport function open_create_stream() {\n    do_open_create_stream();\n    browser_history.update(\"#streams/new\");\n}\n\nexport function unsubscribe_from_private_stream(sub) {\n    const html_body = render_unsubscribe_private_stream_modal({\n        message: $t({\n            defaultMessage: \"Once you leave this stream, you will not be able to rejoin.\",\n        }),\n    });\n\n    function unsubscribe_from_stream() {\n        let $stream_row;\n        if (overlays.streams_open()) {\n            $stream_row = $(\n                \"#manage_streams_container div.stream-row[data-stream-id='\" + sub.stream_id + \"']\",\n            );\n        }\n\n        ajaxUnsubscribe(sub, $stream_row);\n    }\n\n    confirm_dialog.launch({\n        html_heading: $t_html(\n            {defaultMessage: \"Unsubscribe from {stream_name}\"},\n            {stream_name: sub.name},\n        ),\n        html_body,\n        on_click: unsubscribe_from_stream,\n    });\n}\n\nexport function sub_or_unsub(sub, $stream_row) {\n    if (sub.subscribed) {\n        // TODO: This next line should allow guests to access web-public streams.\n        if (sub.invite_only || page_params.is_guest) {\n            unsubscribe_from_private_stream(sub);\n            return;\n        }\n        ajaxUnsubscribe(sub, $stream_row);\n    } else {\n        ajaxSubscribe(sub.name, sub.color, $stream_row);\n    }\n}\n\nexport function update_web_public_stream_privacy_option_state($container) {\n    const $web_public_stream_elem = $container.find(\n        `input[value='${CSS.escape(stream_data.stream_privacy_policy_values.web_public.code)}']`,\n    );\n\n    const for_stream_edit_panel = $container.attr(\"id\") === \"stream_permission_settings\";\n    if (for_stream_edit_panel) {\n        const stream_id = Number.parseInt(\n            $container.closest(\".subscription_settings.show\").attr(\"data-stream-id\"),\n            10,\n        );\n        const sub = sub_store.get(stream_id);\n        if (!stream_data.can_change_permissions(sub)) {\n            // We do not want to enable the already disabled web-public option\n            // in stream-edit panel if user is not allowed to change stream\n            // privacy at all.\n            return;\n        }\n    }\n\n    if (\n        !page_params.server_web_public_streams_enabled ||\n        !page_params.realm_enable_spectator_access\n    ) {\n        if (for_stream_edit_panel && $web_public_stream_elem.is(\":checked\")) {\n            // We do not hide web-public option in the \"Change privacy\" modal if\n            // stream is web-public already. The option is disabled in this case.\n            $web_public_stream_elem.prop(\"disabled\", true);\n            return;\n        }\n        $web_public_stream_elem.closest(\".settings-radio-input-parent\").hide();\n        $container\n            .find(\".stream-privacy-values .settings-radio-input-parent:visible\")\n            .last()\n            .css(\"border-bottom\", \"none\");\n    } else {\n        if (!$web_public_stream_elem.is(\":visible\")) {\n            $container\n                .find(\".stream-privacy-values .settings-radio-input-parent:visible\")\n                .last()\n                .css(\"border-bottom\", \"\");\n            $web_public_stream_elem.closest(\".settings-radio-input-parent\").show();\n        }\n        $web_public_stream_elem.prop(\n            \"disabled\",\n            !settings_data.user_can_create_web_public_streams(),\n        );\n    }\n}\n\nexport function update_public_stream_privacy_option_state($container) {\n    const $public_stream_elem = $container.find(\n        `input[value='${CSS.escape(stream_data.stream_privacy_policy_values.public.code)}']`,\n    );\n    $public_stream_elem.prop(\"disabled\", !settings_data.user_can_create_public_streams());\n}\n\nexport function update_private_stream_privacy_option_state($container) {\n    // Disable both \"Private, shared history\" and \"Private, protected history\" options.\n    const $private_stream_elem = $container.find(\n        `input[value='${CSS.escape(stream_data.stream_privacy_policy_values.private.code)}']`,\n    );\n    const $private_with_public_history_elem = $container.find(\n        `input[value='${CSS.escape(\n            stream_data.stream_privacy_policy_values.private_with_public_history.code,\n        )}']`,\n    );\n\n    $private_stream_elem.prop(\"disabled\", !settings_data.user_can_create_private_streams());\n    $private_with_public_history_elem.prop(\n        \"disabled\",\n        !settings_data.user_can_create_private_streams(),\n    );\n}\n\nexport function hide_or_disable_stream_privacy_options_if_required($container) {\n    update_web_public_stream_privacy_option_state($container);\n\n    update_public_stream_privacy_option_state($container);\n\n    update_private_stream_privacy_option_state($container);\n}\n\nexport function update_stream_privacy_choices(policy) {\n    if (!overlays.streams_open()) {\n        return;\n    }\n    const stream_edit_panel_opened = $(\"#stream_permission_settings\").is(\":visible\");\n    const stream_creation_form_opened = $(\"#stream-creation\").is(\":visible\");\n\n    if (!stream_edit_panel_opened && !stream_creation_form_opened) {\n        return;\n    }\n    let $container = $(\"#stream-creation\");\n    if (stream_edit_panel_opened) {\n        $container = $(\"#stream_permission_settings\");\n    }\n\n    if (policy === \"create_private_stream_policy\") {\n        update_private_stream_privacy_option_state($container);\n    }\n    if (policy === \"create_public_stream_policy\") {\n        update_public_stream_privacy_option_state($container);\n    }\n    if (policy === \"create_web_public_stream_policy\") {\n        update_web_public_stream_privacy_option_state($container);\n    }\n}\n\nexport function initialize() {\n    $(\"#manage_streams_container\").on(\"click\", \".create_stream_button\", (e) => {\n        e.preventDefault();\n        open_create_stream();\n    });\n\n    $(\"#manage_streams_container\").on(\"click\", \"#stream_creation_form [data-dismiss]\", (e) => {\n        e.preventDefault();\n        // we want to make sure that the click is not just a simulated\n        // click; this fixes an issue where hitting \"Enter\" would\n        // trigger this code path due to bootstrap magic.\n        if (e.clientY !== 0) {\n            show_subs_pane.nothing_selected();\n        }\n    });\n\n    $(\"#manage_streams_container\").on(\"click\", \".email-address\", function () {\n        selectText(this);\n    });\n\n    $(\"#manage_streams_container\").on(\n        \"click\",\n        \".stream-row, .create_stream_button\",\n        show_right_section,\n    );\n\n    $(\"#manage_streams_container\").on(\"click\", \".fa-chevron-left\", () => {\n        $(\".right\").removeClass(\"show\");\n        $(\".subscriptions-header\").removeClass(\"slide-left\");\n    });\n}\n","import * as stream_data from \"./stream_data\";\nimport * as sub_store from \"./sub_store\";\nimport * as util from \"./util\";\n\nlet previous_pinned;\nlet previous_normal;\nlet previous_dormant;\nlet previous_muted_active;\nlet previous_muted_pinned;\nlet all_streams = [];\n\nexport function get_streams() {\n    const sorted_streams = all_streams.map((stream_id) =>\n        stream_data.maybe_get_stream_name(stream_id),\n    );\n    return sorted_streams;\n}\n\nfunction compare_function(a, b) {\n    const stream_a = sub_store.get(a);\n    const stream_b = sub_store.get(b);\n\n    const stream_name_a = stream_a ? stream_a.name : \"\";\n    const stream_name_b = stream_b ? stream_b.name : \"\";\n\n    return util.strcmp(stream_name_a, stream_name_b);\n}\n\nexport function sort_groups(streams, search_term) {\n    const stream_id_to_name = (stream) => sub_store.get(stream).name;\n    // Use -, _ and / as word separators apart from the default space character\n    const word_separator_regex = /[\\s/_-]/;\n    streams = util.filter_by_word_prefix_match(\n        streams,\n        search_term,\n        stream_id_to_name,\n        word_separator_regex,\n    );\n\n    function is_normal(sub) {\n        return stream_data.is_active(sub);\n    }\n\n    const pinned_streams = [];\n    const normal_streams = [];\n    const muted_pinned_streams = [];\n    const muted_active_streams = [];\n    const dormant_streams = [];\n\n    for (const stream of streams) {\n        const sub = sub_store.get(stream);\n        const pinned = sub.pin_to_top;\n        if (pinned) {\n            if (!sub.is_muted) {\n                pinned_streams.push(stream);\n            } else {\n                muted_pinned_streams.push(stream);\n            }\n        } else if (is_normal(sub)) {\n            if (!sub.is_muted) {\n                normal_streams.push(stream);\n            } else {\n                muted_active_streams.push(stream);\n            }\n        } else {\n            dormant_streams.push(stream);\n        }\n    }\n\n    pinned_streams.sort(compare_function);\n    normal_streams.sort(compare_function);\n    muted_pinned_streams.sort(compare_function);\n    muted_active_streams.sort(compare_function);\n    dormant_streams.sort(compare_function);\n\n    const same_as_before =\n        previous_pinned !== undefined &&\n        util.array_compare(previous_pinned, pinned_streams) &&\n        util.array_compare(previous_normal, normal_streams) &&\n        util.array_compare(previous_muted_pinned, muted_pinned_streams) &&\n        util.array_compare(previous_muted_active, muted_active_streams) &&\n        util.array_compare(previous_dormant, dormant_streams);\n\n    if (!same_as_before) {\n        previous_pinned = pinned_streams;\n        previous_normal = normal_streams;\n        previous_muted_pinned = muted_pinned_streams;\n        previous_muted_active = muted_active_streams;\n        previous_dormant = dormant_streams;\n\n        all_streams = pinned_streams.concat(\n            muted_pinned_streams,\n            normal_streams,\n            muted_active_streams,\n            dormant_streams,\n        );\n    }\n\n    return {\n        same_as_before,\n        pinned_streams,\n        normal_streams,\n        dormant_streams,\n        muted_pinned_streams,\n        muted_active_streams,\n    };\n}\n\nfunction maybe_get_stream_id(i) {\n    if (i < 0 || i >= all_streams.length) {\n        return undefined;\n    }\n\n    return all_streams[i];\n}\n\nexport function first_stream_id() {\n    return maybe_get_stream_id(0);\n}\n\nexport function prev_stream_id(stream_id) {\n    const i = all_streams.indexOf(stream_id);\n\n    if (i < 0) {\n        return undefined;\n    }\n\n    return maybe_get_stream_id(i - 1);\n}\n\nexport function next_stream_id(stream_id) {\n    const i = all_streams.indexOf(stream_id);\n\n    if (i < 0) {\n        return undefined;\n    }\n\n    return maybe_get_stream_id(i + 1);\n}\n","import {all_messages_data} from \"./all_messages_data\";\nimport {FoldDict} from \"./fold_dict\";\nimport * as message_util from \"./message_util\";\nimport * as sub_store from \"./sub_store\";\nimport * as unread from \"./unread\";\n\nconst stream_dict = new Map(); // stream_id -> PerStreamHistory object\nconst fetched_stream_ids = new Set();\n\nexport function all_topics_in_cache(sub) {\n    // Checks whether this browser's cache of contiguous messages\n    // (used to locally render narrows) in all_messages_data has all\n    // messages from a given stream, and thus all historical topics\n    // for it.  Because all_messages_data is a range, we just need to\n    // compare it to the range of history on the stream.\n\n    // If the cache isn't initialized, it's a clear false.\n    if (all_messages_data === undefined || all_messages_data.empty()) {\n        return false;\n    }\n\n    // If the cache doesn't have the latest messages, we can't be sure\n    // we have all topics.\n    if (!all_messages_data.fetch_status.has_found_newest()) {\n        return false;\n    }\n\n    if (sub.first_message_id === null) {\n        // If the stream has no message history, we have it all\n        // vacuously.  This should be a very rare condition, since\n        // stream creation sends a message.\n        return true;\n    }\n\n    // Now, we can just compare the first cached message to the first\n    // message ID in the stream; if it's older, we're good, otherwise,\n    // we might be missing the oldest topics in this stream in our\n    // cache.\n    const first_cached_message = all_messages_data.first();\n    return first_cached_message.id <= sub.first_message_id;\n}\n\nexport function is_complete_for_stream_id(stream_id) {\n    if (fetched_stream_ids.has(stream_id)) {\n        return true;\n    }\n\n    const sub = sub_store.get(stream_id);\n    const in_cache = all_topics_in_cache(sub);\n\n    if (in_cache) {\n        /*\n            If the stream is cached, we can add it to\n            fetched_stream_ids.  Note that for the opposite\n            scenario, we don't delete from\n            fetched_stream_ids, because we may just be\n            waiting for the initial message fetch.\n        */\n        fetched_stream_ids.add(stream_id);\n    }\n\n    return in_cache;\n}\n\nexport function stream_has_topics(stream_id) {\n    if (!stream_dict.has(stream_id)) {\n        return false;\n    }\n\n    const history = stream_dict.get(stream_id);\n\n    return history.has_topics();\n}\n\nexport class PerStreamHistory {\n    /*\n        For a given stream, this structure has a dictionary of topics.\n        The main getter of this object is get_recent_topic_names, and\n        we just sort on the fly every time we are called.\n\n        Attributes for a topic are:\n        * message_id: The latest message_id in the topic.  Only usable\n          for imprecise applications like sorting.  The message_id\n          cannot be fully accurate given message editing and deleting\n          (as we don't have a way to handle the latest message in a\n          stream having its stream edited or deleted).\n\n          TODO: We can probably fix this limitation by doing a\n          single-message `GET /messages` query with anchor=\"latest\",\n          num_before=0, num_after=0, to update this field when its\n          value becomes ambiguous.  Or probably better to avoid a\n          thundering herd (of a fast query), having the server send\n          the data needed to do this update in stream/topic-edit and\n          delete events (just the new max_message_id for the relevant\n          topic would likely suffice, though we need to think about\n          private stream corner cases).\n        * pretty_name: The topic_name, with original case.\n        * historical: Whether the user actually received any messages in\n          the topic (has UserMessage rows) or is just viewing the stream.\n        * count: Number of known messages in the topic.  Used to detect\n          when the last messages in a topic were moved to other topics or\n          deleted.\n    */\n\n    topics = new FoldDict();\n    // Most recent message ID for the stream.\n    max_message_id = 0;\n\n    constructor(stream_id) {\n        this.stream_id = stream_id;\n    }\n\n    has_topics() {\n        return this.topics.size !== 0;\n    }\n\n    update_stream_max_message_id(message_id) {\n        if (message_id > this.max_message_id) {\n            this.max_message_id = message_id;\n        }\n    }\n\n    add_or_update({topic_name, message_id = 0}) {\n        message_id = Number.parseInt(message_id, 10);\n        this.update_stream_max_message_id(message_id);\n\n        const existing = this.topics.get(topic_name);\n\n        if (!existing) {\n            this.topics.set(topic_name, {\n                message_id,\n                pretty_name: topic_name,\n                historical: false,\n                count: 1,\n            });\n            return;\n        }\n\n        if (!existing.historical) {\n            existing.count += 1;\n        }\n\n        if (message_id > existing.message_id) {\n            existing.message_id = message_id;\n            existing.pretty_name = topic_name;\n        }\n    }\n\n    maybe_remove(topic_name, num_messages) {\n        const existing = this.topics.get(topic_name);\n\n        if (!existing) {\n            return;\n        }\n\n        if (existing.historical) {\n            // We can't trust that a topic rename applied to\n            // the entire history of historical topic, so we\n            // will always leave it in the sidebar.\n            return;\n        }\n\n        if (existing.count <= num_messages) {\n            this.topics.delete(topic_name);\n            return;\n        }\n\n        existing.count -= num_messages;\n    }\n\n    add_history(server_history) {\n        // This method populates historical topics from the\n        // server.  We have less data about these than the\n        // client can maintain for newer topics.\n\n        for (const obj of server_history) {\n            const topic_name = obj.name;\n            const message_id = obj.max_id;\n\n            const existing = this.topics.get(topic_name);\n\n            if (existing && !existing.historical) {\n                // Trust out local data more, since it\n                // maintains counts.\n                continue;\n            }\n\n            // If we get here, we are either finding out about\n            // the topic for the first time, or we are getting\n            // more current data for it.\n\n            this.topics.set(topic_name, {\n                message_id,\n                pretty_name: topic_name,\n                historical: true,\n            });\n            this.update_stream_max_message_id(message_id);\n        }\n    }\n\n    get_recent_topic_names() {\n        const my_recents = Array.from(this.topics.values());\n\n        /* Add any older topics with unreads that may not be present\n         * in our local cache. */\n        const missing_topics = unread.get_missing_topics({\n            stream_id: this.stream_id,\n            topic_dict: this.topics,\n        });\n\n        const recents = my_recents.concat(missing_topics);\n\n        recents.sort((a, b) => b.message_id - a.message_id);\n\n        const names = recents.map((obj) => obj.pretty_name);\n\n        return names;\n    }\n\n    get_max_message_id() {\n        return this.max_message_id;\n    }\n}\n\nexport function remove_messages(opts) {\n    const stream_id = opts.stream_id;\n    const topic_name = opts.topic_name;\n    const num_messages = opts.num_messages;\n    const max_removed_msg_id = opts.max_removed_msg_id;\n    const history = stream_dict.get(stream_id);\n\n    // This is the special case of \"removing\" a message from\n    // a topic, which happens when we edit topics.\n\n    if (!history) {\n        return;\n    }\n\n    // This is the normal case of an incoming message.\n    history.maybe_remove(topic_name, num_messages);\n\n    const existing_topic = history.topics.get(topic_name);\n    if (!existing_topic) {\n        return;\n    }\n\n    // Update max_message_id in topic\n    if (existing_topic.message_id <= max_removed_msg_id) {\n        const msgs_in_topic = message_util.get_messages_in_topic(stream_id, topic_name);\n        let max_message_id = 0;\n        for (const msg of msgs_in_topic) {\n            if (msg.id > max_message_id) {\n                max_message_id = msg.id;\n            }\n        }\n        existing_topic.message_id = max_message_id;\n    }\n\n    // Update max_message_id in stream\n    if (history.max_message_id <= max_removed_msg_id) {\n        history.max_message_id = message_util.get_max_message_id_in_stream(stream_id);\n    }\n}\n\nexport function find_or_create(stream_id) {\n    let history = stream_dict.get(stream_id);\n\n    if (!history) {\n        history = new PerStreamHistory(stream_id);\n        stream_dict.set(stream_id, history);\n    }\n\n    return history;\n}\n\nexport function add_message(opts) {\n    const stream_id = opts.stream_id;\n    const message_id = opts.message_id;\n    const topic_name = opts.topic_name;\n\n    const history = find_or_create(stream_id);\n\n    history.add_or_update({\n        topic_name,\n        message_id,\n    });\n}\n\nexport function add_history(stream_id, server_history) {\n    const history = find_or_create(stream_id);\n    history.add_history(server_history);\n    fetched_stream_ids.add(stream_id);\n}\n\nexport function has_history_for(stream_id) {\n    return fetched_stream_ids.has(stream_id);\n}\n\nexport function get_recent_topic_names(stream_id) {\n    const history = find_or_create(stream_id);\n\n    return history.get_recent_topic_names();\n}\n\nexport function get_max_message_id(stream_id) {\n    const history = find_or_create(stream_id);\n\n    return history.get_max_message_id();\n}\n\nexport function reset() {\n    // This is only used by tests.\n    stream_dict.clear();\n    fetched_stream_ids.clear();\n}\n","import * as channel from \"./channel\";\nimport * as stream_topic_history from \"./stream_topic_history\";\n\nexport function get_server_history(stream_id, on_success) {\n    if (stream_topic_history.has_history_for(stream_id)) {\n        on_success();\n        return;\n    }\n\n    const url = \"/json/users/me/\" + stream_id + \"/topics\";\n\n    channel.get({\n        url,\n        data: {},\n        success(data) {\n            const server_history = data.topics;\n            stream_topic_history.add_history(stream_id, server_history);\n            on_success();\n        },\n    });\n}\n","import $ from \"jquery\";\n\nimport render_stream_privacy_icon from \"../templates/stream_settings/stream_privacy_icon.hbs\";\nimport render_stream_settings_tip from \"../templates/stream_settings/stream_settings_tip.hbs\";\n\nimport * as hash_util from \"./hash_util\";\nimport {$t} from \"./i18n\";\nimport {page_params} from \"./page_params\";\nimport * as settings_org from \"./settings_org\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_edit from \"./stream_edit\";\nimport * as stream_settings_containers from \"./stream_settings_containers\";\nimport * as stream_settings_ui from \"./stream_settings_ui\";\n\nexport function initialize_disable_btn_hint_popover(\n    $btn_wrapper,\n    $popover_btn,\n    $disabled_btn,\n    hint_text,\n) {\n    // Disabled button blocks mouse events(hover) from reaching\n    // to it's parent div element, so popover don't get triggered.\n    // Add css to prevent this.\n    $disabled_btn.css(\"pointer-events\", \"none\");\n    $popover_btn.popover({\n        placement: \"bottom\",\n        content: $(\"<div>\").addClass(\"sub_disable_btn_hint\").text(hint_text).prop(\"outerHTML\"),\n        trigger: \"manual\",\n        html: true,\n        animation: false,\n    });\n\n    $btn_wrapper.on(\"mouseover\", (e) => {\n        $popover_btn.popover(\"show\");\n        e.stopPropagation();\n    });\n\n    $btn_wrapper.on(\"mouseout\", (e) => {\n        $popover_btn.popover(\"hide\");\n        e.stopPropagation();\n    });\n}\n\nexport function initialize_cant_subscribe_popover(sub) {\n    const $button_wrapper = stream_settings_containers\n        .get_edit_container(sub)\n        .find(\".sub_unsub_button_wrapper\");\n    const $settings_button = stream_settings_ui.settings_button_for_sub(sub);\n    initialize_disable_btn_hint_popover(\n        $button_wrapper,\n        $settings_button,\n        $settings_button,\n        $t({defaultMessage: \"Only stream members can add users to a private stream\"}),\n    );\n}\n\nexport function update_toggler_for_sub(sub) {\n    if (!hash_util.is_editing_stream(sub.stream_id)) {\n        return;\n    }\n    if (sub.subscribed) {\n        stream_edit.toggler.enable_tab(\"personal_settings\");\n        stream_edit.toggler.goto(stream_edit.select_tab);\n    } else {\n        if (stream_edit.select_tab === \"personal_settings\") {\n            // Go to the general settings tab, if the user is not\n            // subscribed. Also preserve the previous selected tab,\n            // to render next time a stream row is selected.\n            stream_edit.toggler.goto(\"general_settings\");\n        } else {\n            stream_edit.toggler.goto(stream_edit.select_tab);\n        }\n        stream_edit.toggler.disable_tab(\"personal_settings\");\n    }\n    enable_or_disable_subscribers_tab(sub);\n}\n\nexport function enable_or_disable_subscribers_tab(sub) {\n    if (!hash_util.is_editing_stream(sub.stream_id)) {\n        return;\n    }\n\n    if (!stream_data.can_view_subscribers(sub)) {\n        stream_edit.toggler.disable_tab(\"subscriber_settings\");\n        if (stream_edit.select_tab === \"subscriber_settings\") {\n            stream_edit.toggler.goto(\"general_settings\");\n        }\n        return;\n    }\n\n    stream_edit.toggler.enable_tab(\"subscriber_settings\");\n}\n\nexport function update_settings_button_for_sub(sub) {\n    // This is for the Subscribe/Unsubscribe button in the right panel.\n    const $settings_button = stream_settings_ui.settings_button_for_sub(sub);\n    if (sub.subscribed) {\n        $settings_button.text($t({defaultMessage: \"Unsubscribe\"})).removeClass(\"unsubscribed\");\n    } else {\n        $settings_button.text($t({defaultMessage: \"Subscribe\"})).addClass(\"unsubscribed\");\n    }\n    if (stream_data.can_toggle_subscription(sub)) {\n        $settings_button.prop(\"disabled\", false);\n        $settings_button.popover(\"destroy\");\n        $settings_button.css(\"pointer-events\", \"\");\n    } else {\n        $settings_button.attr(\"title\", \"\");\n        initialize_cant_subscribe_popover(sub);\n        $settings_button.prop(\"disabled\", true);\n    }\n}\n\nexport function update_regular_sub_settings(sub) {\n    // These are in the right panel.\n    if (!hash_util.is_editing_stream(sub.stream_id)) {\n        return;\n    }\n    const $settings = $(`.subscription_settings[data-stream-id='${CSS.escape(sub.stream_id)}']`);\n    if (sub.subscribed) {\n        $settings.find(\".personal_settings\").addClass(\"in\");\n        $settings.find(\".stream-email-box\").show();\n    } else {\n        $settings.find(\".personal_settings\").removeClass(\"in\");\n        $settings.find(\".stream-email-box\").hide();\n    }\n}\n\nexport function enable_or_disable_permission_settings_in_edit_panel(sub) {\n    if (!hash_util.is_editing_stream(sub.stream_id)) {\n        return;\n    }\n\n    const $stream_settings = stream_settings_containers.get_edit_container(sub);\n\n    const $general_settings_container = $stream_settings.find($(\"#stream_permission_settings\"));\n    $general_settings_container\n        .find(\"input, select\")\n        .prop(\"disabled\", !sub.can_change_stream_permissions);\n\n    if (!sub.can_change_stream_permissions) {\n        return;\n    }\n\n    const disable_message_retention_setting =\n        !page_params.zulip_plan_is_not_limited || !page_params.is_owner;\n    $stream_settings\n        .find(\".stream_message_retention_setting\")\n        .prop(\"disabled\", disable_message_retention_setting);\n    $stream_settings\n        .find(\".message-retention-setting-custom-input\")\n        .prop(\"disabled\", disable_message_retention_setting);\n\n    stream_settings_ui.update_web_public_stream_privacy_option_state(\n        $(\"#stream_permission_settings\"),\n    );\n}\n\nexport function update_stream_privacy_icon_in_settings(sub) {\n    if (!hash_util.is_editing_stream(sub.stream_id)) {\n        return;\n    }\n\n    const $stream_settings = stream_settings_containers.get_edit_container(sub);\n\n    $stream_settings.find(\".general_settings .large-icon\").replaceWith(\n        render_stream_privacy_icon({\n            invite_only: sub.invite_only,\n            color: sub.color,\n            is_web_public: sub.is_web_public,\n        }),\n    );\n}\n\nexport function update_permissions_banner(sub) {\n    const $settings = $(`.subscription_settings[data-stream-id='${CSS.escape(sub.stream_id)}']`);\n\n    const rendered_tip = render_stream_settings_tip(sub);\n    $settings.find(\".stream-settings-tip-container\").html(rendered_tip);\n}\n\nexport function update_notification_setting_checkbox(notification_name) {\n    // This is in the right panel (Personal settings).\n    const $stream_row = $(\"#manage_streams_container .stream-row.active\");\n    if (!$stream_row.length) {\n        return;\n    }\n    const stream_id = $stream_row.data(\"stream-id\");\n    $(`#${CSS.escape(notification_name)}_${CSS.escape(stream_id)}`).prop(\n        \"checked\",\n        stream_data.receives_notifications(stream_id, notification_name),\n    );\n}\n\nexport function update_stream_row_in_settings_tab(sub) {\n    // This is in the left panel.\n    // This function display/hide stream row in stream settings tab,\n    // used to display immediate effect of add/removal subscription event.\n    // If user is subscribed to stream, it will show sub row under\n    // \"Subscribed\" tab, otherwise if stream is not public hide\n    // stream row under tab.\n    if (stream_settings_ui.is_subscribed_stream_tab_active()) {\n        const $sub_row = stream_settings_ui.row_for_stream_id(sub.stream_id);\n        if (sub.subscribed) {\n            $sub_row.removeClass(\"notdisplayed\");\n        } else if (sub.invite_only || page_params.is_guest) {\n            $sub_row.addClass(\"notdisplayed\");\n        }\n    }\n}\n\nexport function update_add_subscriptions_elements(sub) {\n    if (!hash_util.is_editing_stream(sub.stream_id)) {\n        return;\n    }\n\n    // We are only concerned with the Subscribers tab for editing streams.\n    const $add_subscribers_container = $(\".edit_subscribers_for_stream .add_subscribers_container\");\n\n    if (page_params.is_guest || page_params.realm_is_zephyr_mirror_realm) {\n        // For guest users, we just hide the add_subscribers feature.\n        $add_subscribers_container.hide();\n        return;\n    }\n\n    // Otherwise, we adjust whether the widgets are disabled based on\n    // whether this user is authorized to add subscribers.\n    const $input_element = $add_subscribers_container.find(\".input\").expectOne();\n    const $button_element = $add_subscribers_container\n        .find('button[name=\"add_subscriber\"]')\n        .expectOne();\n    const allow_user_to_add_subs = sub.can_add_subscribers;\n\n    if (allow_user_to_add_subs) {\n        $input_element.prop(\"disabled\", false);\n        $button_element.prop(\"disabled\", false);\n        $button_element.css(\"pointer-events\", \"\");\n        $input_element.popover(\"destroy\");\n    } else {\n        $input_element.prop(\"disabled\", true);\n        $button_element.prop(\"disabled\", true);\n\n        initialize_disable_btn_hint_popover(\n            $add_subscribers_container,\n            $input_element,\n            $button_element,\n            $t({defaultMessage: \"Only stream members can add users to a private stream\"}),\n        );\n    }\n}\n\nexport function update_setting_element(sub, setting_name) {\n    if (!hash_util.is_editing_stream(sub.stream_id)) {\n        return;\n    }\n\n    const $elem = $(`#id_${CSS.escape(setting_name)}`);\n    settings_org.discard_property_element_changes($elem, false, sub);\n}\n","import * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport * as message_store from \"./message_store\";\nimport * as widgetize from \"./widgetize\";\n\nexport function get_message_events(message) {\n    if (message.locally_echoed) {\n        return undefined;\n    }\n\n    if (!message.submessages) {\n        return undefined;\n    }\n\n    if (message.submessages.length === 0) {\n        return undefined;\n    }\n\n    message.submessages.sort((m1, m2) => Number.parseInt(m1.id, 10) - Number.parseInt(m2.id, 10));\n\n    const events = message.submessages.map((obj) => ({\n        sender_id: obj.sender_id,\n        data: JSON.parse(obj.content),\n    }));\n\n    return events;\n}\n\nexport function process_submessages(in_opts) {\n    // This happens in our rendering path, so we try to limit any\n    // damage that may be triggered by one rogue message.\n    try {\n        return do_process_submessages(in_opts);\n    } catch (error) {\n        blueslip.error(\"in process_submessages: \" + error.message);\n        return undefined;\n    }\n}\n\nexport function do_process_submessages(in_opts) {\n    const message_id = in_opts.message_id;\n    const message = message_store.get(message_id);\n\n    if (!message) {\n        return;\n    }\n\n    const events = get_message_events(message);\n\n    if (!events) {\n        return;\n    }\n\n    if (events[0].sender_id !== message.sender_id) {\n        blueslip.warn(`User ${events[0].sender_id} tried to hijack message ${message.id}`);\n        return;\n    }\n\n    const $row = in_opts.$row;\n\n    // Right now, our only use of submessages is widgets.\n\n    const data = events[0].data;\n\n    if (data === undefined) {\n        return;\n    }\n\n    const widget_type = data.widget_type;\n\n    if (widget_type === undefined) {\n        return;\n    }\n\n    const post_to_server = make_server_callback(message_id);\n\n    widgetize.activate({\n        widget_type,\n        extra_data: data.extra_data,\n        events,\n        $row,\n        message,\n        post_to_server,\n    });\n}\n\nexport function update_message(submsg) {\n    const message = message_store.get(submsg.message_id);\n\n    if (message === undefined) {\n        // This is generally not a problem--the server\n        // can send us events without us having received\n        // the original message, since the server doesn't\n        // track that.\n        return;\n    }\n\n    if (message.submessages === undefined) {\n        message.submessages = [];\n    }\n\n    const existing = message.submessages.find((sm) => sm.id === submsg.id);\n\n    if (existing !== undefined) {\n        blueslip.warn(\"Got submessage multiple times: \" + submsg.id);\n        return;\n    }\n\n    message.submessages.push(submsg);\n}\n\nexport function handle_event(submsg) {\n    // Update message.submessages in case we haven't actually\n    // activated the widget yet, so that when the message does\n    // come in view, the data will be complete.\n    update_message(submsg);\n\n    // Right now, our only use of submessages is widgets.\n    const msg_type = submsg.msg_type;\n\n    if (msg_type !== \"widget\") {\n        blueslip.warn(\"unknown msg_type: \" + msg_type);\n        return;\n    }\n\n    let data;\n\n    try {\n        data = JSON.parse(submsg.content);\n    } catch {\n        blueslip.warn(\"server sent us invalid json in handle_event: \" + submsg.content);\n        return;\n    }\n\n    widgetize.handle_event({\n        sender_id: submsg.sender_id,\n        message_id: submsg.message_id,\n        data,\n    });\n}\n\nexport function make_server_callback(message_id) {\n    return function (opts) {\n        const url = \"/json/submessage\";\n\n        channel.post({\n            url,\n            data: {\n                message_id,\n                msg_type: opts.msg_type,\n                content: JSON.stringify(opts.data),\n            },\n        });\n    };\n}\n","import * as channel from \"./channel\";\n\n/*\n    This module simply encapsulates our legacy API for subscribing\n    or unsubscribing users from streams. Callers don't need to\n    know the strange names of \"subscriptions\" and \"principals\",\n    nor how to JSON.stringify things, nor the URL scheme.\n*/\n\nexport function add_user_ids_to_stream(user_ids, sub, success, failure) {\n    // TODO: use stream_id when backend supports it\n    const stream_name = sub.name;\n    return channel.post({\n        url: \"/json/users/me/subscriptions\",\n        data: {\n            subscriptions: JSON.stringify([{name: stream_name}]),\n            principals: JSON.stringify(user_ids),\n        },\n        success,\n        error: failure,\n    });\n}\n\nexport function remove_user_id_from_stream(user_id, sub, success, failure) {\n    // TODO: use stream_id when backend supports it\n    const stream_name = sub.name;\n    return channel.del({\n        url: \"/json/users/me/subscriptions\",\n        data: {subscriptions: JSON.stringify([stream_name]), principals: JSON.stringify([user_id])},\n        success,\n        error: failure,\n    });\n}\n","import $ from \"jquery\";\n\nimport render_widgets_todo_widget from \"../templates/widgets/todo_widget.hbs\";\nimport render_widgets_todo_widget_tasks from \"../templates/widgets/todo_widget_tasks.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport {$t} from \"./i18n\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as util from \"./util\";\n\n// Any single user should send add a finite number of tasks\n// to a todo list. We arbitrarily pick this value.\nconst MAX_IDX = 1000;\n\nexport class TaskData {\n    task_map = new Map();\n    my_idx = 1;\n\n    constructor({current_user_id}) {\n        this.me = current_user_id;\n    }\n\n    get_widget_data() {\n        const all_tasks = Array.from(this.task_map.values());\n        all_tasks.sort((a, b) => util.strcmp(a.task, b.task));\n\n        const pending_tasks = [];\n        const completed_tasks = [];\n\n        for (const item of all_tasks) {\n            if (item.completed) {\n                completed_tasks.push(item);\n            } else {\n                pending_tasks.push(item);\n            }\n        }\n\n        const widget_data = {\n            pending_tasks,\n            completed_tasks,\n        };\n\n        return widget_data;\n    }\n\n    name_in_use(name) {\n        for (const item of this.task_map.values()) {\n            if (item.task === name) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    handle = {\n        new_task: {\n            outbound: (task, desc) => {\n                this.my_idx += 1;\n                const event = {\n                    type: \"new_task\",\n                    key: this.my_idx,\n                    task,\n                    desc,\n                    completed: false,\n                };\n\n                if (!this.name_in_use(task)) {\n                    return event;\n                }\n                return undefined;\n            },\n\n            inbound: (sender_id, data) => {\n                // All messages readers may add tasks.\n                // for legacy reasons, the inbound idx is\n                // called key in the event\n                const idx = data.key;\n                const task = data.task;\n                const desc = data.desc;\n\n                if (!Number.isInteger(idx) || idx < 0 || idx > MAX_IDX) {\n                    blueslip.warn(\"todo widget: bad type for inbound task idx\");\n                    return;\n                }\n\n                if (typeof task !== \"string\") {\n                    blueslip.warn(\"todo widget: bad type for inbound task title\");\n                    return;\n                }\n\n                if (typeof desc !== \"string\") {\n                    blueslip.warn(\"todo widget: bad type for inbound task desc\");\n                    return;\n                }\n\n                const key = idx + \",\" + sender_id;\n                const completed = data.completed;\n\n                const task_data = {\n                    task,\n                    desc,\n                    idx,\n                    key,\n                    completed,\n                };\n\n                if (!this.name_in_use(task)) {\n                    this.task_map.set(key, task_data);\n                }\n\n                // I may have added a task from another device.\n                if (sender_id === this.me && this.my_idx <= idx) {\n                    this.my_idx = idx + 1;\n                }\n            },\n        },\n\n        strike: {\n            outbound(key) {\n                const event = {\n                    type: \"strike\",\n                    key,\n                };\n\n                return event;\n            },\n\n            inbound: (sender_id, data) => {\n                // All message readers may strike/unstrike todo tasks.\n                const key = data.key;\n                if (typeof key !== \"string\") {\n                    blueslip.warn(\"todo widget: bad type for inbound strike key\");\n                    return;\n                }\n\n                const item = this.task_map.get(key);\n\n                if (item === undefined) {\n                    blueslip.warn(\"Do we have legacy data? unknown key for tasks: \" + key);\n                    return;\n                }\n\n                item.completed = !item.completed;\n            },\n        },\n    };\n\n    handle_event(sender_id, data) {\n        const type = data.type;\n        if (this.handle[type] && this.handle[type].inbound) {\n            this.handle[type].inbound(sender_id, data);\n        } else {\n            blueslip.warn(`todo widget: unknown inbound type: ${type}`);\n        }\n    }\n}\n\nexport function activate(opts) {\n    const $elem = opts.$elem;\n    const callback = opts.callback;\n\n    const task_data = new TaskData({\n        current_user_id: people.my_current_user_id(),\n    });\n\n    function render() {\n        const html = render_widgets_todo_widget();\n        $elem.html(html);\n\n        $elem.find(\"button.add-task\").on(\"click\", (e) => {\n            e.stopPropagation();\n            $elem.find(\".widget-error\").text(\"\");\n            const task = $elem.find(\"input.add-task\").val().trim();\n            const desc = $elem.find(\"input.add-desc\").val().trim();\n\n            if (task === \"\") {\n                return;\n            }\n\n            $elem.find(\".add-task\").val(\"\").trigger(\"focus\");\n            $elem.find(\".add-desc\").val(\"\").trigger(\"focus\");\n\n            const task_exists = task_data.name_in_use(task);\n            if (task_exists) {\n                $elem.find(\".widget-error\").text($t({defaultMessage: \"Task already exists\"}));\n                return;\n            }\n\n            const data = task_data.handle.new_task.outbound(task, desc);\n            callback(data);\n        });\n    }\n\n    function render_results() {\n        const widget_data = task_data.get_widget_data();\n        const html = render_widgets_todo_widget_tasks(widget_data);\n        $elem.find(\"ul.todo-widget\").html(html);\n        $elem.find(\".widget-error\").text(\"\");\n\n        $elem.find(\"input.task\").on(\"click\", (e) => {\n            e.stopPropagation();\n\n            if (page_params.is_spectator) {\n                // Logically, spectators should not be able to toggle\n                // TODO checkboxes. However, the browser changes the\n                // checkbox's state before calling handlers like this,\n                // so we need to just toggle the checkbox back to its\n                // previous state.\n                $(e.target).prop(\"checked\", !$(e.target).is(\":checked\"));\n                $(e.target).trigger(\"blur\");\n                return;\n            }\n            const key = $(e.target).attr(\"data-key\");\n\n            const data = task_data.handle.strike.outbound(key);\n            callback(data);\n        });\n    }\n\n    $elem.handle_events = function (events) {\n        for (const event of events) {\n            task_data.handle_event(event.sender_id, event.data);\n        }\n\n        render_results();\n    };\n\n    render();\n    render_results();\n}\n","import $ from \"jquery\";\n\nimport * as resize from \"./resize\";\nimport * as ui_util from \"./ui_util\";\nimport * as unread_ui from \"./unread_ui\";\n\nexport function update_starred_count(count) {\n    const $starred_li = $(\".top_left_starred_messages\");\n    ui_util.update_unread_count_in_dom($starred_li, count);\n}\n\nexport function update_dom_with_unread_counts(counts) {\n    // Note that \"Private messages\" counts are handled in pm_list.js.\n\n    // mentioned/home have simple integer counts\n    const $mentioned_li = $(\".top_left_mentions\");\n    const $home_li = $(\".top_left_all_messages\");\n\n    ui_util.update_unread_count_in_dom($mentioned_li, counts.mentioned_message_count);\n    ui_util.update_unread_count_in_dom($home_li, counts.home_unread_messages);\n\n    unread_ui.animate_mention_changes($mentioned_li, counts.mentioned_message_count);\n}\n\nfunction remove($elem) {\n    $elem.removeClass(\"active-filter active-sub-filter\");\n}\n\nexport function deselect_top_left_corner_items() {\n    remove($(\".top_left_all_messages\"));\n    remove($(\".top_left_starred_messages\"));\n    remove($(\".top_left_mentions\"));\n    remove($(\".top_left_recent_topics\"));\n}\n\nexport function handle_narrow_activated(filter) {\n    deselect_top_left_corner_items();\n\n    let ops;\n    let filter_name;\n    let $filter_li;\n\n    // TODO: handle confused filters like \"in:all stream:foo\"\n    ops = filter.operands(\"in\");\n    if (ops.length >= 1) {\n        filter_name = ops[0];\n        if (filter_name === \"home\") {\n            $filter_li = $(\".top_left_all_messages\");\n            $filter_li.addClass(\"active-filter\");\n        }\n    }\n    ops = filter.operands(\"is\");\n    if (ops.length >= 1) {\n        filter_name = ops[0];\n        if (filter_name === \"starred\") {\n            $filter_li = $(\".top_left_starred_messages\");\n            $filter_li.addClass(\"active-filter\");\n        } else if (filter_name === \"mentioned\") {\n            $filter_li = $(\".top_left_mentions\");\n            $filter_li.addClass(\"active-filter\");\n        }\n    }\n}\n\nexport function handle_narrow_deactivated() {\n    deselect_top_left_corner_items();\n\n    const $filter_li = $(\".top_left_all_messages\");\n    $filter_li.addClass(\"active-filter\");\n}\n\nexport function narrow_to_recent_topics() {\n    remove($(\".top_left_all_messages\"));\n    remove($(\".top_left_starred_messages\"));\n    remove($(\".top_left_mentions\"));\n    $(\".top_left_recent_topics\").addClass(\"active-filter\");\n    setTimeout(() => {\n        resize.resize_stream_filters_container();\n    }, 0);\n}\n","import * as pm_conversations from \"./pm_conversations\";\nimport * as stream_data from \"./stream_data\";\nimport * as stream_sort from \"./stream_sort\";\nimport * as stream_topic_history from \"./stream_topic_history\";\nimport * as unread from \"./unread\";\nimport * as user_topics from \"./user_topics\";\n\nexport function next_topic(streams, get_topics, has_unread_messages, curr_stream, curr_topic) {\n    const curr_stream_index = streams.indexOf(curr_stream); // -1 if not found\n\n    if (curr_stream_index >= 0) {\n        const stream = streams[curr_stream_index];\n        const topics = get_topics(stream);\n        const curr_topic_index = topics.indexOf(curr_topic); // -1 if not found\n\n        for (let i = curr_topic_index + 1; i < topics.length; i += 1) {\n            const topic = topics[i];\n            if (has_unread_messages(stream, topic)) {\n                return {stream, topic};\n            }\n        }\n\n        for (let i = 0; i < curr_topic_index; i += 1) {\n            const topic = topics[i];\n            if (has_unread_messages(stream, topic)) {\n                return {stream, topic};\n            }\n        }\n    }\n\n    for (let i = curr_stream_index + 1; i < streams.length; i += 1) {\n        const stream = streams[i];\n        for (const topic of get_topics(stream)) {\n            if (has_unread_messages(stream, topic)) {\n                return {stream, topic};\n            }\n        }\n    }\n\n    for (let i = 0; i < curr_stream_index; i += 1) {\n        const stream = streams[i];\n        for (const topic of get_topics(stream)) {\n            if (has_unread_messages(stream, topic)) {\n                return {stream, topic};\n            }\n        }\n    }\n\n    return undefined;\n}\n\nexport function get_next_topic(curr_stream, curr_topic) {\n    let my_streams = stream_sort.get_streams();\n\n    my_streams = my_streams.filter((stream_name) => {\n        if (!stream_data.is_stream_muted_by_name(stream_name)) {\n            return true;\n        }\n        if (stream_name === curr_stream) {\n            // We can use n within a muted stream if we are\n            // currently narrowed to it.\n            return true;\n        }\n        return false;\n    });\n\n    function get_unmuted_topics(stream_name) {\n        const stream_id = stream_data.get_stream_id(stream_name);\n        let topics = stream_topic_history.get_recent_topic_names(stream_id);\n        topics = topics.filter((topic) => !user_topics.is_topic_muted(stream_id, topic));\n        return topics;\n    }\n\n    function has_unread_messages(stream_name, topic) {\n        const stream_id = stream_data.get_stream_id(stream_name);\n        return unread.topic_has_any_unread(stream_id, topic);\n    }\n\n    return next_topic(my_streams, get_unmuted_topics, has_unread_messages, curr_stream, curr_topic);\n}\n\nexport function get_next_unread_pm_string(curr_pm) {\n    const my_pm_strings = pm_conversations.recent.get_strings();\n    const curr_pm_index = my_pm_strings.indexOf(curr_pm); // -1 if not found\n\n    for (let i = curr_pm_index + 1; i < my_pm_strings.length; i += 1) {\n        if (unread.num_unread_for_user_ids_string(my_pm_strings[i]) > 0) {\n            return my_pm_strings[i];\n        }\n    }\n\n    for (let i = 0; i < curr_pm_index; i += 1) {\n        if (unread.num_unread_for_user_ids_string(my_pm_strings[i]) > 0) {\n            return my_pm_strings[i];\n        }\n    }\n\n    return undefined;\n}\n\nexport function get_next_stream(curr_stream) {\n    const my_streams = stream_sort.get_streams();\n    const curr_stream_index = my_streams.indexOf(curr_stream);\n    return my_streams[\n        curr_stream_index < 0 || curr_stream_index === my_streams.length - 1\n            ? 0\n            : curr_stream_index + 1\n    ];\n}\n\nexport function get_prev_stream(curr_stream) {\n    const my_streams = stream_sort.get_streams();\n    const curr_stream_index = my_streams.indexOf(curr_stream);\n    return my_streams[curr_stream_index <= 0 ? my_streams.length - 1 : curr_stream_index - 1];\n}\n","import $ from \"jquery\";\nimport _ from \"lodash\";\n\nimport render_more_topics from \"../templates/more_topics.hbs\";\nimport render_more_topics_spinner from \"../templates/more_topics_spinner.hbs\";\nimport render_topic_list_item from \"../templates/topic_list_item.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as narrow from \"./narrow\";\nimport * as stream_popover from \"./stream_popover\";\nimport * as stream_topic_history from \"./stream_topic_history\";\nimport * as stream_topic_history_util from \"./stream_topic_history_util\";\nimport * as sub_store from \"./sub_store\";\nimport * as topic_list_data from \"./topic_list_data\";\nimport * as ui from \"./ui\";\nimport * as vdom from \"./vdom\";\n\n/*\n    Track all active widgets with a Map.\n\n    (We have at max one for now, but we may\n    eventually allow multiple streams to be\n    expanded.)\n*/\n\nconst active_widgets = new Map();\n\n// We know whether we're zoomed or not.\nlet zoomed = false;\n\nexport function update() {\n    for (const widget of active_widgets.values()) {\n        widget.build();\n    }\n}\n\nexport function clear() {\n    stream_popover.hide_topic_popover();\n\n    for (const widget of active_widgets.values()) {\n        widget.remove();\n    }\n\n    active_widgets.clear();\n}\n\nexport function close() {\n    zoomed = false;\n    clear();\n}\n\nexport function zoom_out() {\n    zoomed = false;\n\n    const stream_ids = Array.from(active_widgets.keys());\n\n    if (stream_ids.length !== 1) {\n        blueslip.error(\"Unexpected number of topic lists to zoom out.\");\n        return;\n    }\n\n    const stream_id = stream_ids[0];\n    const widget = active_widgets.get(stream_id);\n    const parent_widget = widget.get_parent();\n\n    rebuild(parent_widget, stream_id);\n}\n\nexport function keyed_topic_li(conversation) {\n    const render = () => render_topic_list_item(conversation);\n\n    const eq = (other) => _.isEqual(conversation, other.conversation);\n\n    const key = \"t:\" + conversation.topic_name;\n\n    return {\n        key,\n        render,\n        conversation,\n        eq,\n    };\n}\n\nexport function more_li(more_topics_unreads, more_topics_have_unread_mention_messages) {\n    const render = () =>\n        render_more_topics({\n            more_topics_unreads,\n            more_topics_have_unread_mention_messages,\n        });\n\n    const eq = (other) => other.more_items && more_topics_unreads === other.more_topics_unreads;\n\n    const key = \"more\";\n\n    return {\n        key,\n        more_items: true,\n        more_topics_unreads,\n        render,\n        eq,\n    };\n}\n\nexport function spinner_li() {\n    const render = () => render_more_topics_spinner();\n\n    const eq = (other) => other.spinner;\n\n    const key = \"more\";\n\n    return {\n        key,\n        spinner: true,\n        render,\n        eq,\n    };\n}\n\nexport class TopicListWidget {\n    prior_dom = undefined;\n\n    constructor($parent_elem, my_stream_id) {\n        this.$parent_elem = $parent_elem;\n        this.my_stream_id = my_stream_id;\n    }\n\n    build_list(spinner) {\n        const list_info = topic_list_data.get_list_info(this.my_stream_id, zoomed);\n\n        const num_possible_topics = list_info.num_possible_topics;\n        const more_topics_unreads = list_info.more_topics_unreads;\n        const more_topics_have_unread_mention_messages =\n            list_info.more_topics_have_unread_mention_messages;\n\n        const is_showing_all_possible_topics =\n            list_info.items.length === num_possible_topics &&\n            stream_topic_history.is_complete_for_stream_id(this.my_stream_id);\n\n        const attrs = [[\"class\", \"topic-list\"]];\n\n        const nodes = list_info.items.map((conversation) => keyed_topic_li(conversation));\n\n        if (spinner) {\n            nodes.push(spinner_li());\n        } else if (!is_showing_all_possible_topics) {\n            nodes.push(more_li(more_topics_unreads, more_topics_have_unread_mention_messages));\n        }\n\n        const dom = vdom.ul({\n            attrs,\n            keyed_nodes: nodes,\n        });\n\n        return dom;\n    }\n\n    get_parent() {\n        return this.$parent_elem;\n    }\n\n    get_stream_id() {\n        return this.my_stream_id;\n    }\n\n    remove() {\n        this.$parent_elem.find(\".topic-list\").remove();\n        this.prior_dom = undefined;\n    }\n\n    build(spinner) {\n        const new_dom = this.build_list(spinner);\n\n        const replace_content = (html) => {\n            this.remove();\n            this.$parent_elem.append(html);\n        };\n\n        const find = () => this.$parent_elem.find(\".topic-list\");\n\n        vdom.update(replace_content, find, new_dom, this.prior_dom);\n\n        this.prior_dom = new_dom;\n\n        if ($(\"#filter-topic-input\").val() !== \"\") {\n            $(\"#clear_search_topic_button\").show();\n        } else {\n            $(\"#clear_search_topic_button\").hide();\n        }\n    }\n}\n\nexport function clear_topic_search(e) {\n    e.stopPropagation();\n    const $input = $(\"#filter-topic-input\");\n    if ($input.length) {\n        $input.val(\"\");\n        $input.trigger(\"blur\");\n\n        // Since this changes the contents of the search input, we\n        // need to rerender the topic list.\n        const stream_ids = Array.from(active_widgets.keys());\n\n        const stream_id = stream_ids[0];\n        const widget = active_widgets.get(stream_id);\n        const parent_widget = widget.get_parent();\n\n        rebuild(parent_widget, stream_id);\n    }\n}\n\nexport function active_stream_id() {\n    const stream_ids = Array.from(active_widgets.keys());\n\n    if (stream_ids.length !== 1) {\n        return undefined;\n    }\n\n    return stream_ids[0];\n}\n\nexport function get_stream_li() {\n    const widgets = Array.from(active_widgets.values());\n\n    if (widgets.length !== 1) {\n        return undefined;\n    }\n\n    const $stream_li = widgets[0].get_parent();\n    return $stream_li;\n}\n\nexport function rebuild($stream_li, stream_id) {\n    const active_widget = active_widgets.get(stream_id);\n\n    if (active_widget) {\n        active_widget.build();\n        return;\n    }\n\n    clear();\n    const widget = new TopicListWidget($stream_li, stream_id);\n    widget.build();\n\n    active_widgets.set(stream_id, widget);\n}\n\n// For zooming, we only do topic-list stuff here...let stream_list\n// handle hiding/showing the non-narrowed streams\nexport function zoom_in() {\n    zoomed = true;\n\n    const stream_id = active_stream_id();\n    if (!stream_id) {\n        blueslip.error(\"Cannot find widget for topic history zooming.\");\n        return;\n    }\n\n    const active_widget = active_widgets.get(stream_id);\n\n    function on_success() {\n        if (!active_widgets.has(stream_id)) {\n            blueslip.warn(\"User re-narrowed before topic history was returned.\");\n            return;\n        }\n\n        if (!zoomed) {\n            blueslip.warn(\"User zoomed out before topic history was returned.\");\n            // Note that we could attempt to re-draw the zoomed out topic list\n            // here, given that we have more history, but that might be more\n            // confusing than helpful to a user who is likely trying to browse\n            // other streams.\n            return;\n        }\n\n        active_widget.build();\n    }\n\n    ui.get_scroll_element($(\"#left_sidebar_scroll_container\")).scrollTop(0);\n\n    const spinner = true;\n    active_widget.build(spinner);\n\n    stream_topic_history_util.get_server_history(stream_id, on_success);\n}\n\nexport function get_topic_search_term() {\n    const $filter = $(\"#filter-topic-input\");\n    if ($filter.val() === undefined) {\n        return \"\";\n    }\n    return $filter.val().trim();\n}\n\nexport function initialize() {\n    $(\"#stream_filters\").on(\"click\", \".topic-box\", (e) => {\n        if (e.metaKey || e.ctrlKey) {\n            return;\n        }\n        if ($(e.target).closest(\".show-more-topics\").length > 0) {\n            return;\n        }\n\n        // In a more componentized world, we would delegate some\n        // of this stuff back up to our parents.\n\n        const $stream_row = $(e.target).parents(\".narrow-filter\");\n        const stream_id = Number.parseInt($stream_row.attr(\"data-stream-id\"), 10);\n        const sub = sub_store.get(stream_id);\n        const topic = $(e.target).parents(\"li\").attr(\"data-topic-name\");\n\n        narrow.activate(\n            [\n                {operator: \"stream\", operand: sub.name},\n                {operator: \"topic\", operand: topic},\n            ],\n            {trigger: \"sidebar\"},\n        );\n\n        e.preventDefault();\n    });\n\n    $(\"body\").on(\"input\", \"#filter-topic-input\", () => {\n        active_widgets.get(active_stream_id()).build();\n    });\n}\n","import * as resolved_topic from \"../shared/js/resolved_topic\";\n\nimport * as hash_util from \"./hash_util\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as stream_topic_history from \"./stream_topic_history\";\nimport * as topic_list from \"./topic_list\";\nimport * as unread from \"./unread\";\nimport * as user_topics from \"./user_topics\";\nimport * as util from \"./util\";\n\nconst max_topics = 5;\nconst max_topics_with_unread = 8;\n\nexport function get_list_info(stream_id, zoomed) {\n    let topics_selected = 0;\n    let more_topics_unreads = 0;\n    let more_topics_have_unread_mention_messages = false;\n\n    let active_topic = narrow_state.topic();\n\n    if (active_topic) {\n        active_topic = active_topic.toLowerCase();\n    }\n\n    let topic_names = stream_topic_history.get_recent_topic_names(stream_id);\n    if (zoomed) {\n        const search_term = topic_list.get_topic_search_term();\n        topic_names = util.filter_by_word_prefix_match(topic_names, search_term, (item) => item);\n    }\n\n    const items = [];\n\n    const topics_with_unread_mentions = unread.get_topics_with_unread_mentions(stream_id);\n\n    for (const [idx, topic_name] of topic_names.entries()) {\n        const num_unread = unread.num_unread_for_topic(stream_id, topic_name);\n        const is_active_topic = active_topic === topic_name.toLowerCase();\n        const is_topic_muted = user_topics.is_topic_muted(stream_id, topic_name);\n        const [topic_resolved_prefix, topic_display_name] =\n            resolved_topic.display_parts(topic_name);\n        // Important: Topics are lower-case in this set.\n        const contains_unread_mention = topics_with_unread_mentions.has(topic_name.toLowerCase());\n\n        if (!zoomed) {\n            function should_show_topic(topics_selected) {\n                // This function exists just for readability, to\n                // avoid long chained conditionals to determine\n                // which topics to include.\n\n                // We always show the active topic.  Ideally, this\n                // logic would first check whether the active\n                // topic is in the set of those with unreads to\n                // avoid ending up with max_topics_with_unread + 1\n                // total topics if the active topic comes after\n                // the first several topics with unread messages.\n                if (is_active_topic) {\n                    return true;\n                }\n\n                // We unconditionally skip showing muted topics\n                // when not zoomed, even if they have unread\n                // messages.\n                if (is_topic_muted) {\n                    return false;\n                }\n\n                // We include the most recent max_topics topics,\n                // even if there are no unread messages.\n                if (idx < max_topics) {\n                    return true;\n                }\n\n                // We include older topics with unread messages up\n                // until max_topics_with_unread total topics have\n                // been included.\n                if (num_unread > 0 && topics_selected < max_topics_with_unread) {\n                    return true;\n                }\n\n                // Otherwise, we don't show the topic in the\n                // unzoomed view.  We might display its unread\n                // count in in \"more topics\" if it is not muted.\n                return false;\n            }\n\n            const show_topic = should_show_topic(topics_selected);\n            if (!show_topic) {\n                if (!is_topic_muted) {\n                    // The \"more topics\" unread count, like\n                    // stream-level counts, only counts messages\n                    // on unmuted topics.\n                    more_topics_unreads += num_unread;\n                    if (contains_unread_mention) {\n                        more_topics_have_unread_mention_messages = true;\n                    }\n                }\n                continue;\n            }\n            topics_selected += 1;\n            // We fall through to rendering the topic, using the\n            // same code we do when zoomed.\n        }\n\n        const topic_info = {\n            topic_name,\n            topic_resolved_prefix,\n            topic_display_name,\n            unread: num_unread,\n            is_zero: num_unread === 0,\n            is_muted: is_topic_muted,\n            is_active_topic,\n            url: hash_util.by_stream_topic_url(stream_id, topic_name),\n            contains_unread_mention,\n        };\n\n        items.push(topic_info);\n    }\n\n    return {\n        items,\n        num_possible_topics: topic_names.length,\n        more_topics_unreads,\n        more_topics_have_unread_mention_messages,\n    };\n}\n","import $ from \"jquery\";\n\nimport * as popovers from \"./popovers\";\nimport * as stream_list from \"./stream_list\";\nimport * as topic_list from \"./topic_list\";\n\nlet zoomed_in = false;\n\nexport function is_zoomed_in() {\n    return zoomed_in;\n}\n\nfunction zoom_in() {\n    const stream_id = topic_list.active_stream_id();\n\n    popovers.hide_all_except_sidebars();\n    topic_list.zoom_in();\n    stream_list.zoom_in_topics({\n        stream_id,\n    });\n\n    zoomed_in = true;\n}\n\nexport function zoom_out() {\n    const $stream_li = topic_list.get_stream_li();\n\n    popovers.hide_all_except_sidebars();\n    topic_list.zoom_out();\n    stream_list.zoom_out_topics();\n\n    if ($stream_li) {\n        stream_list.scroll_stream_into_view($stream_li);\n    }\n\n    zoomed_in = false;\n}\n\nexport function clear_topics() {\n    const $stream_li = topic_list.get_stream_li();\n\n    topic_list.close();\n\n    if (zoomed_in) {\n        stream_list.zoom_out_topics();\n\n        if ($stream_li) {\n            stream_list.scroll_stream_into_view($stream_li);\n        }\n    }\n\n    zoomed_in = false;\n}\n\nexport function initialize() {\n    $(\"#stream_filters\").on(\"click\", \".show-more-topics\", (e) => {\n        zoom_in();\n\n        e.preventDefault();\n        e.stopPropagation();\n    });\n\n    $(\".show-all-streams\").on(\"click\", (e) => {\n        zoom_out();\n\n        e.preventDefault();\n        e.stopPropagation();\n    });\n}\n","import * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as reload from \"./reload\";\nimport * as reload_state from \"./reload_state\";\nimport * as sent_messages from \"./sent_messages\";\n\nexport function send_message(request, on_success, error, future_message) {\n    channel.post({\n        url: \"/json/messages\",\n        data: request,\n        success: function success(data) {\n            // Call back to our callers to do things like closing the compose\n            // box and turning off spinners and reifying locally echoed messages.\n            on_success(data);\n\n            // For /schedule or /reminder messages don't ack.\n            if (!future_message) {\n                // Once everything is done, get ready to report times to the server.\n                sent_messages.report_server_ack(request.local_id);\n            }\n        },\n        error(xhr, error_type) {\n            if (error_type !== \"timeout\" && reload_state.is_pending()) {\n                // The error might be due to the server changing\n                reload.initiate({\n                    immediate: true,\n                    save_pointer: true,\n                    save_narrow: true,\n                    save_compose: true,\n                    send_after_reload: true,\n                });\n                return;\n            }\n\n            const response = channel.xhr_error_message(\"Error sending message\", xhr);\n            error(response);\n        },\n    });\n}\n\nexport function reply_message(opts) {\n    // This code does an application-triggered reply to a message (as\n    // opposed to the user themselves doing it).  Its only use case\n    // for now is experimental widget-aware bots, so treat this as\n    // somewhat beta code.  To understand the use case, think of a\n    // bot that wants to give users 3 or 4 canned replies to some\n    // choice, but it wants to front-end each of these options\n    // with a one-click button.  This function is part of that architecture.\n    const message = opts.message;\n    let content = opts.content;\n\n    function success() {\n        // TODO: If server response comes back before the message event,\n        //       we could show it earlier, although that creates some\n        //       complexity.  For now do nothing.  (Note that send_message\n        //       already handles things like reporting times to the server.)\n    }\n\n    function error() {\n        // TODO: In our current use case, which is widgets, to meaningfully\n        //       handle errors, we would want the widget to provide some\n        //       kind of callback to us so it can do some appropriate UI.\n        //       For now do nothing.\n    }\n\n    const locally_echoed = false;\n    const local_id = sent_messages.get_new_local_id();\n\n    const reply = {\n        sender_id: page_params.user_id,\n        queue_id: page_params.queue_id,\n        local_id,\n    };\n\n    sent_messages.start_tracking_message({\n        local_id,\n        locally_echoed,\n    });\n\n    if (message.type === \"stream\") {\n        const stream = message.stream;\n\n        const mention = people.get_mention_syntax(message.sender_full_name, message.sender_id);\n\n        content = mention + \" \" + content;\n\n        reply.type = \"stream\";\n        reply.to = stream;\n        reply.content = content;\n        reply.topic = message.topic;\n\n        send_message(reply, success, error);\n        return;\n    }\n\n    if (message.type === \"private\") {\n        const pm_recipient = people.pm_reply_to(message);\n\n        reply.type = \"private\";\n        reply.to = JSON.stringify(pm_recipient.split(\",\"));\n        reply.content = content;\n\n        send_message(reply, success, error);\n        return;\n    }\n\n    blueslip.error(\"unknown message type: \" + message.type);\n}\n","import Handlebars from \"handlebars/runtime\";\nimport _ from \"lodash\";\n\n// import pygments_data from \"../generated/pygments_data.json\";\nimport * as typeahead from \"../shared/js/typeahead\";\nimport render_typeahead_list_item from \"../templates/typeahead_list_item.hbs\";\n\nimport * as buddy_data from \"./buddy_data\";\nimport * as compose_state from \"./compose_state\";\nimport * as people from \"./people\";\nimport * as pm_conversations from \"./pm_conversations\";\nimport * as recent_senders from \"./recent_senders\";\nimport * as settings_data from \"./settings_data\";\nimport * as stream_data from \"./stream_data\";\nimport * as user_groups from \"./user_groups\";\nimport * as user_status from \"./user_status\";\nimport * as util from \"./util\";\n// Returns an array of private message recipients, removing empty elements.\n// For example, \"a,,b, \" => [\"a\", \"b\"]\nexport function get_cleaned_pm_recipients(query_string) {\n    let recipients = util.extract_pm_recipients(query_string);\n    recipients = recipients.filter((elem) => elem.match(/\\S/));\n    return recipients;\n}\n\nexport function build_highlight_regex(query) {\n    const regex = new RegExp(\"(\" + _.escapeRegExp(query) + \")\", \"ig\");\n    return regex;\n}\n\nexport function highlight_with_escaping_and_regex(regex, item) {\n    // We need to assemble this manually (as opposed to doing 'join') because we need to\n    // (1) escape all the pieces and (2) the regex is case-insensitive, and we need\n    // to know the case of the content we're replacing (you can't just use a bolded\n    // version of 'query')\n\n    const pieces = item.split(regex);\n    let result = \"\";\n\n    for (const piece of pieces) {\n        if (regex.test(piece)) {\n            result += \"<strong>\" + Handlebars.Utils.escapeExpression(piece) + \"</strong>\";\n        } else {\n            result += Handlebars.Utils.escapeExpression(piece);\n        }\n    }\n\n    return result;\n}\n\nexport function make_query_highlighter(query) {\n    let i;\n    query = query.toLowerCase();\n\n    const regex = build_highlight_regex(query);\n\n    return function (phrase) {\n        let result = \"\";\n        const parts = phrase.split(\" \");\n        for (i = 0; i < parts.length; i += 1) {\n            if (i > 0) {\n                result += \" \";\n            }\n            result += highlight_with_escaping_and_regex(regex, parts[i]);\n        }\n        return result;\n    };\n}\n\nexport function render_typeahead_item(args) {\n    args.has_image = args.img_src !== undefined;\n    args.has_status = args.status_emoji_info !== undefined;\n    args.has_secondary = args.secondary !== undefined;\n    return render_typeahead_list_item(args);\n}\n\nexport function render_person(person) {\n    const user_circle_class = buddy_data.get_user_circle_class(person.user_id);\n    if (person.special_item_text) {\n        return render_typeahead_item({\n            primary: person.special_item_text,\n            is_person: true,\n        });\n    }\n\n    const avatar_url = people.small_avatar_url_for_person(person);\n\n    const status_emoji_info = user_status.get_status_emoji(person.user_id);\n\n    const typeahead_arguments = {\n        primary: person.full_name,\n        img_src: avatar_url,\n        user_circle_class,\n        is_person: true,\n        status_emoji_info,\n    };\n\n    typeahead_arguments.secondary = settings_data.email_for_user_settings(person);\n    return render_typeahead_item(typeahead_arguments);\n}\n\nexport function render_user_group(user_group) {\n    return render_typeahead_item({\n        primary: user_group.name,\n        secondary: user_group.description,\n        is_user_group: true,\n    });\n}\n\nexport function render_person_or_user_group(item) {\n    if (user_groups.is_user_group(item)) {\n        return render_user_group(item);\n    }\n\n    return render_person(item);\n}\n\nexport function render_stream(stream) {\n    let desc = stream.description;\n    const short_desc = desc.slice(0, 35);\n\n    if (desc !== short_desc) {\n        desc = short_desc + \"...\";\n    }\n\n    return render_typeahead_item({\n        primary: stream.name,\n        secondary: desc,\n        is_unsubscribed: !stream.subscribed,\n    });\n}\n\nexport function render_emoji(item) {\n    const args = {\n        is_emoji: true,\n        primary: item.emoji_name.replace(/_/g, \" \"),\n    };\n\n    if (item.emoji_url) {\n        args.img_src = item.emoji_url;\n    } else {\n        args.emoji_code = item.emoji_code;\n    }\n\n    return render_typeahead_item(args);\n}\n\nexport function sorter(query, objs, get_item) {\n    const results = typeahead.triage(query, objs, get_item);\n    return results.matches.concat(results.rest);\n}\n\nexport function compare_by_pms(user_a, user_b) {\n    const count_a = people.get_recipient_count(user_a);\n    const count_b = people.get_recipient_count(user_b);\n\n    if (count_a > count_b) {\n        return -1;\n    } else if (count_a < count_b) {\n        return 1;\n    }\n\n    if (!user_a.is_bot && user_b.is_bot) {\n        return -1;\n    } else if (user_a.is_bot && !user_b.is_bot) {\n        return 1;\n    }\n\n    // We use alpha sort as a tiebreaker, which might be helpful for\n    // new users.\n    if (user_a.full_name < user_b.full_name) {\n        return -1;\n    } else if (user_a === user_b) {\n        return 0;\n    }\n    return 1;\n}\n\nexport function compare_people_for_relevance(\n    person_a,\n    person_b,\n    tertiary_compare,\n    current_stream_id,\n) {\n    // give preference to \"all\", \"everyone\" or \"stream\"\n    // We use is_broadcast for a quick check.  It will\n    // true for all/everyone/stream and undefined (falsy)\n    // for actual people.\n    if (compose_state.get_message_type() !== \"private\") {\n        if (person_a.is_broadcast) {\n            if (person_b.is_broadcast) {\n                return person_a.idx - person_b.idx;\n            }\n            return -1;\n        } else if (person_b.is_broadcast) {\n            return 1;\n        }\n    } else {\n        if (person_a.is_broadcast) {\n            if (person_b.is_broadcast) {\n                return person_a.idx - person_b.idx;\n            }\n            return 1;\n        } else if (person_b.is_broadcast) {\n            return -1;\n        }\n    }\n\n    // Now handle actual people users.\n\n    // give preference to subscribed users first\n    if (current_stream_id !== undefined) {\n        const a_is_sub = stream_data.is_user_subscribed(current_stream_id, person_a.user_id);\n        const b_is_sub = stream_data.is_user_subscribed(current_stream_id, person_b.user_id);\n\n        if (a_is_sub && !b_is_sub) {\n            return -1;\n        } else if (!a_is_sub && b_is_sub) {\n            return 1;\n        }\n    }\n\n    // give preference to pm partners if both (are)/(are not) subscribers\n    const a_is_partner = pm_conversations.is_partner(person_a.user_id);\n    const b_is_partner = pm_conversations.is_partner(person_b.user_id);\n\n    if (a_is_partner && !b_is_partner) {\n        return -1;\n    } else if (!a_is_partner && b_is_partner) {\n        return 1;\n    }\n\n    return tertiary_compare(person_a, person_b);\n}\n\nexport function sort_people_for_relevance(objs, current_stream_name, current_topic) {\n    // If sorting for recipientbox typeahead or compose state is private, then current_stream = \"\"\n    let current_stream = false;\n    if (current_stream_name) {\n        current_stream = stream_data.get_sub(current_stream_name);\n    }\n    if (!current_stream) {\n        objs.sort((person_a, person_b) =>\n            compare_people_for_relevance(person_a, person_b, compare_by_pms),\n        );\n    } else {\n        const stream_id = current_stream.stream_id;\n\n        objs.sort((person_a, person_b) =>\n            compare_people_for_relevance(\n                person_a,\n                person_b,\n                (user_a, user_b) =>\n                    recent_senders.compare_by_recency(user_a, user_b, stream_id, current_topic),\n                current_stream.stream_id,\n            ),\n        );\n    }\n\n    return objs;\n}\n\nexport function compare_by_popularity(lang_a, lang_b) {\n    const diff = pygments_data.langs[lang_b].priority - pygments_data.langs[lang_a].priority;\n    if (diff !== 0) {\n        return diff;\n    }\n    return util.strcmp(lang_a, lang_b);\n}\n\nfunction retain_unique_language_aliases(matches) {\n    // We make the typeahead a little more nicer but only showing one alias per language.\n    // For example if the user searches for prefix \"j\", then the typeahead list should contain\n    // \"javascript\" only, and not \"js\" and \"javascript\".\n    const seen_aliases = new Set();\n    const unique_aliases = [];\n    for (const lang of matches) {\n        // The matched list is already sorted based on popularity and has exact matches\n        // at the top, so we don't need to worry about sorting again.\n        const canonical_name = pygments_data.langs[lang]?.pretty_name ?? lang;\n        if (!seen_aliases.has(canonical_name)) {\n            seen_aliases.add(canonical_name);\n            unique_aliases.push(lang);\n        }\n    }\n    return unique_aliases;\n}\n\nexport function sort_languages(matches, query) {\n    const results = typeahead.triage(query, matches);\n\n    // Languages that start with the query\n    results.matches = results.matches.sort(compare_by_popularity);\n\n    // Push exact matches to top.\n    const match_index = results.matches.indexOf(query);\n    if (match_index > -1) {\n        results.matches.splice(match_index, 1);\n        results.matches.unshift(query);\n    }\n\n    // Languages that have the query somewhere in their name\n    results.rest = results.rest.sort(compare_by_popularity);\n    return retain_unique_language_aliases(results.matches.concat(results.rest));\n}\n\nexport function sort_recipients({\n    users,\n    query,\n    current_stream,\n    current_topic,\n    groups = [],\n    max_num_items = 20,\n}) {\n    function sort_relevance(items) {\n        return sort_people_for_relevance(items, current_stream, current_topic);\n    }\n\n    const users_name_results = typeahead.triage(query, users, (p) => p.full_name);\n\n    const email_results = typeahead.triage(query, users_name_results.rest, (p) => p.email);\n\n    const groups_results = typeahead.triage(query, groups, (g) => g.name);\n\n    const best_users = () => sort_relevance(users_name_results.matches);\n    const best_groups = () => groups_results.matches;\n    const ok_users = () => sort_relevance(email_results.matches);\n    const worst_users = () => sort_relevance(email_results.rest);\n    const worst_groups = () => groups_results.rest;\n\n    const getters = [best_users, best_groups, ok_users, worst_users, worst_groups];\n\n    /*\n        The following optimization is important for large realms.\n        If we know we're only showing 5 suggestions, and we\n        get 5 matches from `best_users`, then we want to avoid\n        calling the expensive sorts for `ok_users` and `worst_users`,\n        since they just get dropped.\n    */\n\n    let items = [];\n\n    for (const getter of getters) {\n        if (items.length < max_num_items) {\n            items = items.concat(getter());\n        }\n    }\n\n    return items.slice(0, max_num_items);\n}\n\nfunction slash_command_comparator(slash_command_a, slash_command_b) {\n    if (slash_command_a.name < slash_command_b.name) {\n        return -1;\n    } else if (slash_command_a.name > slash_command_b.name) {\n        return 1;\n    }\n    /* istanbul ignore next */\n    return 0;\n}\n\nexport function sort_slash_commands(matches, query) {\n    // We will likely want to in the future make this sort the\n    // just-`/` commands by something approximating usefulness.\n    const results = typeahead.triage(query, matches, (x) => x.name);\n\n    results.matches = results.matches.sort(slash_command_comparator);\n    results.rest = results.rest.sort(slash_command_comparator);\n    return results.matches.concat(results.rest);\n}\n\n// Gives stream a score from 0 to 3 based on its activity\nfunction activity_score(sub) {\n    let stream_score = 0;\n    if (!sub.subscribed) {\n        stream_score = -1;\n    } else {\n        if (sub.pin_to_top) {\n            stream_score += 2;\n        }\n        // Note: A pinned stream may accumulate a 3rd point if it is active\n        if (stream_data.is_active(sub)) {\n            stream_score += 1;\n        }\n    }\n    return stream_score;\n}\n\n// Sort streams by ranking them by activity. If activity is equal,\n// as defined bv activity_score, decide based on our weekly traffic\n// stats.\nexport function compare_by_activity(stream_a, stream_b) {\n    let diff = activity_score(stream_b) - activity_score(stream_a);\n    if (diff !== 0) {\n        return diff;\n    }\n    diff = (stream_b.stream_weekly_traffic || 0) - (stream_a.stream_weekly_traffic || 0);\n    if (diff !== 0) {\n        return diff;\n    }\n    return util.strcmp(stream_a.name, stream_b.name);\n}\n\nexport function sort_streams(matches, query) {\n    const name_results = typeahead.triage(query, matches, (x) => x.name);\n\n    const desc_results = typeahead.triage(query, name_results.rest, (x) => x.description);\n\n    // Streams that start with the query.\n    name_results.matches = name_results.matches.sort(compare_by_activity);\n    // Streams with descriptions that start with the query.\n    desc_results.matches = desc_results.matches.sort(compare_by_activity);\n    // Streams with names and descriptions that don't start with the query.\n    desc_results.rest = desc_results.rest.sort(compare_by_activity);\n\n    return name_results.matches.concat(desc_results.matches.concat(desc_results.rest));\n}\n","import * as muted_users from \"./muted_users\";\nimport * as util from \"./util\";\n\n// See docs/subsystems/typing-indicators.md for details on typing indicators.\n\nconst typist_dct = new Map();\nconst inbound_timer_dict = new Map();\n\nexport function clear_for_testing() {\n    typist_dct.clear();\n    inbound_timer_dict.clear();\n}\n\nfunction to_int(s) {\n    return Number.parseInt(s, 10);\n}\n\nfunction get_key(group) {\n    const ids = util.sorted_ids(group);\n    return ids.join(\",\");\n}\n\nexport function add_typist(group, typist) {\n    const key = get_key(group);\n    const current = typist_dct.get(key) || [];\n    typist = to_int(typist);\n    if (!current.includes(typist)) {\n        current.push(typist);\n    }\n    typist_dct.set(key, util.sorted_ids(current));\n}\n\nexport function remove_typist(group, typist) {\n    const key = get_key(group);\n    let current = typist_dct.get(key) || [];\n\n    typist = to_int(typist);\n    if (!current.includes(typist)) {\n        return false;\n    }\n\n    current = current.filter((user_id) => to_int(user_id) !== to_int(typist));\n\n    typist_dct.set(key, current);\n    return true;\n}\n\nexport function get_group_typists(group) {\n    const key = get_key(group);\n    const user_ids = typist_dct.get(key) || [];\n    return muted_users.filter_muted_user_ids(user_ids);\n}\n\nexport function get_all_typists() {\n    let typists = Array.from(typist_dct.values()).flat();\n    typists = util.sorted_ids(typists);\n    return muted_users.filter_muted_user_ids(typists);\n}\n\n// The next functions aren't pure data, but it is easy\n// enough to mock the setTimeout/clearTimeout functions.\nexport function clear_inbound_timer(group) {\n    const key = get_key(group);\n    const timer = inbound_timer_dict.get(key);\n    if (timer) {\n        clearTimeout(timer);\n        inbound_timer_dict.set(key, undefined);\n    }\n}\n\nexport function kickstart_inbound_timer(group, delay, callback) {\n    const key = get_key(group);\n    clear_inbound_timer(group);\n    const timer = setTimeout(callback, delay);\n    inbound_timer_dict.set(key, timer);\n}\n","import $ from \"jquery\";\n\nimport render_typing_notifications from \"../templates/typing_notifications.hbs\";\n\nimport * as narrow_state from \"./narrow_state\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as typing_data from \"./typing_data\";\n\n// See docs/subsystems/typing-indicators.md for details on typing indicators.\n\n// This code handles the inbound side of typing notifications.\n// When another user is typing, we process the events here.\n//\n// We also handle the local event of re-narrowing.\n// (For the outbound code, see typing.js.)\n\n// How long before we assume a client has gone away\n// and expire its typing status\nconst TYPING_STARTED_EXPIRY_PERIOD = 15000; // 15s\n\n// If number of users typing exceed this,\n// we render \"Several people are typing...\"\nconst MAX_USERS_TO_DISPLAY_NAME = 3;\n\n// Note!: There are also timing constants in typing_status.js\n// that make typing indicators work.\n\nfunction get_users_typing_for_narrow() {\n    if (!narrow_state.narrowed_to_pms()) {\n        // Narrow is neither pm-with nor is: private\n        return [];\n    }\n\n    const first_term = narrow_state.operators()[0];\n    if (first_term.operator === \"pm-with\") {\n        // Get list of users typing in this conversation\n        const narrow_emails_string = first_term.operand;\n        // TODO: Create people.emails_strings_to_user_ids.\n        const narrow_user_ids_string = people.reply_to_to_user_ids_string(narrow_emails_string);\n        if (!narrow_user_ids_string) {\n            return [];\n        }\n        const narrow_user_ids = narrow_user_ids_string\n            .split(\",\")\n            .map((user_id_string) => Number.parseInt(user_id_string, 10));\n        const group = narrow_user_ids.concat([page_params.user_id]);\n        return typing_data.get_group_typists(group);\n    }\n    // Get all users typing (in all private conversations with current user)\n    return typing_data.get_all_typists();\n}\n\nexport function render_notifications_for_narrow() {\n    const user_ids = get_users_typing_for_narrow();\n    const users_typing = user_ids.map((user_id) => people.get_by_user_id(user_id));\n    const num_of_users_typing = users_typing.length;\n\n    if (num_of_users_typing === 0) {\n        $(\"#typing_notifications\").hide();\n    } else {\n        $(\"#typing_notifications\").html(\n            render_typing_notifications({\n                users: users_typing,\n                several_users: num_of_users_typing > MAX_USERS_TO_DISPLAY_NAME,\n            }),\n        );\n        $(\"#typing_notifications\").show();\n    }\n}\n\nexport function hide_notification(event) {\n    const recipients = event.recipients.map((user) => user.user_id);\n    recipients.sort();\n\n    typing_data.clear_inbound_timer(recipients);\n\n    const removed = typing_data.remove_typist(recipients, event.sender.user_id);\n\n    if (removed) {\n        render_notifications_for_narrow();\n    }\n}\n\nexport function display_notification(event) {\n    const recipients = event.recipients.map((user) => user.user_id);\n    recipients.sort();\n\n    const sender_id = event.sender.user_id;\n    event.sender.name = people.get_by_user_id(sender_id).full_name;\n\n    typing_data.add_typist(recipients, sender_id);\n\n    render_notifications_for_narrow();\n\n    typing_data.kickstart_inbound_timer(recipients, TYPING_STARTED_EXPIRY_PERIOD, () => {\n        hide_notification(event);\n    });\n}\n","import $ from \"jquery\";\nimport SimpleBar from \"simplebar\";\n\nimport {$t} from \"./i18n\";\nimport * as message_lists from \"./message_lists\";\n\n// What, if anything, obscures the home tab?\n\nexport function replace_emoji_with_text($element) {\n    $element.find(\".emoji\").replaceWith(function () {\n        if ($(this).is(\"img\")) {\n            return $(this).attr(\"alt\");\n        }\n        return $(this).text();\n    });\n}\n\nexport function get_content_element($element) {\n    const element = $element.expectOne()[0];\n    const sb = SimpleBar.instances.get(element);\n    if (sb) {\n        return $(sb.getContentElement());\n    }\n    return $element;\n}\n\nexport function get_scroll_element($element) {\n    const element = $element.expectOne()[0];\n    const sb = SimpleBar.instances.get(element);\n    if (sb) {\n        return $(sb.getScrollElement());\n    } else if (\"simplebar\" in element.dataset) {\n        // The SimpleBar mutation observer hasn’t processed this element yet.\n        // Create the SimpleBar early in case we need to add event listeners.\n        return $(new SimpleBar(element).getScrollElement());\n    }\n    return $element;\n}\n\nexport function reset_scrollbar($element) {\n    const element = $element.expectOne()[0];\n    const sb = SimpleBar.instances.get(element);\n    if (sb) {\n        sb.getScrollElement().scrollTop = 0;\n    } else {\n        element.scrollTop = 0;\n    }\n}\n\nfunction update_message_in_all_views(message_id, callback) {\n    for (const msg_list of message_lists.all_rendered_message_lists()) {\n        const $row = msg_list.get_row(message_id);\n        if ($row === undefined) {\n            // The row may not exist, e.g. if you do an action on a message in\n            // a narrowed view\n            continue;\n        }\n        callback($row);\n    }\n}\n\nexport function update_starred_view(message_id, new_value) {\n    const starred = new_value;\n\n    // Avoid a full re-render, but update the star in each message\n    // table in which it is visible.\n    update_message_in_all_views(message_id, ($row) => {\n        const $elt = $row.find(\".star\");\n        const $star_container = $row.find(\".star_container\");\n        if (starred) {\n            $elt.addClass(\"fa-star\").removeClass(\"fa-star-o\");\n            $star_container.removeClass(\"empty-star\");\n        } else {\n            $elt.removeClass(\"fa-star\").addClass(\"fa-star-o\");\n            $star_container.addClass(\"empty-star\");\n        }\n        const title_state = starred ? $t({defaultMessage: \"Unstar\"}) : $t({defaultMessage: \"Star\"});\n        $star_container.attr(\n            \"data-tippy-content\",\n            $t(\n                {defaultMessage: \"{starred_status} this message (Ctrl + s)\"},\n                {starred_status: title_state},\n            ),\n        );\n    });\n}\n\nexport function show_message_failed(message_id, failed_msg) {\n    // Failed to send message, so display inline retry/cancel\n    update_message_in_all_views(message_id, ($row) => {\n        const $failed_div = $row.find(\".message_failed\");\n        $failed_div.toggleClass(\"notvisible\", false);\n        $failed_div.find(\".failed_text\").attr(\"title\", failed_msg);\n    });\n}\n\nexport function show_failed_message_success(message_id) {\n    // Previously failed message succeeded\n    update_message_in_all_views(message_id, ($row) => {\n        $row.find(\".message_failed\").toggleClass(\"notvisible\", true);\n    });\n}\n\n// Save the compose content cursor position and restore when we\n// shift-tab back in (see hotkey.js).\nlet saved_compose_cursor = 0;\n\nexport function set_compose_textarea_handlers() {\n    $(\"#compose-textarea\").on(\"blur\", function () {\n        saved_compose_cursor = $(this).caret();\n    });\n\n    // on the end of the modified-message fade in, remove the fade-in-message class.\n    const animationEnd = \"webkitAnimationEnd oanimationend msAnimationEnd animationend\";\n    $(\"body\").on(animationEnd, \".fade-in-message\", function () {\n        $(this).removeClass(\"fade-in-message\");\n    });\n}\n\nexport function restore_compose_cursor() {\n    $(\"#compose-textarea\").trigger(\"focus\").caret(saved_compose_cursor);\n}\n\nexport function initialize() {\n    set_compose_textarea_handlers();\n}\n","import * as blueslip from \"./blueslip\";\nimport {FoldDict} from \"./fold_dict\";\nimport * as message_store from \"./message_store\";\nimport * as people from \"./people\";\nimport * as recent_topics_ui from \"./recent_topics_ui\";\nimport * as recent_topics_util from \"./recent_topics_util\";\nimport * as settings_config from \"./settings_config\";\nimport * as stream_data from \"./stream_data\";\nimport * as sub_store from \"./sub_store\";\nimport {user_settings} from \"./user_settings\";\nimport * as user_topics from \"./user_topics\";\nimport * as util from \"./util\";\n\n// The unread module tracks the message IDs and locations of the\n// user's unread messages.  The tracking is initialized with\n// server-provided data of the total set of unread messages in the\n// user's history via page_params.unread_msgs (well, it cuts off at\n// MAX_UNREAD_MESSAGES unreads for performance reasons).  As a result,\n// it can contain many thousands of messages that we don't have full\n// data for in `message_store`, so we cannot in general look these\n// messages up there.\n\n// See https://zulip.readthedocs.io/en/latest/subsystems/pointer.html\n// for more details on how this system is designed.\n\nexport let messages_read_in_narrow = false;\n\nexport function set_messages_read_in_narrow(value) {\n    messages_read_in_narrow = value;\n}\n\nexport let old_unreads_missing = false;\n\nexport function clear_old_unreads_missing() {\n    old_unreads_missing = false;\n}\n\nexport const unread_mentions_counter = new Set();\nconst unread_messages = new Set();\n\n// Map with keys of the form \"{stream_id}:{topic.toLowerCase()}\" and\n// values being Sets of message IDs for unread messages mentioning the\n// user within that topic. Use `recent_topics_util.get_topic_key` to\n// calculate keys.\n//\n// Functionally a cache; see clear_and_populate_unread_mention_topics\n// for how we can refresh it efficiently.\nexport const unread_mention_topics = new Map();\n\nclass Bucketer {\n    // Maps item_id => bucket_key for items present in a bucket.\n    reverse_lookup = new Map();\n\n    constructor(options) {\n        this.key_to_bucket = new options.KeyDict();\n        this.make_bucket = options.make_bucket;\n    }\n\n    clear() {\n        this.key_to_bucket.clear();\n        this.reverse_lookup.clear();\n    }\n\n    add(opts) {\n        const bucket_key = opts.bucket_key;\n        const item_id = opts.item_id;\n        const add_callback = opts.add_callback;\n\n        let bucket = this.key_to_bucket.get(bucket_key);\n        if (!bucket) {\n            bucket = this.make_bucket();\n            this.key_to_bucket.set(bucket_key, bucket);\n        }\n        if (add_callback) {\n            add_callback(bucket, item_id);\n        } else {\n            bucket.add(item_id);\n        }\n        this.reverse_lookup.set(item_id, bucket_key);\n    }\n\n    delete(item_id) {\n        const bucket_key = this.reverse_lookup.get(item_id);\n        if (bucket_key) {\n            const bucket = this.get_bucket(bucket_key);\n            bucket.delete(item_id);\n            this.reverse_lookup.delete(item_id);\n        }\n    }\n\n    get_bucket(bucket_key) {\n        return this.key_to_bucket.get(bucket_key);\n    }\n\n    keys() {\n        return this.key_to_bucket.keys();\n    }\n\n    values() {\n        return this.key_to_bucket.values();\n    }\n\n    [Symbol.iterator]() {\n        return this.key_to_bucket[Symbol.iterator]();\n    }\n}\n\nclass UnreadPMCounter {\n    bucketer = new Bucketer({\n        KeyDict: Map,\n        make_bucket: () => new Set(),\n    });\n\n    clear() {\n        this.bucketer.clear();\n    }\n\n    set_pms(pms) {\n        for (const obj of pms) {\n            const user_ids_string = obj.other_user_id.toString();\n            this.set_message_ids(user_ids_string, obj.unread_message_ids);\n        }\n    }\n\n    set_huddles(huddles) {\n        for (const obj of huddles) {\n            const user_ids_string = people.pm_lookup_key(obj.user_ids_string);\n            this.set_message_ids(user_ids_string, obj.unread_message_ids);\n        }\n    }\n\n    set_message_ids(user_ids_string, unread_message_ids) {\n        for (const msg_id of unread_message_ids) {\n            this.bucketer.add({\n                bucket_key: user_ids_string,\n                item_id: msg_id,\n            });\n        }\n    }\n\n    add({message_id, user_ids_string}) {\n        if (user_ids_string) {\n            this.bucketer.add({\n                bucket_key: user_ids_string,\n                item_id: message_id,\n            });\n        }\n    }\n\n    delete(message_id) {\n        this.bucketer.delete(message_id);\n    }\n\n    get_counts() {\n        const pm_dict = new Map(); // Hash by user_ids_string -> count\n        let total_count = 0;\n        for (const [user_ids_string, id_set] of this.bucketer) {\n            const count = id_set.size;\n            pm_dict.set(user_ids_string, count);\n            total_count += count;\n        }\n        return {\n            total_count,\n            pm_dict,\n        };\n    }\n\n    num_unread(user_ids_string) {\n        if (!user_ids_string) {\n            return 0;\n        }\n\n        const bucket = this.bucketer.get_bucket(user_ids_string);\n\n        if (!bucket) {\n            return 0;\n        }\n        return bucket.size;\n    }\n\n    get_msg_ids() {\n        const ids = [];\n\n        for (const id_set of this.bucketer.values()) {\n            for (const id of id_set) {\n                ids.push(id);\n            }\n        }\n\n        return util.sorted_ids(ids);\n    }\n\n    get_msg_ids_for_user_ids_string(user_ids_string) {\n        if (!user_ids_string) {\n            return [];\n        }\n\n        const bucket = this.bucketer.get_bucket(user_ids_string);\n\n        if (!bucket) {\n            return [];\n        }\n\n        const ids = Array.from(bucket);\n        return util.sorted_ids(ids);\n    }\n}\nconst unread_pm_counter = new UnreadPMCounter();\n\nfunction make_per_stream_bucketer() {\n    return new Bucketer({\n        KeyDict: FoldDict, // bucket keys are topics\n        make_bucket: () => new Set(),\n    });\n}\n\nclass UnreadTopicCounter {\n    bucketer = new Bucketer({\n        KeyDict: Map, // bucket keys are stream_ids\n        make_bucket: make_per_stream_bucketer,\n    });\n\n    clear() {\n        this.bucketer.clear();\n    }\n\n    set_streams(objs) {\n        for (const obj of objs) {\n            const stream_id = obj.stream_id;\n            const topic = obj.topic;\n            const unread_message_ids = obj.unread_message_ids;\n\n            for (const message_id of unread_message_ids) {\n                this.add({message_id, stream_id, topic});\n            }\n        }\n    }\n\n    add({message_id, stream_id, topic}) {\n        this.bucketer.add({\n            bucket_key: stream_id,\n            item_id: message_id,\n            add_callback(per_stream_bucketer) {\n                per_stream_bucketer.add({\n                    bucket_key: topic,\n                    item_id: message_id,\n                });\n            },\n        });\n    }\n\n    delete(msg_id) {\n        this.bucketer.delete(msg_id);\n    }\n\n    get_counts() {\n        const res = {};\n        res.stream_unread_messages = 0;\n        res.stream_count = new Map(); // hash by stream_id -> count\n        for (const [stream_id, per_stream_bucketer] of this.bucketer) {\n            // We track unread counts for streams that may be currently\n            // unsubscribed.  Since users may re-subscribe, we don't\n            // completely throw away the data.  But we do ignore it here,\n            // so that callers have a view of the **current** world.\n            const sub = sub_store.get(stream_id);\n            if (!sub || !stream_data.is_subscribed(stream_id)) {\n                continue;\n            }\n\n            let stream_count = 0;\n            for (const [topic, msgs] of per_stream_bucketer) {\n                const topic_count = msgs.size;\n                if (!user_topics.is_topic_muted(stream_id, topic)) {\n                    stream_count += topic_count;\n                }\n            }\n            res.stream_count.set(stream_id, stream_count);\n            if (!stream_data.is_muted(stream_id)) {\n                res.stream_unread_messages += stream_count;\n            }\n        }\n\n        return res;\n    }\n\n    get_missing_topics(opts) {\n        /* Clients have essentially complete unread data, but\n         * stream_topic_history.is_complete_for_stream_id() can be\n         * false. In that situation, this function helps ensure that\n         * we include all topics with unread messages in data that.\n         *\n         * It will return all topics in the provided stream with a\n         * nonzero unread count that are not already present in the\n         * topic_dict parameter.\n         */\n        const stream_id = opts.stream_id;\n        const topic_dict = opts.topic_dict;\n\n        const per_stream_bucketer = this.bucketer.get_bucket(stream_id);\n        if (!per_stream_bucketer) {\n            return [];\n        }\n\n        let topic_names = Array.from(per_stream_bucketer.keys());\n\n        /* Include topics that have at least one unread. It would likely\n         * be better design for buckets to be deleted when emptied. */\n        topic_names = topic_names.filter((topic_name) => {\n            const messages = Array.from(per_stream_bucketer.get_bucket(topic_name));\n            return messages.length > 0;\n        });\n        /* And aren't already present in topic_dict. */\n        topic_names = topic_names.filter((topic_name) => !topic_dict.has(topic_name));\n\n        const result = topic_names.map((topic_name) => {\n            const msgs = per_stream_bucketer.get_bucket(topic_name);\n\n            return {\n                pretty_name: topic_name,\n                message_id: Math.max(...Array.from(msgs)),\n            };\n        });\n\n        return result;\n    }\n\n    get_stream_count(stream_id) {\n        let stream_count = 0;\n\n        const per_stream_bucketer = this.bucketer.get_bucket(stream_id);\n\n        if (!per_stream_bucketer) {\n            return 0;\n        }\n\n        const sub = sub_store.get(stream_id);\n        for (const [topic, msgs] of per_stream_bucketer) {\n            if (sub && !user_topics.is_topic_muted(stream_id, topic)) {\n                stream_count += msgs.size;\n            }\n        }\n\n        return stream_count;\n    }\n\n    get(stream_id, topic) {\n        const per_stream_bucketer = this.bucketer.get_bucket(stream_id);\n        if (!per_stream_bucketer) {\n            return 0;\n        }\n\n        const topic_bucket = per_stream_bucketer.get_bucket(topic);\n        if (!topic_bucket) {\n            return 0;\n        }\n\n        return topic_bucket.size;\n    }\n\n    get_msg_ids_for_stream(stream_id) {\n        const per_stream_bucketer = this.bucketer.get_bucket(stream_id);\n\n        if (!per_stream_bucketer) {\n            return [];\n        }\n\n        const ids = [];\n        const sub = sub_store.get(stream_id);\n        for (const [topic, id_set] of per_stream_bucketer) {\n            if (sub && !user_topics.is_topic_muted(stream_id, topic)) {\n                for (const id of id_set) {\n                    ids.push(id);\n                }\n            }\n        }\n\n        return util.sorted_ids(ids);\n    }\n\n    get_msg_ids_for_topic(stream_id, topic) {\n        const per_stream_bucketer = this.bucketer.get_bucket(stream_id);\n        if (!per_stream_bucketer) {\n            return [];\n        }\n\n        const topic_bucket = per_stream_bucketer.get_bucket(topic);\n        if (!topic_bucket) {\n            return [];\n        }\n\n        const ids = Array.from(topic_bucket);\n        return util.sorted_ids(ids);\n    }\n\n    get_streams_with_unread_mentions() {\n        const streams_with_mentions = new Set();\n        // Collect the set of streams containing at least one mention.\n        // We can do this efficiently, since unread_mentions_counter\n        // contains all unread message IDs, and we use stream_ids as\n        // bucket keys in our outer bucketer.\n\n        for (const message_id of unread_mentions_counter) {\n            const stream_id = this.bucketer.reverse_lookup.get(message_id);\n            streams_with_mentions.add(stream_id);\n        }\n\n        return streams_with_mentions;\n    }\n\n    topic_has_any_unread(stream_id, topic) {\n        const per_stream_bucketer = this.bucketer.get_bucket(stream_id);\n\n        if (!per_stream_bucketer) {\n            return false;\n        }\n\n        const id_set = per_stream_bucketer.get_bucket(topic);\n        if (!id_set) {\n            return false;\n        }\n\n        return id_set.size !== 0;\n    }\n\n    get_topics_with_unread_mentions(stream_id) {\n        // Returns the set of lower cased topics with unread mentions\n        // in the given stream.\n        const result = new Set();\n        const per_stream_bucketer = this.bucketer.get_bucket(stream_id);\n\n        if (!per_stream_bucketer) {\n            return result;\n        }\n\n        for (const message_id of unread_mentions_counter) {\n            // Because bucket keys in per_stream_bucketer are topics,\n            // we can just directly use reverse_lookup to find the\n            // topic in this stream containing a given unread message\n            // ID. If it's not in this stream, we'll get undefined.\n            const topic_match = per_stream_bucketer.reverse_lookup.get(message_id);\n            if (topic_match !== undefined) {\n                // Important: We lower-case topics here before adding them\n                // to this set, to support case-insensitive checks.\n                result.add(topic_match.toLowerCase());\n            }\n        }\n\n        return result;\n    }\n}\nconst unread_topic_counter = new UnreadTopicCounter();\n\nfunction add_message_to_unread_mention_topics(message_id) {\n    const message = message_store.get(message_id);\n    if (message.type !== \"stream\") {\n        return;\n    }\n    const topic_key = recent_topics_util.get_topic_key(message.stream_id, message.topic);\n    if (unread_mention_topics.has(topic_key)) {\n        unread_mention_topics.get(topic_key).add(message_id);\n    }\n    unread_mention_topics.set(topic_key, new Set([message_id]));\n}\n\nfunction remove_message_from_unread_mention_topics(message_id) {\n    const stream_id = unread_topic_counter.bucketer.reverse_lookup.get(message_id);\n    if (!stream_id) {\n        // Private messages and messages that were already not unread\n        // exit here.\n        return;\n    }\n\n    const per_stream_bucketer = unread_topic_counter.bucketer.get_bucket(stream_id);\n    if (!per_stream_bucketer) {\n        blueslip.error(`Could not find per_stream_bucketer for ${message_id}.`);\n        return;\n    }\n\n    const topic = per_stream_bucketer.reverse_lookup.get(message_id);\n    const topic_key = recent_topics_util.get_topic_key(stream_id, topic);\n    if (unread_mention_topics.has(topic_key)) {\n        unread_mention_topics.get(topic_key).delete(message_id);\n    }\n}\n\nexport function clear_and_populate_unread_mention_topics() {\n    // The unread_mention_topics is an important data structure for\n    // efficiently querying whether a given stream/topic pair contains\n    // unread mentions.\n    //\n    // It is effectively a cache, since it can be reconstructed from\n    // unread_mentions_counter (IDs for all unread mentions) and\n    // unread_topic_counter (Streams/topics for all unread messages).\n    //\n    // Since this function runs in O(unread mentions) time, we can use\n    // it in topic editing code paths where it might be onerous to\n    // write custom live-update code; but we should avoid calling it\n    // in loops.\n    unread_mention_topics.clear();\n\n    for (const message_id of unread_mentions_counter) {\n        const stream_id = unread_topic_counter.bucketer.reverse_lookup.get(message_id);\n        if (!stream_id) {\n            continue;\n        }\n        const per_stream_bucketer = unread_topic_counter.bucketer.get_bucket(stream_id);\n        const topic = per_stream_bucketer.reverse_lookup.get(message_id);\n        const topic_key = recent_topics_util.get_topic_key(stream_id, topic);\n        if (unread_mention_topics.has(topic_key)) {\n            unread_mention_topics.get(topic_key).add(message_id);\n        }\n        unread_mention_topics.set(topic_key, new Set([message_id]));\n    }\n}\n\nexport function message_unread(message) {\n    if (message === undefined) {\n        return false;\n    }\n    return message.unread;\n}\n\nexport function get_read_message_ids(message_ids) {\n    return message_ids.filter((message_id) => !unread_messages.has(message_id));\n}\n\nexport function get_unread_message_ids(message_ids) {\n    return message_ids.filter((message_id) => unread_messages.has(message_id));\n}\n\nexport function get_unread_messages(messages) {\n    return messages.filter((message) => unread_messages.has(message.id));\n}\n\nexport function get_unread_message_count() {\n    return unread_messages.size;\n}\n\nexport function update_unread_topics(msg, event) {\n    const new_topic = util.get_edit_event_topic(event);\n    const {new_stream_id} = event;\n\n    if (new_topic === undefined && new_stream_id === undefined) {\n        return;\n    }\n\n    if (!unread_messages.has(msg.id)) {\n        return;\n    }\n\n    unread_topic_counter.delete(msg.id);\n\n    unread_topic_counter.add({\n        message_id: msg.id,\n        stream_id: new_stream_id || msg.stream_id,\n        topic: new_topic || msg.topic,\n    });\n}\n\nexport function process_loaded_messages(messages, expect_no_new_unreads = false) {\n    // Process a set of messages that we have full copies of from the\n    // server for whether any are unread but not tracked as such by\n    // our data structures. This can occur due to old_unreads_missing,\n    // changes in muting configuration, innocent races, or potentially bugs.\n    //\n    // Returns whether there were any new unread messages; in that\n    // case, the caller will need to trigger a rerender of UI\n    // displaying unread counts.\n\n    let any_untracked_unread_messages = false;\n    for (const message of messages) {\n        if (message.unread) {\n            if (unread_messages.has(message.id)) {\n                // If we're already tracking this message as unread, there's nothing to do.\n                continue;\n            }\n\n            if (expect_no_new_unreads && !old_unreads_missing) {\n                // This may happen due to races, where someone narrows\n                // to a view and the message_fetch request returns\n                // before server_events system delivers the message to\n                // the client.\n                blueslip.log(`New unread ${message.id} discovered in process_loaded_messages.`);\n            }\n\n            const user_ids_string =\n                message.type === \"private\" ? people.pm_reply_user_string(message) : undefined;\n\n            process_unread_message({\n                id: message.id,\n                mentioned: message.mentioned,\n                mentioned_me_directly: message.mentioned_me_directly,\n                stream_id: message.stream_id,\n                topic: message.topic,\n                type: message.type,\n                unread: true,\n                user_ids_string,\n            });\n            any_untracked_unread_messages = true;\n        }\n    }\n\n    return any_untracked_unread_messages;\n}\n\nexport function process_unread_message(message) {\n    // The `message` here just needs to require certain fields. For example,\n    // the \"message\" may actually be constructed from a Zulip event that doesn't\n    // include fields like \"content\".  The caller must verify that the message\n    // is actually unread--we don't defend against that.\n    unread_messages.add(message.id);\n\n    if (message.type === \"private\") {\n        unread_pm_counter.add({\n            message_id: message.id,\n            user_ids_string: message.user_ids_string,\n        });\n    }\n\n    if (message.type === \"stream\") {\n        unread_topic_counter.add({\n            message_id: message.id,\n            stream_id: message.stream_id,\n            topic: message.topic,\n        });\n    }\n\n    update_message_for_mention(message);\n}\n\nexport function update_message_for_mention(message, content_edited = false) {\n    if (!message.unread) {\n        unread_mentions_counter.delete(message.id);\n        remove_message_from_unread_mention_topics(message.id);\n        return;\n    }\n\n    const is_unmuted_mention =\n        message.type === \"stream\" &&\n        message.mentioned &&\n        !user_topics.is_topic_muted(message.stream_id, message.topic);\n\n    if (is_unmuted_mention || message.mentioned_me_directly) {\n        unread_mentions_counter.add(message.id);\n        add_message_to_unread_mention_topics(message.id);\n    } else {\n        unread_mentions_counter.delete(message.id);\n        remove_message_from_unread_mention_topics(message.id);\n    }\n\n    if (content_edited && message.type === \"stream\") {\n        // We only need to update recent topics here if this was a content change in an unread\n        // mention, since in other cases recent topics gets rerendered by other functions.\n        const topic_key = recent_topics_util.get_topic_key(message.stream_id, message.topic);\n        recent_topics_ui.inplace_rerender(topic_key);\n    }\n}\n\nexport function mark_as_read(message_id) {\n    // We don't need to check anything about the message, since all\n    // the following methods are cheap and work fine even if message_id\n    // was never set to unread.\n    unread_pm_counter.delete(message_id);\n\n    // Important: This function uses `unread_topic_counter` to look up\n    // the stream/topic for this previously unread message, so much\n    // happen before the message is removed from that data structure.\n    remove_message_from_unread_mention_topics(message_id);\n    unread_topic_counter.delete(message_id);\n    unread_mentions_counter.delete(message_id);\n    unread_messages.delete(message_id);\n\n    const message = message_store.get(message_id);\n    if (message) {\n        message.unread = false;\n    }\n}\n\nexport function declare_bankruptcy() {\n    // Only used in tests.\n    unread_pm_counter.clear();\n    unread_topic_counter.clear();\n    unread_mentions_counter.clear();\n    unread_messages.clear();\n    unread_mention_topics.clear();\n}\n\nexport function get_counts() {\n    const res = {};\n\n    // Return a data structure with various counts.  This function should be\n    // pretty cheap, even if you don't care about all the counts, and you\n    // should strive to keep it free of side effects on globals or DOM.\n    res.private_message_count = 0;\n    res.mentioned_message_count = unread_mentions_counter.size;\n\n    // This sets stream_count, topic_count, and home_unread_messages\n    const topic_res = unread_topic_counter.get_counts();\n    const streams_with_mentions = unread_topic_counter.get_streams_with_unread_mentions();\n    res.home_unread_messages = topic_res.stream_unread_messages;\n    res.stream_count = topic_res.stream_count;\n    res.streams_with_mentions = Array.from(streams_with_mentions);\n\n    const pm_res = unread_pm_counter.get_counts();\n    res.pm_count = pm_res.pm_dict;\n    res.private_message_count = pm_res.total_count;\n    res.home_unread_messages += pm_res.total_count;\n\n    return res;\n}\n\n// Saves us from calling to get_counts() when we can avoid it.\nexport function calculate_notifiable_count(res) {\n    let new_message_count = 0;\n\n    const only_show_notifiable =\n        user_settings.desktop_icon_count_display ===\n        settings_config.desktop_icon_count_display_values.notifiable.code;\n    const no_notifications =\n        user_settings.desktop_icon_count_display ===\n        settings_config.desktop_icon_count_display_values.none.code;\n    if (only_show_notifiable) {\n        // DESKTOP_ICON_COUNT_DISPLAY_NOTIFIABLE\n        new_message_count = res.mentioned_message_count + res.private_message_count;\n    } else if (no_notifications) {\n        // DESKTOP_ICON_COUNT_DISPLAY_NONE\n        new_message_count = 0;\n    } else {\n        // DESKTOP_ICON_COUNT_DISPLAY_MESSAGES\n        new_message_count = res.home_unread_messages;\n    }\n    return new_message_count;\n}\n\nexport function get_notifiable_count() {\n    const res = get_counts();\n    return calculate_notifiable_count(res);\n}\n\nexport function num_unread_for_stream(stream_id) {\n    return unread_topic_counter.get_stream_count(stream_id);\n}\n\nexport function num_unread_for_topic(stream_id, topic_name) {\n    return unread_topic_counter.get(stream_id, topic_name);\n}\n\nexport function stream_has_any_unread_mentions(stream_id) {\n    // This function is somewhat inefficient and thus should not be\n    // called in loops, since runs in O(total unread mentions) time.\n    const streams_with_mentions = unread_topic_counter.get_streams_with_unread_mentions();\n    return streams_with_mentions.has(stream_id);\n}\n\nexport function topic_has_any_unread_mentions(stream_id, topic) {\n    // Because this function is called in a loop for every displayed\n    // Recent Topics row, it's important for it to run in O(1) time.\n    const topic_key = stream_id + \":\" + topic.toLowerCase();\n    return unread_mention_topics.get(topic_key) && unread_mention_topics.get(topic_key).size > 0;\n}\n\nexport function topic_has_any_unread(stream_id, topic) {\n    return unread_topic_counter.topic_has_any_unread(stream_id, topic);\n}\n\nexport function get_topics_with_unread_mentions(stream_id) {\n    return unread_topic_counter.get_topics_with_unread_mentions(stream_id);\n}\n\nexport function num_unread_for_user_ids_string(user_ids_string) {\n    return unread_pm_counter.num_unread(user_ids_string);\n}\n\nexport function get_msg_ids_for_stream(stream_id) {\n    return unread_topic_counter.get_msg_ids_for_stream(stream_id);\n}\n\nexport function get_msg_ids_for_topic(stream_id, topic_name) {\n    return unread_topic_counter.get_msg_ids_for_topic(stream_id, topic_name);\n}\n\nexport function get_msg_ids_for_user_ids_string(user_ids_string) {\n    return unread_pm_counter.get_msg_ids_for_user_ids_string(user_ids_string);\n}\n\nexport function get_msg_ids_for_private() {\n    return unread_pm_counter.get_msg_ids();\n}\n\nexport function get_msg_ids_for_mentions() {\n    const ids = Array.from(unread_mentions_counter);\n\n    return util.sorted_ids(ids);\n}\n\nexport function get_all_msg_ids() {\n    const ids = Array.from(unread_messages);\n\n    return util.sorted_ids(ids);\n}\n\nexport function get_missing_topics(opts) {\n    return unread_topic_counter.get_missing_topics(opts);\n}\n\nexport function get_msg_ids_for_starred() {\n    // This is here for API consistency sake--we never\n    // have unread starred messages.  (Some day we may ironically\n    // want to make starring the same as mark-as-unread, but\n    // for now starring === reading.)\n    return [];\n}\n\nexport function initialize(params) {\n    const unread_msgs = params.unread_msgs;\n\n    old_unreads_missing = unread_msgs.old_unreads_missing;\n    unread_pm_counter.set_huddles(unread_msgs.huddles);\n    unread_pm_counter.set_pms(unread_msgs.pms);\n    unread_topic_counter.set_streams(unread_msgs.streams);\n\n    for (const message_id of unread_msgs.mentions) {\n        unread_mentions_counter.add(message_id);\n    }\n    clear_and_populate_unread_mention_topics();\n\n    for (const obj of unread_msgs.huddles) {\n        for (const message_id of obj.unread_message_ids) {\n            unread_messages.add(message_id);\n        }\n    }\n\n    for (const obj of unread_msgs.pms) {\n        for (const message_id of obj.unread_message_ids) {\n            unread_messages.add(message_id);\n        }\n    }\n\n    for (const obj of unread_msgs.streams) {\n        for (const message_id of obj.unread_message_ids) {\n            unread_messages.add(message_id);\n        }\n    }\n\n    for (const message_id of unread_msgs.mentions) {\n        unread_messages.add(message_id);\n    }\n}\n","import $ from \"jquery\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as channel from \"./channel\";\nimport {$t_html} from \"./i18n\";\nimport * as loading from \"./loading\";\nimport * as message_flags from \"./message_flags\";\nimport * as message_lists from \"./message_lists\";\nimport * as message_live_update from \"./message_live_update\";\nimport * as message_store from \"./message_store\";\nimport * as message_viewport from \"./message_viewport\";\nimport * as notifications from \"./notifications\";\nimport * as people from \"./people\";\nimport * as recent_topics_ui from \"./recent_topics_ui\";\nimport * as recent_topics_util from \"./recent_topics_util\";\nimport * as ui_report from \"./ui_report\";\nimport * as unread from \"./unread\";\nimport * as unread_ui from \"./unread_ui\";\n\nlet loading_indicator_displayed = false;\n\n// We might want to use a slightly smaller batch for the first\n// request, because empirically, the first request can be\n// significantly slower, likely due to the database warming up its\n// cache with your UserMessage rows. We don't do that, just because\n// the progress indicator experience of 1000, 3000, etc. feels weird.\nconst INITIAL_BATCH_SIZE = 1000;\nconst FOLLOWUP_BATCH_SIZE = 1000;\n\nexport function mark_all_as_read(args = {}) {\n    args = {\n        // We use an anchor of \"oldest\", not \"first_unread\", because\n        // \"first_unread\" will be the oldest non-muted unread message,\n        // which would result in muted unreads older than the first\n        // unread not being processed.\n        anchor: \"oldest\",\n        messages_read_till_now: 0,\n        num_after: INITIAL_BATCH_SIZE,\n        ...args,\n    };\n    const request = {\n        anchor: args.anchor,\n        // anchor=\"oldest\" is an anchor ID lower than any valid\n        // message ID; and follow-up requests will have already\n        // processed the anchor ID, so we just want this to be\n        // unconditionally false.\n        include_anchor: false,\n        num_before: 0,\n        num_after: args.num_after,\n        op: \"add\",\n        flag: \"read\",\n        // Since there's a database index on is:unread, it's a fast\n        // search query and thus worth including here as an optimization.\n        narrow: JSON.stringify([{operator: \"is\", operand: \"unread\", negated: false}]),\n    };\n    channel.post({\n        url: \"/json/messages/flags/narrow\",\n        data: request,\n        success(data) {\n            const messages_read_till_now = args.messages_read_till_now + data.updated_count;\n\n            if (!data.found_newest) {\n                // If we weren't able to make everything as read in a\n                // single API request, then show a loading indicator.\n                ui_report.loading(\n                    $t_html(\n                        {\n                            defaultMessage:\n                                \"{N, plural, one {Working… {N} message marked as read so far.} other {Working… {N} messages marked as read so far.}}\",\n                        },\n                        {N: messages_read_till_now},\n                    ),\n                    $(\"#request-progress-status-banner\"),\n                );\n                if (!loading_indicator_displayed) {\n                    loading.make_indicator(\n                        $(\"#request-progress-status-banner .loading-indicator\"),\n                        {abs_positioned: true},\n                    );\n                    loading_indicator_displayed = true;\n                }\n\n                mark_all_as_read({\n                    anchor: data.last_processed_id,\n                    messages_read_till_now,\n                    num_after: FOLLOWUP_BATCH_SIZE,\n                });\n            } else {\n                if (loading_indicator_displayed) {\n                    // Only show the success message if a progress banner was displayed.\n                    ui_report.loading(\n                        $t_html(\n                            {\n                                defaultMessage:\n                                    \"{N, plural, one {Done! {N} message marked as read.} other {Done! {N} messages marked as read.}}\",\n                            },\n                            {N: messages_read_till_now},\n                        ),\n                        $(\"#request-progress-status-banner\"),\n                        true,\n                    );\n                    loading_indicator_displayed = false;\n                }\n\n                if (unread.old_unreads_missing) {\n                    // In the rare case that the user had more than\n                    // 50K total unreads on the server, the client\n                    // won't have known about all of them; this was\n                    // communicated to the client via\n                    // unread.old_unreads_missing.\n                    //\n                    // However, since we know we just marked\n                    // **everything** as read, we know that we now\n                    // have a correct data set of unreads.\n                    unread.clear_old_unreads_missing();\n                    blueslip.log(\"Cleared old_unreads_missing after bankruptcy.\");\n                }\n            }\n        },\n        error(xhr) {\n            // If we hit the rate limit, just continue without showing any error.\n            if (xhr.responseJSON.code === \"RATE_LIMIT_HIT\") {\n                const milliseconds_to_wait = 1000 * xhr.responseJSON[\"retry-after\"];\n                setTimeout(() => mark_all_as_read(args), milliseconds_to_wait);\n            } else {\n                // TODO: Ideally this would be a ui_report.error();\n                // the user needs to know that our operation failed.\n                blueslip.error(\"Failed to mark messages as read: \" + xhr.responseText);\n            }\n        },\n    });\n}\n\nfunction process_newly_read_message(message, options) {\n    for (const msg_list of message_lists.all_rendered_message_lists()) {\n        msg_list.show_message_as_read(message, options);\n    }\n    notifications.close_notification(message);\n    recent_topics_ui.update_topic_unread_count(message);\n}\n\nexport function mark_as_unread_from_here(\n    message_id,\n    include_anchor = true,\n    messages_marked_unread_till_now = 0,\n    num_after = INITIAL_BATCH_SIZE - 1,\n    narrow,\n) {\n    if (narrow === undefined) {\n        narrow = JSON.stringify(message_lists.current.data.filter.operators());\n    }\n    message_lists.current.prevent_reading();\n    const opts = {\n        anchor: message_id,\n        include_anchor,\n        num_before: 0,\n        num_after,\n        narrow,\n        op: \"remove\",\n        flag: \"read\",\n    };\n    channel.post({\n        url: \"/json/messages/flags/narrow\",\n        data: opts,\n        success(data) {\n            messages_marked_unread_till_now += data.updated_count;\n\n            if (!data.found_newest) {\n                // If we weren't able to complete the request fully in\n                // the current batch, show a progress indicator.\n                ui_report.loading(\n                    $t_html(\n                        {\n                            defaultMessage:\n                                \"{N, plural, one {Working… {N} message marked as unread so far.} other {Working… {N} messages marked as unread so far.}}\",\n                        },\n                        {N: messages_marked_unread_till_now},\n                    ),\n                    $(\"#request-progress-status-banner\"),\n                );\n                if (!loading_indicator_displayed) {\n                    loading.make_indicator(\n                        $(\"#request-progress-status-banner .loading-indicator\"),\n                        {abs_positioned: true},\n                    );\n                    loading_indicator_displayed = true;\n                }\n                mark_as_unread_from_here(\n                    data.last_processed_id,\n                    false,\n                    messages_marked_unread_till_now,\n                    FOLLOWUP_BATCH_SIZE,\n                    narrow,\n                );\n            } else if (loading_indicator_displayed) {\n                // If we were showing a loading indicator, then\n                // display that we finished. For the common case where\n                // the operation succeeds in a single batch, we don't\n                // bother distracting the user with the indication;\n                // the success will be obvious from the UI updating.\n                loading_indicator_displayed = false;\n                ui_report.loading(\n                    $t_html(\n                        {\n                            defaultMessage:\n                                \"{N, plural, one {Done! {N} message marked as unread.} other {Done! {N} messages marked as unread.}}\",\n                        },\n                        {N: messages_marked_unread_till_now},\n                    ),\n                    $(\"#request-progress-status-banner\"),\n                    true,\n                );\n            }\n        },\n        error(xhr) {\n            // If we hit the rate limit, just continue without showing any error.\n            if (xhr.responseJSON.code === \"RATE_LIMIT_HIT\") {\n                const milliseconds_to_wait = 1000 * xhr.responseJSON[\"retry-after\"];\n                setTimeout(\n                    () =>\n                        mark_as_unread_from_here(\n                            message_id,\n                            false,\n                            messages_marked_unread_till_now,\n                            narrow,\n                        ),\n                    milliseconds_to_wait,\n                );\n            } else {\n                // TODO: Ideally, this case would communicate the\n                // failure to the user, with some manual retry\n                // offered, since the most likely cause is a 502.\n                blueslip.error(\"Unexpected error marking messages as unread: \" + xhr.responseText);\n            }\n        },\n    });\n}\n\nexport function resume_reading() {\n    message_lists.current.resume_reading();\n}\n\nexport function process_read_messages_event(message_ids) {\n    /*\n        This code has a lot in common with notify_server_messages_read,\n        but there are subtle differences due to the fact that the\n        server can tell us about unread messages that we didn't\n        actually read locally (and which we may not have even\n        loaded locally).\n    */\n    const options = {from: \"server\"};\n\n    message_ids = unread.get_unread_message_ids(message_ids);\n    if (message_ids.length === 0) {\n        return;\n    }\n\n    for (const message_id of message_ids) {\n        if (message_lists.current.narrowed) {\n            // I'm not sure this entirely makes sense for all server\n            // notifications.\n            unread.set_messages_read_in_narrow(true);\n        }\n\n        unread.mark_as_read(message_id);\n\n        const message = message_store.get(message_id);\n\n        // TODO: This ends up doing one in-place rerender operation on\n        // recent conversations per message, not a single global\n        // rerender or one per conversation.\n        if (message) {\n            process_newly_read_message(message, options);\n        }\n    }\n\n    unread_ui.update_unread_counts();\n}\n\nexport function process_unread_messages_event({message_ids, message_details}) {\n    // This is the reverse of  process_unread_messages_event.\n    message_ids = unread.get_read_message_ids(message_ids);\n    if (message_ids.length === 0) {\n        return;\n    }\n\n    if (message_lists.current.narrowed) {\n        unread.set_messages_read_in_narrow(false);\n    }\n\n    for (const message_id of message_ids) {\n        const message = message_store.get(message_id);\n\n        if (message) {\n            message.unread = true;\n        }\n\n        const message_info = message_details[message_id];\n\n        let user_ids_string;\n\n        if (message_info.type === \"private\") {\n            user_ids_string = people.pm_lookup_key_from_user_ids(message_info.user_ids);\n        }\n\n        unread.process_unread_message({\n            id: message_id,\n            mentioned: message_info.mentioned,\n            stream_id: message_info.stream_id,\n            topic: message_info.topic,\n            type: message_info.type,\n            unread: true,\n            user_ids_string,\n        });\n    }\n\n    /*\n        A batch of messages marked as unread can be 1000+ messages, so\n        we do want to do a bulk operation for these UI updates.\n\n        We use a big-hammer approach now to updating the message view.\n        This is relatively harmless, since the only time we are called is\n        when the user herself marks her message as unread.  But we\n        do eventually want to be more surgical here, especially once we\n        have a final scheme for how best to structure the HTML within\n        the message to indicate read-vs.-unread.  Currently we use a\n        green border, but that may change.\n\n        The main downside of doing a full rerender is that it can be\n        user-visible in the form of users' avatars flickering.\n    */\n    message_live_update.rerender_messages_view();\n    recent_topics_ui.complete_rerender();\n\n    if (\n        !message_lists.current.can_mark_messages_read() &&\n        message_lists.current.has_unread_messages()\n    ) {\n        unread_ui.notify_messages_remain_unread();\n    }\n\n    unread_ui.update_unread_counts();\n}\n\n// Takes a list of messages and marks them as read.\n// Skips any messages that are already marked as read.\nexport function notify_server_messages_read(messages, options = {}) {\n    messages = unread.get_unread_messages(messages);\n    if (messages.length === 0) {\n        return;\n    }\n\n    message_flags.send_read(messages);\n\n    for (const message of messages) {\n        if (message_lists.current.narrowed) {\n            unread.set_messages_read_in_narrow(true);\n        }\n\n        unread.mark_as_read(message.id);\n        process_newly_read_message(message, options);\n    }\n\n    unread_ui.update_unread_counts();\n}\n\nexport function notify_server_message_read(message, options) {\n    notify_server_messages_read([message], options);\n}\n\nexport function process_scrolled_to_bottom() {\n    if (recent_topics_util.is_visible()) {\n        // First, verify the current message list is visible.\n        return;\n    }\n\n    if (message_lists.current.can_mark_messages_read()) {\n        mark_current_list_as_read();\n        return;\n    }\n\n    // For message lists that don't support marking messages as read\n    // automatically, we display a banner offering to let you mark\n    // them as read manually, only if there are unreads present.\n    if (message_lists.current.has_unread_messages()) {\n        unread_ui.notify_messages_remain_unread();\n    }\n}\n\n// If we ever materially change the algorithm for this function, we\n// may need to update notifications.received_messages as well.\nexport function process_visible() {\n    if (message_viewport.is_visible_and_focused() && message_viewport.bottom_message_visible()) {\n        process_scrolled_to_bottom();\n    }\n}\n\nexport function mark_current_list_as_read(options) {\n    notify_server_messages_read(message_lists.current.all_messages(), options);\n}\n\nexport function mark_stream_as_read(stream_id, cont) {\n    channel.post({\n        url: \"/json/mark_stream_as_read\",\n        data: {stream_id},\n        success: cont,\n    });\n}\n\nexport function mark_topic_as_read(stream_id, topic, cont) {\n    channel.post({\n        url: \"/json/mark_topic_as_read\",\n        data: {stream_id, topic_name: topic},\n        success: cont,\n    });\n}\n\nexport function mark_pm_as_read(user_ids_string) {\n    // user_ids_string is a stringified list of user ids which are\n    // participants in the conversation other than the current\n    // user. Eg: \"123,124\" or \"123\"\n    const unread_msg_ids = unread.get_msg_ids_for_user_ids_string(user_ids_string);\n    message_flags.mark_as_read(unread_msg_ids);\n}\n","import $ from \"jquery\";\n\nimport render_mark_as_read_turned_off_banner from \"../templates/mark_as_read_turned_off_banner.hbs\";\n\nimport * as activity from \"./activity\";\nimport * as message_lists from \"./message_lists\";\nimport * as notifications from \"./notifications\";\nimport {page_params} from \"./page_params\";\nimport * as pm_list from \"./pm_list\";\nimport * as stream_list from \"./stream_list\";\nimport * as top_left_corner from \"./top_left_corner\";\nimport * as topic_list from \"./topic_list\";\nimport * as unread from \"./unread\";\nimport {notify_server_messages_read} from \"./unread_ops\";\n\nlet last_mention_count = 0;\nlet user_closed_mark_as_read_turned_off_banner = false;\nexport function hide_mark_as_read_turned_off_banner() {\n    // Use visibility instead of hide() to prevent messages on the screen from\n    // shifting vertically.\n    $(\"#mark_as_read_turned_off_banner\").toggleClass(\"invisible\", true);\n}\n\nexport function reset_mark_as_read_turned_off_banner() {\n    hide_mark_as_read_turned_off_banner();\n    user_closed_mark_as_read_turned_off_banner = false;\n}\n\nexport function notify_messages_remain_unread() {\n    if (!user_closed_mark_as_read_turned_off_banner) {\n        $(\"#mark_as_read_turned_off_banner\").toggleClass(\"invisible\", false);\n    }\n}\n\nfunction do_new_messages_animation($li) {\n    $li.addClass(\"new_messages\");\n    function mid_animation() {\n        $li.removeClass(\"new_messages\");\n        $li.addClass(\"new_messages_fadeout\");\n    }\n    function end_animation() {\n        $li.removeClass(\"new_messages_fadeout\");\n    }\n    setTimeout(mid_animation, 3000);\n    setTimeout(end_animation, 6000);\n}\n\nexport function animate_mention_changes($li, new_mention_count) {\n    if (new_mention_count > last_mention_count) {\n        do_new_messages_animation($li);\n    }\n    last_mention_count = new_mention_count;\n}\n\nexport function set_count_toggle_button($elem, count) {\n    if (count === 0) {\n        if ($elem.is(\":animated\")) {\n            return $elem.stop(true, true).hide();\n        }\n        return $elem.hide(500);\n    } else if (count > 0 && count < 1000) {\n        $elem.show(500);\n        return $elem.text(count);\n    }\n    $elem.show(500);\n    return $elem.text(\"1k+\");\n}\n\nexport function update_unread_counts() {\n    // Pure computation:\n    const res = unread.get_counts();\n\n    // Side effects from here down:\n    // This updates some DOM elements directly, so try to\n    // avoid excessive calls to this.\n    activity.update_dom_with_unread_counts(res);\n    top_left_corner.update_dom_with_unread_counts(res);\n    stream_list.update_dom_with_unread_counts(res);\n    pm_list.update_dom_with_unread_counts(res);\n    topic_list.update();\n    const notifiable_unread_count = unread.calculate_notifiable_count(res);\n    notifications.update_unread_counts(notifiable_unread_count, res.private_message_count);\n\n    // Set the unread counts that we show in the buttons that\n    // toggle open the sidebar menus when we have a thin window.\n    set_count_toggle_button($(\"#streamlist-toggle-unreadcount\"), res.home_unread_messages);\n    set_count_toggle_button($(\"#userlist-toggle-unreadcount\"), res.private_message_count);\n}\n\nexport function should_display_bankruptcy_banner() {\n    // Until we've handled possibly declaring bankruptcy, don't show\n    // unread counts since they only consider messages that are loaded\n    // client side and may be different from the numbers reported by\n    // the server.\n\n    if (!page_params.furthest_read_time) {\n        // We've never read a message.\n        return false;\n    }\n\n    const now = Date.now() / 1000;\n    if (\n        unread.get_unread_message_count() > 500 &&\n        now - page_params.furthest_read_time > 60 * 60 * 24 * 2\n    ) {\n        // 2 days.\n        return true;\n    }\n\n    return false;\n}\n\nexport function initialize() {\n    update_unread_counts();\n\n    $(\"#mark_as_read_turned_off_banner\").html(render_mark_as_read_turned_off_banner());\n    hide_mark_as_read_turned_off_banner();\n    $(\"#mark_view_read\").on(\"click\", () => {\n        // Mark all messages in the current view as read.\n        //\n        // BUG: This logic only supports marking messages visible in\n        // the present view as read; we need a server API to mark\n        // every message matching the current search as read.\n        const unread_messages = message_lists.current.data\n            .all_messages()\n            .filter((message) => unread.message_unread(message));\n        notify_server_messages_read(unread_messages);\n        // New messages received may be marked as read based on narrow type.\n        message_lists.current.resume_reading();\n\n        hide_mark_as_read_turned_off_banner();\n    });\n    $(\"#mark_as_read_close\").on(\"click\", () => {\n        hide_mark_as_read_turned_off_banner();\n        user_closed_mark_as_read_turned_off_banner = true;\n    });\n}\n","import {Uppy} from \"@uppy/core\";\nimport ProgressBar from \"@uppy/progress-bar\";\nimport XHRUpload from \"@uppy/xhr-upload\";\nimport $ from \"jquery\";\n\nimport * as compose_actions from \"./compose_actions\";\nimport * as compose_state from \"./compose_state\";\nimport * as compose_ui from \"./compose_ui\";\nimport {csrf_token} from \"./csrf\";\nimport {$t} from \"./i18n\";\nimport {page_params} from \"./page_params\";\n\n// Show the upload button only if the browser supports it.\nexport function feature_check($upload_button) {\n    if (window.XMLHttpRequest && new window.XMLHttpRequest().upload) {\n        $upload_button.removeClass(\"notdisplayed\");\n    }\n}\n\nexport function get_translated_status(file) {\n    const status = $t({defaultMessage: \"Uploading {filename}…\"}, {filename: file.name});\n    return \"[\" + status + \"]()\";\n}\n\nexport function get_item(key, config) {\n    if (!config) {\n        throw new Error(\"Missing config\");\n    }\n    if (config.mode === \"compose\") {\n        switch (key) {\n            case \"textarea\":\n                return $(\"#compose-textarea\");\n            case \"send_button\":\n                return $(\"#compose-send-button\");\n            case \"send_status_identifier\":\n                return \"#compose-send-status\";\n            case \"send_status\":\n                return $(\"#compose-send-status\");\n            case \"send_status_close_button\":\n                return $(\".compose-send-status-close\");\n            case \"send_status_message\":\n                return $(\"#compose-error-msg\");\n            case \"file_input_identifier\":\n                return \"#compose .file_input\";\n            case \"source\":\n                return \"compose-file-input\";\n            case \"drag_drop_container\":\n                return $(\"#compose\");\n            case \"markdown_preview_hide_button\":\n                return $(\"#compose .undo_markdown_preview\");\n            default:\n                throw new Error(`Invalid key name for mode \"${config.mode}\"`);\n        }\n    } else if (config.mode === \"edit\") {\n        if (!config.row) {\n            throw new Error(\"Missing row in config\");\n        }\n        switch (key) {\n            case \"textarea\":\n                return $(`#edit_form_${CSS.escape(config.row)} .message_edit_content`);\n            case \"send_button\":\n                return $(`#edit_form_${CSS.escape(config.row)} .message_edit_content`)\n                    .closest(\".message_edit_form\")\n                    .find(\".message_edit_save\");\n            case \"send_status_identifier\":\n                return `#message-edit-send-status-${CSS.escape(config.row)}`;\n            case \"send_status\":\n                return $(`#message-edit-send-status-${CSS.escape(config.row)}`);\n            case \"send_status_close_button\":\n                return $(`#message-edit-send-status-${CSS.escape(config.row)}`).find(\n                    \".send-status-close\",\n                );\n            case \"send_status_message\":\n                return $(`#message-edit-send-status-${CSS.escape(config.row)}`).find(\".error-msg\");\n            case \"file_input_identifier\":\n                return `#edit_form_${CSS.escape(config.row)} .file_input`;\n            case \"source\":\n                return \"message-edit-file-input\";\n            case \"drag_drop_container\":\n                return $(`#zfilt${CSS.escape(config.row)} .message_edit_form`);\n            case \"markdown_preview_hide_button\":\n                return $(`#edit_form_${CSS.escape(config.row)} .undo_markdown_preview`);\n            default:\n                throw new Error(`Invalid key name for mode \"${config.mode}\"`);\n        }\n    } else {\n        throw new Error(\"Invalid upload mode!\");\n    }\n}\n\nexport function hide_upload_status(config) {\n    get_item(\"send_button\", config).prop(\"disabled\", false);\n    get_item(\"send_status\", config).removeClass(\"alert-info\").hide();\n}\n\nexport function show_error_message(\n    config,\n    message = $t({defaultMessage: \"An unknown error occurred.\"}),\n) {\n    get_item(\"send_button\", config).prop(\"disabled\", false);\n    get_item(\"send_status\", config).addClass(\"alert-error\").removeClass(\"alert-info\").show();\n    get_item(\"send_status_message\", config).text(message);\n}\n\nexport function upload_files(uppy, config, files) {\n    if (files.length === 0) {\n        return;\n    }\n    if (page_params.max_file_upload_size_mib === 0) {\n        show_error_message(\n            config,\n            $t({\n                defaultMessage: \"File and image uploads have been disabled for this organization.\",\n            }),\n        );\n        return;\n    }\n\n    // If we're looking at a markdown preview, switch back to the edit\n    // UI.  This is important for all the later logic around focus\n    // (etc.) to work correctly.\n    //\n    // We implement this transition through triggering a click on the\n    // toggle button to take advantage of the existing plumbing for\n    // handling the compose and edit UIs.\n    if (get_item(\"markdown_preview_hide_button\", config).is(\":visible\")) {\n        get_item(\"markdown_preview_hide_button\", config).trigger(\"click\");\n    }\n\n    get_item(\"send_button\", config).prop(\"disabled\", true);\n    get_item(\"send_status\", config).addClass(\"alert-info\").removeClass(\"alert-error\").show();\n    get_item(\"send_status_message\", config).html($(\"<p>\").text($t({defaultMessage: \"Uploading…\"})));\n    get_item(\"send_status_close_button\", config).one(\"click\", () => {\n        for (const file of uppy.getFiles()) {\n            compose_ui.replace_syntax(\n                get_translated_status(file),\n                \"\",\n                get_item(\"textarea\", config),\n            );\n        }\n        compose_ui.autosize_textarea(get_item(\"textarea\", config));\n        uppy.cancelAll();\n        get_item(\"textarea\", config).trigger(\"focus\");\n        setTimeout(() => {\n            hide_upload_status(config);\n        }, 500);\n    });\n\n    for (const file of files) {\n        try {\n            compose_ui.insert_syntax_and_focus(\n                get_translated_status(file),\n                get_item(\"textarea\", config),\n            );\n            compose_ui.autosize_textarea(get_item(\"textarea\", config));\n            uppy.addFile({\n                source: get_item(\"source\", config),\n                name: file.name,\n                type: file.type,\n                data: file,\n            });\n        } catch {\n            // Errors are handled by info-visible and upload-error event callbacks.\n            break;\n        }\n    }\n}\n\nexport function setup_upload(config) {\n    const uppy = new Uppy({\n        debug: false,\n        autoProceed: true,\n        restrictions: {\n            maxFileSize: page_params.max_file_upload_size_mib * 1024 * 1024,\n        },\n        locale: {\n            strings: {\n                exceedsSize: $t(\n                    {\n                        defaultMessage:\n                            \"%'{file}' exceeds the maximum file size for attachments ({variable} MB).\",\n                    },\n                    {variable: `${page_params.max_file_upload_size_mib}`},\n                ),\n                failedToUpload: $t({defaultMessage: \"Failed to upload %'{file}'\"}),\n            },\n        },\n    });\n    uppy.setMeta({\n        csrfmiddlewaretoken: csrf_token,\n    });\n    uppy.use(XHRUpload, {\n        endpoint: \"/json/user_uploads\",\n        formData: true,\n        fieldName: \"file\",\n        // Number of concurrent uploads\n        limit: 5,\n        locale: {\n            strings: {\n                timedOut: $t({\n                    defaultMessage: \"Upload stalled for %'{seconds}' seconds, aborting.\",\n                }),\n            },\n        },\n    });\n\n    uppy.use(ProgressBar, {\n        target: get_item(\"send_status_identifier\", config),\n        hideAfterFinish: false,\n    });\n\n    $(\"body\").on(\"change\", get_item(\"file_input_identifier\", config), (event) => {\n        const files = event.target.files;\n        upload_files(uppy, config, files);\n        get_item(\"textarea\", config).trigger(\"focus\");\n        event.target.value = \"\";\n    });\n\n    const $drag_drop_container = get_item(\"drag_drop_container\", config);\n    $drag_drop_container.on(\"dragover\", (event) => event.preventDefault());\n    $drag_drop_container.on(\"dragenter\", (event) => event.preventDefault());\n\n    $drag_drop_container.on(\"drop\", (event) => {\n        event.preventDefault();\n        const files = event.originalEvent.dataTransfer.files;\n        upload_files(uppy, config, files);\n    });\n\n    $drag_drop_container.on(\"paste\", (event) => {\n        const clipboard_data = event.clipboardData || event.originalEvent.clipboardData;\n        if (!clipboard_data) {\n            return;\n        }\n        const items = clipboard_data.items;\n        const files = [];\n        for (const item of items) {\n            if (item.kind !== \"file\") {\n                continue;\n            }\n            const file = item.getAsFile();\n            files.push(file);\n        }\n        upload_files(uppy, config, files);\n    });\n\n    uppy.on(\"upload-success\", (file, response) => {\n        const uri = response.body.uri;\n        if (uri === undefined) {\n            return;\n        }\n        const split_uri = uri.split(\"/\");\n        const filename = split_uri.at(-1);\n        if (config.mode === \"compose\" && !compose_state.composing()) {\n            compose_actions.start(\"stream\");\n        }\n        const filename_uri = \"[\" + filename + \"](\" + uri + \")\";\n        compose_ui.replace_syntax(\n            get_translated_status(file),\n            filename_uri,\n            get_item(\"textarea\", config),\n        );\n        compose_ui.autosize_textarea(get_item(\"textarea\", config));\n    });\n\n    uppy.on(\"complete\", () => {\n        let uploads_in_progress = false;\n        for (const file of uppy.getFiles()) {\n            if (file.progress.uploadComplete) {\n                // The uploaded files should be removed since uppy don't allow files in the store\n                // to be re-uploaded again.\n                uppy.removeFile(file.id);\n            } else {\n                // Happens when user tries to upload files when there is already an existing batch\n                // being uploaded. So when the first batch of files complete, the second batch would\n                // still be in progress.\n                uploads_in_progress = true;\n            }\n        }\n\n        const has_errors = get_item(\"send_status\", config).hasClass(\"alert-error\");\n        if (!uploads_in_progress && !has_errors) {\n            setTimeout(() => {\n                hide_upload_status(config);\n            }, 500);\n        }\n    });\n\n    uppy.on(\"info-visible\", () => {\n        // Uppy's `info-visible` event is issued after prepending the\n        // notice details into the list of event events accessed via\n        // uppy.getState().info. Extract the notice details so that we\n        // can potentially act on the error.\n        //\n        // TODO: Ideally, we'd be using the `.error()` hook or\n        // something, not parsing error message strings.\n        const info = uppy.getState().info[0];\n        if (info.type === \"error\" && info.message === \"No Internet connection\") {\n            // server_events already handles the case of no internet.\n            return;\n        }\n\n        if (info.type === \"error\" && info.details === \"Upload Error\") {\n            // The server errors come under 'Upload Error'. But we can't handle them\n            // here because info object don't contain response.body.msg received from\n            // the server. Server errors are hence handled by on('upload-error').\n            return;\n        }\n\n        if (info.type === \"error\") {\n            // The remaining errors are mostly frontend errors like file being too large\n            // for upload.\n            uppy.cancelAll();\n            show_error_message(config, info.message);\n        }\n    });\n\n    uppy.on(\"upload-error\", (file, error, response) => {\n        const message = response ? response.body.msg : undefined;\n        uppy.cancelAll();\n        show_error_message(config, message);\n        compose_ui.replace_syntax(get_translated_status(file), \"\", get_item(\"textarea\", config));\n        compose_ui.autosize_textarea(get_item(\"textarea\", config));\n    });\n\n    uppy.on(\"restriction-failed\", (file) => {\n        compose_ui.replace_syntax(get_translated_status(file), \"\", get_item(\"textarea\", config));\n        compose_ui.autosize_textarea(get_item(\"textarea\", config));\n    });\n\n    return uppy;\n}\n","// This module is kind of small, but it will help us keep\n// server_events.js simple while breaking some circular\n// dependencies that existed when this code was in people.js.\n// (We should do bot updates here too.)\nimport $ from \"jquery\";\n\nimport * as activity from \"./activity\";\nimport * as blueslip from \"./blueslip\";\nimport * as compose from \"./compose\";\nimport * as gear_menu from \"./gear_menu\";\nimport * as message_live_update from \"./message_live_update\";\nimport * as narrow_state from \"./narrow_state\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as pm_list from \"./pm_list\";\nimport * as settings_account from \"./settings_account\";\nimport * as settings_config from \"./settings_config\";\nimport * as settings_linkifiers from \"./settings_linkifiers\";\nimport * as settings_org from \"./settings_org\";\nimport * as settings_profile_fields from \"./settings_profile_fields\";\nimport * as settings_realm_user_settings_defaults from \"./settings_realm_user_settings_defaults\";\nimport * as settings_streams from \"./settings_streams\";\nimport * as settings_users from \"./settings_users\";\n\nexport const update_person = function update(person) {\n    const person_obj = people.get_by_user_id(person.user_id);\n\n    if (!person_obj) {\n        blueslip.error(\"Got update_person event for unexpected user \" + person.user_id);\n        return;\n    }\n\n    if (Object.hasOwn(person, \"new_email\")) {\n        const user_id = person.user_id;\n        const new_email = person.new_email;\n\n        narrow_state.update_email(user_id, new_email);\n        compose.update_email(user_id, new_email);\n\n        if (people.is_my_user_id(person.user_id)) {\n            page_params.email = new_email;\n        }\n\n        people.update_email(user_id, new_email);\n    }\n\n    if (Object.hasOwn(person, \"delivery_email\")) {\n        const delivery_email = person.delivery_email;\n\n        if (people.is_my_user_id(person.user_id)) {\n            settings_account.update_email(delivery_email);\n            page_params.delivery_email = delivery_email;\n            settings_account.hide_confirm_email_banner();\n        }\n    }\n\n    if (Object.hasOwn(person, \"full_name\")) {\n        people.set_full_name(person_obj, person.full_name);\n\n        settings_users.update_user_data(person.user_id, person);\n        activity.redraw();\n        message_live_update.update_user_full_name(person.user_id, person.full_name);\n        pm_list.update_private_messages();\n        if (people.is_my_user_id(person.user_id)) {\n            page_params.full_name = person.full_name;\n            settings_account.update_full_name(person.full_name);\n        }\n    }\n\n    if (Object.hasOwn(person, \"role\")) {\n        person_obj.role = person.role;\n        person_obj.is_owner = person.role === settings_config.user_role_values.owner.code;\n        person_obj.is_admin =\n            person.role === settings_config.user_role_values.admin.code || person_obj.is_owner;\n        person_obj.is_guest = person.role === settings_config.user_role_values.guest.code;\n        person_obj.is_moderator = person.role === settings_config.user_role_values.moderator.code;\n        settings_users.update_user_data(person.user_id, person);\n\n        if (people.is_my_user_id(person.user_id) && page_params.is_owner !== person_obj.is_owner) {\n            page_params.is_owner = person_obj.is_owner;\n            settings_org.maybe_disable_widgets();\n        }\n\n        if (people.is_my_user_id(person.user_id) && page_params.is_admin !== person_obj.is_admin) {\n            page_params.is_admin = person_obj.is_admin;\n            gear_menu.update_org_settings_menu_item();\n            settings_linkifiers.maybe_disable_widgets();\n            settings_org.maybe_disable_widgets();\n            settings_profile_fields.maybe_disable_widgets();\n            settings_streams.maybe_disable_widgets();\n            settings_realm_user_settings_defaults.maybe_disable_widgets();\n        }\n\n        if (\n            people.is_my_user_id(person.user_id) &&\n            page_params.is_moderator !== person_obj.is_moderator\n        ) {\n            page_params.is_moderator = person_obj.is_moderator;\n        }\n    }\n\n    if (Object.hasOwn(person, \"is_billing_admin\")) {\n        person_obj.is_billing_admin = person.is_billing_admin;\n        if (people.is_my_user_id(person.user_id)) {\n            page_params.is_billing_admin = person_obj.is_billing_admin;\n        }\n    }\n\n    if (Object.hasOwn(person, \"avatar_url\")) {\n        const url = person.avatar_url;\n        person_obj.avatar_url = url;\n        person_obj.avatar_version = person.avatar_version;\n\n        if (people.is_my_user_id(person.user_id)) {\n            page_params.avatar_source = person.avatar_source;\n            page_params.avatar_url = url;\n            page_params.avatar_url_medium = person.avatar_url_medium;\n            $(\"#user-avatar-upload-widget .image-block\").attr(\"src\", person.avatar_url_medium);\n        }\n\n        message_live_update.update_avatar(person_obj.user_id, person.avatar_url);\n    }\n\n    if (Object.hasOwn(person, \"custom_profile_field\")) {\n        people.set_custom_profile_field_data(person.user_id, person.custom_profile_field);\n    }\n\n    if (Object.hasOwn(person, \"timezone\")) {\n        person_obj.timezone = person.timezone;\n    }\n\n    if (Object.hasOwn(person, \"bot_owner_id\")) {\n        person_obj.bot_owner_id = person.bot_owner_id;\n    }\n};\n","import $ from \"jquery\";\n\nimport * as channel from \"./channel\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as loading from \"./loading\";\nimport * as ui_report from \"./ui_report\";\nimport * as user_group_create_members from \"./user_group_create_members\";\nimport * as user_group_create_members_data from \"./user_group_create_members_data\";\nimport * as user_groups from \"./user_groups\";\nimport * as user_group_settings_ui from \"./user_groups_settings_ui\";\n\nclass UserGroupMembershipError {\n    report_no_members_to_user_group() {\n        $(\"#user_group_membership_error\").text(\n            $t({defaultMessage: \"You cannot create a user_group with no members!\"}),\n        );\n        $(\"#user_group_membership_error\").show();\n    }\n\n    clear_errors() {\n        $(\"#user_group_membership_error\").hide();\n    }\n}\nconst user_group_membership_error = new UserGroupMembershipError();\n\nclass UserGroupNameError {\n    report_already_exists() {\n        $(\"#user_group_name_error\").text(\n            $t({defaultMessage: \"A user group with this name already exists\"}),\n        );\n        $(\"#user_group_name_error\").show();\n    }\n\n    clear_errors() {\n        $(\"#user_group_name_error\").hide();\n    }\n\n    report_empty_user_group() {\n        $(\"#user_group_name_error\").text($t({defaultMessage: \"A user group needs to have a name\"}));\n        $(\"#user_group_name_error\").show();\n    }\n\n    select() {\n        $(\"#create_user_group_name\").trigger(\"focus\").trigger(\"select\");\n    }\n\n    pre_validate(user_group_name) {\n        if (user_group_name && user_groups.get_user_group_from_name(user_group_name)) {\n            this.report_already_exists();\n            return;\n        }\n\n        this.clear_errors();\n    }\n\n    validate_for_submit(user_group_name) {\n        if (!user_group_name) {\n            this.report_empty_user_group();\n            this.select();\n            return false;\n        }\n\n        if (user_groups.get_user_group_from_name(user_group_name)) {\n            this.report_already_exists();\n            this.select();\n            return false;\n        }\n\n        return true;\n    }\n}\nconst user_group_name_error = new UserGroupNameError();\n\nexport function create_user_group_clicked() {\n    // this changes the tab switcher (settings/preview) which isn't necessary\n    // to a add new stream title.\n    user_group_settings_ui.show_user_group_settings_pane.create_user_group();\n    $(\".group-row.active\").removeClass(\"active\");\n\n    show_new_user_group_modal();\n    $(\"#create_user_group_name\").trigger(\"focus\");\n}\n\nfunction clear_error_display() {\n    user_group_name_error.clear_errors();\n    $(\".user_group_create_info\").hide();\n    user_group_membership_error.clear_errors();\n}\n\nexport function show_new_user_group_modal() {\n    $(\"#user-group-creation\").removeClass(\"hide\");\n    $(\".right .settings\").hide();\n\n    user_group_create_members.build_widgets();\n\n    clear_error_display();\n}\n\nfunction create_user_group() {\n    const data = {};\n    const group_name = $(\"#create_user_group_name\").val().trim();\n    const description = $(\"#create_user_group_description\").val().trim();\n\n    // Even though we already check to make sure that while typing the user cannot enter\n    // newline characters (by pressing the Enter key) it would still be possible to copy\n    // and paste over a description with newline characters in it. Prevent that.\n    if (description.includes(\"\\n\")) {\n        ui_report.client_error(\n            $t_html({defaultMessage: \"The group description cannot contain newline characters.\"}),\n            $(\".user_group_create_info\"),\n        );\n        return undefined;\n    }\n    data.name = group_name;\n    data.description = description;\n\n    const user_ids = user_group_create_members.get_principals();\n    data.members = JSON.stringify(user_ids);\n\n    loading.make_indicator($(\"#user_group_creating_indicator\"), {\n        text: $t({defaultMessage: \"Creating group...\"}),\n    });\n\n    return channel.post({\n        url: \"/json/user_groups/create\",\n        data,\n        success() {\n            $(\"#create_user_group_name\").val(\"\");\n            $(\"#create_user_group_description\").val(\"\");\n            user_group_create_members.clear_member_list();\n            ui_report.success(\n                $t_html({defaultMessage: \"User group successfully created!\"}),\n                $(\".user_group_create_info\"),\n            );\n            loading.destroy_indicator($(\"#user_group_creating_indicator\"));\n            // TODO: The rest of the work should be done via the create event we will get for user group.\n        },\n        error(xhr) {\n            ui_report.error(\n                $t_html({defaultMessage: \"Error creating user group.\"}),\n                xhr,\n                $(\".user_group_create_info\"),\n            );\n            loading.destroy_indicator($(\"#user_group_creating_indicator\"));\n        },\n    });\n}\n\nexport function set_up_handlers() {\n    const $people_to_add_holder = $(\"#people_to_add_in_group\").expectOne();\n    user_group_create_members.create_handlers($people_to_add_holder);\n\n    const $container = $(\"#user-group-creation\").expectOne();\n\n    $container.on(\"click\", \".finalize_create_user_group\", (e) => {\n        e.preventDefault();\n        clear_error_display();\n\n        const group_name = $(\"#create_user_group_name\").val().trim();\n        const name_ok = user_group_name_error.validate_for_submit(group_name);\n\n        if (!name_ok) {\n            return;\n        }\n\n        const principals = user_group_create_members_data.get_principals();\n        if (principals.length === 0) {\n            user_group_membership_error.report_no_members_to_user_group();\n            return;\n        }\n\n        create_user_group();\n    });\n\n    $container.on(\"input\", \"#create_user_group_name\", () => {\n        const user_group_name = $(\"#create_user_group_name\").val().trim();\n\n        // This is an inexpensive check.\n        user_group_name_error.pre_validate(user_group_name);\n    });\n\n    // Do not allow the user to enter newline characters while typing out the\n    // group's description during it's creation.\n    $container.on(\"keydown\", \"#create_user_group_description\", (e) => {\n        if (keydown_util.is_enter_event(e)) {\n            e.preventDefault();\n        }\n    });\n}\n","import $ from \"jquery\";\n\nimport render_new_user_group_user from \"../templates/stream_settings/new_stream_user.hbs\";\nimport render_new_user_group_users from \"../templates/user_group_settings/new_user_group_users.hbs\";\n\nimport * as add_subscribers_pill from \"./add_subscribers_pill\";\nimport * as ListWidget from \"./list_widget\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as settings_data from \"./settings_data\";\nimport * as user_group_create_members_data from \"./user_group_create_members_data\";\n\nlet pill_widget;\nlet all_users_list_widget;\n\nexport function get_principals() {\n    return user_group_create_members_data.get_principals();\n}\n\nfunction redraw_member_list() {\n    all_users_list_widget.replace_list_data(user_group_create_members_data.sorted_user_ids());\n}\n\nfunction add_user_ids(user_ids) {\n    user_group_create_members_data.add_user_ids(user_ids);\n    redraw_member_list();\n}\n\nfunction add_all_users() {\n    const user_ids = user_group_create_members_data.get_all_user_ids();\n    add_user_ids(user_ids);\n}\n\nfunction remove_user_ids(user_ids) {\n    user_group_create_members_data.remove_user_ids(user_ids);\n    redraw_member_list();\n}\n\nexport function clear_member_list() {\n    user_group_create_members_data.initialize_with_current_user();\n    redraw_member_list();\n}\n\nfunction build_pill_widget({$parent_container}) {\n    const $pill_container = $parent_container.find(\".pill-container\");\n    const get_potential_members = user_group_create_members_data.get_potential_members;\n\n    pill_widget = add_subscribers_pill.create({\n        $pill_container,\n        get_potential_subscribers: get_potential_members,\n    });\n}\n\nexport function create_handlers($container) {\n    $container.on(\"click\", \".add_all_users_to_user_group\", (e) => {\n        e.preventDefault();\n        add_all_users();\n        $(\".add-user-list-filter\").trigger(\"focus\");\n    });\n\n    $container.on(\"click\", \".remove_potential_subscriber\", (e) => {\n        e.preventDefault();\n        const $elem = $(e.target);\n        const user_id = Number.parseInt($elem.attr(\"data-user-id\"), 10);\n        remove_user_ids([user_id]);\n    });\n\n    function add_users({pill_user_ids}) {\n        add_user_ids(pill_user_ids);\n        pill_widget.clear();\n    }\n\n    add_subscribers_pill.set_up_handlers({\n        get_pill_widget: () => pill_widget,\n        $parent_container: $container,\n        pill_selector: \".add_subscribers_container .input\",\n        button_selector: \".add_subscribers_container button.add-subscriber-button\",\n        action: add_users,\n    });\n}\n\nexport function build_widgets() {\n    const $add_people_container = $(\"#people_to_add_in_group\");\n    $add_people_container.html(render_new_user_group_users({}));\n\n    const $simplebar_container = $add_people_container.find(\".member_list_container\");\n\n    build_pill_widget({$parent_container: $add_people_container});\n\n    user_group_create_members_data.initialize_with_current_user();\n    const current_user_id = page_params.user_id;\n\n    all_users_list_widget = ListWidget.create($(\"#create_user_group_members\"), [current_user_id], {\n        name: \"new_user_group_add_users\",\n        $parent_container: $add_people_container,\n        modifier(user_id) {\n            const user = people.get_by_user_id(user_id);\n            const item = {\n                show_email: settings_data.show_email(),\n                email: people.get_visible_email(user),\n                user_id,\n                full_name: user.full_name,\n                is_current_user: user_id === current_user_id,\n                disabled: user_id === current_user_id,\n            };\n            return render_new_user_group_user(item);\n        },\n        filter: {\n            $element: $(\"#people_to_add_in_group .add-user-list-filter\"),\n            predicate(user_id, search_term) {\n                const user = people.get_by_user_id(user_id);\n                return people.build_person_matcher(search_term)(user);\n            },\n        },\n        $simplebar_container,\n        html_selector(user_id) {\n            const user = people.get_by_user_id(user_id);\n            return $(`#${CSS.escape(\"user_checkbox_\" + user.user_id)}`);\n        },\n    });\n}\n","import {page_params} from \"./page_params\";\nimport * as people from \"./people\";\n\nlet user_id_set;\n\nexport function initialize_with_current_user() {\n    const current_user_id = page_params.user_id;\n    user_id_set = new Set();\n    user_id_set.add(current_user_id);\n}\n\nexport function sorted_user_ids() {\n    const users = people.get_users_from_ids(Array.from(user_id_set));\n    people.sort_but_pin_current_user_on_top(users);\n    return users.map((user) => user.user_id);\n}\n\nexport function get_all_user_ids() {\n    const potential_members = people.get_realm_users();\n    const user_ids = potential_members.map((user) => user.user_id);\n    // sort for determinism\n    user_ids.sort((a, b) => a - b);\n    return user_ids;\n}\n\nexport function get_principals() {\n    // Return list of user ids which were selected by user.\n    return Array.from(user_id_set);\n}\n\nexport function get_potential_members() {\n    const potential_members = people.get_realm_users();\n    return potential_members.filter((user) => !user_id_set.has(user.user_id));\n}\n\nexport function add_user_ids(user_ids) {\n    for (const user_id of user_ids) {\n        if (!user_id_set.has(user_id)) {\n            const user = people.get_by_user_id(user_id);\n            if (user) {\n                user_id_set.add(user_id);\n            }\n        }\n    }\n}\n\nexport function remove_user_ids(user_ids) {\n    for (const user_id of user_ids) {\n        user_id_set.delete(user_id);\n    }\n}\n","import * as user_groups from \"./user_groups\";\n\nfunction display_pill(group) {\n    return group.name + \": \" + group.members.size + \" users\";\n}\n\nexport function create_item_from_group_name(group_name, current_items) {\n    group_name = group_name.trim();\n    const group = user_groups.get_user_group_from_name(group_name);\n    if (!group) {\n        return undefined;\n    }\n\n    const in_current_items = current_items.find((item) => item.id === group.id);\n    if (in_current_items !== undefined) {\n        return undefined;\n    }\n\n    const item = {\n        type: \"user_group\",\n        display_value: display_pill(group),\n        id: group.id,\n        group_name: group.name,\n    };\n\n    return item;\n}\n\nexport function get_group_name_from_item(item) {\n    return item.group_name;\n}\n\nfunction get_user_ids_from_user_groups(items) {\n    let user_ids = [];\n    const group_ids = items.map((item) => item.id).filter(Boolean);\n    for (const group_id of group_ids) {\n        const user_group = user_groups.get_user_group_from_id(group_id);\n        user_ids = user_ids.concat(Array.from(user_group.members));\n    }\n    return user_ids;\n}\n\nexport function get_user_ids(pill_widget) {\n    const items = pill_widget.items();\n    let user_ids = get_user_ids_from_user_groups(items);\n    user_ids = Array.from(new Set(user_ids));\n    user_ids.sort((a, b) => a - b);\n\n    user_ids = user_ids.filter(Boolean);\n    return user_ids;\n}\n\nexport function append_user_group(group, pill_widget) {\n    if (group !== undefined && group !== null) {\n        pill_widget.appendValidatedData({\n            type: \"user_group\",\n            display_value: display_pill(group),\n            id: group.id,\n        });\n        pill_widget.clear_text();\n    }\n}\n\nexport function get_group_ids(pill_widget) {\n    const items = pill_widget.items();\n    let group_ids = items.map((item) => item.id);\n    group_ids = group_ids.filter(Boolean);\n\n    return group_ids;\n}\n\nexport function filter_taken_groups(items, pill_widget) {\n    const taken_group_ids = get_group_ids(pill_widget);\n    items = items.filter((item) => !taken_group_ids.includes(item.id));\n    return items;\n}\n\nexport function typeahead_source(pill_widget) {\n    const groups = user_groups.get_realm_user_groups();\n    return filter_taken_groups(groups, pill_widget);\n}\n","import $ from \"jquery\";\n\nimport render_browse_user_groups_list_item from \"../templates/user_group_settings/browse_user_groups_list_item.hbs\";\nimport render_user_group_settings_overlay from \"../templates/user_group_settings/user_group_settings_overlay.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as browser_history from \"./browser_history\";\nimport {$t} from \"./i18n\";\nimport * as ListWidget from \"./list_widget\";\nimport * as overlays from \"./overlays\";\nimport * as people from \"./people\";\nimport * as scroll_util from \"./scroll_util\";\nimport * as settings_data from \"./settings_data\";\nimport * as ui from \"./ui\";\nimport * as user_group_create from \"./user_group_create\";\nimport * as user_groups from \"./user_groups\";\n\nexport function set_up_click_handlers() {\n    $(\"#groups_overlay\").on(\"click\", \".left #clear_search_group_name\", (e) => {\n        const $input = $(\"#groups_overlay .left #search_group_name\");\n        $input.val(\"\");\n\n        // This is a hack to rerender complete\n        // stream list once the text is cleared.\n        $input.trigger(\"input\");\n\n        e.stopPropagation();\n        e.preventDefault();\n    });\n}\n\nexport const show_user_group_settings_pane = {\n    nothing_selected() {\n        $(\".settings, #user-group-creation\").hide();\n        $(\".nothing-selected\").show();\n        $(\"#groups_overlay .user-group-info-title\").text(\n            $t({defaultMessage: \"User group settings\"}),\n        );\n    },\n    settings(group) {\n        $(\".settings, #user-group-creation\").hide();\n        $(\"#groups_overlay .settings\").show();\n        $(\"#groups_overlay .user-group-info-title\").text(group.name);\n    },\n    create_user_group() {\n        $(\".nothing-selected, .settings, #user-group-creation\").hide();\n        $(\"#user-group-creation\").show();\n        $(\"#groups_overlay .user-group-info-title\").text($t({defaultMessage: \"Create user group\"}));\n    },\n};\n\nexport function do_open_create_user_group() {\n    user_group_create.create_user_group_clicked();\n}\n\nexport function open_create_user_group() {\n    do_open_create_user_group();\n    browser_history.update(\"#groups/new\");\n}\n\nexport function row_for_group_id(group_id) {\n    return $(`.group-row[data-group-id='${CSS.escape(group_id)}']`);\n}\n\nexport function get_active_data() {\n    const $active_row = $(\"div.group-row.active\");\n    const valid_active_id = Number.parseInt($active_row.attr(\"data-group-id\"), 10);\n    const $active_tabs = $(\".user-groups-container\").find(\"div.ind-tab.selected\");\n    return {\n        $row: $active_row,\n        id: valid_active_id,\n        $tabs: $active_tabs,\n    };\n}\n\nexport function switch_to_group_row(group_id) {\n    const $group_row = row_for_group_id(group_id);\n    const $container = $(\".user-groups-list\");\n\n    get_active_data().$row.removeClass(\"active\");\n    $group_row.addClass(\"active\");\n\n    scroll_util.scroll_element_into_container($group_row, $container);\n\n    // It's dubious that this timeout is needed.\n    setTimeout(() => {\n        if (group_id === get_active_data().id) {\n            $group_row.trigger(\"click\");\n        }\n    }, 100);\n}\n\nfunction show_right_section() {\n    $(\".right\").addClass(\"show\");\n    $(\".user-groups-header\").addClass(\"slide-left\");\n}\n\nexport function change_state(section) {\n    if (!section) {\n        show_user_group_settings_pane.nothing_selected();\n        return;\n    }\n    if (section === \"new\") {\n        do_open_create_user_group();\n        return;\n    }\n\n    // if the section is a valid number.\n    if (/\\d+/.test(section)) {\n        const group_id = Number.parseInt(section, 10);\n        show_right_section();\n        switch_to_group_row(group_id);\n        return;\n    }\n\n    blueslip.warn(\"invalid section for groups: \" + section);\n    show_user_group_settings_pane.nothing_selected();\n}\n\nexport function setup_page(callback) {\n    function populate_and_fill() {\n        const template_data = {\n            can_create_or_edit_user_groups: settings_data.user_can_edit_user_groups(),\n        };\n\n        const rendered = render_user_group_settings_overlay(template_data);\n\n        const $manage_groups_container = ui.get_content_element($(\"#manage_groups_container\"));\n        $manage_groups_container.empty();\n        $manage_groups_container.append(rendered);\n\n        const $container = $(\"#manage_groups_container .user-groups-list\");\n        const user_groups_list = user_groups.get_realm_user_groups();\n\n        ListWidget.create($container, user_groups_list, {\n            name: \"user-groups-overlay\",\n            modifier(item) {\n                item.is_member = user_groups.is_direct_member_of(\n                    people.my_current_user_id(),\n                    item.id,\n                );\n                return render_browse_user_groups_list_item(item);\n            },\n            filter: {\n                $element: $(\"#manage_groups_container .left #search_group_name\"),\n                predicate(item, value) {\n                    return (\n                        item &&\n                        (item.name.toLocaleLowerCase().includes(value) ||\n                            item.description.toLocaleLowerCase().includes(value))\n                    );\n                },\n            },\n            $simplebar_container: $container,\n        });\n\n        set_up_click_handlers();\n        user_group_create.set_up_handlers();\n\n        // show the \"User group settings\" header by default.\n        $(\".display-type #user_group_settings_title\").show();\n\n        if (callback) {\n            callback();\n        }\n    }\n\n    populate_and_fill();\n}\n\nexport function initialize() {\n    $(\"#manage_groups_container\").on(\"click\", \".create_user_group_button\", (e) => {\n        e.preventDefault();\n        open_create_user_group();\n    });\n\n    $(\"#manage_groups_container\").on(\"click\", \".group-row\", show_right_section);\n\n    $(\"#manage_groups_container\").on(\"click\", \".fa-chevron-left\", () => {\n        $(\".right\").removeClass(\"show\");\n        $(\".user-groups-header\").removeClass(\"slide-left\");\n    });\n}\n\nexport function launch(section) {\n    setup_page(() => {\n        overlays.open_overlay({\n            name: \"group_subscriptions\",\n            $overlay: $(\"#groups_overlay\"),\n            on_close() {\n                browser_history.exit_overlay();\n            },\n        });\n        change_state(section);\n    });\n    if (!get_active_data().id) {\n        if (section === \"new\") {\n            $(\"#create_user_group_name\").trigger(\"focus\");\n        } else {\n            $(\"#search_group_name\").trigger(\"focus\");\n        }\n    }\n}\n","import * as blueslip from \"./blueslip\";\nimport * as input_pill from \"./input_pill\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as user_status from \"./user_status\";\n\n// This will be used for pills for things like composing PMs\n// or adding users to a stream/group.\n\nexport function create_item_from_email(email, current_items) {\n    // For normal Zulip use, we need to validate the email for our realm.\n    const user = people.get_by_email(email);\n\n    if (!user) {\n        if (page_params.realm_is_zephyr_mirror_realm) {\n            const existing_emails = current_items.map((item) => item.email);\n\n            if (existing_emails.includes(email)) {\n                return undefined;\n            }\n\n            // For Zephyr we can't assume any emails are invalid,\n            // so we just create a pill where the display value\n            // is the email itself.\n            return {\n                type: \"user\",\n                display_value: email,\n                email,\n            };\n        }\n\n        // The email is not allowed, so return.\n        return undefined;\n    }\n\n    const existing_ids = current_items.map((item) => item.user_id);\n\n    if (existing_ids.includes(user.user_id)) {\n        return undefined;\n    }\n\n    const avatar_url = people.small_avatar_url_for_person(user);\n\n    const status_emoji_info = user_status.get_status_emoji(user.user_id);\n\n    // We must supply display_value for the widget to work.  Everything\n    // else is for our own use in callbacks.\n    const item = {\n        type: \"user\",\n        display_value: user.full_name,\n        user_id: user.user_id,\n        email: user.email,\n        img_src: avatar_url,\n        deactivated: false,\n        status_emoji_info,\n    };\n\n    // We pass deactivated true for a deactivated user\n    if (!people.is_person_active(user.user_id)) {\n        item.deactivated = true;\n        item.display_value = user.full_name + \" (deactivated)\";\n    }\n\n    return item;\n}\n\nexport function get_email_from_item(item) {\n    return item.email;\n}\n\nexport function append_person(opts) {\n    const person = opts.person;\n    const pill_widget = opts.pill_widget;\n    const avatar_url = people.small_avatar_url_for_person(person);\n    const status_emoji_info = user_status.get_status_emoji(opts.person.user_id);\n\n    const pill_data = {\n        type: \"user\",\n        display_value: person.full_name,\n        user_id: person.user_id,\n        email: person.email,\n        img_src: avatar_url,\n        status_emoji_info,\n    };\n\n    pill_widget.appendValidatedData(pill_data);\n    pill_widget.clear_text();\n}\n\nexport function get_user_ids(pill_widget) {\n    const items = pill_widget.items();\n    let user_ids = items.map((item) => item.user_id);\n    user_ids = user_ids.filter(Boolean); // be defensive about undefined users\n\n    return user_ids;\n}\n\nexport function has_unconverted_data(pill_widget) {\n    // This returns true if we either have text that hasn't been\n    // turned into pills or email-only pills (for Zephyr).\n    if (pill_widget.is_pending()) {\n        return true;\n    }\n\n    const items = pill_widget.items();\n    const has_unknown_items = items.some((item) => item.user_id === undefined);\n\n    return has_unknown_items;\n}\n\nexport function typeahead_source(pill_widget) {\n    const persons = people.get_realm_users();\n    return filter_taken_users(persons, pill_widget);\n}\n\nexport function filter_taken_users(items, pill_widget) {\n    const taken_user_ids = get_user_ids(pill_widget);\n    items = items.filter((item) => !taken_user_ids.includes(item.user_id));\n    return items;\n}\n\nexport function append_user(user, pills) {\n    if (user) {\n        append_person({\n            pill_widget: pills,\n            person: user,\n        });\n    } else {\n        blueslip.warn(\"Undefined user in function append_user\");\n    }\n}\n\nexport function create_pills($pill_container, pill_config) {\n    const pills = input_pill.create({\n        $container: $pill_container,\n        pill_config,\n        create_item_from_text: create_item_from_email,\n        get_text_from_item: get_email_from_item,\n    });\n    return pills;\n}\n","import {parseISO} from \"date-fns\";\nimport $ from \"jquery\";\n\nimport render_user_group_list_item from \"../templates/user_group_list_item.hbs\";\nimport render_user_profile_modal from \"../templates/user_profile_modal.hbs\";\nimport render_user_stream_list_item from \"../templates/user_stream_list_item.hbs\";\n\nimport * as browser_history from \"./browser_history\";\nimport * as buddy_data from \"./buddy_data\";\nimport * as channel from \"./channel\";\nimport * as components from \"./components\";\nimport * as hash_util from \"./hash_util\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as ListWidget from \"./list_widget\";\nimport * as overlays from \"./overlays\";\nimport {page_params} from \"./page_params\";\nimport * as people from \"./people\";\nimport * as popovers from \"./popovers\";\nimport * as settings_account from \"./settings_account\";\nimport * as settings_bots from \"./settings_bots\";\nimport * as settings_data from \"./settings_data\";\nimport * as settings_profile_fields from \"./settings_profile_fields\";\nimport * as stream_data from \"./stream_data\";\nimport * as sub_store from \"./sub_store\";\nimport * as subscriber_api from \"./subscriber_api\";\nimport * as ui_report from \"./ui_report\";\nimport * as user_groups from \"./user_groups\";\nimport * as user_pill from \"./user_pill\";\nimport * as util from \"./util\";\n\nfunction compare_by_name(a, b) {\n    return util.strcmp(a.name, b.name);\n}\n\nfunction initialize_bot_owner(element_id, bot_id) {\n    const user_pills = new Map();\n    const bot = people.get_by_user_id(bot_id);\n    const bot_owner = people.get_bot_owner_user(bot);\n    // Bot owner's pill displaying on bot's profile modal.\n    if (bot_owner) {\n        const $pill_container = $(element_id)\n            .find(\n                `.bot_owner_user_field[data-field-id=\"${CSS.escape(\n                    bot_owner.user_id,\n                )}\"] .pill-container`,\n            )\n            .expectOne();\n        const pills = user_pill.create_pills($pill_container);\n\n        user_pill.append_user(bot_owner, pills);\n        user_pills.set(bot_owner.user_id, pills);\n    }\n    return user_pills;\n}\n\nfunction format_user_stream_list_item(stream, user) {\n    const show_unsubscribe_button =\n        people.can_admin_user(user) || settings_data.user_can_unsubscribe_other_users();\n    const show_private_stream_unsub_tooltip =\n        people.is_my_user_id(user.user_id) && stream.invite_only;\n    return render_user_stream_list_item({\n        name: stream.name,\n        stream_id: stream.stream_id,\n        stream_color: stream.color,\n        invite_only: stream.invite_only,\n        is_web_public: stream.is_web_public,\n        show_unsubscribe_button,\n        show_private_stream_unsub_tooltip,\n        stream_edit_url: hash_util.stream_edit_url(stream),\n    });\n}\n\nfunction format_user_group_list_item(group) {\n    return render_user_group_list_item({\n        group_id: group.id,\n        name: group.name,\n    });\n}\n\nfunction render_user_stream_list(streams, user) {\n    streams.sort(compare_by_name);\n    const $container = $(\"#user-profile-modal .user-stream-list\");\n    $container.empty();\n    ListWidget.create($container, streams, {\n        name: `user-${user.user_id}-stream-list`,\n        modifier(item) {\n            return format_user_stream_list_item(item, user);\n        },\n        filter: {\n            $element: $(\"#user-profile-streams-tab .stream-search\"),\n            predicate(item, value) {\n                return item && item.name.toLocaleLowerCase().includes(value);\n            },\n        },\n        $simplebar_container: $(\"#user-profile-modal .modal__body\"),\n    });\n}\n\nfunction render_user_group_list(groups, user) {\n    groups.sort(compare_by_name);\n    const $container = $(\"#user-profile-modal .user-group-list\");\n    $container.empty();\n    ListWidget.create($container, groups, {\n        name: `user-${user.user_id}-group-list`,\n        modifier(item) {\n            return format_user_group_list_item(item);\n        },\n        $simplebar_container: $(\"#user-profile-modal .modal__body\"),\n    });\n}\n\nexport function get_custom_profile_field_data(user, field, field_types, dateFormat) {\n    const field_value = people.get_custom_profile_data(user.user_id, field.id);\n    const field_type = field.type;\n    const profile_field = {};\n\n    if (!field_value) {\n        return profile_field;\n    }\n    if (!field_value.value) {\n        return profile_field;\n    }\n    profile_field.name = field.name;\n    profile_field.is_user_field = false;\n    profile_field.is_link = field_type === field_types.URL.id;\n    profile_field.is_external_account = field_type === field_types.EXTERNAL_ACCOUNT.id;\n    profile_field.type = field_type;\n    profile_field.display_in_profile_summary = field.display_in_profile_summary;\n\n    switch (field_type) {\n        case field_types.DATE.id:\n            profile_field.value = dateFormat.format(parseISO(field_value.value));\n            break;\n        case field_types.USER.id:\n            profile_field.id = field.id;\n            profile_field.is_user_field = true;\n            profile_field.value = field_value.value;\n            break;\n        case field_types.SELECT.id: {\n            const field_choice_dict = JSON.parse(field.field_data);\n            profile_field.value = field_choice_dict[field_value.value].text;\n            break;\n        }\n        case field_types.SHORT_TEXT.id:\n        case field_types.LONG_TEXT.id:\n            profile_field.value = field_value.value;\n            profile_field.rendered_value = field_value.rendered_value;\n            break;\n        case field_types.EXTERNAL_ACCOUNT.id:\n            profile_field.value = field_value.value;\n            profile_field.field_data = JSON.parse(field.field_data);\n            profile_field.subtype = profile_field.field_data.subtype;\n            profile_field.link = settings_profile_fields.get_external_account_link(profile_field);\n            break;\n        default:\n            profile_field.value = field_value.value;\n    }\n    return profile_field;\n}\n\nexport function hide_user_profile() {\n    overlays.close_modal(\"user-profile-modal\");\n}\n\nfunction initialize_user_type_fields(user) {\n    // Avoid duplicate pill fields, by removing existing ones.\n    $(\"#user-profile-modal .pill\").remove();\n    if (!user.is_bot) {\n        settings_account.initialize_custom_user_type_fields(\n            \"#user-profile-modal #content\",\n            user.user_id,\n            false,\n            false,\n        );\n    } else {\n        initialize_bot_owner(\"#user-profile-modal #content\", user.user_id);\n    }\n}\n\nexport function show_user_profile(user, default_tab_key = \"profile-tab\") {\n    popovers.hide_all();\n\n    const dateFormat = new Intl.DateTimeFormat(\"default\", {dateStyle: \"long\"});\n    const field_types = page_params.custom_profile_field_types;\n    const profile_data = page_params.custom_profile_fields\n        .map((f) => get_custom_profile_field_data(user, f, field_types, dateFormat))\n        .filter((f) => f.name !== undefined);\n    const user_streams = stream_data.get_subscribed_streams_for_user(user.user_id);\n    const groups_of_user = user_groups.get_user_groups_of_user(user.user_id);\n    const args = {\n        user_id: user.user_id,\n        full_name: user.full_name,\n        email: people.get_visible_email(user),\n        profile_data,\n        user_avatar: people.medium_avatar_url_for_person(user),\n        is_me: people.is_current_user(user.email),\n        is_bot: user.is_bot,\n        date_joined: dateFormat.format(parseISO(user.date_joined)),\n        user_circle_class: buddy_data.get_user_circle_class(user.user_id),\n        last_seen: buddy_data.user_last_seen_time_status(user.user_id),\n        show_email: settings_data.show_email(),\n        user_time: people.get_user_time(user.user_id),\n        user_type: people.get_user_type(user.user_id),\n        user_is_guest: user.is_guest,\n    };\n\n    if (user.is_bot) {\n        const is_system_bot = user.is_system_bot;\n        const bot_owner_id = user.bot_owner_id;\n        if (is_system_bot) {\n            args.is_system_bot = is_system_bot;\n        } else if (bot_owner_id) {\n            const bot_owner = people.get_by_user_id(bot_owner_id);\n            args.bot_owner = bot_owner;\n            args.show_email = true;\n        }\n        args.bot_type = settings_bots.type_id_to_string(user.bot_type);\n    }\n\n    $(\"#user-profile-modal-holder\").html(render_user_profile_modal(args));\n    overlays.open_modal(\"user-profile-modal\", {autoremove: true});\n    $(\".tabcontent\").hide();\n\n    let default_tab = 0;\n    // Only checking this tab key as currently we only open this tab directly\n    // other than profile-tab.\n    if (default_tab_key === \"user-profile-streams-tab\") {\n        default_tab = 1;\n    }\n\n    const opts = {\n        selected: default_tab,\n        child_wants_focus: true,\n        values: [\n            {label: $t({defaultMessage: \"Profile\"}), key: \"profile-tab\"},\n            {label: $t({defaultMessage: \"Streams\"}), key: \"user-profile-streams-tab\"},\n            {label: $t({defaultMessage: \"User groups\"}), key: \"user-profile-groups-tab\"},\n        ],\n        callback(name, key) {\n            $(\".tabcontent\").hide();\n            $(\"#\" + key).show();\n            switch (key) {\n                case \"profile-tab\":\n                    initialize_user_type_fields(user);\n                    break;\n                case \"user-profile-groups-tab\":\n                    render_user_group_list(groups_of_user, user);\n                    break;\n                case \"user-profile-streams-tab\":\n                    render_user_stream_list(user_streams, user);\n                    break;\n            }\n        },\n    };\n\n    const $elem = components.toggle(opts).get();\n    $elem.addClass(\"large allow-overflow\");\n    $(\"#tab-toggle\").append($elem);\n}\n\nfunction handle_remove_stream_subscription(target_user_id, sub, success, failure) {\n    if (people.is_my_user_id(target_user_id)) {\n        // Self unsubscribe.\n        channel.del({\n            url: \"/json/users/me/subscriptions\",\n            data: {subscriptions: JSON.stringify([sub.name])},\n            success,\n            error: failure,\n        });\n    } else {\n        subscriber_api.remove_user_id_from_stream(target_user_id, sub, success, failure);\n    }\n}\n\nexport function register_click_handlers() {\n    $(\"body\").on(\"click\", \".info_popover_actions .view_full_user_profile\", (e) => {\n        const user_id = popovers.elem_to_user_id($(e.target).parents(\"ul\"));\n        const user = people.get_by_user_id(user_id);\n        show_user_profile(user);\n        e.stopPropagation();\n        e.preventDefault();\n    });\n\n    $(\"body\").on(\"click\", \"#user-profile-modal .remove-subscription-button\", (e) => {\n        e.preventDefault();\n        const $stream_row = $(e.currentTarget).closest(\"[data-stream-id]\");\n        const stream_id = Number.parseInt($stream_row.attr(\"data-stream-id\"), 10);\n        const sub = sub_store.get(stream_id);\n        const target_user_id = Number.parseInt(\n            $stream_row.closest(\"#user-profile-modal\").attr(\"data-user-id\"),\n            10,\n        );\n        const $alert_box = $(\"#user-profile-streams-tab .stream_list_info\");\n\n        function removal_success(data) {\n            if (data.removed.length > 0) {\n                // Most of the work for handling the unsubscribe is done\n                // by the subscription -> remove event we will get.\n                // However, the user profile component has not yet\n                // implemented live update, so we do update its\n                // UI manually here by removing the stream from this list.\n                $stream_row.remove();\n\n                ui_report.success(\n                    $t_html({defaultMessage: \"Unsubscribed successfully!\"}),\n                    $alert_box,\n                    1200,\n                );\n            } else {\n                ui_report.client_error(\n                    $t_html({defaultMessage: \"Already not subscribed.\"}),\n                    $alert_box,\n                    1200,\n                );\n            }\n        }\n\n        function removal_failure() {\n            let error_message;\n            if (people.is_my_user_id(target_user_id)) {\n                error_message = $t(\n                    {defaultMessage: \"Error in unsubscribing from #{stream_name}\"},\n                    {stream_name: sub.name},\n                );\n            } else {\n                error_message = $t(\n                    {defaultMessage: \"Error removing user from #{stream_name}\"},\n                    {stream_name: sub.name},\n                );\n            }\n\n            ui_report.client_error(error_message, $alert_box, 1200);\n        }\n\n        if (sub.invite_only && people.is_my_user_id(target_user_id)) {\n            const new_hash = hash_util.stream_edit_url(sub);\n            hide_user_profile();\n            browser_history.go_to_location(new_hash);\n            return;\n        }\n        handle_remove_stream_subscription(target_user_id, sub, removal_success, removal_failure);\n    });\n\n    $(\"body\").on(\"click\", \"#user-profile-modal #clear_stream_search\", (e) => {\n        const $input = $(\"#user-profile-streams-tab .stream-search\");\n        $input.val(\"\");\n\n        // This is a hack to rerender complete\n        // stream list once the text is cleared.\n        $input.trigger(\"input\");\n\n        e.stopPropagation();\n        e.preventDefault();\n    });\n    /* These click handlers are implemented as just deep links to the\n     * relevant part of the Zulip UI, so we don't want preventDefault,\n     * but we do want to close the modal when you click them. */\n    $(\"body\").on(\"click\", \"#user-profile-modal #name #edit-button\", () => {\n        hide_user_profile();\n    });\n\n    $(\"body\").on(\"click\", \"#user-profile-modal .stream_list_item\", () => {\n        hide_user_profile();\n    });\n\n    $(\"body\").on(\"input\", \"#user-profile-streams-tab .stream-search\", () => {\n        const $input = $(\"#user-profile-streams-tab .stream-search\");\n        if ($input.val().trim().length > 0) {\n            $(\"#user-profile-streams-tab #clear_stream_search\").show();\n            $input.css(\"margin-right\", \"-20px\");\n        } else {\n            $(\"#user-profile-streams-tab #clear_stream_search\").hide();\n            $input.css(\"margin-right\", \"0\");\n        }\n    });\n}\n","import $ from \"jquery\";\n\nimport * as popovers from \"./popovers\";\nimport * as resize from \"./resize\";\nimport * as stream_popover from \"./stream_popover\";\n\nexport class UserSearch {\n    // This is mostly view code to manage the user search widget\n    // above the buddy list.  We rely on other code to manage the\n    // details of populating the list when we change.\n\n    $widget = $(\"#user_search_section\").expectOne();\n    $input = $(\".user-list-filter\").expectOne();\n\n    constructor(opts) {\n        this._reset_items = opts.reset_items;\n        this._update_list = opts.update_list;\n        this._on_focus = opts.on_focus;\n\n        $(\"#clear_search_people_button\").on(\"click\", () => this.clear_search());\n        $(\"#userlist-header\").on(\"click\", () => this.toggle_filter_displayed());\n\n        this.$input.on(\"input\", opts.update_list);\n        this.$input.on(\"focus\", (e) => this.on_focus(e));\n    }\n\n    input_field() {\n        return this.$input;\n    }\n\n    text() {\n        return this.$input.val().trim();\n    }\n\n    searching() {\n        return this.$input.is(\":focus\");\n    }\n\n    empty() {\n        return this.text() === \"\";\n    }\n\n    clear_search() {\n        if (this.empty()) {\n            this.close_widget();\n            return;\n        }\n\n        this.$input.val(\"\");\n        this.$input.trigger(\"blur\");\n        this._reset_items();\n    }\n\n    escape_search() {\n        if (this.empty()) {\n            this.close_widget();\n            return;\n        }\n\n        this.$input.val(\"\");\n        this._update_list();\n    }\n\n    hide_widget() {\n        this.$widget.addClass(\"notdisplayed\");\n        resize.resize_sidebars();\n    }\n\n    show_widget() {\n        // Hide all the popovers but not userlist sidebar\n        // when the user wants to search.\n        popovers.hide_all_except_sidebars();\n        this.$widget.removeClass(\"notdisplayed\");\n        resize.resize_sidebars();\n    }\n\n    widget_shown() {\n        return this.$widget.hasClass(\"notdisplayed\");\n    }\n\n    clear_and_hide_search() {\n        if (!this.empty()) {\n            this.$input.val(\"\");\n            this._update_list();\n        }\n        this.close_widget();\n    }\n\n    close_widget() {\n        this.$input.trigger(\"blur\");\n        this.hide_widget();\n        this._reset_items();\n    }\n\n    expand_column() {\n        const $column = this.$input.closest(\".app-main [class^='column-']\");\n        if (!$column.hasClass(\"expanded\")) {\n            popovers.hide_all();\n            if ($column.hasClass(\"column-left\")) {\n                stream_popover.show_streamlist_sidebar();\n            } else if ($column.hasClass(\"column-right\")) {\n                popovers.show_userlist_sidebar();\n            }\n        }\n    }\n\n    initiate_search() {\n        this.expand_column();\n        this.show_widget();\n        this.$input.trigger(\"focus\");\n    }\n\n    toggle_filter_displayed() {\n        if (this.widget_shown()) {\n            this.initiate_search();\n        } else {\n            this.clear_and_hide_search();\n        }\n    }\n\n    on_focus(e) {\n        this._on_focus();\n        e.stopPropagation();\n    }\n}\n","import * as channel from \"./channel\";\nimport * as emoji from \"./emoji\";\nimport {user_settings} from \"./user_settings\";\n\nconst user_info = new Map();\nconst user_status_emoji_info = new Map();\n\nexport function server_update_status(opts) {\n    channel.post({\n        url: \"/json/users/me/status\",\n        data: {\n            status_text: opts.status_text,\n            emoji_name: opts.emoji_name,\n            emoji_code: opts.emoji_code,\n            reaction_type: opts.reaction_type,\n        },\n        success() {\n            if (opts.success) {\n                opts.success();\n            }\n        },\n    });\n}\n\nexport function server_invisible_mode_on() {\n    channel.patch({\n        url: \"/json/settings\",\n        data: {\n            presence_enabled: false,\n        },\n    });\n}\n\nexport function server_invisible_mode_off() {\n    channel.patch({\n        url: \"/json/settings\",\n        data: {\n            presence_enabled: true,\n        },\n    });\n}\n\nexport function get_status_text(user_id) {\n    return user_info.get(user_id);\n}\n\nexport function set_status_text(opts) {\n    if (!opts.status_text) {\n        user_info.delete(opts.user_id);\n        return;\n    }\n\n    user_info.set(opts.user_id, opts.status_text);\n}\n\nexport function get_status_emoji(user_id) {\n    return user_status_emoji_info.get(user_id);\n}\n\nexport function set_status_emoji(opts) {\n    if (!opts.emoji_name) {\n        user_status_emoji_info.delete(opts.user_id);\n        return;\n    }\n\n    user_status_emoji_info.set(opts.user_id, {\n        emoji_alt_code: user_settings.emojiset === \"text\",\n        ...emoji.get_emoji_details_for_rendering({\n            emoji_name: opts.emoji_name,\n            emoji_code: opts.emoji_code,\n            reaction_type: opts.reaction_type,\n        }),\n    });\n}\n\nexport function initialize(params) {\n    user_info.clear();\n\n    for (const [str_user_id, dct] of Object.entries(params.user_status)) {\n        // JSON does not allow integer keys, so we\n        // convert them here.\n        const user_id = Number.parseInt(str_user_id, 10);\n\n        if (dct.status_text) {\n            user_info.set(user_id, dct.status_text);\n        }\n\n        if (dct.emoji_name) {\n            user_status_emoji_info.set(user_id, {\n                ...emoji.get_emoji_details_for_rendering(dct),\n            });\n        }\n    }\n}\n","import $ from \"jquery\";\n\nimport render_set_status_overlay from \"../templates/set_status_overlay.hbs\";\nimport render_status_emoji_selector from \"../templates/status_emoji_selector.hbs\";\n\nimport * as dialog_widget from \"./dialog_widget\";\nimport * as emoji from \"./emoji\";\nimport {$t, $t_html} from \"./i18n\";\nimport * as keydown_util from \"./keydown_util\";\nimport * as people from \"./people\";\nimport * as user_status from \"./user_status\";\n\nlet selected_emoji_info = {};\nlet default_status_messages_and_emoji_info;\n\nexport function set_selected_emoji_info(emoji_info) {\n    selected_emoji_info = {...emoji_info};\n    rebuild_status_emoji_selector_ui(selected_emoji_info);\n}\nexport function input_field() {\n    return $(\"#set_user_status_modal input.user_status\");\n}\n\nexport function submit_button() {\n    return $(\"#set_user_status_modal .dialog_submit_button\");\n}\n\nexport function open_user_status_modal() {\n    const user_id = people.my_current_user_id();\n    const selected_emoji_info = user_status.get_status_emoji(user_id) || {};\n    const rendered_set_status_overlay = render_set_status_overlay({\n        default_status_messages_and_emoji_info,\n        selected_emoji_info,\n    });\n\n    dialog_widget.launch({\n        html_heading: $t_html({defaultMessage: \"Set status\"}),\n        html_body: rendered_set_status_overlay,\n        html_submit_button: $t_html({defaultMessage: \"Save\"}),\n        id: \"set_user_status_modal\",\n        on_click: submit_new_status,\n        post_render: user_status_post_render,\n        on_shown() {\n            input_field().trigger(\"focus\");\n        },\n    });\n}\n\nexport function submit_new_status() {\n    const user_id = people.my_current_user_id();\n    let old_status_text = user_status.get_status_text(user_id) || \"\";\n    old_status_text = old_status_text.trim();\n    const old_emoji_info = user_status.get_status_emoji(user_id) || {};\n    const new_status_text = input_field().val().trim();\n\n    if (\n        old_status_text === new_status_text &&\n        old_emoji_info.emoji_name === selected_emoji_info.emoji_name &&\n        old_emoji_info.reaction_type === selected_emoji_info.reaction_type &&\n        old_emoji_info.emoji_code === selected_emoji_info.emoji_code\n    ) {\n        dialog_widget.close_modal();\n        return;\n    }\n\n    user_status.server_update_status({\n        status_text: new_status_text,\n        emoji_name: selected_emoji_info.emoji_name || \"\",\n        emoji_code: selected_emoji_info.emoji_code || \"\",\n        reaction_type: selected_emoji_info.reaction_type || \"\",\n        success() {\n            dialog_widget.close_modal();\n        },\n    });\n}\n\nexport function update_button() {\n    const user_id = people.my_current_user_id();\n    let old_status_text = user_status.get_status_text(user_id) || \"\";\n    old_status_text = old_status_text.trim();\n    const old_emoji_info = user_status.get_status_emoji(user_id) || {};\n    const new_status_text = input_field().val().trim();\n    const $button = submit_button();\n\n    if (\n        old_status_text === new_status_text &&\n        old_emoji_info.emoji_name === selected_emoji_info.emoji_name &&\n        old_emoji_info.reaction_type === selected_emoji_info.reaction_type &&\n        old_emoji_info.emoji_code === selected_emoji_info.emoji_code\n    ) {\n        $button.prop(\"disabled\", true);\n    } else {\n        $button.prop(\"disabled\", false);\n    }\n}\n\nexport function toggle_clear_message_button() {\n    if (input_field().val() !== \"\" || selected_emoji_info.emoji_name) {\n        $(\"#clear_status_message_button\").prop(\"disabled\", false);\n    } else {\n        $(\"#clear_status_message_button\").prop(\"disabled\", true);\n    }\n}\n\nexport function clear_message() {\n    const $field = input_field();\n    $field.val(\"\");\n    $(\"#clear_status_message_button\").prop(\"disabled\", true);\n}\n\nexport function user_status_picker_open() {\n    return $(\"#set_user_status_modal\").length !== 0;\n}\n\nfunction rebuild_status_emoji_selector_ui(selected_emoji_info) {\n    let selected_emoji = null;\n    if (selected_emoji_info && Object.keys(selected_emoji_info).length) {\n        selected_emoji = selected_emoji_info;\n    }\n    const rendered_status_emoji_selector = render_status_emoji_selector({selected_emoji});\n    $(\"#set_user_status_modal .status_emoji_wrapper\").html(rendered_status_emoji_selector);\n}\n\nfunction user_status_post_render() {\n    const user_id = people.my_current_user_id();\n    const old_status_text = user_status.get_status_text(user_id);\n    const old_emoji_info = user_status.get_status_emoji(user_id) || {};\n    set_selected_emoji_info(old_emoji_info);\n    const $field = input_field();\n    $field.val(old_status_text);\n    toggle_clear_message_button();\n\n    const $button = submit_button();\n    $button.prop(\"disabled\", true);\n\n    $(\"#set_user_status_modal .user-status-value\").on(\"click\", (event) => {\n        event.stopPropagation();\n        const user_status_value = $(event.currentTarget).text().trim();\n        $(\"input.user_status\").val(user_status_value);\n\n        const emoji_info = default_status_messages_and_emoji_info.find(\n            (status) => status.status_text === user_status_value,\n        ).emoji;\n        set_selected_emoji_info(emoji_info);\n        toggle_clear_message_button();\n        update_button();\n    });\n\n    input_field().on(\"keypress\", (event) => {\n        if (keydown_util.is_enter_event(event)) {\n            event.preventDefault();\n\n            submit_new_status();\n        }\n    });\n\n    input_field().on(\"keyup\", () => {\n        update_button();\n        toggle_clear_message_button();\n    });\n\n    $(\"#clear_status_message_button\").on(\"click\", () => {\n        clear_message();\n        set_selected_emoji_info();\n        update_button();\n    });\n}\n\nexport function initialize() {\n    default_status_messages_and_emoji_info = [\n        {\n            status_text: $t({defaultMessage: \"Busy\"}),\n            emoji: emoji.get_emoji_details_by_name(\"working_on_it\"),\n        },\n        {\n            status_text: $t({defaultMessage: \"In a meeting\"}),\n            emoji: emoji.get_emoji_details_by_name(\"calendar\"),\n        },\n        {\n            status_text: $t({defaultMessage: \"Commuting\"}),\n            emoji: emoji.get_emoji_details_by_name(\"bus\"),\n        },\n        {\n            status_text: $t({defaultMessage: \"Out sick\"}),\n            emoji: emoji.get_emoji_details_by_name(\"hurt\"),\n        },\n        {\n            status_text: $t({defaultMessage: \"Vacationing\"}),\n            emoji: emoji.get_emoji_details_by_name(\"palm_tree\"),\n        },\n        {\n            status_text: $t({defaultMessage: \"Working remotely\"}),\n            emoji: emoji.get_emoji_details_by_name(\"house\"),\n        },\n        {\n            status_text: $t({defaultMessage: \"At the office\"}),\n            emoji: emoji.get_emoji_details_by_name(\"office\"),\n        },\n    ];\n}\n","import * as blueslip from \"./blueslip\";\nimport {FoldDict} from \"./fold_dict\";\nimport {page_params} from \"./page_params\";\nimport * as stream_data from \"./stream_data\";\nimport * as timerender from \"./timerender\";\nimport {get_time_from_date_muted} from \"./util\";\n\nconst muted_topics = new Map();\n\nexport const visibility_policy = {\n    VISIBILITY_POLICY_INHERIT: 0,\n    MUTED: 1,\n    UNMUTED: 2,\n    FOLLOWED: 3,\n};\n\nexport function add_muted_topic(stream_id, topic, date_muted) {\n    let sub_dict = muted_topics.get(stream_id);\n    if (!sub_dict) {\n        sub_dict = new FoldDict();\n        muted_topics.set(stream_id, sub_dict);\n    }\n    const time = get_time_from_date_muted(date_muted);\n    sub_dict.set(topic, time);\n}\n\nexport function remove_muted_topic(stream_id, topic) {\n    const sub_dict = muted_topics.get(stream_id);\n    if (sub_dict) {\n        sub_dict.delete(topic);\n    }\n}\n\nexport function is_topic_muted(stream_id, topic) {\n    if (stream_id === undefined) {\n        return false;\n    }\n    const sub_dict = muted_topics.get(stream_id);\n    return (sub_dict && sub_dict.get(topic)) || false;\n}\n\nexport function get_muted_topics() {\n    const topics = [];\n    for (const [stream_id, sub_dict] of muted_topics) {\n        const stream = stream_data.maybe_get_stream_name(stream_id);\n        for (const topic of sub_dict.keys()) {\n            const date_muted = sub_dict.get(topic);\n            const date_muted_str = timerender.render_now(new Date(date_muted)).time_str;\n            topics.push({\n                stream_id,\n                stream,\n                topic,\n                date_muted,\n                date_muted_str,\n            });\n        }\n    }\n    return topics;\n}\n\nexport function set_user_topic(user_topic) {\n    const stream_id = user_topic.stream_id;\n    const topic = user_topic.topic_name;\n    const date_muted = user_topic.last_updated;\n\n    const stream_name = stream_data.maybe_get_stream_name(stream_id);\n\n    if (!stream_name) {\n        blueslip.warn(\"Unknown stream ID in set_user_topic: \" + stream_id);\n        return;\n    }\n\n    switch (user_topic.visibility_policy) {\n        case visibility_policy.MUTED:\n            add_muted_topic(stream_id, topic, date_muted);\n            break;\n        case visibility_policy.VISIBILITY_POLICY_INHERIT:\n            remove_muted_topic(stream_id, topic);\n            break;\n    }\n}\n\nexport function set_user_topics(user_topics) {\n    muted_topics.clear();\n\n    for (const user_topic of user_topics) {\n        set_user_topic(user_topic);\n    }\n}\n\nexport function initialize() {\n    set_user_topics(page_params.user_topics);\n}\n","import _ from \"lodash\";\n\nimport * as blueslip from \"./blueslip\";\n\nexport function eq_array(a, b, eq) {\n    if (a === b) {\n        // either both are undefined, or they\n        // are referentially equal\n        return true;\n    }\n\n    if (a === undefined || b === undefined) {\n        return false;\n    }\n\n    if (a.length !== b.length) {\n        return false;\n    }\n\n    return a.every((item, i) => eq(item, b[i]));\n}\n\nexport function ul(opts) {\n    return {\n        tag_name: \"ul\",\n        opts,\n    };\n}\n\nexport function render_tag(tag) {\n    /*\n        This renders a tag into a string.  It will\n        automatically escape attributes, but it's your\n        responsibility to make sure keyed_nodes provide\n        a `render` method that escapes HTML properly.\n        (One option is to use templates.)\n\n        Do NOT call this method directly, except for\n        testing.  The vdom scheme expects you to use\n        the `update` method.\n    */\n    const opts = tag.opts;\n    const tag_name = tag.tag_name;\n    const attr_str = opts.attrs\n        .map((attr) => \" \" + attr[0] + '=\"' + _.escape(attr[1]) + '\"')\n        .join(\"\");\n\n    const start_tag = \"<\" + tag_name + attr_str + \">\";\n    const end_tag = \"</\" + tag_name + \">\";\n\n    if (opts.keyed_nodes === undefined) {\n        blueslip.error(\"We need keyed_nodes to render innards.\");\n        return undefined;\n    }\n\n    const innards = opts.keyed_nodes.map((node) => node.render()).join(\"\\n\");\n    return start_tag + \"\\n\" + innards + \"\\n\" + end_tag;\n}\n\nexport function update_attrs($elem, new_attrs, old_attrs) {\n    const new_dict = new Map(new_attrs);\n    const old_dict = new Map(old_attrs);\n\n    for (const [k, v] of new_attrs) {\n        if (v !== old_dict.get(k)) {\n            $elem.attr(k, v);\n        }\n    }\n\n    for (const [k] of old_attrs) {\n        if (!new_dict.has(k)) {\n            $elem.removeAttr(k);\n        }\n    }\n}\n\nexport function update(replace_content, find, new_dom, old_dom) {\n    /*\n        The update method allows you to continually\n        update a \"virtual\" representation of your DOM,\n        and then this method actually updates the\n        real DOM using jQuery.  The caller will pass\n        in a method called `replace_content` that will replace\n        the entire html and a method called `find` to\n        find the existing DOM for more surgical updates.\n\n        The first \"update\" will be more like a create,\n        because your `old_dom` should be undefined.\n        After that initial call, it is important that\n        you always pass in a correct value of `old_dom`;\n        otherwise, things will be incredibly confusing.\n\n        The basic scheme here is simple:\n\n            1) If old_dom is undefined, we render\n               everything for the first time.\n\n            2) If the keys of your new children are no\n               longer the same order as the old\n               children, then we just render\n               everything anew.\n               (We may refine this in the future.)\n\n            3) If your key structure remains the same,\n               then we update your child nodes on\n               a child-by-child basis, and we avoid\n               updates where the data had remained\n               the same.\n\n        The key to making this all work is that\n        `new_dom` should include a `keyed_nodes` option\n        where each `keyed_node` has a `key` and supports\n        these methods:\n\n            eq - can compare itself to similar nodes\n                 for data equality\n\n            render - can create an HTML representation\n                     of itself\n\n        The `new_dom` should generally be created with\n        something like `vdom.ul`, which will set a\n        tag field internally and which will want options\n        like `attrs` for attributes.\n\n        For examples of creating vdom objects, look at\n        `pm_list_dom.js`.\n    */\n    function do_full_update() {\n        const rendered_dom = render_tag(new_dom);\n        replace_content(rendered_dom);\n    }\n\n    if (old_dom === undefined) {\n        do_full_update();\n        return;\n    }\n\n    const new_opts = new_dom.opts;\n    const old_opts = old_dom.opts;\n\n    if (new_opts.keyed_nodes === undefined) {\n        // We generally want to use vdom on lists, and\n        // adding keys for children lets us avoid unnecessary\n        // redraws (or lets us know we should just rebuild\n        // the dom).\n        blueslip.error(\"We need keyed_nodes for updates.\");\n        return;\n    }\n\n    const same_structure = eq_array(\n        new_opts.keyed_nodes,\n        old_opts.keyed_nodes,\n        (a, b) => a.key === b.key,\n    );\n\n    if (!same_structure) {\n        /* We could do something smarter like detecting row\n           moves, but it's overkill for small lists.\n        */\n        do_full_update();\n        return;\n    }\n\n    /*\n        DO \"QUICK\" UPDATES:\n\n        We've gotten this far, so we know we have the\n        same overall structure for our parent tag, and\n        the only thing left to do with our child nodes\n        is to possibly update them in place (via jQuery).\n        We will only update nodes whose data has changed.\n    */\n\n    const $child_elems = find().children();\n\n    for (const [i, new_node] of new_opts.keyed_nodes.entries()) {\n        const old_node = old_opts.keyed_nodes[i];\n        if (new_node.eq(old_node)) {\n            continue;\n        }\n        const rendered_dom = new_node.render();\n        $child_elems.eq(i).replaceWith(rendered_dom);\n    }\n\n    update_attrs(find(), new_opts.attrs, old_opts.attrs);\n}\n","import $ from \"jquery\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as message_lists from \"./message_lists\";\nimport * as narrow_state from \"./narrow_state\";\nimport * as poll_widget from \"./poll_widget\";\nimport * as todo_widget from \"./todo_widget\";\nimport * as zform from \"./zform\";\n\nconst widgets = new Map([\n    [\"poll\", poll_widget],\n    [\"todo\", todo_widget],\n    [\"zform\", zform],\n]);\n\nexport const widget_contents = new Map();\n\nexport function clear_for_testing() {\n    widget_contents.clear();\n}\n\nfunction set_widget_in_message($row, $widget_elem) {\n    const $content_holder = $row.find(\".message_content\");\n\n    // Avoid adding the $widget_elem if it already exists.\n    // This can happen when the app loads in the \"Recent topics\"\n    // view and the user changes the view to \"All messages\".\n    // This is important since jQuery removes all the event handlers\n    // on `empty()`ing an element.\n    if ($content_holder.find(\".widget-content\").length === 0) {\n        $content_holder.empty().append($widget_elem);\n    }\n}\n\nexport function activate(in_opts) {\n    const widget_type = in_opts.widget_type;\n    const extra_data = in_opts.extra_data;\n    const events = in_opts.events;\n    const $row = in_opts.$row;\n    const message = in_opts.message;\n    const post_to_server = in_opts.post_to_server;\n\n    events.shift();\n\n    if (!widgets.has(widget_type)) {\n        if (widget_type === \"tictactoe\") {\n            return; // don't warn for deleted legacy widget\n        }\n        blueslip.warn(\"unknown widget_type\", widget_type);\n        return;\n    }\n\n    const callback = function (data) {\n        post_to_server({\n            msg_type: \"widget\",\n            data,\n        });\n    };\n\n    if ($row.attr(\"id\").startsWith(\"zhome\") && narrow_state.active()) {\n        // Don't place widget in a home message row if we are narrowed\n        // to active state\n        return;\n    }\n\n    let $widget_elem = widget_contents.get(message.id);\n    if ($widget_elem) {\n        set_widget_in_message($row, $widget_elem);\n        return;\n    }\n\n    // We depend on our widgets to use templates to build\n    // the HTML that will eventually go in this div.\n    $widget_elem = $(\"<div>\").addClass(\"widget-content\");\n\n    widgets.get(widget_type).activate({\n        $elem: $widget_elem,\n        callback,\n        message,\n        extra_data,\n    });\n\n    widget_contents.set(message.id, $widget_elem);\n    set_widget_in_message($row, $widget_elem);\n\n    // Replay any events that already happened.  (This is common\n    // when you narrow to a message after other users have already\n    // interacted with it.)\n    if (events.length > 0) {\n        $widget_elem.handle_events(events);\n    }\n}\n\nexport function set_widgets_for_list() {\n    for (const [idx, $widget_elem] of widget_contents) {\n        if (message_lists.current.get(idx) !== undefined) {\n            const $row = message_lists.current.get_row(idx);\n            set_widget_in_message($row, $widget_elem);\n        }\n    }\n}\n\nexport function handle_event(widget_event) {\n    const $widget_elem = widget_contents.get(widget_event.message_id);\n\n    if (!$widget_elem) {\n        // It is common for submessage events to arrive on\n        // messages that we don't yet have in view. We\n        // just ignore them completely here.\n        return;\n    }\n\n    const events = [widget_event];\n\n    $widget_elem.handle_events(events);\n}\n","import * as channel from \"./channel\";\nimport * as compose_banner from \"./compose_banner\";\nimport * as dark_theme from \"./dark_theme\";\nimport * as feedback_widget from \"./feedback_widget\";\nimport {$t} from \"./i18n\";\nimport * as markdown from \"./markdown\";\nimport * as scroll_bar from \"./scroll_bar\";\n\n/*\n\nWhat in the heck is a zcommand?\n\n    A zcommand is basically a specific type of slash\n    command where the client does almost no work and\n    the server just does something pretty simple like\n    flip a setting.\n\n    The first zcommand we wrote is for \"/ping\", and\n    the server just responds with a 200 for that.\n\n    Not all slash commands use zcommand under the hood.\n    For more exotic things like /poll see submessage.js\n    and widgetize.js\n\n*/\n\nexport function send(opts) {\n    const command = opts.command;\n    const on_success = opts.on_success;\n    const data = {\n        command,\n    };\n\n    channel.post({\n        url: \"/json/zcommand\",\n        data,\n        success(data) {\n            if (on_success) {\n                on_success(data);\n            }\n        },\n        error() {\n            tell_user(\"server did not respond\");\n        },\n    });\n}\n\nexport function tell_user(msg) {\n    // This is a bit hacky, but we don't have a super easy API now\n    // for just telling users stuff.\n    compose_banner.show_error_message(msg, compose_banner.CLASSNAMES.generic_compose_error);\n}\n\nexport function switch_to_light_theme() {\n    send({\n        command: \"/day\",\n        on_success(data) {\n            dark_theme.disable();\n            feedback_widget.show({\n                populate($container) {\n                    const rendered_msg = markdown.parse_non_message(data.msg);\n                    $container.html(rendered_msg);\n                },\n                on_undo() {\n                    send({\n                        command: \"/night\",\n                    });\n                },\n                title_text: $t({defaultMessage: \"Light theme\"}),\n                undo_button_text: $t({defaultMessage: \"Dark theme\"}),\n            });\n        },\n    });\n}\n\nexport function switch_to_dark_theme() {\n    send({\n        command: \"/night\",\n        on_success(data) {\n            dark_theme.enable();\n            feedback_widget.show({\n                populate($container) {\n                    const rendered_msg = markdown.parse_non_message(data.msg);\n                    $container.html(rendered_msg);\n                },\n                on_undo() {\n                    send({\n                        command: \"/day\",\n                    });\n                },\n                title_text: $t({defaultMessage: \"Dark theme\"}),\n                undo_button_text: $t({defaultMessage: \"Light theme\"}),\n            });\n        },\n    });\n}\n\nexport function enter_fluid_mode() {\n    send({\n        command: \"/fluid-width\",\n        on_success(data) {\n            scroll_bar.set_layout_width();\n            feedback_widget.show({\n                populate($container) {\n                    const rendered_msg = markdown.parse_non_message(data.msg);\n                    $container.html(rendered_msg);\n                },\n                on_undo() {\n                    send({\n                        command: \"/fixed-width\",\n                    });\n                },\n                title_text: $t({defaultMessage: \"Fluid width mode\"}),\n                undo_button_text: $t({defaultMessage: \"Fixed width\"}),\n            });\n        },\n    });\n}\n\nexport function enter_fixed_mode() {\n    send({\n        command: \"/fixed-width\",\n        on_success(data) {\n            scroll_bar.set_layout_width();\n            feedback_widget.show({\n                populate($container) {\n                    const rendered_msg = markdown.parse_non_message(data.msg);\n                    $container.html(rendered_msg);\n                },\n                on_undo() {\n                    send({\n                        command: \"/fluid-width\",\n                    });\n                },\n                title_text: $t({defaultMessage: \"Fixed width mode\"}),\n                undo_button_text: $t({defaultMessage: \"Fluid width\"}),\n            });\n        },\n    });\n}\n\nexport function process(message_content) {\n    const content = message_content.trim();\n\n    if (content === \"/ping\") {\n        const start_time = new Date();\n\n        send({\n            command: content,\n            on_success() {\n                const end_time = new Date();\n                let diff = end_time - start_time;\n                diff = Math.round(diff);\n                const msg = \"ping time: \" + diff + \"ms\";\n                tell_user(msg);\n            },\n        });\n        return true;\n    }\n\n    const day_commands = [\"/day\", \"/light\"];\n    if (day_commands.includes(content)) {\n        switch_to_light_theme();\n        return true;\n    }\n\n    const night_commands = [\"/night\", \"/dark\"];\n    if (night_commands.includes(content)) {\n        switch_to_dark_theme();\n        return true;\n    }\n\n    if (content === \"/fluid-width\") {\n        enter_fluid_mode();\n        return true;\n    }\n\n    if (content === \"/fixed-width\") {\n        enter_fixed_mode();\n        return true;\n    }\n\n    // It is incredibly important here to return false\n    // if we don't see an actual zcommand, so that compose.js\n    // knows this is a normal message.\n    return false;\n}\n","import $ from \"jquery\";\n\nimport render_widgets_zform_choices from \"../templates/widgets/zform_choices.hbs\";\n\nimport * as blueslip from \"./blueslip\";\nimport * as schema from \"./schema\";\nimport * as transmit from \"./transmit\";\n\nexport function validate_extra_data(data) {\n    function check(data) {\n        function check_choice_data(data) {\n            function check_choice_item(field_name, val) {\n                return schema.check_record(field_name, val, {\n                    short_name: schema.check_string,\n                    long_name: schema.check_string,\n                    reply: schema.check_string,\n                });\n            }\n\n            function check_choices(field_name, val) {\n                return schema.check_array(field_name, val, check_choice_item);\n            }\n\n            return schema.check_record(\"zform data\", data, {\n                heading: schema.check_string,\n                choices: check_choices,\n            });\n        }\n\n        if (data.type === \"choices\") {\n            return check_choice_data(data);\n        }\n\n        return \"unknown zform type: \" + data.type;\n    }\n\n    const msg = check(data);\n\n    if (msg) {\n        blueslip.warn(msg);\n        return false;\n    }\n\n    return true;\n}\n\nexport function activate(opts) {\n    const self = {};\n\n    const $outer_elem = opts.$elem;\n    const data = opts.extra_data;\n\n    if (!validate_extra_data(data)) {\n        // callee will log reason we fail\n        return undefined;\n    }\n\n    function make_choices(data) {\n        // Assign idx values to each of our choices so that\n        // our template can create data-idx values for our\n        // JS code to use later.\n        for (const [idx, choice] of data.choices.entries()) {\n            choice.idx = idx;\n        }\n\n        const html = render_widgets_zform_choices(data);\n        const $elem = $(html);\n\n        $elem.find(\"button\").on(\"click\", (e) => {\n            e.stopPropagation();\n\n            // Grab our index from the markup.\n            const idx = $(e.target).attr(\"data-idx\");\n\n            // Use the index from the markup to dereference our\n            // data structure.\n            const reply_content = data.choices[idx].reply;\n\n            transmit.reply_message({\n                message: opts.message,\n                content: reply_content,\n            });\n        });\n\n        return $elem;\n    }\n\n    function render() {\n        let rendered_widget;\n\n        if (data.type === \"choices\") {\n            rendered_widget = make_choices(data);\n            $outer_elem.html(rendered_widget);\n        }\n    }\n\n    self.handle_events = function (events) {\n        if (events) {\n            blueslip.info(\"unexpected\");\n        }\n        render();\n    };\n\n    render();\n\n    return self;\n}\n","/* eslint-disable import/no-unresolved */\n/* eslint-disable no-console */\nimport katex from \"katex\"; // eslint-disable-line import/no-unresolved\nimport _ from \"lodash\";\nimport mermaid from \"mermaid\"; // Added MrChaos 2023.1.20\n\n// Parsing routine that can be dropped in to message parsing\n// and formats code blocks\n//\n// This supports arbitrarily nested code blocks as well as\n// auto-completing code blocks missing a trailing close.\n\n// See backend fenced_code.py:71 for associated regexp\nconst fencestr =\n    \"^(~{3,}|`{3,})\" + // Opening fence\n    \"[ ]*\" + // Spaces\n    \"(\" +\n    \"\\\\{?\\\\.?\" +\n    \"([a-zA-Z0-9_+-./#]*)\" + // Language\n    \"\\\\}?\" +\n    \")\" +\n    \"[ ]*\" + // Spaces\n    \"(\" +\n    \"\\\\{?\\\\.?\" +\n    \"([^~`]*)\" + // Header (see fenced_code.py)\n    \"\\\\}?\" +\n    \")\" +\n    \"$\";\nconst fence_re = new RegExp(fencestr);\n\n// Default stashing function does nothing\nlet stash_func = function (text) {\n    return text;\n};\n\n// We fill up the actual values when initializing.\nlet pygments_data = {};\n\nexport function initialize(generated_pygments_data) {\n    pygments_data = generated_pygments_data.langs;\n}\n\nexport function wrap_code(code, lang) {\n    let header = '<div class=\"codehilite\"><pre><span></span><code>';\n    // Mimics the backend logic of adding a data-attribute (data-code-language)\n    // to know what Pygments language was used to highlight this code block.\n    //\n    // NOTE: Clients like zulip-mobile wouldn't receive the pygments data since that comes from outside\n    // the `/shared` folder. To handle such a case we check if pygments data is empty and fallback to\n    // using the default header if it is.\n    if (lang !== undefined && lang !== \"\" && Object.keys(pygments_data).length > 0) {\n        const code_language = pygments_data[lang]?.pretty_name ?? lang;\n        header = `<div class=\"codehilite\" data-code-language=\"${_.escape(\n            code_language,\n        )}\"><pre><span></span><code>`;\n    }\n    // Trim trailing \\n until there's just one left\n    // This mirrors how pygments handles code input\n    return header + _.escape(code.replace(/^\\n+|\\n+$/g, \"\")) + \"\\n</code></pre></div>\";\n}\n\nfunction wrap_quote(text) {\n    const paragraphs = text.split(\"\\n\");\n    const quoted_paragraphs = [];\n\n    // Prefix each quoted paragraph with > at the\n    // beginning of each line\n    for (const paragraph of paragraphs) {\n        const lines = paragraph.split(\"\\n\");\n        quoted_paragraphs.push(lines.map((line) => \"> \" + line).join(\"\\n\"));\n    }\n\n    return quoted_paragraphs.join(\"\\n\");\n}\n\nfunction wrap_tex(tex) {\n    try {\n        return \"<p>\" + katex.renderToString(tex, {displayMode: true}) + \"</p>\";\n    } catch {\n        return '<p><span class=\"tex-error\">' + _.escape(tex) + \"</span></p>\";\n    }\n}\n\nfunction wrap_spoiler(header, text, stash_func) {\n    const header_div_open_html = '<div class=\"spoiler-block\"><div class=\"spoiler-header\">';\n    const end_header_start_content_html = '</div><div class=\"spoiler-content\" aria-hidden=\"true\">';\n    const footer_html = \"</div></div>\";\n\n    const output = [\n        stash_func(header_div_open_html),\n        header,\n        stash_func(end_header_start_content_html),\n        text,\n        stash_func(footer_html),\n    ];\n    return output.join(\"\\n\\n\");\n}\n\n\nfunction wrap_mermaid(text) {\n    try {\n        const id = \"mmd\" + Math.round(Math.random() * 10000);        \n        if (mermaid.parse(text)) {\n            return \"<p>\" + mermaid.render(id,text,undefined) + \"</p>\";\n        }\n        return text;\n    } catch(error) {\n        console.err(error);\n        return '<p><span class=\"mermaid-error\">' + _.escape(text) + \"</span></p>\";\n    }\n}\n\nexport function set_stash_func(stash_handler) {\n    stash_func = stash_handler;\n}\n\nexport function process_fenced_code(content) {\n    const input = content.split(\"\\n\");\n    const output = [];\n    const handler_stack = [];\n    let consume_line;\n\n    function handler_for_fence(output_lines, fence, lang, header) {\n        // lang is ignored except for 'quote', as we\n        // don't do syntax highlighting yet\n        const lines = [];\n        if (lang === \"quote\") {\n            return {\n                handle_line(line) {\n                    if (line === fence) {\n                        this.done();\n                    } else {\n                        consume_line(lines, line);\n                    }\n                },\n\n                done() {\n                    const text = wrap_quote(lines.join(\"\\n\"));\n                    output_lines.push(\"\", text, \"\");\n                    handler_stack.pop();\n                },\n            };\n        }\n\n        if (lang === \"math\") {\n            return {\n                handle_line(line) {\n                    if (line === fence) {\n                        this.done();\n                    } else {\n                        lines.push(line);\n                    }\n                },\n\n                done() {\n                    const text = wrap_tex(lines.join(\"\\n\"));\n                    const placeholder = stash_func(text, true);\n                    output_lines.push(\"\", placeholder, \"\");\n                    handler_stack.pop();\n                },\n            };\n        }\n\n        if (lang === \"spoiler\") {\n            return {\n                handle_line(line) {\n                    if (line === fence) {\n                        this.done();\n                    } else {\n                        lines.push(line);\n                    }\n                },\n\n                done() {\n                    const text = wrap_spoiler(header, lines.join(\"\\n\"), stash_func);\n                    output_lines.push(\"\", text, \"\");\n                    handler_stack.pop();\n                },\n            };\n        }\n        if (lang === \"mermaid\") {\n            return {\n                handle_line(line) {\n                    if (line === fence) {\n                        this.done();\n                    } else {\n                        lines.push(line);\n                    }\n                },\n\n                done() {\n                    const text = wrap_mermaid(lines.join(\"\\n\"));\n                    output_lines.push(\"\", text, \"\");\n                    handler_stack.pop();\n                },\n            };\n        }\n        return {\n            handle_line(line) {\n                if (line === fence) {\n                    this.done();\n                } else {\n                    lines.push(line.trimEnd());\n                }\n            },\n\n            done() {\n                const text = wrap_code(lines.join(\"\\n\"), lang);\n                // insert safe HTML that is passed through the parsing\n                const placeholder = stash_func(text, true);\n                output_lines.push(\"\", placeholder, \"\");\n                handler_stack.pop();\n            },\n        };\n    }\n\n    function default_handler() {\n        return {\n            handle_line(line) {\n                consume_line(output, line);\n            },\n            done() {\n                handler_stack.pop();\n            },\n        };\n    }\n\n    consume_line = function consume_line(output_lines, line) {\n        const match = fence_re.exec(line);\n        if (match) {\n            const fence = match[1];\n            const lang = match[3];\n            const header = match[5];\n            const handler = handler_for_fence(output_lines, fence, lang, header);\n            handler_stack.push(handler);\n        } else {\n            output_lines.push(line);\n        }\n    };\n\n    const current_handler = default_handler();\n    handler_stack.push(current_handler);\n\n    for (const line of input) {\n        const handler = handler_stack.at(-1);\n        handler.handle_line(line);\n    }\n\n    // Clean up all trailing blocks by letting them\n    // insert closing fences\n    while (handler_stack.length !== 0) {\n        const handler = handler_stack.at(-1);\n        handler.done();\n    }\n\n    if (output.length > 2 && output.at(-2) !== \"\") {\n        output.push(\"\");\n    }\n\n    return output.join(\"\\n\");\n}\n\nconst fence_length_re = /^ {0,3}(`{3,})/gm;\nexport function get_unused_fence(content) {\n    // we only return ``` fences, not ~~~.\n    let length = 3;\n    let match;\n    fence_length_re.lastIndex = 0;\n    while ((match = fence_length_re.exec(content)) !== null) {\n        length = Math.max(length, match[1].length + 1);\n    }\n    return \"`\".repeat(length);\n}\n","const hashReplacements = new Map([\n    [\"%\", \".\"],\n    [\"(\", \".28\"],\n    [\")\", \".29\"],\n    [\".\", \".2E\"],\n]);\n\n// Some browsers zealously URI-decode the contents of\n// window.location.hash.  So we hide our URI-encoding\n// by replacing % with . (like MediaWiki).\nexport function encodeHashComponent(str) {\n    return encodeURIComponent(str).replace(/[%().]/g, (matched) => hashReplacements.get(matched));\n}\n\nexport function decodeHashComponent(str) {\n    // This fails for URLs containing\n    // foo.foo or foo%foo due to our fault in special handling\n    // of such characters when encoding. This can also,\n    // fail independent of our fault.\n    // Here we let the calling code handle the exception.\n    return decodeURIComponent(str.replace(/\\./g, \"%\"));\n}\n\nexport function stream_id_to_slug(stream_id, maybe_get_stream_name) {\n    let name = maybe_get_stream_name(stream_id) || \"unknown\";\n\n    // The name part of the URL doesn't really matter, so we try to\n    // make it pretty.\n\n    // TODO: Convert this to replaceAll once mobile no longer supports\n    // browsers that don't have it.\n    name = name.replace(/ /g, \"-\");\n\n    return stream_id + \"-\" + name;\n}\n\nexport function encode_stream_id(stream_id, maybe_get_stream_name) {\n    // stream_id_to_slug appends the stream name, but it does not do the\n    // URI encoding piece.\n    const slug = stream_id_to_slug(stream_id, maybe_get_stream_name);\n\n    return encodeHashComponent(slug);\n}\n\nexport function by_stream_url(stream_id, maybe_get_stream_name) {\n    return \"#narrow/stream/\" + encode_stream_id(stream_id, maybe_get_stream_name);\n}\n\nexport function by_stream_topic_url(stream_id, topic, maybe_get_stream_name) {\n    return (\n        \"#narrow/stream/\" +\n        encode_stream_id(stream_id, maybe_get_stream_name) +\n        \"/topic/\" +\n        encodeHashComponent(topic)\n    );\n}\n","// Any single user should send add a finite number of options\n// to a poll. We arbitrarily pick this value.\nconst MAX_IDX = 1000;\n\nexport class PollData {\n    // This object just holds data for a poll, although it\n    // works closely with the widget's concept of how data\n    // should be represented for rendering, plus how the\n    // server sends us data.\n\n    key_to_option = new Map();\n    my_idx = 1;\n\n    constructor({\n        message_sender_id,\n        current_user_id,\n        is_my_poll,\n        question,\n        options,\n        comma_separated_names,\n        report_error_function,\n    }) {\n        this.message_sender_id = message_sender_id;\n        this.me = current_user_id;\n        this.is_my_poll = is_my_poll;\n        this.poll_question = question;\n        this.input_mode = is_my_poll; // for now\n        this.comma_separated_names = comma_separated_names;\n        this.report_error_function = report_error_function;\n\n        if (question) {\n            this.set_question(question);\n        }\n\n        for (const [i, option] of options.entries()) {\n            this.handle.new_option.inbound(\"canned\", {\n                idx: i,\n                option,\n            });\n        }\n    }\n\n    set_question(new_question) {\n        this.input_mode = false;\n        this.poll_question = new_question;\n    }\n\n    get_question() {\n        return this.poll_question;\n    }\n\n    set_input_mode() {\n        this.input_mode = true;\n    }\n\n    clear_input_mode() {\n        this.input_mode = false;\n    }\n\n    get_input_mode() {\n        return this.input_mode;\n    }\n\n    get_widget_data() {\n        const options = [];\n\n        for (const [key, obj] of this.key_to_option) {\n            const voters = Array.from(obj.votes.keys());\n            const current_user_vote = voters.includes(this.me);\n\n            options.push({\n                option: obj.option,\n                names: this.comma_separated_names(voters),\n                count: voters.length,\n                key,\n                current_user_vote,\n            });\n        }\n\n        const widget_data = {\n            options,\n            question: this.poll_question,\n        };\n\n        return widget_data;\n    }\n\n    handle = {\n        new_option: {\n            outbound: (option) => {\n                const event = {\n                    type: \"new_option\",\n                    idx: this.my_idx,\n                    option,\n                };\n\n                this.my_idx += 1;\n\n                return event;\n            },\n\n            inbound: (sender_id, data) => {\n                // All message readers may add a new option to the poll.\n                const idx = data.idx;\n                const option = data.option;\n                const options = this.get_widget_data().options;\n\n                // While the UI doesn't allow adding duplicate options\n                // to an existing poll, the /poll command syntax to create\n                // them does not prevent duplicates, so we suppress them here.\n                if (this.is_option_present(options, option)) {\n                    return;\n                }\n\n                if (!Number.isInteger(idx) || idx < 0 || idx > MAX_IDX) {\n                    this.report_error_function(\"poll widget: bad type for inbound option idx\");\n                    return;\n                }\n\n                if (typeof option !== \"string\") {\n                    this.report_error_function(\"poll widget: bad type for inbound option\");\n                    return;\n                }\n\n                const key = sender_id + \",\" + idx;\n                const votes = new Map();\n\n                this.key_to_option.set(key, {\n                    option,\n                    user_id: sender_id,\n                    votes,\n                });\n\n                // I may have added a poll option from another device.\n                if (sender_id === this.me && this.my_idx <= idx) {\n                    this.my_idx = idx + 1;\n                }\n            },\n        },\n\n        question: {\n            outbound: (question) => {\n                const event = {\n                    type: \"question\",\n                    question,\n                };\n                if (this.is_my_poll) {\n                    return event;\n                }\n                return undefined;\n            },\n\n            inbound: (sender_id, data) => {\n                // Only the message author can edit questions.\n                if (sender_id !== this.message_sender_id) {\n                    this.report_error_function(\n                        `user ${sender_id} is not allowed to edit the question`,\n                    );\n                    return;\n                }\n\n                if (typeof data.question !== \"string\") {\n                    this.report_error_function(\"poll widget: bad type for inbound question\");\n                    return;\n                }\n\n                this.set_question(data.question);\n            },\n        },\n\n        vote: {\n            outbound: (key) => {\n                let vote = 1;\n\n                // toggle\n                if (this.key_to_option.get(key).votes.get(this.me)) {\n                    vote = -1;\n                }\n\n                const event = {\n                    type: \"vote\",\n                    key,\n                    vote,\n                };\n\n                return event;\n            },\n\n            inbound: (sender_id, data) => {\n                // All message readers may vote on poll options.\n                const key = data.key;\n                const vote = data.vote;\n\n                if (typeof key !== \"string\") {\n                    this.report_error_function(\"poll widget: bad type for inbound vote key\");\n                    return;\n                }\n\n                if (!Number.isInteger(vote) || !(vote === 1 || vote === -1)) {\n                    this.report_error_function(\"poll widget: bad value for inbound vote count\");\n                    return;\n                }\n\n                const option = this.key_to_option.get(key);\n\n                if (option === undefined) {\n                    this.report_error_function(\"unknown key for poll: \" + key);\n                    return;\n                }\n\n                const votes = option.votes;\n\n                if (vote === 1) {\n                    votes.set(sender_id, 1);\n                } else {\n                    votes.delete(sender_id);\n                }\n            },\n        },\n    };\n\n    handle_event(sender_id, data) {\n        const type = data.type;\n        if (this.handle[type] && this.handle[type].inbound) {\n            this.handle[type].inbound(sender_id, data);\n        } else {\n            this.report_error_function(`poll widget: unknown inbound type: ${type}`);\n        }\n    }\n\n    // function to check whether option already exists\n    is_option_present(data, latest_option) {\n        return data.some((el) => el.option === latest_option);\n    }\n}\n","/** The canonical form of the resolved-topic prefix. */\nexport const RESOLVED_TOPIC_PREFIX = \"✔ \";\n\n/**\n * Pattern for an arbitrary resolved-topic prefix.\n *\n * These always begin with the canonical prefix, but can go on longer.\n */\n// The class has the same characters as RESOLVED_TOPIC_PREFIX.\n// It's designed to remove a weird \"✔ ✔✔ \" prefix, if present.\n// Compare maybe_send_resolve_topic_notifications in zerver/actions/message_edit.py.\nconst RESOLVED_TOPIC_PREFIX_RE = /^✔ [ ✔]*/;\n\nexport function is_resolved(topic_name) {\n    return topic_name.startsWith(RESOLVED_TOPIC_PREFIX);\n}\n\nexport function resolve_name(topic_name) {\n    return RESOLVED_TOPIC_PREFIX + topic_name;\n}\n\n/**\n * The un-resolved form of this topic name.\n *\n * If the topic is already not a resolved topic, this is the identity.\n */\nexport function unresolve_name(topic_name) {\n    return topic_name.replace(RESOLVED_TOPIC_PREFIX_RE, \"\");\n}\n\n/**\n * Split the topic name for display, into a \"resolved\" prefix and remainder.\n *\n * The prefix is always the canonical resolved-topic prefix, or empty.\n *\n * This function is injective: different topics never produce the same\n * result, even when `unresolve_name` would give the same result.  That's a\n * property we want when listing topics in the UI, so that we don't end up\n * showing what look like several identical topics.\n */\nexport function display_parts(topic_name) {\n    return is_resolved(topic_name)\n        ? [RESOLVED_TOPIC_PREFIX, topic_name.slice(RESOLVED_TOPIC_PREFIX.length)]\n        : [\"\", topic_name];\n}\n","/*\n    We hand selected the following emojis a few years\n    ago to be given extra precedence in our typeahead\n    algorithms and emoji picker UIs.  We call them \"popular\"\n    emojis for historical reasons, although we've never\n    technically measured their popularity (and any\n    results now would be biased in favor of the ones\n    below, since they've easier to submit).  Nonetheless, it\n    is often convenient to quickly find these.  We can\n    adjust this list over time; we just need to make\n    sure it works well with the emoji picker's layout\n    if you increase the number of them.\n\n    For typeahead we'll favor any of these as long as\n    the emoji code matches.  For example, we'll show the\n    emoji with code 1f44d at the top of your suggestions\n    whether you type \"+\" as a prefix for \"+1\"\n    or \"th\" as a prefix for \"thumbs up\".  The caveat is\n    that other factors still may matter more, such as\n    prefix matches trumping \"popularity\".\n*/\nexport const popular_emojis = [\n    \"1f44d\", // +1\n    \"1f389\", // tada\n    \"1f642\", // smile\n    \"2764\", // heart\n    \"1f6e0\", // working_on_it\n    \"1f419\", // octopus\n];\n\nconst unicode_marks = /\\p{M}/gu;\n\nexport function remove_diacritics(s) {\n    return s.normalize(\"NFKD\").replace(unicode_marks, \"\");\n}\n\n// This function attempts to match a query with a source text.\n// * query is the user-entered search query\n// * source_str is the string we're matching in, e.g. a user's name\n// * split_char is the separator for this syntax (e.g. ' ').\nexport function query_matches_string(query, source_str, split_char) {\n    source_str = source_str.toLowerCase();\n    source_str = remove_diacritics(source_str);\n\n    if (!query.includes(split_char)) {\n        // If query is a single token (doesn't contain a separator),\n        // the match can be anywhere in the string.\n        return source_str.includes(query);\n    }\n\n    // If there is a separator character in the query, then we\n    // require the match to start at the start of a token.\n    // (E.g. for 'ab cd ef', query could be 'ab c' or 'cd ef',\n    // but not 'b cd ef'.)\n    return source_str.startsWith(query) || source_str.includes(split_char + query);\n}\n\nfunction clean_query(query) {\n    query = remove_diacritics(query);\n    // When `abc ` with a space at the end is typed in a\n    // contenteditable widget such as the composebox PM section, the\n    // space at the end was a `no break-space (U+00A0)` instead of\n    // `space (U+0020)`, which lead to no matches in those cases.\n    query = query.replace(/\\u00A0/g, \" \");\n\n    return query;\n}\n\nexport function clean_query_lowercase(query) {\n    query = query.toLowerCase();\n    query = clean_query(query);\n    return query;\n}\n\nexport const is_unicode_emoji = (emoji) =>\n    emoji.reaction_type === \"unicode_emoji\" && emoji.emoji_code;\n\nexport const parse_unicode_emoji_code = (code) =>\n    code\n        .split(\"-\")\n        .map((hex) => String.fromCodePoint(Number.parseInt(hex, 16)))\n        .join(\"\");\n\nexport function get_emoji_matcher(query) {\n    // replace spaces with underscores for emoji matching\n    query = query.replace(/ /g, \"_\");\n    query = clean_query_lowercase(query);\n\n    return function (emoji) {\n        const matches_emoji_literal =\n            is_unicode_emoji(emoji) && parse_unicode_emoji_code(emoji.emoji_code) === query;\n        return matches_emoji_literal || query_matches_string(query, emoji.emoji_name, \"_\");\n    };\n}\n\nexport function triage(query, objs, get_item = (x) => x) {\n    /*\n        We split objs into four groups:\n\n            - entire string exact match\n            - match prefix exactly with `query`\n            - match prefix case-insensitively\n            - other\n\n        Then we concat the first three groups into\n        `matches` and then call the rest `rest`.\n    */\n\n    const exactMatch = [];\n    const beginswithCaseSensitive = [];\n    const beginswithCaseInsensitive = [];\n    const noMatch = [];\n    const lowerQuery = query ? query.toLowerCase() : \"\";\n\n    for (const obj of objs) {\n        const item = get_item(obj);\n        const lowerItem = item.toLowerCase();\n\n        if (lowerItem === lowerQuery) {\n            exactMatch.push(obj);\n        } else if (item.startsWith(query)) {\n            beginswithCaseSensitive.push(obj);\n        } else if (lowerItem.startsWith(lowerQuery)) {\n            beginswithCaseInsensitive.push(obj);\n        } else {\n            noMatch.push(obj);\n        }\n    }\n    return {\n        matches: exactMatch.concat(beginswithCaseSensitive.concat(beginswithCaseInsensitive)),\n        rest: noMatch,\n    };\n}\n\nexport function sort_emojis(objs, query) {\n    // replace spaces with underscores for emoji matching\n    query = query.replace(/ /g, \"_\");\n    query = query.toLowerCase();\n\n    function decent_match(name) {\n        const pieces = name.toLowerCase().split(\"_\");\n        return pieces.some((piece) => piece.startsWith(query));\n    }\n\n    const popular_set = new Set(popular_emojis);\n\n    function is_popular(obj) {\n        return popular_set.has(obj.emoji_code) && decent_match(obj.emoji_name);\n    }\n\n    const popular_emoji_matches = objs.filter((obj) => is_popular(obj));\n    const others = objs.filter((obj) => !is_popular(obj));\n\n    const triage_results = triage(query, others, (x) => x.emoji_name);\n\n    return [...popular_emoji_matches, ...triage_results.matches, ...triage_results.rest];\n}\n","/**\n * marked - a markdown parser\n * Copyright (c) 2011-2022, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\n'use strict';\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\nexports.defaults = getDefaults();\nfunction changeDefaults(newDefaults) {\n  exports.defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nvar escapeTest = /[&<>\"']/;\nvar escapeReplace = new RegExp(escapeTest.source, 'g');\nvar escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nvar escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nvar escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nvar getEscapeReplacement = function getEscapeReplacement(ch) {\n  return escapeReplacements[ch];\n};\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n  return html;\n}\nvar unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, function (_, n) {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x' ? String.fromCharCode(parseInt(n.substring(2), 16)) : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\nvar caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  var obj = {\n    replace: function replace(name, val) {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: function getRegex() {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\nvar nonWordAndColonTest = /[^\\w:]/g;\nvar originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    var prot;\n    try {\n      prot = decodeURIComponent(unescape(href)).replace(nonWordAndColonTest, '').toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\nvar baseUrls = {};\nvar justDomain = /^[^:]+:\\/*[^/]*$/;\nvar protocol = /^([^:]+:)[\\s\\S]*$/;\nvar domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  var relativeBase = base.indexOf(':') === -1;\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\nvar noopTest = {\n  exec: function noopTest() {}\n};\nfunction merge(obj) {\n  var i = 1,\n    target,\n    key;\n  for (; i < arguments.length; i++) {\n    target = arguments[i];\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key];\n      }\n    }\n  }\n  return obj;\n}\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  var row = tableRow.replace(/\\|/g, function (match, offset, str) {\n      var escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') {\n        escaped = !escaped;\n      }\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  var i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) {\n    cells.pop();\n  }\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) {\n      cells.push('');\n    }\n  }\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  var l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  var suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    var currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n  return str.slice(0, l - suffLen);\n}\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  var l = str.length;\n  var level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  var result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  var href = link.href;\n  var title = link.title ? escape(link.title) : null;\n  var text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    var token = {\n      type: 'link',\n      raw: raw,\n      href: href,\n      title: title,\n      text: text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw: raw,\n    href: href,\n    title: title,\n    text: escape(text)\n  };\n}\nfunction indentCodeCompensation(raw, text) {\n  var matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n  if (matchIndentToCode === null) {\n    return text;\n  }\n  var indentToCode = matchIndentToCode[1];\n  return text.split('\\n').map(function (node) {\n    var matchIndentInNode = node.match(/^\\s+/);\n    if (matchIndentInNode === null) {\n      return node;\n    }\n    var indentInNode = matchIndentInNode[0];\n    if (indentInNode.length >= indentToCode.length) {\n      return node.slice(indentToCode.length);\n    }\n    return node;\n  }).join('\\n');\n}\n\n/**\n * Tokenizer\n */\nvar Tokenizer = /*#__PURE__*/function () {\n  function Tokenizer(options) {\n    this.options = options || exports.defaults;\n  }\n  var _proto = Tokenizer.prototype;\n  _proto.space = function space(src) {\n    var cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  };\n  _proto.code = function code(src) {\n    var cap = this.rules.block.code.exec(src);\n    if (cap) {\n      var text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic ? rtrim(text, '\\n') : text\n      };\n    }\n  };\n  _proto.fences = function fences(src) {\n    var cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      var raw = cap[0];\n      var text = indentCodeCompensation(raw, cap[3] || '');\n      return {\n        type: 'code',\n        raw: raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text: text\n      };\n    }\n  };\n  _proto.heading = function heading(src) {\n    var cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      var text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        var trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text: text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  };\n  _proto.hr = function hr(src) {\n    var cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  };\n  _proto.blockquote = function blockquote(src) {\n    var cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      var text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      var top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      var tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens: tokens,\n        text: text\n      };\n    }\n  };\n  _proto.list = function list(src) {\n    var cap = this.rules.block.list.exec(src);\n    if (cap) {\n      var raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine, line, nextLine, rawLine, itemContents, endEarly;\n      var bull = cap[1].trim();\n      var isordered = bull.length > 1;\n      var list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n      bull = isordered ? \"\\\\d{1,9}\\\\\" + bull.slice(-1) : \"\\\\\" + bull;\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      var itemRegex = new RegExp(\"^( {0,3}\" + bull + \")((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))\");\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n        if (this.rules.block.hr.test(src)) {\n          // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n        raw = cap[0];\n        src = src.substring(raw.length);\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, function (t) {\n          return ' '.repeat(3 * t.length);\n        });\n        nextLine = src.split('\\n', 1)[0];\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n        blankLine = false;\n        if (!line && /^ *$/.test(nextLine)) {\n          // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n        if (!endEarly) {\n          var nextBulletRegex = new RegExp(\"^ {0,\" + Math.min(3, indent - 1) + \"}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))\");\n          var hrRegex = new RegExp(\"^ {0,\" + Math.min(3, indent - 1) + \"}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)\");\n          var fencesBeginRegex = new RegExp(\"^ {0,\" + Math.min(3, indent - 1) + \"}(?:```|~~~)\");\n          var headingBeginRegex = new RegExp(\"^ {0,\" + Math.min(3, indent - 1) + \"}#\");\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) {\n              // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) {\n                // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n              itemContents += '\\n' + nextLine;\n            }\n            if (!blankLine && !nextLine.trim()) {\n              // Check if current line is blank\n              blankLine = true;\n            }\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n        list.items.push({\n          type: 'list_item',\n          raw: raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n      var l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n        if (!list.loose) {\n          // Check if list should be loose\n          var spacers = list.items[i].tokens.filter(function (t) {\n            return t.type === 'space';\n          });\n          var hasMultipleLineBreaks = spacers.length > 0 && spacers.some(function (t) {\n            return /\\n.*\\n/.test(t.raw);\n          });\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n      return list;\n    }\n  };\n  _proto.html = function html(src) {\n    var cap = this.rules.block.html.exec(src);\n    if (cap) {\n      var token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        var text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  };\n  _proto.def = function def(src) {\n    var cap = this.rules.block.def.exec(src);\n    if (cap) {\n      var tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      var href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      var title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag: tag,\n        raw: cap[0],\n        href: href,\n        title: title\n      };\n    }\n  };\n  _proto.table = function table(src) {\n    var cap = this.rules.block.table.exec(src);\n    if (cap) {\n      var item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(function (c) {\n          return {\n            text: c\n          };\n        }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n        var l = item.align.length;\n        var i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(function (c) {\n            return {\n              text: c\n            };\n          });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n        return item;\n      }\n    }\n  };\n  _proto.lheading = function lheading(src) {\n    var cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  };\n  _proto.paragraph = function paragraph(src) {\n    var cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      var text = cap[1].charAt(cap[1].length - 1) === '\\n' ? cap[1].slice(0, -1) : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text: text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  };\n  _proto.text = function text(src) {\n    var cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  };\n  _proto.escape = function escape$1(src) {\n    var cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  };\n  _proto.tag = function tag(src) {\n    var cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n      return {\n        type: this.options.sanitize ? 'text' : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0]\n      };\n    }\n  };\n  _proto.link = function link(src) {\n    var cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      var trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!/>$/.test(trimmedUrl)) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        var rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        var lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          var start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          var linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      var href = cap[2];\n      var title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        var link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !/>$/.test(trimmedUrl)) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  };\n  _proto.reflink = function reflink(src, links) {\n    var cap;\n    if ((cap = this.rules.inline.reflink.exec(src)) || (cap = this.rules.inline.nolink.exec(src))) {\n      var link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        var text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text: text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  };\n  _proto.emStrong = function emStrong(src, maskedSrc, prevChar) {\n    if (prevChar === void 0) {\n      prevChar = '';\n    }\n    var match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/(?:[0-9A-Za-z\\xAA\\xB2\\xB3\\xB5\\xB9\\xBA\\xBC-\\xBE\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05D0-\\u05EA\\u05EF-\\u05F2\\u0620-\\u064A\\u0660-\\u0669\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07C0-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086A\\u0870-\\u0887\\u0889-\\u088E\\u08A0-\\u08C9\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0966-\\u096F\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09E6-\\u09F1\\u09F4-\\u09F9\\u09FC\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A6F\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AE6-\\u0AEF\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B66-\\u0B6F\\u0B71-\\u0B77\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0BE6-\\u0BF2\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C5D\\u0C60\\u0C61\\u0C66-\\u0C6F\\u0C78-\\u0C7E\\u0C80\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDD\\u0CDE\\u0CE0\\u0CE1\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D04-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D54-\\u0D56\\u0D58-\\u0D61\\u0D66-\\u0D78\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DE6-\\u0DEF\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E86-\\u0E8A\\u0E8C-\\u0EA3\\u0EA5\\u0EA7-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F20-\\u0F33\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F-\\u1049\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u1090-\\u1099\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1369-\\u137C\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u1711\\u171F-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u17E0-\\u17E9\\u17F0-\\u17F9\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u1884\\u1887-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1A80-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4C\\u1B50-\\u1B59\\u1B83-\\u1BA0\\u1BAE-\\u1BE5\\u1C00-\\u1C23\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1C80-\\u1C88\\u1C90-\\u1CBA\\u1CBD-\\u1CBF\\u1CE9-\\u1CEC\\u1CEE-\\u1CF3\\u1CF5\\u1CF6\\u1CFA\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2070\\u2071\\u2074-\\u2079\\u207F-\\u2089\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2150-\\u2189\\u2460-\\u249B\\u24EA-\\u24FF\\u2776-\\u2793\\u2C00-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2CFD\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312F\\u3131-\\u318E\\u3192-\\u3195\\u31A0-\\u31BF\\u31F0-\\u31FF\\u3220-\\u3229\\u3248-\\u324F\\u3251-\\u325F\\u3280-\\u3289\\u32B1-\\u32BF\\u3400-\\u4DBF\\u4E00-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7CA\\uA7D0\\uA7D1\\uA7D3\\uA7D5-\\uA7D9\\uA7F2-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA830-\\uA835\\uA840-\\uA873\\uA882-\\uA8B3\\uA8D0-\\uA8D9\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA8FE\\uA900-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF-\\uA9D9\\uA9E0-\\uA9E4\\uA9E6-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB69\\uAB70-\\uABE2\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD07-\\uDD33\\uDD40-\\uDD78\\uDD8A\\uDD8B\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE1-\\uDEFB\\uDF00-\\uDF23\\uDF2D-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDCB0-\\uDCD3\\uDCD8-\\uDCFB\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDD70-\\uDD7A\\uDD7C-\\uDD8A\\uDD8C-\\uDD92\\uDD94\\uDD95\\uDD97-\\uDDA1\\uDDA3-\\uDDB1\\uDDB3-\\uDDB9\\uDDBB\\uDDBC\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67\\uDF80-\\uDF85\\uDF87-\\uDFB0\\uDFB2-\\uDFBA]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC58-\\uDC76\\uDC79-\\uDC9E\\uDCA7-\\uDCAF\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDCFB-\\uDD1B\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBC-\\uDDCF\\uDDD2-\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE35\\uDE40-\\uDE48\\uDE60-\\uDE7E\\uDE80-\\uDE9F\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDEEB-\\uDEEF\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF58-\\uDF72\\uDF78-\\uDF91\\uDFA9-\\uDFAF]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2\\uDCFA-\\uDD23\\uDD30-\\uDD39\\uDE60-\\uDE7E\\uDE80-\\uDEA9\\uDEB0\\uDEB1\\uDF00-\\uDF27\\uDF30-\\uDF45\\uDF51-\\uDF54\\uDF70-\\uDF81\\uDFB0-\\uDFCB\\uDFE0-\\uDFF6]|\\uD804[\\uDC03-\\uDC37\\uDC52-\\uDC6F\\uDC71\\uDC72\\uDC75\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD03-\\uDD26\\uDD36-\\uDD3F\\uDD44\\uDD47\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDD0-\\uDDDA\\uDDDC\\uDDE1-\\uDDF4\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDEF0-\\uDEF9\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC00-\\uDC34\\uDC47-\\uDC4A\\uDC50-\\uDC59\\uDC5F-\\uDC61\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEAA\\uDEB8\\uDEC0-\\uDEC9\\uDF00-\\uDF1A\\uDF30-\\uDF3B\\uDF40-\\uDF46]|\\uD806[\\uDC00-\\uDC2B\\uDCA0-\\uDCF2\\uDCFF-\\uDD06\\uDD09\\uDD0C-\\uDD13\\uDD15\\uDD16\\uDD18-\\uDD2F\\uDD3F\\uDD41\\uDD50-\\uDD59\\uDDA0-\\uDDA7\\uDDAA-\\uDDD0\\uDDE1\\uDDE3\\uDE00\\uDE0B-\\uDE32\\uDE3A\\uDE50\\uDE5C-\\uDE89\\uDE9D\\uDEB0-\\uDEF8]|\\uD807[\\uDC00-\\uDC08\\uDC0A-\\uDC2E\\uDC40\\uDC50-\\uDC6C\\uDC72-\\uDC8F\\uDD00-\\uDD06\\uDD08\\uDD09\\uDD0B-\\uDD30\\uDD46\\uDD50-\\uDD59\\uDD60-\\uDD65\\uDD67\\uDD68\\uDD6A-\\uDD89\\uDD98\\uDDA0-\\uDDA9\\uDEE0-\\uDEF2\\uDFB0\\uDFC0-\\uDFD4]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|\\uD80B[\\uDF90-\\uDFF0]|[\\uD80C\\uD81C-\\uD820\\uD822\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872\\uD874-\\uD879\\uD880-\\uD883][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDE70-\\uDEBE\\uDEC0-\\uDEC9\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF5B-\\uDF61\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDE40-\\uDE96\\uDF00-\\uDF4A\\uDF50\\uDF93-\\uDF9F\\uDFE0\\uDFE1\\uDFE3]|\\uD821[\\uDC00-\\uDFF7]|\\uD823[\\uDC00-\\uDCD5\\uDD00-\\uDD08]|\\uD82B[\\uDFF0-\\uDFF3\\uDFF5-\\uDFFB\\uDFFD\\uDFFE]|\\uD82C[\\uDC00-\\uDD22\\uDD50-\\uDD52\\uDD64-\\uDD67\\uDD70-\\uDEFB]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD834[\\uDEE0-\\uDEF3\\uDF60-\\uDF78]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD837[\\uDF00-\\uDF1E]|\\uD838[\\uDD00-\\uDD2C\\uDD37-\\uDD3D\\uDD40-\\uDD49\\uDD4E\\uDE90-\\uDEAD\\uDEC0-\\uDEEB\\uDEF0-\\uDEF9]|\\uD839[\\uDFE0-\\uDFE6\\uDFE8-\\uDFEB\\uDFED\\uDFEE\\uDFF0-\\uDFFE]|\\uD83A[\\uDC00-\\uDCC4\\uDCC7-\\uDCCF\\uDD00-\\uDD43\\uDD4B\\uDD50-\\uDD59]|\\uD83B[\\uDC71-\\uDCAB\\uDCAD-\\uDCAF\\uDCB1-\\uDCB4\\uDD01-\\uDD2D\\uDD2F-\\uDD3D\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD83C[\\uDD00-\\uDD0C]|\\uD83E[\\uDFF0-\\uDFF9]|\\uD869[\\uDC00-\\uDEDF\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF38\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1\\uDEB0-\\uDFFF]|\\uD87A[\\uDC00-\\uDFE0]|\\uD87E[\\uDC00-\\uDE1D]|\\uD884[\\uDC00-\\uDF4A])/)) return;\n    var nextChar = match[1] || match[2] || '';\n    if (!nextChar || nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar))) {\n      var lLength = match[0].length - 1;\n      var rDelim,\n        rLength,\n        delimTotal = lLength,\n        midDelimTotal = 0;\n      var endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n        if (match[3] || match[4]) {\n          // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) {\n          // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        var raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          var _text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw: raw,\n            text: _text,\n            tokens: this.lexer.inlineTokens(_text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        var text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw: raw,\n          text: text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  };\n  _proto.codespan = function codespan(src) {\n    var cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      var text = cap[2].replace(/\\n/g, ' ');\n      var hasNonSpaceChars = /[^ ]/.test(text);\n      var hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text: text\n      };\n    }\n  };\n  _proto.br = function br(src) {\n    var cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  };\n  _proto.del = function del(src) {\n    var cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  };\n  _proto.autolink = function autolink(src, mangle) {\n    var cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      var text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text: text,\n        href: href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text: text\n        }]\n      };\n    }\n  };\n  _proto.url = function url(src, mangle) {\n    var cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      var text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        var prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text: text,\n        href: href,\n        tokens: [{\n          type: 'text',\n          raw: text,\n          text: text\n        }]\n      };\n    }\n  };\n  _proto.inlineText = function inlineText(src, smartypants) {\n    var cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      var text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: text\n      };\n    }\n  };\n  return Tokenizer;\n}();\n\n/**\n * Block-Level Grammar\n */\nvar block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*\\n)|~{3,})([^\\n]*)\\n(?:|([\\s\\S]*?)\\n)(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n  + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n  + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n  + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n  + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n  + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n  + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n  + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n  + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n  + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:.|\\n(?!\\n))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def).replace('label', block._label).replace('title', block._title).getRegex();\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */).replace('bull', block.bullet).getRegex();\nblock.list = edit(block.list).replace(/bull/g, block.bullet).replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))').replace('def', '\\\\n+(?=' + block.def.source + ')').getRegex();\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption' + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption' + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe' + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option' + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr' + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i').replace('comment', block._comment).replace('tag', block._tag).replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex();\nblock.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('|table', '').replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\nblock.blockquote = edit(block.blockquote).replace('paragraph', block.paragraph).getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block);\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n  + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n  + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n});\n\nblock.gfm.table = edit(block.gfm.table).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('blockquote', ' {0,3}>').replace('code', ' {4}[^\\\\n]').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n.getRegex();\nblock.gfm.paragraph = edit(block._paragraph).replace('hr', block.hr).replace('heading', ' {0,3}#{1,6} ').replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n.replace('table', block.gfm.table) // interrupt paragraphs with table\n.replace('blockquote', ' {0,3}>').replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n').replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n.replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)').replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n.getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = merge({}, block.normal, {\n  html: edit('^ *(?:comment *(?:\\\\n|\\\\s*$)' + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n  + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))').replace('comment', block._comment).replace(/tag/g, '(?!(?:' + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub' + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)' + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b').getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest,\n  // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph).replace('hr', block.hr).replace('heading', ' *#{1,6} *[^\\n]').replace('lheading', block.lheading).replace('blockquote', ' {0,3}>').replace('|fences', '').replace('|list', '').replace('|html', '').getRegex()\n});\n\n/**\n * Inline-Level Grammar\n */\nvar inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment' + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n  + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n  + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n  + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n  + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>',\n  // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^(?:[^_*\\\\]|\\\\.)*?\\_\\_(?:[^_*\\\\]|\\\\.)*?\\*(?:[^_*\\\\]|\\\\.)*?(?=\\_\\_)|(?:[^*\\\\]|\\\\.)+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^(?:[^_*\\\\]|\\\\.)*?\\*\\*(?:[^_*\\\\]|\\\\.)*?\\_(?:[^_*\\\\]|\\\\.)*?(?=\\*\\*)|(?:[^_\\\\]|\\\\.)+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\n// lookbehind is not available on Safari as of version 16\n// inline.escapedEmSt = /(?<=(?:^|[^\\\\)(?:\\\\[^])*)\\\\[*_]/g;\ninline.escapedEmSt = /(?:^|[^\\\\])(?:\\\\\\\\)*\\\\[*_]/g;\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim).replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g').replace(/punct/g, inline._punctuation).getRegex();\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink).replace('scheme', inline._scheme).replace('email', inline._email).getRegex();\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\ninline.tag = edit(inline.tag).replace('comment', inline._comment).replace('attribute', inline._attribute).getRegex();\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\ninline.link = edit(inline.link).replace('label', inline._label).replace('href', inline._href).replace('title', inline._title).getRegex();\ninline.reflink = edit(inline.reflink).replace('label', inline._label).replace('ref', block._label).getRegex();\ninline.nolink = edit(inline.nolink).replace('ref', block._label).getRegex();\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g').replace('reflink', inline.reflink).replace('nolink', inline.nolink).getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline);\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/).replace('label', inline._label).getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace('label', inline._label).getRegex()\n});\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n});\ninline.gfm.url = edit(inline.gfm.url, 'i').replace('email', inline.gfm._extended_email).getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text).replace('\\\\b_', '\\\\b_| {2,}\\\\n').replace(/\\{2,\\}/g, '*').getRegex()\n});\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n  // em-dashes\n  .replace(/---/g, \"\\u2014\")\n  // en-dashes\n  .replace(/--/g, \"\\u2013\")\n  // opening singles\n  .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, \"$1\\u2018\")\n  // closing singles & apostrophes\n  .replace(/'/g, \"\\u2019\")\n  // opening doubles\n  .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, \"$1\\u201C\")\n  // closing doubles\n  .replace(/\"/g, \"\\u201D\")\n  // ellipses\n  .replace(/\\.{3}/g, \"\\u2026\");\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  var out = '',\n    i,\n    ch;\n  var l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n  return out;\n}\n\n/**\n * Block Lexer\n */\nvar Lexer = /*#__PURE__*/function () {\n  function Lexer(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || exports.defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n    var rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  /**\n   * Static Lex Method\n   */\n  Lexer.lex = function lex(src, options) {\n    var lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */;\n  Lexer.lexInline = function lexInline(src, options) {\n    var lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */;\n  var _proto = Lexer.prototype;\n  _proto.lex = function lex(src) {\n    src = src.replace(/\\r\\n|\\r/g, '\\n');\n    this.blockTokens(src, this.tokens);\n    var next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */;\n  _proto.blockTokens = function blockTokens(src, tokens) {\n    var _this = this;\n    if (tokens === void 0) {\n      tokens = [];\n    }\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, function (_, leading, tabs) {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n    var token, lastToken, cutSrc, lastParagraphClipped;\n    while (src) {\n      if (this.options.extensions && this.options.extensions.block && this.options.extensions.block.some(function (extTokenizer) {\n        if (token = extTokenizer.call({\n          lexer: _this\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        (function () {\n          var startIndex = Infinity;\n          var tempSrc = src.slice(1);\n          var tempStart = void 0;\n          _this.options.extensions.startBlock.forEach(function (getStartIndex) {\n            tempStart = getStartIndex.call({\n              lexer: this\n            }, tempSrc);\n            if (typeof tempStart === 'number' && tempStart >= 0) {\n              startIndex = Math.min(startIndex, tempStart);\n            }\n          });\n          if (startIndex < Infinity && startIndex >= 0) {\n            cutSrc = src.substring(0, startIndex + 1);\n          }\n        })();\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    this.state.top = true;\n    return tokens;\n  };\n  _proto.inline = function inline(src, tokens) {\n    if (tokens === void 0) {\n      tokens = [];\n    }\n    this.inlineQueue.push({\n      src: src,\n      tokens: tokens\n    });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */;\n  _proto.inlineTokens = function inlineTokens(src, tokens) {\n    var _this2 = this;\n    if (tokens === void 0) {\n      tokens = [];\n    }\n    var token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    var maskedSrc = src;\n    var match;\n    var keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      var links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;\n    }\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions && this.options.extensions.inline && this.options.extensions.inline.some(function (extTokenizer) {\n        if (token = extTokenizer.call({\n          lexer: _this2\n        }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        (function () {\n          var startIndex = Infinity;\n          var tempSrc = src.slice(1);\n          var tempStart = void 0;\n          _this2.options.extensions.startInline.forEach(function (getStartIndex) {\n            tempStart = getStartIndex.call({\n              lexer: this\n            }, tempSrc);\n            if (typeof tempStart === 'number' && tempStart >= 0) {\n              startIndex = Math.min(startIndex, tempStart);\n            }\n          });\n          if (startIndex < Infinity && startIndex >= 0) {\n            cutSrc = src.substring(0, startIndex + 1);\n          }\n        })();\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') {\n          // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n      if (src) {\n        var errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n    return tokens;\n  };\n  _createClass(Lexer, null, [{\n    key: \"rules\",\n    get: function get() {\n      return {\n        block: block,\n        inline: inline\n      };\n    }\n  }]);\n  return Lexer;\n}();\n\n/**\n * Renderer\n */\nvar Renderer = /*#__PURE__*/function () {\n  function Renderer(options) {\n    this.options = options || exports.defaults;\n  }\n  var _proto = Renderer.prototype;\n  _proto.code = function code(_code, infostring, escaped) {\n    var lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      var out = this.options.highlight(_code, lang);\n      if (out != null && out !== _code) {\n        escaped = true;\n        _code = out;\n      }\n    }\n    _code = _code.replace(/\\n$/, '') + '\\n';\n    if (!lang) {\n      return '<pre><code>' + (escaped ? _code : escape(_code, true)) + '</code></pre>\\n';\n    }\n    return '<pre><code class=\"' + this.options.langPrefix + escape(lang) + '\">' + (escaped ? _code : escape(_code, true)) + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */;\n  _proto.blockquote = function blockquote(quote) {\n    return \"<blockquote>\\n\" + quote + \"</blockquote>\\n\";\n  };\n  _proto.html = function html(_html) {\n    return _html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */;\n  _proto.heading = function heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      var id = this.options.headerPrefix + slugger.slug(raw);\n      return \"<h\" + level + \" id=\\\"\" + id + \"\\\">\" + text + \"</h\" + level + \">\\n\";\n    }\n\n    // ignore IDs\n    return \"<h\" + level + \">\" + text + \"</h\" + level + \">\\n\";\n  };\n  _proto.hr = function hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  };\n  _proto.list = function list(body, ordered, start) {\n    var type = ordered ? 'ol' : 'ul',\n      startatt = ordered && start !== 1 ? ' start=\"' + start + '\"' : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */;\n  _proto.listitem = function listitem(text) {\n    return \"<li>\" + text + \"</li>\\n\";\n  };\n  _proto.checkbox = function checkbox(checked) {\n    return '<input ' + (checked ? 'checked=\"\" ' : '') + 'disabled=\"\" type=\"checkbox\"' + (this.options.xhtml ? ' /' : '') + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */;\n  _proto.paragraph = function paragraph(text) {\n    return \"<p>\" + text + \"</p>\\n\";\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */;\n  _proto.table = function table(header, body) {\n    if (body) body = \"<tbody>\" + body + \"</tbody>\";\n    return '<table>\\n' + '<thead>\\n' + header + '</thead>\\n' + body + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */;\n  _proto.tablerow = function tablerow(content) {\n    return \"<tr>\\n\" + content + \"</tr>\\n\";\n  };\n  _proto.tablecell = function tablecell(content, flags) {\n    var type = flags.header ? 'th' : 'td';\n    var tag = flags.align ? \"<\" + type + \" align=\\\"\" + flags.align + \"\\\">\" : \"<\" + type + \">\";\n    return tag + content + (\"</\" + type + \">\\n\");\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */;\n  _proto.strong = function strong(text) {\n    return \"<strong>\" + text + \"</strong>\";\n  }\n\n  /**\n   * @param {string} text\n   */;\n  _proto.em = function em(text) {\n    return \"<em>\" + text + \"</em>\";\n  }\n\n  /**\n   * @param {string} text\n   */;\n  _proto.codespan = function codespan(text) {\n    return \"<code>\" + text + \"</code>\";\n  };\n  _proto.br = function br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */;\n  _proto.del = function del(text) {\n    return \"<del>\" + text + \"</del>\";\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */;\n  _proto.link = function link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    var out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */;\n  _proto.image = function image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    var out = \"<img src=\\\"\" + href + \"\\\" alt=\\\"\" + text + \"\\\"\";\n    if (title) {\n      out += \" title=\\\"\" + title + \"\\\"\";\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  };\n  _proto.text = function text(_text) {\n    return _text;\n  };\n  return Renderer;\n}();\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nvar TextRenderer = /*#__PURE__*/function () {\n  function TextRenderer() {}\n  var _proto = TextRenderer.prototype;\n  // no need for block level renderers\n  _proto.strong = function strong(text) {\n    return text;\n  };\n  _proto.em = function em(text) {\n    return text;\n  };\n  _proto.codespan = function codespan(text) {\n    return text;\n  };\n  _proto.del = function del(text) {\n    return text;\n  };\n  _proto.html = function html(text) {\n    return text;\n  };\n  _proto.text = function text(_text) {\n    return _text;\n  };\n  _proto.link = function link(href, title, text) {\n    return '' + text;\n  };\n  _proto.image = function image(href, title, text) {\n    return '' + text;\n  };\n  _proto.br = function br() {\n    return '';\n  };\n  return TextRenderer;\n}();\n\n/**\n * Slugger generates header id\n */\nvar Slugger = /*#__PURE__*/function () {\n  function Slugger() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  var _proto = Slugger.prototype;\n  _proto.serialize = function serialize(value) {\n    return value.toLowerCase().trim()\n    // remove html tags\n    .replace(/<[!\\/a-z].*?>/ig, '')\n    // remove unwanted chars\n    .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '').replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */;\n  _proto.getNextSafeSlug = function getNextSafeSlug(originalSlug, isDryRun) {\n    var slug = originalSlug;\n    var occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */;\n  _proto.slug = function slug(value, options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  };\n  return Slugger;\n}();\n\n/**\n * Parsing & Compiling\n */\nvar Parser = /*#__PURE__*/function () {\n  function Parser(options) {\n    this.options = options || exports.defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  Parser.parse = function parse(tokens, options) {\n    var parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */;\n  Parser.parseInline = function parseInline(tokens, options) {\n    var parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */;\n  var _proto = Parser.prototype;\n  _proto.parse = function parse(tokens, top) {\n    if (top === void 0) {\n      top = true;\n    }\n    var out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n    var l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n      switch (token.type) {\n        case 'space':\n          {\n            continue;\n          }\n        case 'hr':\n          {\n            out += this.renderer.hr();\n            continue;\n          }\n        case 'heading':\n          {\n            out += this.renderer.heading(this.parseInline(token.tokens), token.depth, unescape(this.parseInline(token.tokens, this.textRenderer)), this.slugger);\n            continue;\n          }\n        case 'code':\n          {\n            out += this.renderer.code(token.text, token.lang, token.escaped);\n            continue;\n          }\n        case 'table':\n          {\n            header = '';\n\n            // header\n            cell = '';\n            l2 = token.header.length;\n            for (j = 0; j < l2; j++) {\n              cell += this.renderer.tablecell(this.parseInline(token.header[j].tokens), {\n                header: true,\n                align: token.align[j]\n              });\n            }\n            header += this.renderer.tablerow(cell);\n            body = '';\n            l2 = token.rows.length;\n            for (j = 0; j < l2; j++) {\n              row = token.rows[j];\n              cell = '';\n              l3 = row.length;\n              for (k = 0; k < l3; k++) {\n                cell += this.renderer.tablecell(this.parseInline(row[k].tokens), {\n                  header: false,\n                  align: token.align[k]\n                });\n              }\n              body += this.renderer.tablerow(cell);\n            }\n            out += this.renderer.table(header, body);\n            continue;\n          }\n        case 'blockquote':\n          {\n            body = this.parse(token.tokens);\n            out += this.renderer.blockquote(body);\n            continue;\n          }\n        case 'list':\n          {\n            ordered = token.ordered;\n            start = token.start;\n            loose = token.loose;\n            l2 = token.items.length;\n            body = '';\n            for (j = 0; j < l2; j++) {\n              item = token.items[j];\n              checked = item.checked;\n              task = item.task;\n              itemBody = '';\n              if (item.task) {\n                checkbox = this.renderer.checkbox(checked);\n                if (loose) {\n                  if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                    item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                    if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                      item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                    }\n                  } else {\n                    item.tokens.unshift({\n                      type: 'text',\n                      text: checkbox\n                    });\n                  }\n                } else {\n                  itemBody += checkbox;\n                }\n              }\n              itemBody += this.parse(item.tokens, loose);\n              body += this.renderer.listitem(itemBody, task, checked);\n            }\n            out += this.renderer.list(body, ordered, start);\n            continue;\n          }\n        case 'html':\n          {\n            // TODO parse inline content if parameter markdown=1\n            out += this.renderer.html(token.text);\n            continue;\n          }\n        case 'paragraph':\n          {\n            out += this.renderer.paragraph(this.parseInline(token.tokens));\n            continue;\n          }\n        case 'text':\n          {\n            body = token.tokens ? this.parseInline(token.tokens) : token.text;\n            while (i + 1 < l && tokens[i + 1].type === 'text') {\n              token = tokens[++i];\n              body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n            }\n            out += top ? this.renderer.paragraph(body) : body;\n            continue;\n          }\n        default:\n          {\n            var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n            if (this.options.silent) {\n              console.error(errMsg);\n              return;\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */;\n  _proto.parseInline = function parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    var out = '',\n      i,\n      token,\n      ret;\n    var l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({\n          parser: this\n        }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n      switch (token.type) {\n        case 'escape':\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n        case 'html':\n          {\n            out += renderer.html(token.text);\n            break;\n          }\n        case 'link':\n          {\n            out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case 'image':\n          {\n            out += renderer.image(token.href, token.title, token.text);\n            break;\n          }\n        case 'strong':\n          {\n            out += renderer.strong(this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case 'em':\n          {\n            out += renderer.em(this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case 'codespan':\n          {\n            out += renderer.codespan(token.text);\n            break;\n          }\n        case 'br':\n          {\n            out += renderer.br();\n            break;\n          }\n        case 'del':\n          {\n            out += renderer.del(this.parseInline(token.tokens, renderer));\n            break;\n          }\n        case 'text':\n          {\n            out += renderer.text(token.text);\n            break;\n          }\n        default:\n          {\n            var errMsg = 'Token with \"' + token.type + '\" type was not found.';\n            if (this.options.silent) {\n              console.error(errMsg);\n              return;\n            } else {\n              throw new Error(errMsg);\n            }\n          }\n      }\n    }\n    return out;\n  };\n  return Parser;\n}();\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n  }\n  if (typeof opt === 'function') {\n    callback = opt;\n    opt = null;\n  }\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n  if (callback) {\n    var highlight = opt.highlight;\n    var tokens;\n    try {\n      tokens = Lexer.lex(src, opt);\n    } catch (e) {\n      return callback(e);\n    }\n    var done = function done(err) {\n      var out;\n      if (!err) {\n        try {\n          if (opt.walkTokens) {\n            marked.walkTokens(tokens, opt.walkTokens);\n          }\n          out = Parser.parse(tokens, opt);\n        } catch (e) {\n          err = e;\n        }\n      }\n      opt.highlight = highlight;\n      return err ? callback(err) : callback(null, out);\n    };\n    if (!highlight || highlight.length < 3) {\n      return done();\n    }\n    delete opt.highlight;\n    if (!tokens.length) return done();\n    var pending = 0;\n    marked.walkTokens(tokens, function (token) {\n      if (token.type === 'code') {\n        pending++;\n        setTimeout(function () {\n          highlight(token.text, token.lang, function (err, code) {\n            if (err) {\n              return done(err);\n            }\n            if (code != null && code !== token.text) {\n              token.text = code;\n              token.escaped = true;\n            }\n            pending--;\n            if (pending === 0) {\n              done();\n            }\n          });\n        }, 0);\n      }\n    });\n    if (pending === 0) {\n      done();\n    }\n    return;\n  }\n  function onError(e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n    }\n    throw e;\n  }\n  try {\n    var _tokens = Lexer.lex(src, opt);\n    if (opt.walkTokens) {\n      if (opt.async) {\n        return Promise.all(marked.walkTokens(_tokens, opt.walkTokens)).then(function () {\n          return Parser.parse(_tokens, opt);\n        })[\"catch\"](onError);\n      }\n      marked.walkTokens(_tokens, opt.walkTokens);\n    }\n    return Parser.parse(_tokens, opt);\n  } catch (e) {\n    onError(e);\n  }\n}\n\n/**\n * Options\n */\n\nmarked.options = marked.setOptions = function (opt) {\n  merge(marked.defaults, opt);\n  changeDefaults(marked.defaults);\n  return marked;\n};\nmarked.getDefaults = getDefaults;\nmarked.defaults = exports.defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function () {\n  var extensions = marked.defaults.extensions || {\n    renderers: {},\n    childTokens: {}\n  };\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  args.forEach(function (pack) {\n    // copy options to new object\n    var opts = merge({}, pack);\n\n    // set async to true if it was set to true before\n    opts.async = marked.defaults.async || opts.async;\n\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      pack.extensions.forEach(function (ext) {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) {\n          // Renderer extensions\n          var prevRenderer = extensions.renderers[ext.name];\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function () {\n              for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n                args[_key2] = arguments[_key2];\n              }\n              var ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) {\n          // Tokenizer Extensions\n          if (!ext.level || ext.level !== 'block' && ext.level !== 'inline') {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) {\n            // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) {\n          // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n      opts.extensions = extensions;\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      (function () {\n        var renderer = marked.defaults.renderer || new Renderer();\n        var _loop = function _loop(prop) {\n          var prevRenderer = renderer[prop];\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[prop] = function () {\n            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              args[_key3] = arguments[_key3];\n            }\n            var ret = pack.renderer[prop].apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret;\n          };\n        };\n        for (var prop in pack.renderer) {\n          _loop(prop);\n        }\n        opts.renderer = renderer;\n      })();\n    }\n    if (pack.tokenizer) {\n      (function () {\n        var tokenizer = marked.defaults.tokenizer || new Tokenizer();\n        var _loop2 = function _loop2(prop) {\n          var prevTokenizer = tokenizer[prop];\n          // Replace tokenizer with func to run extension, but fall back if false\n          tokenizer[prop] = function () {\n            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n              args[_key4] = arguments[_key4];\n            }\n            var ret = pack.tokenizer[prop].apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        };\n        for (var prop in pack.tokenizer) {\n          _loop2(prop);\n        }\n        opts.tokenizer = tokenizer;\n      })();\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      var _walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function (token) {\n        var values = [];\n        values.push(pack.walkTokens.call(this, token));\n        if (_walkTokens) {\n          values = values.concat(_walkTokens.call(this, token));\n        }\n        return values;\n      };\n    }\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function (tokens, callback) {\n  var values = [];\n  var _loop3 = function _loop3() {\n    var token = _step.value;\n    values = values.concat(callback.call(marked, token));\n    switch (token.type) {\n      case 'table':\n        {\n          for (var _iterator2 = _createForOfIteratorHelperLoose(token.header), _step2; !(_step2 = _iterator2()).done;) {\n            var cell = _step2.value;\n            values = values.concat(marked.walkTokens(cell.tokens, callback));\n          }\n          for (var _iterator3 = _createForOfIteratorHelperLoose(token.rows), _step3; !(_step3 = _iterator3()).done;) {\n            var row = _step3.value;\n            for (var _iterator4 = _createForOfIteratorHelperLoose(row), _step4; !(_step4 = _iterator4()).done;) {\n              var _cell = _step4.value;\n              values = values.concat(marked.walkTokens(_cell.tokens, callback));\n            }\n          }\n          break;\n        }\n      case 'list':\n        {\n          values = values.concat(marked.walkTokens(token.items, callback));\n          break;\n        }\n      default:\n        {\n          if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) {\n            // Walk any extensions\n            marked.defaults.extensions.childTokens[token.type].forEach(function (childTokens) {\n              values = values.concat(marked.walkTokens(token[childTokens], callback));\n            });\n          } else if (token.tokens) {\n            values = values.concat(marked.walkTokens(token.tokens, callback));\n          }\n        }\n    }\n  };\n  for (var _iterator = _createForOfIteratorHelperLoose(tokens), _step; !(_step = _iterator()).done;) {\n    _loop3();\n  }\n  return values;\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = function (src, opt) {\n  // throw error in case of non string input\n  if (typeof src === 'undefined' || src === null) {\n    throw new Error('marked.parseInline(): input parameter is undefined or null');\n  }\n  if (typeof src !== 'string') {\n    throw new Error('marked.parseInline(): input parameter is of type ' + Object.prototype.toString.call(src) + ', string expected');\n  }\n  opt = merge({}, marked.defaults, opt || {});\n  checkSanitizeDeprecation(opt);\n  try {\n    var tokens = Lexer.lexInline(src, opt);\n    if (opt.walkTokens) {\n      marked.walkTokens(tokens, opt.walkTokens);\n    }\n    return Parser.parseInline(tokens, opt);\n  } catch (e) {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n    if (opt.silent) {\n      return '<p>An error occurred:</p><pre>' + escape(e.message + '', true) + '</pre>';\n    }\n    throw e;\n  }\n};\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.parse = marked;\nvar options = marked.options;\nvar setOptions = marked.setOptions;\nvar use = marked.use;\nvar walkTokens = marked.walkTokens;\nvar parseInline = marked.parseInline;\nvar parse = marked;\nvar parser = Parser.parse;\nvar lexer = Lexer.lex;\n\nexports.Lexer = Lexer;\nexports.Parser = Parser;\nexports.Renderer = Renderer;\nexports.Slugger = Slugger;\nexports.TextRenderer = TextRenderer;\nexports.Tokenizer = Tokenizer;\nexports.getDefaults = getDefaults;\nexports.lexer = lexer;\nexports.marked = marked;\nexports.options = options;\nexports.parse = parse;\nexports.parseInline = parseInline;\nexports.parser = parser;\nexports.setOptions = setOptions;\nexports.use = use;\nexports.walkTokens = walkTokens;\n"],"names":[],"sourceRoot":""}