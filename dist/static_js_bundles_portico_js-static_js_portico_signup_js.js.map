{"version":3,"file":"static_js_bundles_portico_js-static_js_portico_signup_js.js","mappings":";;;;;;;;;AAAA;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;AChsources":["webpack://zulip/./node_modules/ga-gtag/lib/index.js","webpack://zulip/./static/styles/portico/portico_styles.css","webpack://zulip/./static/js/bundles/portico.js","webpack://zulip/./static/js/portico/google-analytics.js","webpack://zulip/./static/js/portico/header.js","webpack://zulip/./static/js/portico/signup.js"],"sourcesContent":["\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.install=exports.gtag=exports[\"default\"]=void 0;var install=function install(trackingId){var additionalConfigInfo=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var scriptId=\"ga-gtag\";if(document.getElementById(scriptId))return;var _document=document,head=_document.head;var script=document.createElement(\"script\");script.id=scriptId;script.type=\"text/javascript\";script.async=true;script.src=\"https://www.googletagmanager.com/gtag/js?id=\".concat(trackingId);head.insertBefore(script,head.firstChild);window.dataLayer=window.dataLayer||[];gtag(\"js\",new Date);gtag(\"config\",trackingId,additionalConfigInfo)};exports.install=install;var gtag=function gtag(){window.dataLayer.push(arguments)};exports.gtag=gtag;var _default=gtag;exports[\"default\"]=_default;","// extracted by mini-css-extract-plugin\nexport {};","import \"./common\";\nimport \"../portico/header\";\nimport \"../portico/google-analytics\";\nimport \"../../styles/portico/portico_styles.css\";\nimport \"tippy.js/dist/tippy.css\";\n","import {gtag, install} from \"ga-gtag\";\n\nimport {page_params} from \"../page_params\";\n\nexport let config;\n\nif (page_params.google_analytics_id !== undefined) {\n    install(page_params.google_analytics_id);\n    config = (info) => gtag(\"config\", page_params.google_analytics_id, info);\n} else {\n    config = () => {};\n}\n","import $ from \"jquery\";\n\n$(() => {\n    $(\".portico-header li.logout\").on(\"click\", () => {\n        $(\"#logout_form\").trigger(\"submit\");\n        return false;\n    });\n\n    $(\".dropdown\").on(\"click\", (e) => {\n        const $this = $(e.target);\n        const dropdown_is_shown = $this.closest(\".dropdown\").hasClass(\"show\");\n\n        if (!dropdown_is_shown) {\n            $this.closest(\".dropdown\").addClass(\"show\");\n        } else if (dropdown_is_shown) {\n            $this.closest(\".dropdown\").removeClass(\"show\");\n        }\n    });\n\n    $(\".nav-dropdown\").on(\"mouseover\", (e) => {\n        const $this = $(e.target);\n        // We switch to a vertical sidebar menu at width <= 1024px\n        const in_vertical_orientation = window.matchMedia(\"(max-width: 1024px)\").matches;\n        // We only support mouseover events if we are in a horizontal\n        // orientation (width > 1024px) and if the primary input mechanism\n        // can hover over elements.\n        const hover_supported = window.matchMedia(\"(hover: hover)\").matches;\n        const dropdown_is_shown = $this.closest(\"ul .dropdown\").hasClass(\"show\");\n\n        if (!dropdown_is_shown && !in_vertical_orientation && hover_supported) {\n            $this.closest(\"ul .dropdown\").addClass(\"show\");\n        }\n    });\n\n    $(\".nav-dropdown\").on(\"mouseout\", (e) => {\n        const $this = $(e.target);\n        // We switch to a vertical sidebar menu at width <= 1024px\n        const in_vertical_orientation = window.matchMedia(\"(max-width: 1024px)\").matches;\n        // We only support mouseout events if we are in a horizontal\n        // orientation (width > 1024px) and if the primary input mechanism\n        // can hover over elements.\n        const hover_supported = window.matchMedia(\"(hover: hover)\").matches;\n        const dropdown_is_shown = $this.closest(\"ul .dropdown\").hasClass(\"show\");\n\n        if (dropdown_is_shown && !in_vertical_orientation && hover_supported) {\n            $this.closest(\"ul .dropdown\").removeClass(\"show\");\n        }\n    });\n});\n","import $ from \"jquery\";\n\nimport * as common from \"../common\";\nimport {password_quality, password_warning} from \"../password_quality\";\n\n$(() => {\n    // NB: this file is included on multiple pages.  In each context,\n    // some of the jQuery selectors below will return empty lists.\n\n    const $password_field = $(\"#id_password, #id_new_password1\");\n    if ($password_field.length > 0) {\n        $.validator.addMethod(\n            \"password_strength\",\n            (value) => password_quality(value, undefined, $password_field),\n            () => password_warning($password_field.val(), $password_field),\n        );\n        // Reset the state of the password strength bar if the page\n        // was just reloaded due to a validation failure on the backend.\n        password_quality($password_field.val(), $(\"#pw_strength .bar\"), $password_field);\n\n        $password_field.on(\"input\", function () {\n            // Update the password strength bar even if we aren't validating\n            // the field yet.\n            password_quality($(this).val(), $(\"#pw_strength .bar\"), $(this));\n        });\n    }\n\n    common.setup_password_visibility_toggle(\n        \"#ldap-password\",\n        \"#ldap-password ~ .password_visibility_toggle\",\n    );\n    common.setup_password_visibility_toggle(\n        \"#id_password\",\n        \"#id_password ~ .password_visibility_toggle\",\n    );\n    common.setup_password_visibility_toggle(\n        \"#id_new_password1\",\n        \"#id_new_password1 ~ .password_visibility_toggle\",\n    );\n    common.setup_password_visibility_toggle(\n        \"#id_new_password2\",\n        \"#id_new_password2 ~ .password_visibility_toggle\",\n    );\n\n    $(\"#registration, #password_reset\").validate({\n        rules: {\n            password: \"password_strength\",\n            new_password1: \"password_strength\",\n        },\n        errorElement: \"p\",\n        errorPlacement($error, $element) {\n            // NB: this is called at most once, when the error element\n            // is created.\n            $element.next(\".help-inline.alert.alert-error\").remove();\n            if ($element.next().is('label[for=\"' + $element.attr(\"id\") + '\"]')) {\n                $error.insertAfter($element.next()).addClass(\"help-inline alert alert-error\");\n            } else if ($element.parent().is('label[for=\"' + $element.attr(\"id\") + '\"]')) {\n                // For checkboxes and radio-buttons\n                $error.insertAfter($element.parent()).addClass(\"help-inline alert alert-error\");\n            } else {\n                $error.insertAfter($element).addClass(\"help-inline alert alert-error\");\n            }\n        },\n    });\n\n    if ($(\"#registration\").length > 0) {\n        // Check if there is no input field with errors.\n        if ($(\".help-inline:not(:empty)\").length === 0) {\n            // Find the first input field present in the form that is\n            // not hidden and disabled and store it in a variable.\n            const $firstInputElement = $(\"input:not(:hidden, :disabled)\").first();\n            // Focus on the first input field in the form.\n            common.autofocus($firstInputElement);\n        } else {\n            // If input field with errors is present.\n            // Find the input field having errors and stores it in a variable.\n            const $inputElementWithError = $(\".help-inline:not(:empty)\")\n                .first()\n                .parent()\n                .find(\"input\");\n            // Focus on the input field having errors.\n            common.autofocus($inputElementWithError);\n        }\n\n        // reset error message displays\n        $(\"#id_team_subdomain_error_client\").css(\"display\", \"none\");\n        if ($(\".team_subdomain_error_server\").text() === \"\") {\n            $(\".team_subdomain_error_server\").css(\"display\", \"none\");\n        }\n\n        $(\"#timezone\").val(new Intl.DateTimeFormat().resolvedOptions().timeZone);\n    }\n\n    $(\"#registration\").on(\"submit\", () => {\n        if ($(\"#registration\").valid()) {\n            $(\".register-button .loader\").css(\"display\", \"inline-block\");\n            $(\".register-button\").prop(\"disabled\", true);\n            $(\".register-button span\").hide();\n        }\n    });\n\n    // Code in this block will be executed when the /accounts/send_confirm\n    // endpoint is visited i.e. accounts_send_confirm.html is rendered.\n    if ($(\"[data-page-id='accounts-send-confirm']\").length > 0) {\n        $(\"#resend_email_link\").on(\"click\", () => {\n            $(\".resend_confirm\").trigger(\"submit\");\n        });\n    }\n\n    // Code in this block will be executed when the user visits /register\n    // i.e. accounts_home.html is rendered.\n    if (\n        $(\"[data-page-id='accounts-home']\").length > 0 &&\n        window.location.hash.slice(0, 1) === \"#\"\n    ) {\n        document.email_form.action += window.location.hash;\n    }\n\n    // Code in this block will be executed when the user is at login page\n    // i.e. login.html is rendered.\n    if ($(\"[data-page-id='login-page']\").length > 0 && window.location.hash.slice(0, 1) === \"#\") {\n        // All next inputs have the same value when the page is\n        // rendered, so it's OK that this selector gets N elements.\n        const next_value = $(\"input[name='next']\").attr(\"value\");\n\n        // We need to add `window.location.hash` to the `next`\n        // property, since the server doesn't receive URL fragments\n        // (and thus could not have included them when rendering a\n        // redirect to this page).\n        $(\"input[name='next']\").attr(\"value\", next_value + window.location.hash);\n    }\n\n    $(\"#send_confirm\").validate({\n        errorElement: \"div\",\n        errorPlacement($error) {\n            $(\".email-frontend-error\").empty();\n            $(\"#send_confirm .alert.email-backend-error\").remove();\n            $error.appendTo(\".email-frontend-error\").addClass(\"text-error\");\n        },\n        success() {\n            $(\"#errors\").empty();\n        },\n    });\n\n    $(\".register-page #email, .login-page-container #id_username\").on(\n        \"focusout keydown\",\n        function (e) {\n            // check if it is the \"focusout\" or if it is a keydown, then check if\n            // the keycode was the one for \"Enter\".\n            if (e.type === \"focusout\" || e.key === \"Enter\") {\n                $(this).val($(this).val().trim());\n            }\n        },\n    );\n\n    const show_subdomain_section = function (bool) {\n        const action = bool ? \"hide\" : \"show\";\n        $(\"#subdomain_section\")[action]();\n    };\n\n    $(\"#realm_in_root_domain\").on(\"change\", function () {\n        show_subdomain_section($(this).is(\":checked\"));\n    });\n\n    $(\"#login_form\").validate({\n        errorClass: \"text-error\",\n        wrapper: \"div\",\n        submitHandler(form) {\n            $(\"#login_form\").find(\".loader\").css(\"display\", \"inline-block\");\n            $(\"#login_form\").find(\"button .text\").hide();\n\n            form.submit();\n        },\n        invalidHandler() {\n            // this removes all previous errors that were put on screen\n            // by the server.\n            $(\"#login_form .alert.alert-error\").remove();\n        },\n        showErrors(error_map) {\n            if (error_map.password) {\n                $(\"#login_form .alert.alert-error\").remove();\n            }\n            this.defaultShowErrors();\n        },\n    });\n\n    function check_subdomain_avilable(subdomain) {\n        const url = \"/json/realm/subdomain/\" + subdomain;\n        $.get(url, (response) => {\n            if (response.msg !== \"available\") {\n                $(\"#id_team_subdomain_error_client\").html(response.msg);\n                $(\"#id_team_subdomain_error_client\").show();\n            }\n        });\n    }\n\n    function update_full_name_section() {\n        if (\n            $(\"#source_realm_select\").length &&\n            $(\"#source_realm_select\").find(\":selected\").val() !== \"\"\n        ) {\n            $(\"#full_name_input_section\").hide();\n            $(\"#profile_info_section\").show();\n            const avatar_url = $(\"#source_realm_select\").find(\":selected\").attr(\"data-avatar\");\n            const full_name = $(\"#source_realm_select\").find(\":selected\").attr(\"data-full-name\");\n            $(\"#profile_full_name\").text(full_name);\n            $(\"#id_full_name\").val(full_name);\n            $(\"#profile_avatar\").attr(\"src\", avatar_url);\n        } else {\n            $(\"#full_name_input_section\").show();\n            $(\"#profile_info_section\").hide();\n        }\n    }\n\n    $(\"#source_realm_select\").on(\"change\", update_full_name_section);\n    update_full_name_section();\n\n    let timer;\n    $(\"#id_team_subdomain\").on(\"keydown\", () => {\n        $(\".team_subdomain_error_server\").text(\"\").css(\"display\", \"none\");\n        $(\"#id_team_subdomain_error_client\").css(\"display\", \"none\");\n        clearTimeout(timer);\n    });\n    $(\"#id_team_subdomain\").on(\"keyup\", () => {\n        clearTimeout(timer);\n        timer = setTimeout(check_subdomain_avilable, 250, $(\"#id_team_subdomain\").val());\n    });\n\n    // GitHub auth\n    $(\"body\").on(\"click\", \"#choose_email .choose-email-box\", function () {\n        this.parentNode.submit();\n    });\n});\n"],"names":[],"sourceRoot":""}